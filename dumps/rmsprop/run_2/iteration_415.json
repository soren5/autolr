[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8225714564323425, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.210008382797241, 1.6136250495910645, 1.1653141975402832, 0.9561210870742798, 0.9040442109107971, 0.8182566165924072, 0.7992396950721741, 0.757388710975647, 0.7396659255027771, 0.7023064494132996, 0.675598680973053, 0.6638476252555847, 0.6534579992294312, 0.6354286670684814, 0.6533070206642151, 0.6017791628837585, 0.5926832556724548, 0.6030634641647339, 0.5717303156852722, 0.5628756284713745, 0.5658530592918396, 0.5449603796005249, 0.537767231464386, 0.5290955305099487, 0.5279103517532349, 0.5208941698074341, 0.5038859248161316, 0.5101538300514221, 0.49942418932914734, 0.4900148808956146, 0.4803110957145691, 0.48044878244400024, 0.4767818748950958, 0.47012054920196533, 0.4683028757572174, 0.45030301809310913], "accuracy": [0.27222296595573425, 0.5028398036956787, 0.5849953889846802, 0.6635847091674805, 0.6741513609886169, 0.7024171352386475, 0.7087571024894714, 0.7251353859901428, 0.7268524765968323, 0.739400327205658, 0.7491744756698608, 0.7531369924545288, 0.7573636174201965, 0.7635715007781982, 0.7578919529914856, 0.7745344042778015, 0.7804781198501587, 0.7724210619926453, 0.785101056098938, 0.791969358921051, 0.7845727205276489, 0.7984414100646973, 0.7994980812072754, 0.8063663840293884, 0.8050455451011658, 0.8101968169212341, 0.8173292875289917, 0.8124422430992126, 0.81548011302948, 0.8204993009567261, 0.8261788487434387, 0.8222163319587708, 0.8201030492782593, 0.8278959393501282, 0.8323867321014404, 0.837537944316864], "val_loss": [1.918547511100769, 1.0810590982437134, 0.8821336030960083, 0.7757185697555542, 0.7401158809661865, 0.7012624740600586, 0.6682516932487488, 0.6298489570617676, 0.6134443879127502, 0.5742961764335632, 0.5809974074363708, 0.5823540687561035, 0.6190341114997864, 0.5515349507331848, 0.5377086997032166, 0.5195490121841431, 0.5245287418365479, 0.5263534784317017, 0.5344588756561279, 0.49952051043510437, 0.4950695335865021, 0.4912183880805969, 0.4912717342376709, 0.4996277689933777, 0.5107434988021851, 0.49740275740623474, 0.46887439489364624, 0.468180388212204, 0.4557109475135803, 0.47025007009506226, 0.44214388728141785, 0.45584341883659363, 0.4457317590713501, 0.45528051257133484, 0.4418407678604126, 0.4352324903011322], "val_accuracy": [0.46000000834465027, 0.6676666736602783, 0.6973333358764648, 0.7039999961853027, 0.7226666808128357, 0.7486666440963745, 0.7643333077430725, 0.7753333449363708, 0.7683333158493042, 0.7850000262260437, 0.7839999794960022, 0.7763333320617676, 0.7490000128746033, 0.781000018119812, 0.8063333630561829, 0.7953333258628845, 0.7916666865348816, 0.8046666383743286, 0.8036666512489319, 0.8159999847412109, 0.8209999799728394, 0.8230000138282776, 0.8180000185966492, 0.8003333210945129, 0.8116666674613953, 0.8109999895095825, 0.8336666822433472, 0.824999988079071, 0.8326666951179504, 0.824999988079071, 0.8433333039283752, 0.8336666822433472, 0.8356666564941406, 0.8399999737739563, 0.8386666774749756, 0.8370000123977661]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 32, 39], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0], [0, 2, 0, 6, 7, 8, 4], [4, 0, 3, 1, 0], [16, 1], [1, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 4], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 5, 3, 2, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 2, 3, 2, 4, 5, 0], [0, 2, 1, 0, 2], [0, 47, 39], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2, 0], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 2], [59, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 2, 13, 8, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.pow(tf.math.square(tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.divide_no_nan(beta, tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(tf.math.negative(grad), alpha))))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), grad)), alpha)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1022322028875351, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 5, 5], [0, 2, 3, 0, 2], [0, 39, 39], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 2, 0, 2, 9, 2, 6, 8], [0, 6, 1, 4, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.09314285963773727, "mapping_values": [1, 2, 1, 1, 1, 2, 1, 1, 0, 12, 8, 4, 2, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(grad), alpha), grad))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.309929847717285, 2.3098714351654053, 2.309396505355835, 2.309995412826538, 2.309253454208374, 2.3101797103881836], "accuracy": [0.0940430611371994, 0.09377889335155487, 0.09496764093637466, 0.09470347315073013, 0.09919429570436478, 0.09087307006120682], "val_loss": [2.308544635772705, 2.308544635772705, 2.308544635772705, 2.308544635772705, 2.308544635772705, 2.308544635772705], "val_accuracy": [0.08833333104848862, 0.08833333104848862, 0.08833333104848862, 0.08833333104848862, 0.08833333104848862, 0.08833333104848862]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 5, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 5, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 2, 1, 2, 5, 2, 1, 8, 8, 6], [0, 5, 1, 6, 0, 5, 6], [0, 22], [0, 1], [0], [2], [0]], "fitness": -0.08885714411735535, "mapping_values": [1, 1, 0, 1, 1, 10, 6, 4, 1, 17, 10, 7, 2, 2, 1, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(grad, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.310793161392212, 2.3088912963867188, 2.3096911907196045, 2.3101906776428223, 2.310277223587036, 2.311098575592041], "accuracy": [0.09179764986038208, 0.0944393053650856, 0.09008057415485382, 0.09034473448991776, 0.0952318087220192, 0.08770307898521423], "val_loss": [2.309263229370117, 2.309263229370117, 2.309263229370117, 2.309263229370117, 2.309263229370117, 2.309263229370117], "val_accuracy": [0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816]}}]