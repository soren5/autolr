[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8254285454750061, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.209804058074951, 1.5990056991577148, 1.1619092226028442, 0.9825330376625061, 0.8904961347579956, 0.8235871195793152, 0.8027870059013367, 0.78327876329422, 0.7113880515098572, 0.7306536436080933, 0.6837794780731201, 0.6782376170158386, 0.6551262140274048, 0.6522433757781982, 0.6401451230049133, 0.6253910064697266, 0.6060264706611633, 0.6124204993247986, 0.5891411304473877, 0.5927216410636902, 0.5665299892425537, 0.5647677183151245, 0.5436131954193115, 0.535336971282959, 0.5559670925140381, 0.530960738658905, 0.5266870856285095, 0.5243828892707825, 0.5151153206825256, 0.5109115242958069, 0.5062552094459534, 0.5019172430038452, 0.49409809708595276, 0.47841283679008484, 0.4757975935935974, 0.47372809052467346, 0.47335419058799744, 0.468735009431839, 0.4639520049095154, 0.45555320382118225, 0.4613216519355774, 0.4490007162094116, 0.4453856348991394, 0.4366582930088043, 0.43889275193214417, 0.4341972768306732, 0.4225860834121704, 0.4306773245334625, 0.4166361391544342, 0.42049285769462585, 0.4129219651222229, 0.4102267324924469, 0.4058976471424103, 0.40286871790885925, 0.3955002427101135, 0.41000714898109436, 0.39859190583229065, 0.39511439204216003, 0.4012644588947296], "accuracy": [0.25901466608047485, 0.5119535326957703, 0.5881653428077698, 0.6518293619155884, 0.6794346570968628, 0.7030775547027588, 0.7036058902740479, 0.7143045663833618, 0.7396644949913025, 0.7357020378112793, 0.7478536367416382, 0.7461365461349487, 0.7574957013130188, 0.7565711140632629, 0.7589486241340637, 0.7652885913848877, 0.7754589915275574, 0.7728173136711121, 0.7843085527420044, 0.78113853931427, 0.7926297783851624, 0.7932901978492737, 0.7971205711364746, 0.802271842956543, 0.7942147850990295, 0.7996301651000977, 0.8064984679222107, 0.8140271902084351, 0.8099326491355896, 0.8117818236351013, 0.817461371421814, 0.8175934553146362, 0.8141592741012573, 0.8271034359931946, 0.8285563588142395, 0.8256505131721497, 0.8244617581367493, 0.8318583965301514, 0.8290846943855286, 0.8308017253875732, 0.8294808864593506, 0.8397833704948425, 0.8339717388153076, 0.8449346423149109, 0.8374059200286865, 0.8417646288871765, 0.8500858545303345, 0.8433496356010437, 0.8454629778862, 0.8481045961380005, 0.8510104417800903, 0.850350022315979, 0.8543124794960022, 0.8548408150672913, 0.8537842035293579, 0.845859169960022, 0.8548408150672913, 0.8584070801734924, 0.856689989566803], "val_loss": [1.9154409170150757, 1.057538628578186, 0.9383572340011597, 0.78530353307724, 0.7299544811248779, 0.6760088205337524, 0.6413310170173645, 0.6203243732452393, 0.6270779371261597, 0.6079874634742737, 0.5908807516098022, 0.564878523349762, 0.5542946457862854, 0.5483680963516235, 0.5403907895088196, 0.533855140209198, 0.5200395584106445, 0.5026133060455322, 0.5116971135139465, 0.5195446014404297, 0.4966488778591156, 0.48728030920028687, 0.47945111989974976, 0.47172093391418457, 0.4682254195213318, 0.4991736114025116, 0.4688861072063446, 0.462880402803421, 0.4573918581008911, 0.4536411166191101, 0.44326382875442505, 0.4432685077190399, 0.4376928210258484, 0.4377257227897644, 0.43833523988723755, 0.43580925464630127, 0.4247465133666992, 0.43601423501968384, 0.4125690162181854, 0.42733851075172424, 0.4090457260608673, 0.4162093997001648, 0.4090780019760132, 0.42001935839653015, 0.39814189076423645, 0.4111429750919342, 0.3952544629573822, 0.3973354995250702, 0.3990004062652588, 0.3882811665534973, 0.3829982876777649, 0.3873809278011322, 0.3857300877571106, 0.38261303305625916, 0.381262868642807, 0.378130704164505, 0.38627493381500244, 0.3776942193508148, 0.37831953167915344], "val_accuracy": [0.5849999785423279, 0.6706666946411133, 0.6546666622161865, 0.6980000138282776, 0.7263333201408386, 0.734666645526886, 0.7606666684150696, 0.7716666460037231, 0.7543333172798157, 0.7706666588783264, 0.781000018119812, 0.7983333468437195, 0.7833333611488342, 0.7866666913032532, 0.7916666865348816, 0.7979999780654907, 0.7986666560173035, 0.8143333196640015, 0.8059999942779541, 0.8013333082199097, 0.8166666626930237, 0.812666654586792, 0.8196666836738586, 0.8196666836738586, 0.8309999704360962, 0.8069999814033508, 0.8206666707992554, 0.8323333263397217, 0.8309999704360962, 0.8389999866485596, 0.8393333554267883, 0.8376666903495789, 0.840666651725769, 0.8343333601951599, 0.8339999914169312, 0.8429999947547913, 0.8443333506584167, 0.8383333086967468, 0.8523333072662354, 0.8443333506584167, 0.8579999804496765, 0.8496666550636292, 0.8513333201408386, 0.8460000157356262, 0.859666645526886, 0.8553333282470703, 0.8613333106040955, 0.8610000014305115, 0.8586666584014893, 0.8606666922569275, 0.8643333315849304, 0.8640000224113464, 0.8640000224113464, 0.8663333058357239, 0.862333357334137, 0.8643333315849304, 0.8616666793823242, 0.8640000224113464, 0.8603333234786987]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 7, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [9, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 0, 0, 6, 2, 1], [0, 6, 0, 6, 0], [64, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 1, 1, 0, 1, 8, 5, 3, 2, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(tf.math.divide_no_nan(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), grad))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [91.5164794921875, 10778.6689453125, 178683.765625, 1272037.875, 5664854.0, 18242342.0], "accuracy": [0.09774138033390045, 0.10011887550354004, 0.10342095047235489, 0.10302469879388809, 0.09813763201236725, 0.10130762308835983], "val_loss": [802.8111572265625, 39410.9609375, 418811.0, 2276434.5, 8515906.0, 25102346.0], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 2, 3, 5, 6], [0, 2, 1, 0, 2, 0], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 8, 2, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 2, 8, 2, 1], [0, 6, 1, 4, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 7, 6, 3, 8, 5, 3, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.square(alpha)), tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.sqrt(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.negative(tf.math.add(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, alpha))), tf.math.subtract(grad, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 9, 3, 2, 3, 5], [0, 0, 1, 0, 2], [27, 39, 39], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 2, 4, 6, 3, 3, 2, 7, 8, 9, 1, 0], [5, 0, 3, 1, 0, 3, 2, 2], [16, 1, 28], [1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 1, 0], [82, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 0, 1, 20, 12, 8, 3, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(grad, alpha)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad), tf.math.add(tf.math.sqrt(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.subtract(beta, tf.math.negative(beta))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0], [6, 2, 3, 2, 3, 5], [0, 2, 1, 1, 2], [0, 39, 39], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 9, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 2, 0, 2, 0, 2, 1], [0, 6, 1, 6, 0], [0, 22], [0, 0, 0, 0, 1, 1], [0, 4, 3, 9], [2, 5], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 2, 1, 1, 0, 1, 0, 1, 1, 6, 4, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), beta), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}]