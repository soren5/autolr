[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8248571157455444, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.209357261657715, 1.617347240447998, 1.1358500719070435, 0.9971374869346619, 0.8849309682846069, 0.8196069002151489, 0.7664859890937805, 0.751291811466217, 0.7086402177810669, 0.7063549757003784, 0.691035270690918, 0.6510472297668457, 0.6286473274230957, 0.6421640515327454, 0.6162768602371216, 0.5964688062667847, 0.5960769653320312, 0.5931949019432068, 0.5790526270866394, 0.5608873963356018, 0.5485339164733887, 0.5425536632537842, 0.5335761308670044, 0.5238287448883057, 0.5174999237060547, 0.5059927105903625, 0.5107738375663757, 0.49577146768569946, 0.48877644538879395, 0.4788438379764557, 0.4868588447570801, 0.4725167155265808, 0.4737968146800995, 0.46352726221084595, 0.45997360348701477, 0.4671710133552551, 0.4583337903022766, 0.43759655952453613, 0.43867358565330505, 0.44418230652809143, 0.43108537793159485, 0.4205583930015564, 0.4300493001937866, 0.4222371578216553, 0.4091474413871765, 0.40381431579589844, 0.41606059670448303, 0.40831485390663147, 0.3893803656101227], "accuracy": [0.2705058753490448, 0.5019152164459229, 0.6081098914146423, 0.6390172839164734, 0.6844538450241089, 0.700700044631958, 0.7170783281326294, 0.719852089881897, 0.7367587089538574, 0.7329282760620117, 0.7432307600975037, 0.7619865536689758, 0.7687227725982666, 0.7592127919197083, 0.7696473598480225, 0.7757231593132019, 0.7795535326004028, 0.7808743715286255, 0.7862898111343384, 0.7902522683143616, 0.7932901978492737, 0.7968564033508301, 0.8054417967796326, 0.8075551390647888, 0.8086118102073669, 0.8133667707443237, 0.8148196935653687, 0.8206313848495483, 0.8211596608161926, 0.8264430165290833, 0.8203672170639038, 0.8232730031013489, 0.8257825970649719, 0.8327829837799072, 0.8310658931732178, 0.8253863453865051, 0.8309338092803955, 0.8411042094230652, 0.8417646288871765, 0.8396512866020203, 0.8372738361358643, 0.8471800088882446, 0.8442742228507996, 0.8475762605667114, 0.8543124794960022, 0.8536521196365356, 0.8477083444595337, 0.8518029451370239, 0.8549728989601135], "val_loss": [1.922089695930481, 1.0792691707611084, 0.9381702542304993, 0.7881986498832703, 0.7643383145332336, 0.708759605884552, 0.6768620014190674, 0.6246625781059265, 0.6259732246398926, 0.6527372002601624, 0.6189166307449341, 0.5720003843307495, 0.5941255688667297, 0.591008186340332, 0.6018247008323669, 0.5589156746864319, 0.5398901104927063, 0.5329033732414246, 0.5530238151550293, 0.5176623463630676, 0.5243058800697327, 0.52105712890625, 0.5056771636009216, 0.5094442367553711, 0.48636043071746826, 0.488249272108078, 0.47352534532546997, 0.48661860823631287, 0.4880078434944153, 0.4738514721393585, 0.4852214455604553, 0.4652508497238159, 0.4577868580818176, 0.4556880593299866, 0.47796720266342163, 0.4521418511867523, 0.4446944296360016, 0.4550493657588959, 0.4581218957901001, 0.442832350730896, 0.4430539608001709, 0.4479953944683075, 0.43942269682884216, 0.42687809467315674, 0.44125714898109436, 0.44378820061683655, 0.4318138062953949, 0.4263434112071991, 0.42607274651527405], "val_accuracy": [0.503000020980835, 0.6543333530426025, 0.6663333177566528, 0.7049999833106995, 0.7146666646003723, 0.7273333072662354, 0.7356666922569275, 0.7523333430290222, 0.7583333253860474, 0.7413333058357239, 0.7643333077430725, 0.7699999809265137, 0.7733333110809326, 0.7526666522026062, 0.7476666569709778, 0.7706666588783264, 0.7919999957084656, 0.7896666526794434, 0.7910000085830688, 0.8013333082199097, 0.7973333597183228, 0.8013333082199097, 0.8086666464805603, 0.8040000200271606, 0.8113333582878113, 0.8143333196640015, 0.8173333406448364, 0.8116666674613953, 0.8100000023841858, 0.8146666884422302, 0.8113333582878113, 0.8209999799728394, 0.8256666660308838, 0.8273333311080933, 0.8209999799728394, 0.82833331823349, 0.8356666564941406, 0.8296666741371155, 0.8320000171661377, 0.8366666436195374, 0.8349999785423279, 0.8343333601951599, 0.8403333425521851, 0.843999981880188, 0.8376666903495789, 0.8303333520889282, 0.8370000123977661, 0.843666672706604, 0.8399999737739563]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 1, 0, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 2, 0, 2, 5, 2, 1], [0, 6, 1, 5, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 12, 7, 5, 2, 11, 6, 5, 2, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.add(grad, tf.math.square(alpha))), tf.math.add(grad, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 2, 3, 2, 1, 5, 5, 3, 5], [0, 2, 1, 0, 2, 1], [0, 39, 39], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [8, 2, 0, 6, 3, 7, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 4, 2, 5, 3, 1, 2, 0, 8, 1, 7, 5], [0, 6, 1, 6, 0, 0, 3, 1, 5], [0, 22, 61], [0, 1], [0], [2], [0]], "fitness": -0.09685714542865753, "mapping_values": [1, 15, 9, 6, 2, 2, 1, 1, 0, 22, 13, 9, 3, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.subtract(tf.math.square(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.square(grad), alpha)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.add(tf.math.square(tf.math.multiply(tf.math.subtract(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad), alpha), grad)), tf.math.sqrt(tf.math.subtract(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.square(sigma))))), alpha), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3114190101623535, 2.309483289718628, 2.3100461959838867, 2.310533046722412, 2.310908079147339, 2.3096165657043457], "accuracy": [0.08875974267721176, 0.09219389408826828, 0.09311848133802414, 0.09391097724437714, 0.09074098616838455, 0.09549596905708313], "val_loss": [2.307624578475952, 2.307624578475952, 2.307624578475952, 2.307624578475952, 2.307624578475952, 2.307624578475952], "val_accuracy": [0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 0], [0, 2, 1, 1, 2], [0, 39, 39], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [9, 2, 0, 2, 9, 2, 1], [6, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.09285714477300644, "mapping_values": [1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3094730377197266, 2.310067892074585, 2.3100881576538086, 2.31059193611145, 2.3102211952209473, 2.3098304271698], "accuracy": [0.09417514503002167, 0.09060890227556229, 0.09708096832036972, 0.08902391046285629, 0.09338264167308807, 0.09298639744520187], "val_loss": [2.3080320358276367, 2.3080320358276367, 2.3080320358276367, 2.3080320358276367, 2.3080320358276367, 2.3080320358276367], "val_accuracy": [0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 2, 3, 0, 3, 5, 1, 1, 6, 3, 3, 5], [2, 2, 1, 2, 1, 3, 0, 2, 3], [0, 39, 39], [1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 0, 9, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 2, 0, 2, 5, 2, 1, 0, 7, 7, 2, 8, 7, 4, 8, 7, 6, 2, 2, 9, 7, 4, 9, 3, 3, 1, 0], [0, 6, 1, 6, 1, 5, 4, 2, 2, 5, 3, 2, 5, 0, 4, 7, 1], [54, 22, 45, 45], [1], [0], [2], [0]], "fitness": -0.09114285558462143, "mapping_values": [1, 21, 12, 9, 1, 1, 0, 1, 0, 44, 27, 17, 4, 1, 0, 1, 0], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), tf.math.multiply(grad, tf.math.square(alpha))), tf.math.subtract(grad, tf.math.subtract(tf.math.divide_no_nan(tf.math.multiply(alpha, tf.math.multiply(tf.math.square(grad), tf.constant(0.0, shape=shape, dtype=tf.float32))), grad), grad)))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.math.negative(tf.math.add(tf.math.add(tf.math.add(tf.math.sqrt(tf.math.add(tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(grad, grad))), beta), tf.math.add(beta, tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), grad)))), tf.math.add(sigma, tf.math.pow(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), beta))), tf.math.multiply(tf.math.multiply(grad, tf.math.subtract(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), grad)), grad)), tf.math.negative(alpha))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3107330799102783, 2.309567451477051, 2.309621572494507, 2.3091325759887695, 2.3100998401641846, 2.3093373775482178], "accuracy": [0.09034473448991776, 0.09734513610601425, 0.09642054885625839, 0.09642054885625839, 0.08849557489156723, 0.09126931428909302], "val_loss": [2.3084003925323486, 2.3084003925323486, 2.3084003925323486, 2.3084003925323486, 2.3084003925323486, 2.3084003925323486], "val_accuracy": [0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654]}}]