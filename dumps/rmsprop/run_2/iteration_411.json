[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8271428346633911, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2117326259613037, 1.6135704517364502, 1.153454303741455, 0.960996150970459, 0.9005503058433533, 0.8239278197288513, 0.786563515663147, 0.7583891749382019, 0.7275269627571106, 0.7126506567001343, 0.6953657865524292, 0.647037923336029, 0.6364669799804688, 0.6413992643356323, 0.6299363970756531, 0.5974124073982239, 0.5966100096702576, 0.5872548222541809, 0.583544909954071, 0.5705989599227905, 0.5664147734642029, 0.5697780847549438, 0.5349531769752502, 0.5278244018554688, 0.5151299834251404, 0.5225950479507446, 0.5079019665718079, 0.5134177207946777, 0.494884729385376, 0.4937897026538849, 0.4867366552352905], "accuracy": [0.270109623670578, 0.4991414546966553, 0.6058644652366638, 0.6590939164161682, 0.6798309087753296, 0.7069079279899597, 0.7157574892044067, 0.7210407853126526, 0.7250033020973206, 0.7342491149902344, 0.7427024245262146, 0.7606657147407532, 0.7683265209197998, 0.7611940503120422, 0.7670056819915771, 0.7784969210624695, 0.7815347909927368, 0.7812706232070923, 0.7832518815994263, 0.7878747582435608, 0.7924976944923401, 0.7903843522071838, 0.8029322624206543, 0.8123101592063904, 0.8120459914207458, 0.8025360107421875, 0.8096684813499451, 0.8058380484580994, 0.8202351331710815, 0.8156121969223022, 0.8190463781356812], "val_loss": [1.926849126815796, 1.1215225458145142, 0.9044615030288696, 0.8019804954528809, 0.7631768584251404, 0.7135328054428101, 0.6835224628448486, 0.6407904028892517, 0.6438452005386353, 0.6163009405136108, 0.6000047326087952, 0.5810418128967285, 0.5821060538291931, 0.5777100324630737, 0.5384812951087952, 0.5592414140701294, 0.5547549724578857, 0.5518838167190552, 0.5458621978759766, 0.53696608543396, 0.5021201372146606, 0.4919584095478058, 0.511883556842804, 0.4789414405822754, 0.4930732548236847, 0.4597110152244568, 0.48194047808647156, 0.4570443630218506, 0.4579770565032959, 0.4544287621974945, 0.46615058183670044], "val_accuracy": [0.5393333435058594, 0.6326666474342346, 0.6836666464805603, 0.703000009059906, 0.6973333358764648, 0.7273333072662354, 0.734000027179718, 0.7576666474342346, 0.7553333044052124, 0.7573333382606506, 0.7633333206176758, 0.7860000133514404, 0.7726666927337646, 0.7793333530426025, 0.7960000038146973, 0.7916666865348816, 0.7803333401679993, 0.7886666655540466, 0.7889999747276306, 0.8013333082199097, 0.8109999895095825, 0.8146666884422302, 0.8059999942779541, 0.8216666579246521, 0.8063333630561829, 0.8303333520889282, 0.8163333535194397, 0.8243333101272583, 0.8276666402816772, 0.8296666741371155, 0.8256666660308838]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 3, 2, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 0, 6, 2, 8, 2], [2, 1, 3, 1, 0], [92, 1], [1, 0, 0, 0, 0, 1, 0, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 12, 7, 5, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(alpha), tf.math.add(grad, alpha)), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [5844.43505859375, 2.3559465408325195, 2.308098554611206, 2.303990364074707, 2.3031060695648193, 2.3030202388763428], "accuracy": [0.17804782092571259, 0.09893012791872025, 0.09879804402589798, 0.09800554811954498, 0.09509972482919693, 0.09615638852119446], "val_loss": [2.477536678314209, 2.3113932609558105, 2.3044381141662598, 2.3028547763824463, 2.3025729656219482, 2.3025710582733154], "val_accuracy": [0.10266666859388351, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.10266666859388351]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 2, 1, 1, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 8, 6, 3, 8, 2], [2, 0, 3, 4, 5], [24, 1], [1, 1, 0, 1, 1, 1, 0, 1], [0, 5, 0, 2, 5], [4, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 12, 7, 5, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.sqrt(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(grad, grad))))), lambda shape,  alpha, beta, sigma, grad: grad, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [9, 2, 3, 2, 2, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [1, 0, 2, 1, 0], [16, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 2, 0, 2, 5, 2, 1, 0, 5], [7, 6, 1, 6, 0], [0, 22], [1], [0], [3], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 5, 3, 2, 1, 14, 9, 5, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(alpha), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(grad, tf.math.negative(tf.math.add(tf.math.square(tf.math.add(grad, tf.math.subtract(alpha, grad))), tf.math.negative(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.8682587146759033, 23.519500732421875, 2.589078187942505, 2.4950528144836426, 2.4718706607818604, 2.5637664794921875, 2.513012647628784, 2.4772393703460693, 2.5569005012512207, 2.5198655128479004], "accuracy": [0.18914277851581573, 0.10553427785634995, 0.10236428678035736, 0.10328886657953262, 0.09800554811954498, 0.09800554811954498, 0.09879804402589798, 0.09853387624025345, 0.09734513610601425, 0.09813763201236725], "val_loss": [5.185602188110352, 2.638838291168213, 2.359708547592163, 2.435004949569702, 2.629293203353882, 2.407074213027954, 2.440422296524048, 2.620689868927002, 2.4153053760528564, 2.404515027999878], "val_accuracy": [0.0989999994635582, 0.09333333373069763, 0.1003333330154419, 0.0989999994635582, 0.10566666722297668, 0.10133333504199982, 0.09333333373069763, 0.1003333330154419, 0.10133333504199982, 0.09333333373069763]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [4, 2, 3, 2, 3, 5], [0, 2, 1, 1, 1], [0, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 0, 3, 2, 8, 2, 3, 8], [2, 0, 3, 1, 0, 2], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [1, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 3, 4, 1, 15, 9, 6, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, alpha)), alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.multiply(tf.math.add(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.multiply(grad, alpha), tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, alpha)), grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0948355570435524, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}]