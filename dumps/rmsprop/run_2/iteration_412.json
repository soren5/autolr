[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8171428442001343, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2121429443359375, 1.606641411781311, 1.1315226554870605, 0.9771064519882202, 0.8921290040016174, 0.8210038542747498, 0.7715471982955933, 0.7541710138320923, 0.7276672124862671, 0.69815593957901, 0.665083110332489, 0.6643048524856567, 0.651353120803833, 0.6471363306045532, 0.6279169917106628, 0.6024176478385925, 0.589879035949707, 0.6090211272239685, 0.5793291330337524, 0.5555046200752258, 0.5578954815864563, 0.5489102602005005, 0.5366063117980957, 0.5395249724388123, 0.5304629802703857, 0.5173105597496033, 0.5116745233535767, 0.5057918429374695], "accuracy": [0.2615242302417755, 0.5032360553741455, 0.5982036590576172, 0.656980574131012, 0.6753401160240173, 0.7030775547027588, 0.7154933214187622, 0.7127195596694946, 0.7294940948486328, 0.7430986762046814, 0.752740740776062, 0.7503632307052612, 0.7512878179550171, 0.7567031979560852, 0.765949010848999, 0.774270236492157, 0.7815347909927368, 0.7758552432060242, 0.787082314491272, 0.7950072884559631, 0.7923656105995178, 0.7996301651000977, 0.8000264167785645, 0.8009510040283203, 0.8054417967796326, 0.8101968169212341, 0.813498854637146, 0.813498854637146], "val_loss": [1.927827000617981, 1.1311125755310059, 0.9685582518577576, 0.8171360492706299, 0.7749228477478027, 0.7019048929214478, 0.6941006779670715, 0.6582595109939575, 0.617692232131958, 0.6333971619606018, 0.6233837604522705, 0.6083670854568481, 0.6139838099479675, 0.5663848519325256, 0.5623561143875122, 0.5364185571670532, 0.5792551636695862, 0.5449005961418152, 0.5268333554267883, 0.5208022594451904, 0.5069451928138733, 0.5185366868972778, 0.4934461712837219, 0.5586233735084534, 0.49384716153144836, 0.4798879325389862, 0.4827205538749695, 0.4990766644477844], "val_accuracy": [0.5799999833106995, 0.6439999938011169, 0.6330000162124634, 0.7056666612625122, 0.7160000205039978, 0.7379999756813049, 0.7459999918937683, 0.7516666650772095, 0.7596666812896729, 0.7646666765213013, 0.762666642665863, 0.7493333220481873, 0.7543333172798157, 0.784333348274231, 0.7799999713897705, 0.7973333597183228, 0.7710000276565552, 0.7903333306312561, 0.7950000166893005, 0.8029999732971191, 0.8103333115577698, 0.8003333210945129, 0.8203333616256714, 0.793666660785675, 0.8190000057220459, 0.8183333277702332, 0.8199999928474426, 0.8043333292007446]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1], [2, 2, 3, 7, 3, 5, 6, 6, 6, 4, 2, 7, 6, 8], [0, 0, 1, 0, 1, 2, 2, 2, 1, 0, 1, 3, 1], [0, 39, 39, 94], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 0, 6, 3, 8, 2], [2, 0, 3, 0, 0], [32, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 2, 4, 2, 5, 2, 1, 1, 3, 9, 6, 1, 9, 8], [0, 6, 1, 6, 0, 6, 6, 5], [0, 22, 78, 50], [1], [0], [2], [0]], "fitness": -0.13514286279678345, "mapping_values": [1, 27, 14, 13, 4, 8, 4, 4, 2, 22, 14, 8, 4, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.square(alpha)), tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.pow(alpha, tf.math.add(grad, tf.math.add(grad, tf.math.divide_no_nan(grad, alpha)))), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), alpha))), grad), tf.math.sqrt(alpha)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.negative(beta), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(tf.math.subtract(tf.math.multiply(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), grad), tf.math.divide_no_nan(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), grad))))), tf.math.sqrt(grad)), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1358353792.0, 58542690140160.0, 1.53112148678319e+20, 1.3816406667641386e+24, 7.995896142576587e+22, 1.8617902476827842e+24, 5.1021963803286506e+26], "accuracy": [0.07845727354288101, 0.08189142495393753, 0.09800554811954498, 0.08532558381557465, 0.07290978729724884, 0.07436270266771317, 0.07951393723487854], "val_loss": [10297823232.0, 111592008056832.0, 1.5915024151084997e+22, 5.779787896370205e+23, 6.847066068159213e+23, 2.0464924866489004e+26, 6.223498173344799e+27], "val_accuracy": [0.06133333221077919, 0.14166666567325592, 0.08633333444595337, 0.07833333313465118, 0.07366666942834854, 0.08533333241939545, 0.08699999749660492]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1], [3, 2, 3, 1, 3, 5], [2, 2, 2, 0, 2], [0, 39, 39], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 2, 4, 2, 5], [0, 6, 1, 6, 0], [0, 22], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 6, 1, 5, 1, 9, 9, 5], [2, 0], [0, 96, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 2, 3, 0, 5, 3, 2, 1, 9, 5, 4, 1, 10, 8, 2, 3], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(grad, grad), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.square(alpha))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(beta, tf.math.subtract(tf.math.square(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [107.16130828857422, 1598.088134765625, 7075.56982421875, 19266.84375, 41332.078125, 75807.1875], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09430722147226334, 0.10117553919553757, 0.10157178342342377, 0.0956280529499054], "val_loss": [413.3509216308594, 2952.12060546875, 9728.423828125, 22836.228515625, 44371.01953125, 76429.125], "val_accuracy": [0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 2, 3, 5], [0, 3, 1, 0, 3], [0, 39, 39], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 2, 0, 2, 3, 8, 2, 3, 6, 0], [2, 0, 3, 1, 0, 4, 2], [16, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 2, 0, 2, 1, 2, 1, 6, 5, 1, 2, 0, 6, 9, 6, 2], [0, 6, 1, 6, 0, 0, 3, 1, 0, 0, 3], [0, 22, 98, 57, 39, 86], [1], [0], [3], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 17, 10, 7, 2, 27, 16, 11, 6, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.square(alpha))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.multiply(tf.math.sqrt(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.multiply(grad, alpha), tf.math.divide_no_nan(tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad)))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(alpha, tf.math.add(grad, tf.math.subtract(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.subtract(sigma, tf.math.add(tf.math.negative(alpha), tf.math.divide_no_nan(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), sigma))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [530511.4375, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09509972482919693, 0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1283226.0, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09566666930913925, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 3, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5, 2, 1, 5, 5], [0, 6, 1, 5, 0], [50, 64], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 10, 6, 4, 1, 14, 9, 5, 2, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, tf.math.square(grad))))), tf.math.square(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}]