[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8191428780555725, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2144734859466553, 1.6173681020736694, 1.1693984270095825, 0.9604615569114685, 0.9177124500274658, 0.8234930038452148, 0.8152145743370056, 0.751832902431488, 0.7295474410057068, 0.7005635499954224, 0.6802470684051514, 0.659407913684845, 0.6537473201751709, 0.6379631757736206, 0.6233989596366882, 0.59134840965271, 0.5877298712730408, 0.5810129642486572, 0.5708072185516357, 0.5669519901275635, 0.5488767623901367, 0.56718909740448, 0.5278405547142029, 0.5324679017066956, 0.5263028740882874, 0.5108785033226013, 0.49331697821617126, 0.5035337805747986, 0.5071904063224792, 0.48427972197532654, 0.4883444011211395, 0.4878269135951996, 0.4669276475906372, 0.48553285002708435, 0.4643738865852356, 0.46051549911499023, 0.4432968199253082, 0.44258588552474976, 0.4469035267829895, 0.439849853515625, 0.43506523966789246, 0.4235665500164032, 0.424288272857666, 0.4195585548877716, 0.4149627983570099, 0.42123720049858093, 0.42003515362739563, 0.4128454923629761, 0.4027223289012909, 0.395745187997818, 0.40209320187568665, 0.407103955745697, 0.38697078824043274, 0.38088172674179077, 0.38462042808532715, 0.3813529908657074], "accuracy": [0.26363757252693176, 0.5097081065177917, 0.6052040457725525, 0.6565843224525452, 0.6561880707740784, 0.6995112895965576, 0.7024171352386475, 0.7210407853126526, 0.7253995537757874, 0.7405890822410583, 0.750759482383728, 0.7504953145980835, 0.7577598690986633, 0.7614582180976868, 0.7623828053474426, 0.7783648371696472, 0.7796856164932251, 0.7843085527420044, 0.7938185334205627, 0.7903843522071838, 0.7955356240272522, 0.7893276810646057, 0.8047813773155212, 0.8029322624206543, 0.8074230551719666, 0.8124422430992126, 0.8137630224227905, 0.8127063512802124, 0.8156121969223022, 0.8222163319587708, 0.8235371708869934, 0.8210275769233704, 0.8314621448516846, 0.8191784620285034, 0.8280280232429504, 0.834632158279419, 0.8380662798881531, 0.8383304476737976, 0.833179235458374, 0.8428213000297546, 0.8404437899589539, 0.8470479249954224, 0.8433496356010437, 0.8479725122451782, 0.8487650156021118, 0.8451988101005554, 0.8455950617790222, 0.852331280708313, 0.8500858545303345, 0.857218325138092, 0.8510104417800903, 0.8508783578872681, 0.8644828796386719, 0.863558292388916, 0.8564258217811584, 0.859199583530426], "val_loss": [1.93230140209198, 1.0872234106063843, 0.881386935710907, 0.7758327722549438, 0.7352967262268066, 0.7401018738746643, 0.6682151556015015, 0.6720377802848816, 0.6121076941490173, 0.5926541090011597, 0.5684913992881775, 0.5776737332344055, 0.6072456240653992, 0.5490100979804993, 0.5345372557640076, 0.5368295311927795, 0.5486287474632263, 0.5230942964553833, 0.512173593044281, 0.48502764105796814, 0.5960962772369385, 0.4854833483695984, 0.498004674911499, 0.47003793716430664, 0.48097124695777893, 0.45662352442741394, 0.45580264925956726, 0.44764015078544617, 0.45181283354759216, 0.4496486783027649, 0.46814513206481934, 0.44278621673583984, 0.4685249924659729, 0.43084052205085754, 0.4245153069496155, 0.4252787232398987, 0.41787466406822205, 0.41703230142593384, 0.42757219076156616, 0.4301764667034149, 0.41360729932785034, 0.41852059960365295, 0.4058495759963989, 0.40527066588401794, 0.4144129753112793, 0.427388995885849, 0.39850473403930664, 0.40490442514419556, 0.391429603099823, 0.41565534472465515, 0.3877864480018616, 0.4073270559310913, 0.39826449751853943, 0.39128559827804565, 0.39971864223480225, 0.38749685883522034], "val_accuracy": [0.5216666460037231, 0.6623333096504211, 0.6980000138282776, 0.7059999704360962, 0.7193333506584167, 0.7223333120346069, 0.7519999742507935, 0.7609999775886536, 0.7760000228881836, 0.7820000052452087, 0.7933333516120911, 0.7866666913032532, 0.762333333492279, 0.7886666655540466, 0.8013333082199097, 0.8003333210945129, 0.7953333258628845, 0.8023333549499512, 0.8096666932106018, 0.8186666369438171, 0.7506666779518127, 0.8176666498184204, 0.8109999895095825, 0.8246666789054871, 0.8146666884422302, 0.8293333053588867, 0.8320000171661377, 0.8309999704360962, 0.8320000171661377, 0.8306666612625122, 0.8246666789054871, 0.8410000205039978, 0.8226666450500488, 0.8376666903495789, 0.8429999947547913, 0.843666672706604, 0.8446666598320007, 0.8460000157356262, 0.8453333377838135, 0.8416666388511658, 0.8496666550636292, 0.8453333377838135, 0.8506666421890259, 0.8526666760444641, 0.8420000076293945, 0.8453333377838135, 0.8573333621025085, 0.8506666421890259, 0.8636666536331177, 0.8426666855812073, 0.8643333315849304, 0.8479999899864197, 0.856333315372467, 0.8586666584014893, 0.8526666760444641, 0.8603333234786987]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 9, 3, 2, 2, 5], [0, 2, 1, 2, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [4, 0, 3, 1, 0], [16, 1], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 2], [5, 6, 2, 6, 6], [0, 22], [1], [0], [7], [0]], "fitness": -0.30799999833106995, "mapping_values": [1, 2, 2, 0, 1, 12, 7, 5, 2, 5, 3, 2, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(grad), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(grad, tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [3.406367063522339, 2.299558639526367, 2.256049871444702, 2.30393385887146, 2.303382158279419, 2.303257703781128, 2.30306339263916], "accuracy": [0.19257694482803345, 0.1690661758184433, 0.1728965789079666, 0.09945846349000931, 0.0940430611371994, 0.09668471664190292, 0.0948355570435524], "val_loss": [2.277190685272217, 1.9884063005447388, 2.304307699203491, 2.302854537963867, 2.302649974822998, 2.3027007579803467, 2.302670955657959], "val_accuracy": [0.12966667115688324, 0.31466665863990784, 0.10066666454076767, 0.10066666454076767, 0.0976666659116745, 0.0976666659116745, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0], [0, 2, 3, 2, 3, 4], [0, 2, 1, 0, 2], [66, 39, 39], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 2, 0, 6, 4, 8, 2, 5], [2, 0, 1, 3, 0], [16, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 5, 7, 2, 6], [0, 6, 1, 6, 0], [0, 63], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 2, 13, 8, 5, 2, 6, 4, 2, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), grad), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(tf.math.square(alpha), grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 7, 6, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 2, 2, 6, 3, 8, 2, 3], [2, 0, 1, 1, 0, 2, 4, 2], [2, 1], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 5], [0, 22], [1], [0], [2], [0]], "fitness": -0.0925714299082756, "mapping_values": [1, 11, 6, 5, 2, 16, 8, 8, 2, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(beta), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, beta)), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3094685077667236, 2.309730291366577, 2.310753107070923, 2.3109805583953857, 2.3104255199432373, 2.310373306274414], "accuracy": [0.09774138033390045, 0.09087307006120682, 0.09285431355237961, 0.09126931428909302, 0.08994849026203156, 0.09391097724437714], "val_loss": [2.308274984359741, 2.308274984359741, 2.308274984359741, 2.308274984359741, 2.308274984359741, 2.308274984359741], "val_accuracy": [0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 3, 2, 3, 5, 4, 6, 3, 7, 3, 7], [0, 2, 1, 0, 1, 1, 2, 2, 1, 1, 3], [0, 39, 39], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 0, 0, 3, 8, 2], [2, 0, 3, 3, 0], [16, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 1], [0, 22], [1], [0], [2], [0]], "fitness": -0.09057142585515976, "mapping_values": [1, 23, 12, 11, 2, 1, 0, 1, 0, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.math.square(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, grad), grad), alpha)), alpha))), grad))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.307898759841919, 2.309926986694336, 2.309798002243042, 2.3108022212982178, 2.3107903003692627, 2.3091912269592285], "accuracy": [0.09668471664190292, 0.08717474341392517, 0.09377889335155487, 0.09140139818191528, 0.09206181764602661, 0.09232597798109055], "val_loss": [2.308743476867676, 2.308743476867676, 2.308743476867676, 2.308743476867676, 2.308743476867676, 2.308743476867676], "val_accuracy": [0.08666666597127914, 0.08666666597127914, 0.08666666597127914, 0.08666666597127914, 0.08666666597127914, 0.08666666597127914]}}]