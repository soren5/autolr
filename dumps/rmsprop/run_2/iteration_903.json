[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8145714402198792, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2095589637756348, 1.6132166385650635, 1.1624081134796143, 0.9974632263183594, 0.8793408274650574, 0.8594287037849426, 0.7818526029586792, 0.7793607115745544, 0.7433156371116638, 0.7013629674911499, 0.6824111938476562, 0.6688991785049438, 0.6558460593223572, 0.6297404766082764, 0.6369527578353882, 0.62735915184021, 0.602138876914978, 0.592422604560852, 0.5788134932518005, 0.5709182024002075, 0.5533171892166138, 0.5433421730995178, 0.5364341735839844, 0.5493575930595398, 0.529529869556427, 0.5222085118293762, 0.507016658782959, 0.5081307888031006, 0.4960139989852905, 0.49502938985824585, 0.49762609601020813, 0.4803513288497925, 0.4826226830482483, 0.46488645672798157, 0.4711986482143402, 0.45729461312294006, 0.4512653946876526, 0.45126262307167053, 0.4490524232387543, 0.43595704436302185, 0.43851783871650696, 0.4295802116394043, 0.4349094331264496, 0.4268248975276947, 0.4223763942718506, 0.4192301034927368, 0.41493886709213257, 0.4207989275455475, 0.4118286073207855, 0.3973410427570343, 0.41280606389045715, 0.3976208567619324, 0.39529141783714294, 0.38820189237594604, 0.38774996995925903, 0.3968363404273987, 0.3894796371459961], "accuracy": [0.27777042984962463, 0.5112931132316589, 0.6015057563781738, 0.6394135355949402, 0.6860388517379761, 0.6868313550949097, 0.7193237543106079, 0.713379979133606, 0.7283053994178772, 0.7409853339195251, 0.7430986762046814, 0.7494386434555054, 0.7552502751350403, 0.7668735980987549, 0.7582882046699524, 0.7643640041351318, 0.7759873270988464, 0.774798572063446, 0.7833839654922485, 0.7906485199928284, 0.7907806038856506, 0.793950617313385, 0.8039889335632324, 0.793422281742096, 0.8041210174560547, 0.8112534880638123, 0.8105930685997009, 0.8175934553146362, 0.8175934553146362, 0.816008448600769, 0.8138951063156128, 0.8227446675300598, 0.8230088353157043, 0.8252542614936829, 0.8220842480659485, 0.8302733898162842, 0.8352925777435303, 0.8389908671379089, 0.8348963260650635, 0.8372738361358643, 0.8399154543876648, 0.8412362933158875, 0.8429533839225769, 0.8389908671379089, 0.8430854678153992, 0.8474441766738892, 0.8475762605667114, 0.8437458872795105, 0.8425571322441101, 0.8519350290298462, 0.8446704745292664, 0.8515387773513794, 0.8549728989601135, 0.8574824929237366, 0.8551049828529358, 0.8499537706375122, 0.8584070801734924], "val_loss": [1.9176712036132812, 1.1002657413482666, 0.9276018142700195, 0.809256911277771, 0.8223273754119873, 0.7054446339607239, 0.6759008765220642, 0.7018771171569824, 0.6471150517463684, 0.6084264516830444, 0.593330979347229, 0.6383568048477173, 0.6119003891944885, 0.5581085085868835, 0.5776684284210205, 0.5450681447982788, 0.5689301490783691, 0.5349636673927307, 0.5278924703598022, 0.5120214819908142, 0.5163986682891846, 0.5117233991622925, 0.5133053660392761, 0.5224817991256714, 0.48732665181159973, 0.48800304532051086, 0.49203699827194214, 0.4711674451828003, 0.48397693037986755, 0.4770229458808899, 0.46968382596969604, 0.46806833148002625, 0.46481308341026306, 0.4592803418636322, 0.4545663297176361, 0.466975599527359, 0.44315117597579956, 0.44721102714538574, 0.4496774971485138, 0.4484083354473114, 0.42711812257766724, 0.4419954717159271, 0.4354186952114105, 0.43984293937683105, 0.42482009530067444, 0.42532774806022644, 0.43448519706726074, 0.4261093735694885, 0.415535569190979, 0.4412062168121338, 0.41366010904312134, 0.40900352597236633, 0.41433340311050415, 0.40729621052742004, 0.43122732639312744, 0.4147908091545105, 0.40970659255981445], "val_accuracy": [0.534333348274231, 0.6536666750907898, 0.6446666717529297, 0.7099999785423279, 0.6953333616256714, 0.7326666712760925, 0.7403333187103271, 0.7413333058357239, 0.7523333430290222, 0.7703333497047424, 0.7749999761581421, 0.7553333044052124, 0.7673333287239075, 0.7889999747276306, 0.7773333191871643, 0.7923333048820496, 0.7710000276565552, 0.8019999861717224, 0.7913333177566528, 0.8096666932106018, 0.8083333373069763, 0.812333345413208, 0.793666660785675, 0.8023333549499512, 0.8153333067893982, 0.8119999766349792, 0.8143333196640015, 0.8270000219345093, 0.8220000267028809, 0.8163333535194397, 0.8246666789054871, 0.8273333311080933, 0.8320000171661377, 0.8286666870117188, 0.8330000042915344, 0.8263333439826965, 0.8346666693687439, 0.8333333134651184, 0.8339999914169312, 0.8356666564941406, 0.8429999947547913, 0.8373333215713501, 0.8376666903495789, 0.8336666822433472, 0.8456666469573975, 0.8446666598320007, 0.8403333425521851, 0.8450000286102295, 0.8493333458900452, 0.8366666436195374, 0.8503333330154419, 0.8543333411216736, 0.8463333249092102, 0.8516666889190674, 0.8376666903495789, 0.8460000157356262, 0.8539999723434448]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 6, 1, 2, 6], [0, 6, 1, 6, 0, 2, 0, 4], [0, 22, 29], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 4, 0, 2, 3, 9, 3, 9, 0], [2, 5, 3], [0, 65]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 2, 1, 1, 0, 18, 10, 8, 3, 12, 9, 3, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.divide_no_nan(alpha, grad)))), tf.math.subtract(tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(beta, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), beta)), tf.math.negative(grad))), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 0, 5], [0, 2, 1, 0, 2], [0, 29, 39], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 2, 6, 6, 3, 8, 2, 7, 4, 2, 8, 2, 8, 1, 6, 0, 3, 3, 0, 4, 9], [2, 4, 3, 1, 0, 0, 4, 0, 3, 4, 0, 4, 2, 3, 0], [16, 1, 95, 16, 27, 49], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0], [0, 2, 0, 2, 1, 2, 1, 9], [0, 6, 1, 3, 0], [0, 22, 9], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 36, 21, 15, 6, 13, 8, 5, 3, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.negative(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.divide_no_nan(beta, tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.sqrt(tf.math.add(grad, alpha))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(grad, tf.math.sqrt(tf.math.add(tf.math.sqrt(tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.negative(tf.math.multiply(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), tf.math.multiply(tf.math.negative(grad), tf.math.pow(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), beta))))), grad))), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha)), tf.math.add(tf.math.subtract(sigma, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 3, 1, 3, 5], [0, 2, 0, 0, 2], [0, 39, 39], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1], [0, 2, 0, 8, 3, 7, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 2, 1, 2, 5, 2, 1, 9, 4, 9, 9], [0, 6, 1, 6, 0], [23, 22, 80, 43], [1], [0], [3], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 1, 0, 1, 0, 15, 11, 4, 4, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.square(alpha))), tf.math.add(tf.math.subtract(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), grad))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10421344637870789, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 2, 3, 5], [0, 2, 3, 0, 2], [0, 36, 39], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 4, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 8, 5, 2, 1], [0, 7, 1, 6, 0], [0, 43], [1], [0], [2], [0]], "fitness": -0.09914285689592361, "mapping_values": [1, 10, 5, 5, 2, 9, 5, 4, 1, 11, 7, 4, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), grad), tf.math.multiply(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.sqrt(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)))), tf.math.add(grad, tf.math.subtract(alpha, grad)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3030765056610107, 2.3025853633880615, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10328886657953262, 0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09985470771789551], "val_loss": [2.302583694458008, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10333333164453506, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}]