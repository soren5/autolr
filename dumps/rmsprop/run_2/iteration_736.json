[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.808571457862854, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2097184658050537, 1.6008280515670776, 1.1590948104858398, 0.957365870475769, 0.8808876276016235, 0.8144243955612183, 0.7692747116088867, 0.745573878288269, 0.7240045666694641, 0.6861717700958252, 0.7028822302818298, 0.6748623251914978, 0.6452928781509399, 0.641189455986023, 0.6056011319160461, 0.6160835027694702, 0.5846409201622009, 0.5922001004219055, 0.5933097004890442, 0.561569094657898, 0.543091893196106, 0.5476532578468323, 0.542884349822998, 0.5340545177459717, 0.5239443778991699], "accuracy": [0.2657508850097656, 0.5056135058403015, 0.5960903167724609, 0.655527651309967, 0.6869634389877319, 0.7018887996673584, 0.7117950320243835, 0.7276449799537659, 0.7306828498840332, 0.7460044622421265, 0.7409853339195251, 0.7510236501693726, 0.7605336308479309, 0.7625148296356201, 0.7724210619926453, 0.7671377658843994, 0.7825914621353149, 0.7765156626701355, 0.774270236492157, 0.7902522683143616, 0.7971205711364746, 0.7955356240272522, 0.7977809906005859, 0.8079513907432556, 0.8090080618858337], "val_loss": [1.9232494831085205, 1.0979782342910767, 0.9368904829025269, 0.786348283290863, 0.7261090278625488, 0.7636148929595947, 0.7040835618972778, 0.6207398176193237, 0.6652681231498718, 0.6274278163909912, 0.6316664814949036, 0.583799421787262, 0.5969217419624329, 0.5705641508102417, 0.5564245581626892, 0.574644923210144, 0.5275815725326538, 0.5777445435523987, 0.5121926069259644, 0.5106239318847656, 0.5283730626106262, 0.5082685351371765, 0.5070087313652039, 0.5118122696876526, 0.48761221766471863], "val_accuracy": [0.5223333239555359, 0.6773333549499512, 0.628000020980835, 0.6993333101272583, 0.7263333201408386, 0.6923333406448364, 0.7433333396911621, 0.7673333287239075, 0.7440000176429749, 0.7596666812896729, 0.7393333315849304, 0.7863333225250244, 0.7730000019073486, 0.7900000214576721, 0.781000018119812, 0.7713333368301392, 0.8063333630561829, 0.7756666541099548, 0.8130000233650208, 0.8213333487510681, 0.7986666560173035, 0.8113333582878113, 0.8073333501815796, 0.8100000023841858, 0.8169999718666077]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 4, 4], [0, 2, 1, 0, 2], [38, 39, 39], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 2, 0, 2, 5, 3, 1, 3, 0, 2, 1, 2, 5, 4, 3, 2, 8, 6, 7, 2, 7, 7, 1, 5], [0, 6, 1, 6, 0, 0, 4, 0, 4, 1, 4, 2, 2, 7, 0, 6, 3, 0], [0, 22, 61, 28, 22, 57], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 12, 7, 5, 2, 42, 24, 18, 6, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), grad), alpha), tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(grad, alpha))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.subtract(tf.math.multiply(grad, tf.math.negative(tf.math.add(tf.math.subtract(alpha, tf.math.add(grad, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.pow(tf.math.multiply(tf.math.add(grad, tf.math.sqrt(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))), grad), alpha))), tf.math.divide_no_nan(tf.math.add(tf.math.add(grad, beta), tf.math.add(beta, grad)), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.subtract(grad, sigma), tf.math.square(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [27.752342224121094, 460.22991943359375, 1710.484619140625, 4443.666015625, 10095.6884765625, 21596.466796875], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [180.26446533203125, 1031.7332763671875, 2999.27197265625, 7142.03271484375, 15611.171875, 32706.884765625], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1], [0, 2, 3, 2, 3, 5, 2, 9], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 2, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 6], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 8, 5, 3, 10, 6, 4, 1, 12, 7, 5, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.square(alpha)), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha)), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10315678268671036, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 2, 3, 7], [0, 2, 1, 0, 2, 3], [0, 3, 39], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 0, 6, 9, 8, 2], [2, 2, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0], [0, 2, 0, 2, 5, 7, 1, 6, 1, 2, 9, 6, 1, 4, 5, 2, 4, 5, 3, 4, 6, 4, 0, 1, 6, 7, 7, 9], [0, 6, 6, 6, 0, 4, 4, 3, 6, 0, 3, 6, 0, 5, 7, 4, 1, 4, 5], [76, 22, 33, 56, 92, 87], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [0, 4, 5, 4, 0, 3, 3, 4, 8, 3], [2, 6, 1, 0, 5, 6, 6], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 6, 6, 2, 1, 0, 1, 0, 47, 28, 19, 6, 17, 10, 7, 1], "tree_depth": 39, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.add(grad, grad)))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(grad, tf.math.divide_no_nan(grad, tf.math.subtract(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.subtract(grad, grad), tf.math.pow(tf.math.square(tf.math.add(tf.math.pow(sigma, tf.math.square(grad)), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.pow(sigma, tf.math.divide_no_nan(grad, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), tf.math.pow(grad, tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.add(grad, tf.math.add(alpha, grad))), grad))))))))))))), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.square(tf.math.pow(tf.math.negative(beta), tf.math.multiply(tf.math.multiply(grad, alpha), tf.constant(0.0, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.sqrt(tf.math.multiply(grad, grad)), grad)))", "other_info": {"loss": [1101171712.0, 21136824320.0, 98741305344.0, 275561119744.0, 594892554240.0, 1068645285888.0], "accuracy": [0.10157178342342377, 0.10170386731624603, 0.10659094154834747, 0.10051512718200684, 0.09879804402589798, 0.09919429570436478], "val_loss": [5206939136.0, 41650262016.0, 140563808256.0, 333182074880.0, 650735779840.0, 1124464197632.0], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 5, 3, 2, 3, 5], [3, 2, 1, 0, 2], [0, 39, 39], [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 9, 2], [2, 3, 3, 1, 0], [16, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 2, 0, 2, 7, 2, 1], [0, 6, 1, 6, 0, 3], [92, 22], [1], [0], [2], [0]], "fitness": -0.087714284658432, "mapping_values": [1, 1, 0, 1, 0, 1, 0, 1, 0, 13, 7, 6, 2, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(grad, tf.math.subtract(alpha, grad)), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.31101131439209, 2.309968948364258, 2.3104500770568848, 2.309425115585327, 2.3099424839019775, 2.3101966381073], "accuracy": [0.09259014576673508, 0.09166556596755981, 0.08849557489156723, 0.09259014576673508, 0.09272222965955734, 0.0944393053650856], "val_loss": [2.3085248470306396, 2.3085248470306396, 2.3085248470306396, 2.3085248470306396, 2.3085248470306396, 2.3085248470306396], "val_accuracy": [0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341]}}]