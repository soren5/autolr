[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8305714130401611, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.208988666534424, 1.5953035354614258, 1.1492640972137451, 0.9865700006484985, 0.8981716632843018, 0.8363384008407593, 0.7795066237449646, 0.7603817582130432, 0.7419368028640747, 0.7120974063873291, 0.6868900656700134, 0.66166090965271, 0.659429669380188, 0.6443189978599548, 0.6297532320022583, 0.6207273602485657, 0.5948024988174438, 0.5771980881690979, 0.5777736306190491, 0.5718454122543335, 0.5612075924873352, 0.5640543103218079, 0.5344642996788025, 0.5463293790817261, 0.521068274974823, 0.5206471681594849, 0.5213938355445862, 0.508234441280365, 0.5010278224945068, 0.49850717186927795, 0.507139265537262, 0.48818686604499817, 0.4796152114868164, 0.47477754950523376, 0.4619191586971283, 0.46358978748321533, 0.4602351188659668, 0.4571332335472107, 0.44902318716049194, 0.4514463543891907, 0.4420805275440216, 0.43562349677085876, 0.4359118342399597, 0.42282652854919434, 0.43380528688430786, 0.41836217045783997, 0.41305455565452576, 0.41007062792778015, 0.41804349422454834, 0.4091235399246216, 0.40482771396636963, 0.3954150676727295, 0.39954352378845215, 0.39230525493621826, 0.39768773317337036], "accuracy": [0.2611279785633087, 0.502971887588501, 0.5949016213417053, 0.6470743417739868, 0.6765288710594177, 0.6906617283821106, 0.7104741930961609, 0.7209087014198303, 0.7239466309547424, 0.735041618347168, 0.7434949278831482, 0.7508915662765503, 0.7528728246688843, 0.757099449634552, 0.7619865536689758, 0.7730814814567566, 0.7800818681716919, 0.7799497842788696, 0.7810064554214478, 0.7881389260292053, 0.7895918488502502, 0.7927618622779846, 0.7968564033508301, 0.7952714562416077, 0.8063663840293884, 0.8054417967796326, 0.8020076751708984, 0.8079513907432556, 0.8150838613510132, 0.8096684813499451, 0.8136309385299683, 0.8198388814926147, 0.8241975903511047, 0.8257825970649719, 0.821820080280304, 0.8294808864593506, 0.828820526599884, 0.8310658931732178, 0.8322546482086182, 0.8322546482086182, 0.8359529972076416, 0.8401796221733093, 0.837537944316864, 0.8429533839225769, 0.8396512866020203, 0.8424250483512878, 0.8477083444595337, 0.8429533839225769, 0.8436138033866882, 0.8487650156021118, 0.8506141901016235, 0.8545766472816467, 0.8508783578872681, 0.8537842035293579, 0.8518029451370239], "val_loss": [1.9049975872039795, 1.086678385734558, 0.9229508638381958, 0.8522552251815796, 0.6935115456581116, 0.6621263027191162, 0.6637330651283264, 0.6615040302276611, 0.6444665789604187, 0.5862600803375244, 0.5828841924667358, 0.569118082523346, 0.5442381501197815, 0.5466595888137817, 0.5456437468528748, 0.5318793058395386, 0.5192639827728271, 0.5295407176017761, 0.4995937645435333, 0.49074047803878784, 0.4874342381954193, 0.49576708674430847, 0.48216044902801514, 0.49507662653923035, 0.46416667103767395, 0.4722912311553955, 0.459014356136322, 0.4700137674808502, 0.4429486393928528, 0.44035395979881287, 0.4449625611305237, 0.46925675868988037, 0.4336262345314026, 0.4358264207839966, 0.4447161555290222, 0.44070208072662354, 0.4364798069000244, 0.4204801321029663, 0.41715043783187866, 0.4168914258480072, 0.40946224331855774, 0.4141969382762909, 0.4090843200683594, 0.4016436040401459, 0.42649388313293457, 0.399542897939682, 0.39846834540367126, 0.4054258167743683, 0.41616567969322205, 0.3985767066478729, 0.40726351737976074, 0.3881790339946747, 0.3984150290489197, 0.39423397183418274, 0.3954373896121979], "val_accuracy": [0.5680000185966492, 0.6693333387374878, 0.6600000262260437, 0.6773333549499512, 0.753000020980835, 0.7559999823570251, 0.7360000014305115, 0.7369999885559082, 0.7396666407585144, 0.7836666703224182, 0.784333348274231, 0.7850000262260437, 0.800000011920929, 0.79666668176651, 0.7973333597183228, 0.8080000281333923, 0.8050000071525574, 0.8146666884422302, 0.8223333358764648, 0.8256666660308838, 0.8259999752044678, 0.8216666579246521, 0.8309999704360962, 0.8109999895095825, 0.8363333344459534, 0.8199999928474426, 0.8303333520889282, 0.8289999961853027, 0.8456666469573975, 0.8443333506584167, 0.846666693687439, 0.8276666402816772, 0.8506666421890259, 0.8416666388511658, 0.8333333134651184, 0.8433333039283752, 0.8486666679382324, 0.8556666374206543, 0.8476666808128357, 0.8543333411216736, 0.862666666507721, 0.8543333411216736, 0.856333315372467, 0.8616666793823242, 0.8483333587646484, 0.8633333444595337, 0.862666666507721, 0.859000027179718, 0.8500000238418579, 0.8679999709129333, 0.8586666584014893, 0.8673333525657654, 0.8643333315849304, 0.8606666922569275, 0.8579999804496765]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], [7, 2, 3, 2, 7, 5, 2, 0], [1, 2, 0, 0, 2, 3, 3], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [1, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 5, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 8, 7, 2, 10, 6, 4, 1, 11, 7, 4, 1, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(alpha, grad), tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.add(grad, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(alpha), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 5, 2, 3, 5], [0, 2, 1, 0, 2], [0, 57, 39], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 2, 0, 6, 3, 8, 2], [2, 0, 4, 1, 0], [16, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [9, 7, 0, 2, 2, 2, 1], [0, 0, 1, 4, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 8, 4, 4, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.negative(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [27861.89453125, 563620478976.0, 9.24064426501551e+18, 6.5578382707908285e+25, NaN, NaN], "accuracy": [0.10011887550354004, 0.1006472036242485, 0.09708096832036972, 0.10249637067317963, 0.09998679161071777, 0.09998679161071777], "val_loss": [1941374.0, 34414042021888.0, 5.7439011682162364e+20, 2.3025853633880615, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.09799999743700027, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 2, 1, 2, 3, 5, 0], [0, 2, 1, 0, 2], [65, 39, 39], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], [2, 2, 0, 7, 3, 8, 2, 4, 2, 4, 6, 0, 2, 2, 0], [4, 1, 3, 1, 0, 1, 2, 3, 2, 1, 5, 3], [11, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 2, 27, 15, 12, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.add(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.math.square(alpha), tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.negative(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.add(grad, tf.math.pow(alpha, grad))), alpha), tf.math.add(tf.math.pow(tf.math.divide_no_nan(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), alpha), tf.math.negative(beta)), grad))), tf.math.add(beta, tf.math.add(alpha, grad))), tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0], [0, 2, 3, 7, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 7, 6, 7], [0, 22], [1], [0], [2], [0]], "fitness": -0.09028571099042892, "mapping_values": [1, 6, 3, 3, 1, 10, 6, 4, 1, 10, 6, 4, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, grad))), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3099365234375, 2.310154438018799, 2.3098931312561035, 2.3112869262695312, 2.3107285499572754, 2.3102312088012695], "accuracy": [0.09245806187391281, 0.09338264167308807, 0.09470347315073013, 0.08928807079792023, 0.08942015469074249, 0.08809932321310043], "val_loss": [2.309349536895752, 2.309349536895752, 2.309349536895752, 2.309349536895752, 2.309349536895752, 2.309349536895752], "val_accuracy": [0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654]}}]