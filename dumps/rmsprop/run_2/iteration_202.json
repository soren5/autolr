[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8257142901420593, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.213852643966675, 1.617486596107483, 1.1579930782318115, 0.9904577732086182, 0.8893777132034302, 0.8356748819351196, 0.7844756841659546, 0.7459741830825806, 0.7508971095085144, 0.7222126722335815, 0.696774959564209, 0.6876801252365112, 0.6546158194541931, 0.6325967907905579, 0.6299116015434265, 0.6321271061897278, 0.6147270798683167, 0.5888450145721436, 0.5808132886886597, 0.5903010368347168, 0.5736191272735596, 0.5568566918373108, 0.5437317490577698, 0.5532994270324707, 0.5385450720787048, 0.5362257361412048, 0.5209289193153381, 0.5031696557998657, 0.505460262298584, 0.5054546594619751, 0.48889949917793274, 0.4907599091529846, 0.4897442162036896, 0.4782750606536865, 0.4798562526702881], "accuracy": [0.26178839802742004, 0.5042926669120789, 0.5930524468421936, 0.6460176706314087, 0.6812838315963745, 0.6952846646308899, 0.7112666964530945, 0.7265883088111877, 0.7181349992752075, 0.7318716049194336, 0.7415136694908142, 0.7440232634544373, 0.7547219395637512, 0.7619865536689758, 0.7631752490997314, 0.7621186375617981, 0.7701756954193115, 0.7853652238845825, 0.778761088848114, 0.7771760821342468, 0.7843085527420044, 0.7901201844215393, 0.7967243194580078, 0.7890635132789612, 0.7968564033508301, 0.8012151718139648, 0.8087438941001892, 0.8137630224227905, 0.8094043135643005, 0.8041210174560547, 0.8195747137069702, 0.8182538747787476, 0.8168009519577026, 0.826310932636261, 0.819442629814148], "val_loss": [1.931612491607666, 1.1025739908218384, 1.001585602760315, 0.8022675514221191, 0.7601320147514343, 0.6890537142753601, 0.7144387364387512, 0.6629043817520142, 0.6206841468811035, 0.6455581188201904, 0.5958402752876282, 0.58802330493927, 0.562046229839325, 0.5445789098739624, 0.5694884657859802, 0.5356171131134033, 0.5347581505775452, 0.511812686920166, 0.5265262722969055, 0.5244703888893127, 0.5022157430648804, 0.5028957724571228, 0.5010915398597717, 0.4859534502029419, 0.47475317120552063, 0.47689583897590637, 0.4734642803668976, 0.451383501291275, 0.45841658115386963, 0.4552352726459503, 0.45410147309303284, 0.44644278287887573, 0.4599789083003998, 0.44222643971443176, 0.44277745485305786], "val_accuracy": [0.4856666624546051, 0.659333348274231, 0.6683333516120911, 0.7203333377838135, 0.7170000076293945, 0.750333309173584, 0.7369999885559082, 0.749666690826416, 0.7676666378974915, 0.737333357334137, 0.7633333206176758, 0.7806666493415833, 0.7803333401679993, 0.7953333258628845, 0.7786666750907898, 0.7960000038146973, 0.800000011920929, 0.8019999861717224, 0.79666668176651, 0.7883333563804626, 0.8103333115577698, 0.8006666898727417, 0.8113333582878113, 0.8256666660308838, 0.8346666693687439, 0.8256666660308838, 0.8209999799728394, 0.8353333473205566, 0.8356666564941406, 0.8423333168029785, 0.8293333053588867, 0.8370000123977661, 0.8233333230018616, 0.8370000123977661, 0.8420000076293945]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 2, 2, 2, 6, 5], [0, 2, 1, 0, 3], [0, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 4, 3, 0], [16, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 2, 5, 2, 1], [0, 6, 4, 2, 0], [0, 22], [0, 1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 12, 7, 5, 2, 3, 2, 1, 1, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(grad, grad)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1], [0, 3, 3, 2, 1, 7, 7, 2, 9], [0, 2, 1, 0, 2, 3, 3], [0, 67, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 4, 0, 6, 8, 8, 2], [2, 0, 3, 1, 0], [95, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0], [7, 2, 0, 2, 5, 6, 1], [7, 7, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 9, 7, 3, 11, 7, 4, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.subtract(tf.math.add(tf.math.add(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), grad), grad), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.sqrt(tf.math.sqrt(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), tf.math.add(grad, alpha)))), lambda shape,  alpha, beta, sigma, grad: grad, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 1, 1, 0, 2], [0, 39, 39], [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 1, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [32, 30], [1], [0], [0], [0]], "fitness": -0.09399999678134918, "mapping_values": [1, 11, 6, 5, 2, 1, 0, 1, 0, 8, 5, 3, 1, 1, 0, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.negative(tf.math.add(tf.math.square(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), grad)), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.309962034225464, 2.310424566268921, 2.3097922801971436, 2.311264753341675, 2.3106231689453125, 2.309204578399658], "accuracy": [0.09655263274908066, 0.09417514503002167, 0.08796724677085876, 0.09298639744520187, 0.09166556596755981, 0.09311848133802414], "val_loss": [2.3090224266052246, 2.3090224266052246, 2.3090224266052246, 2.3090224266052246, 2.3090224266052246, 2.3090224266052246], "val_accuracy": [0.09266666322946548, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [2, 2, 1, 0, 2], [0, 39, 39], [1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 4, 6, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 8, 0, 2, 5, 2, 1], [0, 5, 1, 6, 7], [0, 22], [1], [0], [2], [0]], "fitness": -0.08971428871154785, "mapping_values": [1, 11, 6, 5, 1, 1, 0, 1, 0, 11, 7, 4, 1, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(grad, tf.math.multiply(tf.math.add(grad, alpha), tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(grad))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3104496002197266, 2.309124231338501, 2.3107986450195312, 2.310027599334717, 2.3104419708251953, 2.309964418411255], "accuracy": [0.09074098616838455, 0.08836349099874496, 0.09034473448991776, 0.09417514503002167, 0.09047681838274002, 0.08968432247638702], "val_loss": [2.308732032775879, 2.308732032775879, 2.308732032775879, 2.308732032775879, 2.308732032775879, 2.308732032775879], "val_accuracy": [0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763]}}]