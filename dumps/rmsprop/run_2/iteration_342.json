[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8257142901420593, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.207689046859741, 1.5865894556045532, 1.1307200193405151, 0.9773561358451843, 0.8560681343078613, 0.8235908150672913, 0.7727493047714233, 0.7400550246238708, 0.7259939312934875, 0.6836540699005127, 0.6773806810379028, 0.6597871780395508, 0.6411104202270508, 0.6314226388931274, 0.6218504905700684, 0.6080853343009949, 0.5919570326805115, 0.5827199816703796, 0.560391902923584, 0.5667069554328918, 0.550193727016449, 0.5459367036819458, 0.5453156232833862, 0.535678505897522, 0.5242854356765747, 0.5286439657211304, 0.5111629366874695, 0.508629322052002, 0.49331846833229065, 0.5014790892601013, 0.49085694551467896, 0.47540128231048584, 0.4882971942424774, 0.4775436520576477, 0.4654308557510376, 0.4698827564716339, 0.4558957517147064, 0.45692193508148193, 0.4583425521850586, 0.4495754539966583, 0.46270981431007385, 0.43589505553245544, 0.44467127323150635, 0.4335598647594452, 0.4258139431476593, 0.4263618588447571, 0.4207082986831665, 0.41912779211997986], "accuracy": [0.27143046259880066, 0.5175009965896606, 0.6115440726280212, 0.6489235162734985, 0.6880200505256653, 0.6968696117401123, 0.7116629481315613, 0.7305507659912109, 0.7329282760620117, 0.7437590956687927, 0.7450799345970154, 0.7519482374191284, 0.7594769597053528, 0.7637035846710205, 0.7664773464202881, 0.778232753276825, 0.7816668748855591, 0.7812706232070923, 0.7910447716712952, 0.7898560166358948, 0.8016114234924316, 0.7977809906005859, 0.7994980812072754, 0.8041210174560547, 0.8079513907432556, 0.8039889335632324, 0.8131026029586792, 0.816008448600769, 0.8193105459213257, 0.8145555257797241, 0.8181217908859253, 0.8259146809577942, 0.8175934553146362, 0.824329674243927, 0.8252542614936829, 0.8265751004219055, 0.8356888294219971, 0.8317263126373291, 0.8339717388153076, 0.8355567455291748, 0.8317263126373291, 0.841500461101532, 0.842028796672821, 0.8454629778862, 0.8407079577445984, 0.848368763923645, 0.8433496356010437, 0.8455950617790222], "val_loss": [1.9161840677261353, 1.1083734035491943, 0.8752169609069824, 0.7916803359985352, 0.7828119993209839, 0.7120354771614075, 0.7388858795166016, 0.6341428160667419, 0.648950457572937, 0.6102766394615173, 0.6089648604393005, 0.6239261627197266, 0.584723949432373, 0.5707358717918396, 0.5753287076950073, 0.5503300428390503, 0.5651716589927673, 0.548369288444519, 0.5174306631088257, 0.5181573629379272, 0.5401097536087036, 0.5119835734367371, 0.5151050686836243, 0.49254289269447327, 0.5455673933029175, 0.48138728737831116, 0.4917508661746979, 0.48259276151657104, 0.4685412645339966, 0.4816114902496338, 0.46186214685440063, 0.4650612473487854, 0.4636230766773224, 0.46147477626800537, 0.4556300938129425, 0.44434526562690735, 0.4411180019378662, 0.4512038230895996, 0.4483039081096649, 0.44199469685554504, 0.4299592673778534, 0.45029279589653015, 0.42583853006362915, 0.4510974586009979, 0.4295523166656494, 0.4419013559818268, 0.4358034133911133, 0.42237788438796997], "val_accuracy": [0.5509999990463257, 0.6420000195503235, 0.6903333067893982, 0.7136666774749756, 0.6990000009536743, 0.7153333425521851, 0.7026666402816772, 0.7643333077430725, 0.7643333077430725, 0.7723333239555359, 0.7743333578109741, 0.753000020980835, 0.777999997138977, 0.7876666784286499, 0.7903333306312561, 0.7986666560173035, 0.7963333129882812, 0.8013333082199097, 0.8103333115577698, 0.8066666722297668, 0.7933333516120911, 0.8133333325386047, 0.8096666932106018, 0.8209999799728394, 0.7933333516120911, 0.82833331823349, 0.8186666369438171, 0.8273333311080933, 0.82833331823349, 0.8240000009536743, 0.8326666951179504, 0.8320000171661377, 0.8306666612625122, 0.8363333344459534, 0.8316666483879089, 0.8410000205039978, 0.8433333039283752, 0.8396666646003723, 0.8353333473205566, 0.8413333296775818, 0.8450000286102295, 0.8349999785423279, 0.8496666550636292, 0.8346666693687439, 0.8456666469573975, 0.8423333168029785, 0.8443333506584167, 0.846666693687439]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [8, 2, 3, 2, 6, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [9, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 3, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 2, 2, 2, 1, 1, 0, 1, 10, 6, 4, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, alpha))), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [91.92208862304688, 10764.9267578125, 181637.15625, 1273786.25, 5614182.0, 18379304.0], "accuracy": [0.0940430611371994, 0.10051512718200684, 0.10302469879388809, 0.09774138033390045, 0.09417514503002167, 0.10328886657953262], "val_loss": [811.0504760742188, 39800.1796875, 422929.375, 2298795.25, 8599523.0, 25348774.0], "val_accuracy": [0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 9, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 2, 0], [16, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [8, 2, 0, 2, 5, 2, 1, 5, 4, 2, 7, 2, 5, 1, 4, 0, 3, 5, 9], [0, 6, 4, 6, 0, 4, 0, 7, 4, 5, 2], [0, 22, 19, 10], [0, 0, 0, 0, 1], [0, 8, 8, 5], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 12, 7, 5, 2, 30, 19, 11, 4, 5, 4, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(grad)), grad)), tf.math.pow(grad, tf.math.add(tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), grad), tf.math.add(tf.math.square(tf.math.subtract(tf.math.pow(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.negative(grad)), tf.math.multiply(tf.math.square(grad), grad))), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.square(beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 0, 2, 0], [16, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 2, 0, 2, 5, 2, 5], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 7, 4, 3, 2, 11, 6, 5, 2, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.add(tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), tf.math.square(alpha)), tf.math.add(grad, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.303837776184082, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 2, 3, 2, 3, 5, 7, 5, 9], [0, 0, 1, 0, 2], [0, 39, 39, 30], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 0, 6, 6, 8, 2, 1, 3, 9], [2, 0, 3, 4, 5, 3], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 5, 6, 2, 0, 2, 1], [6, 6, 1, 6, 0], [87, 22], [0, 0, 1], [0, 8], [2], [0]], "fitness": -0.06685714423656464, "mapping_values": [1, 14, 9, 5, 4, 16, 10, 6, 2, 8, 5, 3, 0, 3, 2, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha)), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.square(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.subtract(grad, tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad)), grad)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.divide_no_nan(grad, tf.math.add(grad, tf.math.negative(alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(beta))", "other_info": {"loss": [4.895260436374895e+25, 5.84234533074106e+25, 5.637011855444988e+25, 5.65972625376015e+25, 5.908079842079122e+25, 5.858456255846436e+25], "accuracy": [0.11028926074504852, 0.11081759631633759, 0.10711926966905594, 0.11121384054422379, 0.1080438494682312, 0.11491216719150543], "val_loss": [4.950626032869125e+25, 4.950626032869125e+25, 4.950626032869125e+25, 4.950626032869125e+25, 4.950626032869125e+25, 4.950626032869125e+25], "val_accuracy": [0.06800000369548798, 0.06800000369548798, 0.06800000369548798, 0.06800000369548798, 0.06800000369548798, 0.06800000369548798]}}]