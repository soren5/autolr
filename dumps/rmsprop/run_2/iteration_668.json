[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8040000200271606, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2117786407470703, 1.6050969362258911, 1.1269710063934326, 1.0053598880767822, 0.8966948986053467, 0.8201693296432495, 0.8042544722557068, 0.7583361268043518, 0.716945230960846, 0.7223032116889954, 0.6875966191291809, 0.6710897088050842, 0.6758609414100647, 0.6514105796813965, 0.6208263635635376, 0.6117175221443176, 0.5966746807098389, 0.5909097790718079, 0.5704033970832825, 0.5770972371101379, 0.5666121244430542, 0.5597097873687744, 0.5338971614837646, 0.5451138615608215, 0.5445141196250916, 0.5362430214881897, 0.5161866545677185, 0.5115687847137451, 0.5130922794342041, 0.4957021176815033, 0.4903180003166199, 0.49604472517967224, 0.4891362488269806], "accuracy": [0.27222296595573425, 0.5110289454460144, 0.6058644652366638, 0.64231938123703, 0.6748117804527283, 0.7042662501335144, 0.6954167485237122, 0.7170783281326294, 0.7364945411682129, 0.7288337349891663, 0.7416457533836365, 0.7489103078842163, 0.7470611333847046, 0.7593448758125305, 0.7708360552787781, 0.7728173136711121, 0.7803460359573364, 0.7777044177055359, 0.7803460359573364, 0.7845727205276489, 0.7853652238845825, 0.7880068421363831, 0.8001585006713867, 0.800290584564209, 0.7972526550292969, 0.8058380484580994, 0.8083476424217224, 0.8113855719566345, 0.8117818236351013, 0.8210275769233704, 0.8175934553146362, 0.8208954930305481, 0.8255184292793274], "val_loss": [1.926121711730957, 1.111096978187561, 0.9172648787498474, 0.7954936623573303, 0.7279354929924011, 0.743047833442688, 0.7059409022331238, 0.6587247848510742, 0.6380521655082703, 0.643047571182251, 0.6044461131095886, 0.6529284119606018, 0.6092288494110107, 0.5644203424453735, 0.5669476985931396, 0.5771558880805969, 0.5483136177062988, 0.5344362854957581, 0.5341783165931702, 0.5391635894775391, 0.5161453485488892, 0.5115528106689453, 0.5026631355285645, 0.5158512592315674, 0.49813327193260193, 0.48441842198371887, 0.47895580530166626, 0.47844839096069336, 0.48320701718330383, 0.4771076738834381, 0.4923580288887024, 0.46514949202537537, 0.47265803813934326], "val_accuracy": [0.5763333439826965, 0.6456666588783264, 0.6869999766349792, 0.7160000205039978, 0.7459999918937683, 0.7139999866485596, 0.7279999852180481, 0.7643333077430725, 0.7620000243186951, 0.7633333206176758, 0.7789999842643738, 0.7480000257492065, 0.7570000290870667, 0.7960000038146973, 0.7749999761581421, 0.7946666479110718, 0.7953333258628845, 0.8063333630561829, 0.8076666593551636, 0.8016666769981384, 0.8143333196640015, 0.8163333535194397, 0.8190000057220459, 0.8149999976158142, 0.8209999799728394, 0.8326666951179504, 0.8323333263397217, 0.8339999914169312, 0.8186666369438171, 0.831333339214325, 0.824999988079071, 0.8323333263397217, 0.8309999704360962]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 4, 3, 5, 3, 5, 4], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 0, 6, 3, 0, 2, 0], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 9, 3, 2], [0, 6, 0, 6, 0], [56, 60, 29], [1], [0], [4], [0]], "fitness": -0.19742856919765472, "mapping_values": [1, 12, 7, 5, 2, 13, 8, 5, 2, 11, 7, 4, 3, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.math.square(alpha))), tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.negative(grad), alpha)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(grad, tf.math.add(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.5090651512145996, 2.211585760116577, 2.299499034881592, 2.303744316101074, 2.297948122024536, 2.252094030380249, 2.3042402267456055, 2.303678512573242, 2.3023054599761963, 2.410207509994507], "accuracy": [0.18214239180088043, 0.1748778223991394, 0.11596883088350296, 0.09576013684272766, 0.11478008329868317, 0.14634791016578674, 0.10289261490106583, 0.09457138925790787, 0.10342095047235489, 0.19138818979263306], "val_loss": [2.2920167446136475, 2.282268762588501, 2.302980422973633, 2.301642894744873, 2.245131254196167, 2.303927183151245, 2.30283260345459, 2.3025078773498535, 2.291717529296875, 2.3044512271881104], "val_accuracy": [0.15000000596046448, 0.1899999976158142, 0.09866666793823242, 0.15333333611488342, 0.19466666877269745, 0.09866666793823242, 0.10066666454076767, 0.09866666793823242, 0.1733333319425583, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 3, 2, 3, 5], [0, 0, 1, 0, 2], [86, 39, 27], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 1, 8, 3, 0, 2, 1, 3], [3, 0, 3, 1, 0, 4, 0], [16, 1, 59], [0, 0, 1, 1, 0, 1, 0, 1], [9, 3, 0, 2, 3, 2, 1], [0, 6, 6, 6, 0], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 16, 9, 7, 3, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.sqrt(grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), tf.math.negative(tf.math.add(tf.math.subtract(alpha, tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad)), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 9, 4, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1], [0, 2, 0, 2, 6, 0, 6, 8, 6, 3, 1, 3, 0, 8, 6, 9, 1, 6, 4, 5, 8, 6, 8, 3, 6, 1, 6, 3, 7, 2, 7, 3, 6, 0, 8, 0, 4, 8, 6, 0, 3, 4, 7, 2, 0, 1, 8, 6, 9], [0, 6, 1, 6, 0, 1, 4, 1, 1, 4, 5, 0, 3, 1, 0, 2, 2, 1, 0, 5, 6, 3, 1, 6, 1, 7, 1, 0, 2, 5], [0, 22, 72, 74, 10, 21, 50, 58], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 11, 7, 4, 2, 79, 49, 30, 8, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.add(grad, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(grad)), tf.math.divide_no_nan(tf.math.sqrt(alpha), tf.math.divide_no_nan(grad, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), tf.math.multiply(alpha, tf.math.subtract(tf.math.multiply(tf.math.negative(grad), tf.math.sqrt(tf.math.divide_no_nan(alpha, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.divide_no_nan(tf.math.pow(tf.math.square(tf.math.sqrt(tf.math.divide_no_nan(alpha, grad))), tf.math.sqrt(tf.math.multiply(tf.math.divide_no_nan(tf.math.subtract(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(grad, tf.math.add(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.multiply(tf.math.divide_no_nan(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.sqrt(beta)))))), tf.math.negative(beta)), tf.math.pow(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.multiply(grad, grad)))))), tf.math.pow(tf.math.add(sigma, alpha), tf.math.add(tf.math.negative(grad), alpha))), grad), tf.math.subtract(alpha, tf.math.sqrt(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))), tf.math.divide_no_nan(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), beta)), grad))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.12495046854019165, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 87, 39], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 5, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 0, 2, 5, 2, 7], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.09114285558462143, "mapping_values": [1, 6, 3, 3, 1, 2, 1, 1, 0, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, alpha))), tf.math.add(grad, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.310396432876587, 2.309138059616089, 2.3093271255493164, 2.3096697330474854, 2.3094496726989746, 2.310865640640259], "accuracy": [0.09153348207473755, 0.09945846349000931, 0.09430722147226334, 0.08968432247638702, 0.09417514503002167, 0.0870426595211029], "val_loss": [2.3084354400634766, 2.3084354400634766, 2.3084354400634766, 2.3084354400634766, 2.3084354400634766, 2.3084354400634766], "val_accuracy": [0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179]}}]