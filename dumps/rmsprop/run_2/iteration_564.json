[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8351428508758545, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2132458686828613, 1.6081289052963257, 1.1323215961456299, 0.997239351272583, 0.8811713457107544, 0.8019410967826843, 0.7894517183303833, 0.7471886873245239, 0.7345733642578125, 0.7034893035888672, 0.691087543964386, 0.6642942428588867, 0.6487798094749451, 0.6587280035018921, 0.6187896728515625, 0.5939931273460388, 0.5858480334281921, 0.5908606052398682, 0.5802910923957825, 0.5581383109092712, 0.5533149838447571, 0.5446490049362183, 0.5421055555343628, 0.5364001393318176, 0.5090208053588867, 0.50864577293396, 0.5148226022720337, 0.5008558034896851, 0.4915350079536438, 0.48605021834373474, 0.47812172770500183, 0.48307111859321594, 0.4784051775932312, 0.46312215924263, 0.45504796504974365, 0.45628610253334045, 0.4516341984272003, 0.4404563307762146, 0.44305065274238586, 0.438703715801239, 0.4330161213874817, 0.4237877130508423, 0.4132959544658661, 0.4134555459022522, 0.4173060953617096, 0.41067391633987427, 0.4097057580947876, 0.40225955843925476, 0.39415472745895386, 0.39792078733444214], "accuracy": [0.2677321434020996, 0.5052172541618347, 0.6089023947715759, 0.6515651941299438, 0.6791704893112183, 0.7092854380607605, 0.7054550051689148, 0.7263241410255432, 0.7309470176696777, 0.7343811988830566, 0.7489103078842163, 0.7549861073493958, 0.7572315335273743, 0.7567031979560852, 0.7726852297782898, 0.7799497842788696, 0.7821952104568481, 0.7750627398490906, 0.7848368883132935, 0.7876105904579163, 0.7947431206703186, 0.7955356240272522, 0.7985734939575195, 0.7975168228149414, 0.8127063512802124, 0.8123101592063904, 0.8074230551719666, 0.8148196935653687, 0.8212917447090149, 0.8224804997444153, 0.8211596608161926, 0.8240655064582825, 0.8228767514228821, 0.8315942287445068, 0.8389908671379089, 0.8343679904937744, 0.832650899887085, 0.8379341959953308, 0.8360850811004639, 0.8408400416374207, 0.8396512866020203, 0.8482366800308228, 0.8461233377456665, 0.8498216867446899, 0.848368763923645, 0.8500858545303345, 0.8506141901016235, 0.8543124794960022, 0.8539162874221802, 0.850350022315979], "val_loss": [1.933977484703064, 1.111674189567566, 1.0068150758743286, 0.7794216871261597, 0.7456896901130676, 0.7456124424934387, 0.711463212966919, 0.6921828389167786, 0.6409950852394104, 0.6236472129821777, 0.6421205401420593, 0.6163250207901001, 0.5804613828659058, 0.5747878551483154, 0.5826310515403748, 0.553544282913208, 0.5489975214004517, 0.5323202013969421, 0.5329094529151917, 0.5277723073959351, 0.5228352546691895, 0.5437185168266296, 0.48797038197517395, 0.49521517753601074, 0.5014824867248535, 0.47846585512161255, 0.4953349530696869, 0.4855899214744568, 0.4823157489299774, 0.46501174569129944, 0.45791271328926086, 0.4598524570465088, 0.45978960394859314, 0.4478769898414612, 0.44651737809181213, 0.44825878739356995, 0.44897669553756714, 0.4445616900920868, 0.44378799200057983, 0.4557448625564575, 0.42891621589660645, 0.43482735753059387, 0.43359172344207764, 0.43308261036872864, 0.4248077869415283, 0.4240865409374237, 0.4207819402217865, 0.42753636837005615, 0.42221295833587646, 0.4183473289012909], "val_accuracy": [0.5633333325386047, 0.6506666541099548, 0.6503333449363708, 0.7260000109672546, 0.7196666598320007, 0.7200000286102295, 0.7246666550636292, 0.7356666922569275, 0.765666663646698, 0.7586666941642761, 0.7516666650772095, 0.7586666941642761, 0.7870000004768372, 0.7886666655540466, 0.7703333497047424, 0.7896666526794434, 0.7866666913032532, 0.8056666851043701, 0.7946666479110718, 0.8056666851043701, 0.8046666383743286, 0.7926666736602783, 0.8203333616256714, 0.8113333582878113, 0.8153333067893982, 0.8243333101272583, 0.8159999847412109, 0.8113333582878113, 0.8199999928474426, 0.8273333311080933, 0.8316666483879089, 0.8266666531562805, 0.8266666531562805, 0.8326666951179504, 0.8349999785423279, 0.8323333263397217, 0.8366666436195374, 0.8366666436195374, 0.8320000171661377, 0.828000009059906, 0.8379999995231628, 0.8389999866485596, 0.8370000123977661, 0.8410000205039978, 0.846666693687439, 0.8460000157356262, 0.843666672706604, 0.8433333039283752, 0.8426666855812073, 0.8460000157356262]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 4, 2, 3, 5, 2, 2, 4, 9, 8, 6, 6, 7], [0, 2, 1, 0, 2, 3, 3, 2, 3, 0], [0, 39, 39, 93], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [0, 2, 0, 6, 7, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 7, 5, 4, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.11599999666213989, "mapping_values": [1, 24, 14, 10, 4, 7, 4, 3, 1, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(tf.math.add(tf.math.pow(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.divide_no_nan(grad, grad)))), tf.math.add(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [80374919069696.0, 92669850157056.0, 93600792707072.0, 100178375737344.0, 90825555968000.0, 95965834903552.0], "accuracy": [0.10698718577623367, 0.1022322028875351, 0.11068551242351532, 0.10857218503952026, 0.109232597053051, 0.11345925182104111], "val_loss": [86692253925376.0, 86692253925376.0, 86692253925376.0, 86692253925376.0, 86692253925376.0, 86692253925376.0], "val_accuracy": [0.11366666853427887, 0.11366666853427887, 0.11366666853427887, 0.11366666853427887, 0.11366666853427887, 0.11366666853427887]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [0, 2, 3, 2, 3, 5, 4, 2, 3, 1, 8, 3, 9], [0, 0, 1, 0, 2, 2, 0, 2, 3], [0, 39, 39, 63, 59], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [1, 2, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 9, 0, 2, 5, 2, 2], [0, 6, 1, 2, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 13, 9, 5, 10, 6, 4, 0, 2, 2, 0, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.square(alpha)), tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(tf.math.multiply(grad, tf.math.subtract(tf.math.sqrt(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, grad))), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(alpha), tf.math.divide_no_nan(tf.math.multiply(beta, grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 2, 3, 5, 7, 0], [0, 2, 1, 0, 2, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [8, 2, 0, 6, 3, 8, 2], [5, 0, 3, 1, 0], [56, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 2, 3, 2, 5, 2, 1], [0, 6, 1, 4, 0, 6], [0, 86], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 8, 6, 2, 12, 7, 5, 2, 13, 7, 6, 2, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.square(alpha))), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(grad))), grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.negative(grad), tf.math.divide_no_nan(tf.math.multiply(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(grad, alpha))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.math.square(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(alpha, grad)), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 2, 3, 6, 1, 5], [0, 2, 0, 0, 2], [3, 39, 39], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1, 6, 9, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [0, 2, 0, 2, 4, 4, 1], [0, 6, 1, 7, 0, 4], [0, 22], [1], [0], [2], [0]], "fitness": -0.09457142651081085, "mapping_values": [1, 1, 0, 1, 1, 1, 0, 1, 0, 13, 7, 6, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.pow(tf.math.pow(tf.math.subtract(alpha, grad), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), grad)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3104264736175537, 2.3095428943634033, 2.309643507003784, 2.3100156784057617, 2.3098273277282715, 2.3099875450134277], "accuracy": [0.09615638852119446, 0.09417514503002167, 0.09126931428909302, 0.08981640636920929, 0.09113723784685135, 0.09285431355237961], "val_loss": [2.308394193649292, 2.308394193649292, 2.308394193649292, 2.308394193649292, 2.308394193649292, 2.308394193649292], "val_accuracy": [0.08699999749660492, 0.08699999749660492, 0.08699999749660492, 0.08699999749660492, 0.08699999749660492, 0.08699999749660492]}}]