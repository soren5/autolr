[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8342857360839844, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2107362747192383, 1.608705759048462, 1.1387524604797363, 1.0007662773132324, 0.8879206776618958, 0.8099910020828247, 0.7859805226325989, 0.7534199953079224, 0.7094125747680664, 0.6950365900993347, 0.6732971668243408, 0.6708927750587463, 0.6410967707633972, 0.6387744545936584, 0.6196585297584534, 0.6302343010902405, 0.6013413667678833, 0.5875722765922546, 0.5874963998794556, 0.5783143639564514, 0.5752102732658386, 0.5501574873924255, 0.5461612939834595, 0.5429487824440002, 0.531363844871521, 0.5170007348060608, 0.5248749256134033, 0.509255051612854, 0.5035694241523743, 0.5119084715843201], "accuracy": [0.25901466608047485, 0.5062739253044128, 0.599128246307373, 0.6384889483451843, 0.6719059348106384, 0.7059833407402039, 0.709021270275116, 0.7275128960609436, 0.7314753532409668, 0.7409853339195251, 0.7497028112411499, 0.7531369924545288, 0.7625148296356201, 0.7606657147407532, 0.7629110813140869, 0.7627789974212646, 0.7761194109916687, 0.77677983045578, 0.7788931727409363, 0.785629391670227, 0.7873464822769165, 0.7911768555641174, 0.8000264167785645, 0.798309326171875, 0.8067626357078552, 0.806630551815033, 0.8020076751708984, 0.8115176558494568, 0.8127063512802124, 0.8092722296714783], "val_loss": [1.9303433895111084, 1.1015806198120117, 0.9260367155075073, 0.7839812636375427, 0.7581170201301575, 0.7044243216514587, 0.675157368183136, 0.634442150592804, 0.6236921548843384, 0.5950498580932617, 0.6783250570297241, 0.5665472149848938, 0.6050378680229187, 0.5540458559989929, 0.6309351921081543, 0.5934988856315613, 0.5443072319030762, 0.5253628492355347, 0.5186710357666016, 0.5359612703323364, 0.5206380486488342, 0.49237775802612305, 0.49295711517333984, 0.48899227380752563, 0.46765223145484924, 0.4760417342185974, 0.47053223848342896, 0.4811706840991974, 0.47368335723876953, 0.4580084979534149], "val_accuracy": [0.6043333411216736, 0.6466666460037231, 0.6503333449363708, 0.7086666822433472, 0.6976666450500488, 0.7319999933242798, 0.7400000095367432, 0.7580000162124634, 0.7630000114440918, 0.781333327293396, 0.7419999837875366, 0.7836666703224182, 0.7526666522026062, 0.7860000133514404, 0.7573333382606506, 0.7616666555404663, 0.7923333048820496, 0.7983333468437195, 0.8013333082199097, 0.8153333067893982, 0.7866666913032532, 0.815666675567627, 0.8176666498184204, 0.8259999752044678, 0.8276666402816772, 0.8149999976158142, 0.824999988079071, 0.8216666579246521, 0.8193333148956299, 0.8273333311080933]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 7, 1, 2, 3, 5], [1, 3, 1, 0, 2], [86, 39, 39], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 5, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1], [0, 2, 0, 2, 5, 2, 1, 0, 7], [0, 6, 1, 6, 0, 7], [0, 22], [1], [0], [2], [0]], "fitness": -0.10400000214576721, "mapping_values": [1, 10, 5, 5, 1, 4, 2, 2, 0, 15, 9, 6, 2, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), alpha), tf.math.multiply(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha)), grad)), tf.math.negative(tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1768043136.0, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.20195482671260834, 0.10685510188341141, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.0820545697612825e+19, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 2, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 7, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [2, 2, 0, 3, 5, 2, 1], [0, 6, 1, 7, 2], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 12, 7, 5, 2, 11, 6, 5, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.multiply(grad, tf.math.square(alpha))), tf.math.add(grad, beta))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.30366849899292, 2.3025858402252197, 2.3025856018066406, 2.3025856018066406, 2.3025856018066406, 2.3025856018066406, 2.3025858402252197], "accuracy": [0.09800554811954498, 0.09734513610601425, 0.09192973375320435, 0.09126931428909302, 0.0948355570435524, 0.09272222965955734, 0.09298639744520187], "val_loss": [2.3025848865509033, 2.3025848865509033, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025848865509033], "val_accuracy": [0.09866666793823242, 0.10499999672174454, 0.10000000149011612, 0.10000000149011612, 0.10499999672174454, 0.10499999672174454, 0.10499999672174454]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 8, 3, 2, 3, 5], [0, 2, 0, 1, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 4, 3, 8, 2, 2, 0], [2, 0, 3, 1, 3, 4], [43, 1], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 2, 2, 2, 5, 2, 1, 0, 3, 6, 2, 9, 2, 4, 4, 0, 5, 5, 2, 0, 7, 4, 7, 0, 0, 6, 6, 1], [0, 2, 2, 6, 0, 7, 2, 7, 6, 1, 0, 5, 5, 7], [0, 25, 42, 37, 35], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 15, 9, 6, 1, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.pow(tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.negative(grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.303591251373291, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1], [3, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 8, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 5, 7, 2, 5, 2, 1], [0, 6, 1, 1, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.09200000017881393, "mapping_values": [1, 7, 3, 4, 2, 4, 3, 1, 0, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.negative(beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.add(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad), tf.math.add(tf.math.subtract(alpha, alpha), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3112127780914307, 2.3106160163879395, 2.3102123737335205, 2.310504198074341, 2.30853533744812, 2.3100695610046387], "accuracy": [0.09126931428909302, 0.08585391938686371, 0.08598599582910538, 0.09232597798109055, 0.09496764093637466, 0.09298639744520187], "val_loss": [2.3080246448516846, 2.3080246448516846, 2.3080246448516846, 2.3080246448516846, 2.3080246448516846, 2.3080246448516846], "val_accuracy": [0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288]}}]