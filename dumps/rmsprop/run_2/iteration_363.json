[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8197143077850342, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2089219093322754, 1.6015325784683228, 1.1338202953338623, 0.9738752841949463, 0.8948622941970825, 0.8556225895881653, 0.7988566756248474, 0.766083300113678, 0.72491455078125, 0.7117327451705933, 0.6937740445137024, 0.7052985429763794, 0.679387092590332, 0.6523324847221375, 0.651335597038269, 0.6190484762191772, 0.6175436973571777, 0.600618302822113, 0.6006112098693848, 0.5985400676727295, 0.5711838006973267, 0.5754319429397583, 0.5609437823295593, 0.5509806871414185, 0.5456399321556091, 0.5272100567817688, 0.5348336696624756, 0.5272117853164673, 0.5204727053642273, 0.5078411102294922, 0.5106195211410522, 0.5178824067115784, 0.4972548484802246, 0.48999571800231934, 0.47517287731170654, 0.4826222360134125, 0.4777277410030365, 0.47193217277526855, 0.47050896286964417, 0.4540945589542389], "accuracy": [0.266939640045166, 0.505349338054657, 0.6019020080566406, 0.6472064256668091, 0.6818121671676636, 0.6870955228805542, 0.7041342258453369, 0.7136441469192505, 0.7271166443824768, 0.7387399077415466, 0.7430986762046814, 0.7314753532409668, 0.7449478507041931, 0.7549861073493958, 0.7537974119186401, 0.7642319202423096, 0.770439863204956, 0.7712323069572449, 0.7734777331352234, 0.7753269076347351, 0.7909126877784729, 0.7840443849563599, 0.7947431206703186, 0.7950072884559631, 0.7936864495277405, 0.804649293422699, 0.7988376617431641, 0.8058380484580994, 0.8078193068504333, 0.8136309385299683, 0.807158887386322, 0.8070268034934998, 0.8157442808151245, 0.8182538747787476, 0.8212917447090149, 0.8206313848495483, 0.8187822103500366, 0.8256505131721497, 0.8249900937080383, 0.8285563588142395], "val_loss": [1.9208440780639648, 1.0952682495117188, 0.8668972849845886, 0.8278800249099731, 0.7173041701316833, 0.7003600001335144, 0.7154026627540588, 0.6586787104606628, 0.6575357913970947, 0.6184723973274231, 0.634392499923706, 0.5733480453491211, 0.5515437126159668, 0.5707525014877319, 0.5446152091026306, 0.527381956577301, 0.5171581506729126, 0.5290560126304626, 0.5285884737968445, 0.4984085261821747, 0.5195873379707336, 0.5018383860588074, 0.48646876215934753, 0.4761863946914673, 0.4931410253047943, 0.47579818964004517, 0.46548664569854736, 0.4585624039173126, 0.46037963032722473, 0.4596810042858124, 0.5053809285163879, 0.45041486620903015, 0.45469874143600464, 0.43245968222618103, 0.4352167546749115, 0.4690757691860199, 0.4386550188064575, 0.42199286818504333, 0.41611042618751526, 0.42246219515800476], "val_accuracy": [0.5586666464805603, 0.6523333191871643, 0.6980000138282776, 0.6899999976158142, 0.7333333492279053, 0.7426666617393494, 0.731333315372467, 0.7416666746139526, 0.7416666746139526, 0.7573333382606506, 0.7369999885559082, 0.7873333096504211, 0.7910000085830688, 0.7816666960716248, 0.7923333048820496, 0.8086666464805603, 0.8073333501815796, 0.781333327293396, 0.7986666560173035, 0.8119999766349792, 0.79666668176651, 0.8176666498184204, 0.8133333325386047, 0.8286666870117188, 0.8113333582878113, 0.8253333568572998, 0.8316666483879089, 0.8299999833106995, 0.8379999995231628, 0.831333339214325, 0.8003333210945129, 0.8263333439826965, 0.8203333616256714, 0.8389999866485596, 0.8429999947547913, 0.8256666660308838, 0.8356666564941406, 0.8389999866485596, 0.8416666388511658, 0.8423333168029785]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], [0, 1, 3, 2, 3, 5, 7, 9, 0, 3, 2, 5], [0, 2, 1, 0, 2, 0, 2], [0, 39, 39, 91], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [2, 2, 0, 6, 3, 6, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 12, 7, 4, 8, 4, 4, 1, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.square(alpha))), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.multiply(tf.math.add(grad, tf.math.square(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.divide_no_nan(grad, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), tf.math.square(alpha))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [6.729278564453125, 13.930496215820312, 14.646547317504883, 14.971760749816895, 15.123686790466309, 15.166111946105957], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [13.330111503601074, 14.385510444641113, 14.810051918029785, 15.019449234008789, 15.098380088806152, 15.105223655700684], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 4, 3, 1, 6, 5], [0, 2, 1, 0, 2], [0, 39, 40], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [0, 2, 0, 7, 3, 8, 0, 9, 4, 8, 6, 1, 7, 8, 2, 7, 9, 2, 4, 8, 0, 5, 0, 6, 4, 2, 2, 3, 0, 3, 9, 6, 0, 4, 3], [5, 0, 3, 1, 0, 0, 1, 1, 4, 0, 4, 0, 0, 4, 0, 3, 4, 5], [16, 1, 4, 15, 77, 94, 43, 71, 70, 70], [1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 2, 0, 9, 8, 9, 9], [0, 6, 1, 5, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 53, 35, 18, 10, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(grad), tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.sqrt(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(grad, tf.math.sqrt(alpha)), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.pow(tf.math.sqrt(tf.math.negative(tf.math.square(tf.math.negative(alpha)))), alpha), grad)))), tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.negative(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.multiply(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), grad)), grad)), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 4, 3, 5], [0, 0, 3, 0, 2], [0, 35, 39], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 6, 1, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 0, 9, 5, 2, 1], [0, 6, 1, 3, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.09285714477300644, "mapping_values": [1, 11, 6, 5, 3, 2, 1, 1, 0, 6, 5, 1, 2, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), grad)), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3096179962158203, 2.3108229637145996, 2.3094875812530518, 2.3103830814361572, 2.309889554977417, 2.3101885318756104], "accuracy": [0.09272222965955734, 0.08875974267721176, 0.09166556596755981, 0.09351472556591034, 0.0944393053650856, 0.09668471664190292], "val_loss": [2.308070421218872, 2.308070421218872, 2.308070421218872, 2.308070421218872, 2.308070421218872, 2.308070421218872], "val_accuracy": [0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 3, 3, 2, 3, 5], [0, 2, 1, 0, 3], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 6, 8, 2], [2, 0, 3, 1, 0], [16, 1], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 8, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.08828571438789368, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.310816526412964, 2.3102641105651855, 2.3103768825531006, 2.310234308242798, 2.3094334602355957, 2.3098838329315186], "accuracy": [0.09496764093637466, 0.0936468094587326, 0.09179764986038208, 0.09470347315073013, 0.0944393053650856, 0.09496764093637466], "val_loss": [2.3081488609313965, 2.3081488609313965, 2.3081488609313965, 2.3081488609313965, 2.3081488609313965, 2.3081488609313965], "val_accuracy": [0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288]}}]