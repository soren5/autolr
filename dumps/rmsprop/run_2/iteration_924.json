[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8142856955528259, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2102744579315186, 1.6055747270584106, 1.1545130014419556, 0.9838910102844238, 0.891891360282898, 0.8218907713890076, 0.7781185507774353, 0.7434059977531433, 0.7413438558578491, 0.7028735280036926, 0.6794320940971375, 0.6940009593963623, 0.6584292650222778, 0.6277151107788086, 0.6391386985778809, 0.6212314367294312, 0.6084531545639038, 0.5861011743545532, 0.5895481109619141, 0.579541802406311, 0.5629427433013916, 0.5628102421760559, 0.5592717528343201, 0.5508201122283936, 0.5394769906997681, 0.5399582386016846, 0.52634596824646, 0.5185651183128357, 0.5193167924880981, 0.502684473991394, 0.5047949552536011, 0.49674859642982483, 0.48987871408462524, 0.484180748462677, 0.48201867938041687, 0.4756995141506195, 0.4685652256011963, 0.46978870034217834, 0.4573196470737457, 0.4570983648300171, 0.45233553647994995, 0.4476761817932129, 0.44726645946502686, 0.4411630630493164, 0.4445614516735077, 0.4320022463798523, 0.4347127377986908, 0.4226512312889099, 0.42512330412864685, 0.41436851024627686, 0.4227999448776245, 0.40501853823661804, 0.4059995412826538, 0.4053231179714203, 0.3999488353729248, 0.392876535654068, 0.3911750316619873, 0.39357736706733704, 0.39579319953918457, 0.39061346650123596, 0.37648847699165344, 0.38091498613357544, 0.364858478307724, 0.38325947523117065, 0.35871124267578125, 0.3674985468387604, 0.3822423219680786, 0.36141112446784973], "accuracy": [0.27539294958114624, 0.5054814219474792, 0.6007132530212402, 0.6446968913078308, 0.6787742972373962, 0.6991150379180908, 0.7190595865249634, 0.7232862114906311, 0.7273808121681213, 0.7430986762046814, 0.748778223991394, 0.7404569983482361, 0.752740740776062, 0.7671377658843994, 0.7600052952766418, 0.7705719470977783, 0.7728173136711121, 0.7804781198501587, 0.7827235460281372, 0.7862898111343384, 0.7928939461708069, 0.7942147850990295, 0.7936864495277405, 0.7936864495277405, 0.7993659973144531, 0.7993659973144531, 0.804649293422699, 0.8062343001365662, 0.8057059645652771, 0.8150838613510132, 0.8123101592063904, 0.8204993009567261, 0.8208954930305481, 0.824329674243927, 0.8257825970649719, 0.8261788487434387, 0.830669641494751, 0.828820526599884, 0.8317263126373291, 0.8310658931732178, 0.8376700282096863, 0.8359529972076416, 0.8400475382804871, 0.8408400416374207, 0.8356888294219971, 0.8445383906364441, 0.837141752243042, 0.8479725122451782, 0.845859169960022, 0.8500858545303345, 0.8457271456718445, 0.8544445633888245, 0.8524633646011353, 0.8507462739944458, 0.8562937378883362, 0.8525954484939575, 0.8593316674232483, 0.8549728989601135, 0.8561616539955139, 0.8548408150672913, 0.8638224601745605, 0.8621054291725159, 0.8659358024597168, 0.8618412613868713, 0.8685774803161621, 0.8676528930664062, 0.8590674996376038, 0.8687095642089844], "val_loss": [1.9221187829971313, 1.1421103477478027, 1.0013575553894043, 0.847780168056488, 0.8132867813110352, 0.6948862075805664, 0.6735584735870361, 0.7011431455612183, 0.6292317509651184, 0.6481411457061768, 0.6309643983840942, 0.6055616140365601, 0.5859141945838928, 0.588416576385498, 0.6183656454086304, 0.5797848105430603, 0.5624287128448486, 0.5513396263122559, 0.5412778258323669, 0.5429961681365967, 0.5376882553100586, 0.5304175019264221, 0.5103887915611267, 0.5099771618843079, 0.5290671586990356, 0.5132866501808167, 0.4879913032054901, 0.5206026434898376, 0.49590951204299927, 0.47757938504219055, 0.47578760981559753, 0.4780310094356537, 0.45675015449523926, 0.4627763628959656, 0.48094162344932556, 0.4521498680114746, 0.476088285446167, 0.45456477999687195, 0.44239571690559387, 0.44816771149635315, 0.4347878098487854, 0.44500628113746643, 0.438277006149292, 0.4420410990715027, 0.43211066722869873, 0.42780327796936035, 0.4546239376068115, 0.4207148849964142, 0.43387293815612793, 0.4337713122367859, 0.41746819019317627, 0.41715767979621887, 0.42419758439064026, 0.40914931893348694, 0.4109615981578827, 0.4055033326148987, 0.4368188977241516, 0.4247315227985382, 0.41510358452796936, 0.41580864787101746, 0.4030494689941406, 0.40171146392822266, 0.40270426869392395, 0.4015863537788391, 0.39375969767570496, 0.4130436182022095, 0.3979976773262024, 0.4009014070034027], "val_accuracy": [0.5360000133514404, 0.640666663646698, 0.6306666731834412, 0.671999990940094, 0.6863333582878113, 0.7400000095367432, 0.749666690826416, 0.7416666746139526, 0.7739999890327454, 0.7513333559036255, 0.7616666555404663, 0.7733333110809326, 0.7726666927337646, 0.7803333401679993, 0.765999972820282, 0.7826666831970215, 0.7919999957084656, 0.7990000247955322, 0.7889999747276306, 0.7910000085830688, 0.8019999861717224, 0.800000011920929, 0.8100000023841858, 0.8043333292007446, 0.7963333129882812, 0.8113333582878113, 0.8216666579246521, 0.7996666431427002, 0.8050000071525574, 0.8193333148956299, 0.8286666870117188, 0.8246666789054871, 0.8316666483879089, 0.82833331823349, 0.8216666579246521, 0.8366666436195374, 0.8196666836738586, 0.8333333134651184, 0.8346666693687439, 0.8429999947547913, 0.8393333554267883, 0.8323333263397217, 0.8386666774749756, 0.8456666469573975, 0.8416666388511658, 0.840666651725769, 0.8233333230018616, 0.8489999771118164, 0.8426666855812073, 0.8453333377838135, 0.8536666631698608, 0.8493333458900452, 0.8473333120346069, 0.8510000109672546, 0.8526666760444641, 0.8543333411216736, 0.8389999866485596, 0.8426666855812073, 0.8500000238418579, 0.8533333539962769, 0.856333315372467, 0.8553333282470703, 0.859666645526886, 0.8579999804496765, 0.859666645526886, 0.8476666808128357, 0.8519999980926514, 0.8550000190734863]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1], [0, 2, 3, 1, 3, 5, 8], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 0, 6, 3, 4, 2], [4, 0, 1, 1, 0], [16, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 5, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 2, 9, 5, 4, 1, 3, 2, 1, 1, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(grad), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), alpha), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [7, 2, 3, 0, 3, 5, 1, 9, 6, 2, 0], [2, 2, 1, 0, 2, 3, 0], [0, 39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 4], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 11, 7, 3, 10, 6, 4, 1, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(grad, tf.math.square(tf.math.subtract(grad, tf.constant(0.0, shape=shape, dtype=tf.float32))))), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(grad, tf.math.negative(grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(beta, tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad)), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 2, 3, 5, 6, 2, 2, 3, 8, 6, 6, 4, 7, 5], [0, 2, 2, 0, 2, 0, 3, 0, 2, 2, 1, 0, 3], [82, 39, 39, 86, 94], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [0, 2, 0, 6, 4, 8, 2, 7, 8, 6, 1, 7, 0, 2, 7, 6, 4, 6, 9, 0, 1], [2, 0, 3, 1, 0, 4, 3, 5, 4, 2, 1, 4, 5, 1], [16, 1, 73], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [1, 2, 0, 2, 5, 2, 1, 8, 8], [5, 6, 1, 6, 3, 3], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 29, 16, 13, 5, 35, 21, 14, 3, 15, 9, 6, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.square(tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.math.multiply(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.divide_no_nan(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.divide_no_nan(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), grad))))), tf.math.pow(grad, tf.math.add(tf.math.square(alpha), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.pow(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), alpha), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(grad, tf.math.negative(tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.pow(tf.math.divide_no_nan(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), grad), tf.math.negative(grad)), grad), tf.math.subtract(beta, alpha)), grad))), grad), alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(grad), tf.math.add(tf.math.subtract(tf.math.sqrt(grad), alpha), tf.math.sqrt(grad)))), sigma), sigma), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 7], [0, 2, 2, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 9, 2, 5, 2, 1, 3], [0, 3, 1, 6, 0], [0, 85, 36], [1], [0], [2], [0]], "fitness": -0.0908571407198906, "mapping_values": [1, 1, 0, 1, 1, 10, 6, 4, 1, 13, 8, 5, 3, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.math.subtract(tf.math.multiply(alpha, grad), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.310192346572876, 2.3094491958618164, 2.310586929321289, 2.310271978378296, 2.3110899925231934, 2.309156656265259], "accuracy": [0.08981640636920929, 0.09800554811954498, 0.08492933213710785, 0.08942015469074249, 0.08994849026203156, 0.09655263274908066], "val_loss": [2.308974027633667, 2.308974027633667, 2.308974027633667, 2.308974027633667, 2.308974027633667, 2.308974027633667], "val_accuracy": [0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918]}}]