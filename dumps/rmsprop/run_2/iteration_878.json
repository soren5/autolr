[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8222857117652893, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2104909420013428, 1.5992368459701538, 1.1260919570922852, 0.9842085242271423, 0.8705582022666931, 0.8257935047149658, 0.7574328184127808, 0.7681428790092468, 0.7191792726516724, 0.6812817454338074, 0.6850065588951111, 0.6490495800971985, 0.6625588536262512, 0.6187462210655212, 0.6104108691215515, 0.6119651198387146, 0.5714004039764404, 0.5797505974769592, 0.5580142736434937, 0.5780095458030701, 0.5627097487449646, 0.5431879758834839, 0.5398858189582825, 0.5332426428794861, 0.5219200849533081, 0.5057840347290039, 0.49819543957710266, 0.5061619281768799, 0.48925602436065674], "accuracy": [0.2693171203136444, 0.5066701769828796, 0.6016378402709961, 0.64667809009552, 0.687491774559021, 0.69673752784729, 0.7259278893470764, 0.7094175219535828, 0.7317395210266113, 0.748778223991394, 0.7479857206344604, 0.7607977986335754, 0.7495707273483276, 0.7700436115264893, 0.7713643908500671, 0.772288978099823, 0.7887993454933167, 0.7840443849563599, 0.7913089394569397, 0.7804781198501587, 0.7874785661697388, 0.7988376617431641, 0.7940827012062073, 0.8062343001365662, 0.8094043135643005, 0.8145555257797241, 0.8161405324935913, 0.8129705190658569, 0.8212917447090149], "val_loss": [1.917863130569458, 1.0627961158752441, 0.9005861878395081, 0.7575122117996216, 0.6861770749092102, 0.6510124802589417, 0.6507011651992798, 0.6013359427452087, 0.6281382441520691, 0.5758056044578552, 0.5663784742355347, 0.577235996723175, 0.539498507976532, 0.5362677574157715, 0.5551972389221191, 0.5202034711837769, 0.5102994441986084, 0.5178605318069458, 0.5008915662765503, 0.4947502315044403, 0.4779031276702881, 0.4777699410915375, 0.48387354612350464, 0.4695013761520386, 0.471243679523468, 0.47674649953842163, 0.48093563318252563, 0.45533525943756104, 0.4474141299724579], "val_accuracy": [0.5396666526794434, 0.6740000247955322, 0.6809999942779541, 0.7179999947547913, 0.7446666955947876, 0.7580000162124634, 0.7433333396911621, 0.7739999890327454, 0.762333333492279, 0.7796666622161865, 0.7866666913032532, 0.7733333110809326, 0.7993333339691162, 0.7990000247955322, 0.7846666574478149, 0.8043333292007446, 0.809333324432373, 0.8146666884422302, 0.8149999976158142, 0.8130000233650208, 0.8309999704360962, 0.8243333101272583, 0.8266666531562805, 0.8353333473205566, 0.8303333520889282, 0.8299999833106995, 0.8259999752044678, 0.8326666951179504, 0.8336666822433472]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 6, 1, 3, 5, 8], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 9, 2], [2, 0, 3, 1, 0], [16, 1], [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 2, 9, 6, 3, 2, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.square(alpha)), tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.11134592443704605, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10499999672174454, 0.10499999672174454, 0.10499999672174454, 0.10499999672174454, 0.10499999672174454, 0.10499999672174454]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 2, 3, 2, 3, 5], [1, 1, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [1, 2, 0, 6, 3, 8, 2], [2, 0, 3, 4, 0], [16, 1], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 7, 2, 5, 9, 1], [5, 6, 1, 0, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 0, 6, 3, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.negative(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: grad, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [29643749376.0, 1.2651817186967863e+28, 32088.544921875, 8181205.0, 2024404224.0, 517247205376.0], "accuracy": [0.13432836532592773, 0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [8.421606766446574e+28, 1205.9097900390625, 306685.8125, 78507680.0, 20097961984.0, 5145078267904.0], "val_accuracy": [0.09933333098888397, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 3], [0, 71, 39], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 8, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 2, 3, 2, 5, 4, 7, 8, 5, 1, 3, 8], [0, 1, 1, 6, 0, 3, 0, 7], [0, 49, 76], [1], [0], [2], [0]], "fitness": -0.09399999678134918, "mapping_values": [1, 11, 6, 5, 2, 2, 1, 1, 0, 20, 12, 8, 3, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.math.square(tf.math.pow(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), alpha)), tf.math.square(tf.math.subtract(grad, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(sigma, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3095076084136963, 2.310012102127075, 2.311368942260742, 2.3095812797546387, 2.3106884956359863, 2.3094050884246826], "accuracy": [0.09113723784685135, 0.09206181764602661, 0.08585391938686371, 0.09113723784685135, 0.09536388516426086, 0.09615638852119446], "val_loss": [2.309359312057495, 2.309359312057495, 2.309359312057495, 2.309359312057495, 2.309359312057495, 2.309359312057495], "val_accuracy": [0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 2, 5, 2, 3, 5, 1], [0, 0, 1, 0, 2], [0, 39, 6], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 0, 5, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [0, 2, 0, 2, 5, 4, 1, 4, 2], [0, 6, 1, 5, 4, 7, 5], [0], [1], [0], [2], [0]], "fitness": -0.09142857044935226, "mapping_values": [1, 12, 7, 5, 3, 8, 5, 3, 1, 16, 9, 7, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.square(alpha), tf.math.subtract(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.square(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(tf.math.square(tf.math.pow(tf.math.subtract(tf.math.pow(grad, alpha), grad), grad)), tf.math.add(grad, grad))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3090193271636963, 2.3105897903442383, 2.3106842041015625, 2.308839797973633, 2.3100383281707764, 2.3088879585266113], "accuracy": [0.09628847241401672, 0.0940430611371994, 0.09008057415485382, 0.09496764093637466, 0.08915598690509796, 0.09325055778026581], "val_loss": [2.308861255645752, 2.308861255645752, 2.308861255645752, 2.308861255645752, 2.308861255645752, 2.308861255645752], "val_accuracy": [0.08766666799783707, 0.08766666799783707, 0.08766666799783707, 0.08766666799783707, 0.08766666799783707, 0.08766666799783707]}}]