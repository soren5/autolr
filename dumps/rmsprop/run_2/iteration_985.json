[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.829714298248291, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2160415649414062, 1.6273369789123535, 1.1575357913970947, 1.0008972883224487, 0.8804792761802673, 0.8346614837646484, 0.8039841055870056, 0.7375785112380981, 0.7343522310256958, 0.7007960677146912, 0.702202558517456, 0.6809098124504089, 0.6464011669158936, 0.6418018341064453, 0.6194913983345032, 0.6152938604354858, 0.6015624403953552, 0.5950530767440796, 0.5680256485939026, 0.5707379579544067, 0.5603315830230713, 0.5481484532356262, 0.5639871954917908, 0.5344244837760925, 0.5238249897956848, 0.5154492259025574, 0.51101154088974, 0.5062749981880188, 0.4919767677783966, 0.4932382106781006, 0.4876841604709625, 0.4838521182537079, 0.48093533515930176, 0.480705201625824, 0.4637971520423889, 0.4690607488155365, 0.4638368785381317, 0.4592311680316925, 0.4571227729320526, 0.4509710967540741, 0.44743892550468445, 0.43621739745140076, 0.4360693097114563, 0.43311065435409546, 0.41928133368492126, 0.4257535934448242, 0.4120575189590454, 0.42438647150993347, 0.41534051299095154, 0.4109169542789459, 0.402739554643631, 0.4046895205974579, 0.40267279744148254], "accuracy": [0.2545238435268402, 0.49768856167793274, 0.5910711884498596, 0.6341302394866943, 0.6783780455589294, 0.696209192276001, 0.7053229212760925, 0.7285695672035217, 0.7279091477394104, 0.7404569983482361, 0.7351737022399902, 0.7504953145980835, 0.7619865536689758, 0.763967752456665, 0.76542067527771, 0.7749306559562683, 0.7794214487075806, 0.7763835787773132, 0.7918372750282288, 0.789988100528717, 0.7884030938148499, 0.7985734939575195, 0.7918372750282288, 0.802271842956543, 0.8063663840293884, 0.8115176558494568, 0.8119139075279236, 0.816008448600769, 0.8170651197433472, 0.8183859586715698, 0.819970965385437, 0.821820080280304, 0.8206313848495483, 0.8210275769233704, 0.8273676037788391, 0.8317263126373291, 0.8274996876716614, 0.8317263126373291, 0.83119797706604, 0.8368775844573975, 0.8372738361358643, 0.8391229510307312, 0.8409721255302429, 0.8457271456718445, 0.8442742228507996, 0.8422929644584656, 0.8502179384231567, 0.8481045961380005, 0.8449346423149109, 0.8486329317092896, 0.859199583530426, 0.8511425256729126, 0.8532558679580688], "val_loss": [1.933312177658081, 1.1227246522903442, 0.9449048042297363, 0.8351306915283203, 0.8371528387069702, 0.7288546562194824, 0.6817901730537415, 0.6586328148841858, 0.632633626461029, 0.6428132057189941, 0.6418223977088928, 0.5847253799438477, 0.5993964672088623, 0.5854548811912537, 0.5709730982780457, 0.5491164922714233, 0.5398716926574707, 0.5377141833305359, 0.519670844078064, 0.5208775401115417, 0.5071992874145508, 0.5216153860092163, 0.5204408764839172, 0.5002356171607971, 0.4872339963912964, 0.4967065751552582, 0.48854419589042664, 0.4981803894042969, 0.46923479437828064, 0.49227604269981384, 0.4699365198612213, 0.45488956570625305, 0.4647478759288788, 0.4530143737792969, 0.44378921389579773, 0.45144757628440857, 0.44834253191947937, 0.44387608766555786, 0.43408215045928955, 0.43426233530044556, 0.43335458636283875, 0.44154834747314453, 0.429286390542984, 0.42835941910743713, 0.4209762513637543, 0.42006462812423706, 0.43473485112190247, 0.4101249873638153, 0.4353998899459839, 0.4129021465778351, 0.4051757752895355, 0.4277198910713196, 0.40981608629226685], "val_accuracy": [0.5073333382606506, 0.6439999938011169, 0.6330000162124634, 0.6790000200271606, 0.6913333535194397, 0.7149999737739563, 0.7386666536331177, 0.7459999918937683, 0.7616666555404663, 0.7630000114440918, 0.7633333206176758, 0.7829999923706055, 0.7720000147819519, 0.7776666879653931, 0.7839999794960022, 0.7933333516120911, 0.8016666769981384, 0.7929999828338623, 0.8009999990463257, 0.8073333501815796, 0.8173333406448364, 0.8063333630561829, 0.8050000071525574, 0.8100000023841858, 0.8183333277702332, 0.8133333325386047, 0.8220000267028809, 0.8166666626930237, 0.8273333311080933, 0.8190000057220459, 0.831333339214325, 0.8323333263397217, 0.8296666741371155, 0.8373333215713501, 0.843999981880188, 0.8356666564941406, 0.8386666774749756, 0.8410000205039978, 0.846666693687439, 0.8506666421890259, 0.8476666808128357, 0.843999981880188, 0.8399999737739563, 0.8510000109672546, 0.8516666889190674, 0.8536666631698608, 0.847000002861023, 0.859666645526886, 0.8399999737739563, 0.8526666760444641, 0.859000027179718, 0.8456666469573975, 0.859666645526886]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [9, 3, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1], [0, 2, 0, 6, 3, 1, 2, 1, 5, 5], [3, 0, 3, 1, 0, 1, 0], [16, 1, 65], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 6, 9, 5, 2, 1], [0, 6, 1, 1, 5], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 17, 10, 7, 3, 11, 7, 4, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(grad), tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, alpha)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.square(alpha), tf.math.square(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(grad, tf.math.subtract(alpha, alpha)))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08532558381557465, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.303469657897949, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}, "mapping_values": [1, 11, 6, 5, 3, 5, 3, 2, 1, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 4, 3, 2, 3, 9], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 3, 3, 2, 0], [16, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 6], [22, 22], [0, 0, 1], [0, 8], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 3, 12, 7, 5, 1, 12, 7, 5, 1, 3, 2, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(grad, grad), tf.math.sqrt(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.square(tf.math.add(grad, tf.math.subtract(alpha, grad))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 78, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 0, 1, 6, 4], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 11, 6, 5, 2, 7, 4, 3, 2, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3060028553009033, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.08757099509239197, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}]