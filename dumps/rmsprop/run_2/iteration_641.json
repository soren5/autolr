[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8240000009536743, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.207902193069458, 1.5958431959152222, 1.1257537603378296, 0.9814257025718689, 0.8762586712837219, 0.8286540508270264, 0.7737448811531067, 0.7546449303627014, 0.7451367378234863, 0.6886835098266602, 0.6960501074790955, 0.6854515075683594, 0.6443622708320618, 0.6404940485954285, 0.6015827655792236, 0.6313411593437195, 0.6155216097831726, 0.5894654393196106, 0.5860626697540283, 0.5695722699165344, 0.5609759092330933, 0.5541773438453674, 0.5497018694877625, 0.5546995997428894, 0.5394896268844604, 0.5262801647186279, 0.5144320726394653, 0.5006943345069885, 0.4996543824672699, 0.5063443779945374, 0.5011791586875916, 0.48047491908073425, 0.49068447947502136, 0.4774203896522522, 0.4780172109603882, 0.48053890466690063, 0.46782466769218445, 0.460504949092865, 0.45964911580085754, 0.45542946457862854, 0.4436798691749573, 0.44269832968711853, 0.44584378600120544, 0.4271330237388611], "accuracy": [0.2728833854198456, 0.5064060091972351, 0.607449471950531, 0.6518293619155884, 0.6903975605964661, 0.6950204968452454, 0.7119271159172058, 0.722757875919342, 0.7201162576675415, 0.7440232634544373, 0.7416457533836365, 0.7466648817062378, 0.7623828053474426, 0.7584202885627747, 0.774798572063446, 0.7601373791694641, 0.7683265209197998, 0.7862898111343384, 0.7800818681716919, 0.7877426743507385, 0.789459764957428, 0.7898560166358948, 0.7954035401344299, 0.7987055778503418, 0.8009510040283203, 0.8059701323509216, 0.8113855719566345, 0.8109893202781677, 0.8168009519577026, 0.8107251524925232, 0.8193105459213257, 0.819442629814148, 0.8161405324935913, 0.824329674243927, 0.82683926820755, 0.8204993009567261, 0.82683926820755, 0.8276317715644836, 0.8348963260650635, 0.835160493850708, 0.835160493850708, 0.8413683772087097, 0.8372738361358643, 0.8424250483512878], "val_loss": [1.9202687740325928, 1.093127965927124, 0.9054405689239502, 0.7845025062561035, 0.8151078224182129, 0.6928622126579285, 0.6580949425697327, 0.6721710562705994, 0.6345376968383789, 0.6825485229492188, 0.5970953106880188, 0.6072699427604675, 0.5602941513061523, 0.5412983894348145, 0.5430885553359985, 0.5334316492080688, 0.535001277923584, 0.5458288788795471, 0.5084704756736755, 0.5105283856391907, 0.5013961791992188, 0.4980951249599457, 0.49608129262924194, 0.4798636734485626, 0.4872364401817322, 0.46975621581077576, 0.48135343194007874, 0.4647601842880249, 0.46872663497924805, 0.452660471200943, 0.4504515528678894, 0.4422259032726288, 0.4297010004520416, 0.4472618103027344, 0.4501507580280304, 0.43303927779197693, 0.444497287273407, 0.42572635412216187, 0.41912704706192017, 0.41163191199302673, 0.4101799428462982, 0.41216763854026794, 0.40153926610946655, 0.4008827805519104], "val_accuracy": [0.5770000219345093, 0.659333348274231, 0.6779999732971191, 0.7086666822433472, 0.6890000104904175, 0.7253333330154419, 0.7523333430290222, 0.7429999709129333, 0.7613333463668823, 0.734000027179718, 0.7753333449363708, 0.765333354473114, 0.7826666831970215, 0.7996666431427002, 0.7860000133514404, 0.7929999828338623, 0.7993333339691162, 0.7703333497047424, 0.8109999895095825, 0.8063333630561829, 0.8169999718666077, 0.8173333406448364, 0.8206666707992554, 0.8273333311080933, 0.8186666369438171, 0.8223333358764648, 0.8259999752044678, 0.82833331823349, 0.8236666917800903, 0.8360000252723694, 0.8383333086967468, 0.8416666388511658, 0.8426666855812073, 0.8403333425521851, 0.8389999866485596, 0.8416666388511658, 0.831333339214325, 0.8476666808128357, 0.8556666374206543, 0.8519999980926514, 0.8556666374206543, 0.8510000109672546, 0.8556666374206543, 0.8556666374206543]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 1, 3, 5, 6, 6, 6], [0, 0, 1, 0, 2, 3, 3, 2], [0, 39, 31], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 1, 6, 3, 8, 2], [2, 0, 3, 0, 0], [16, 1, 71], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 7, 0, 2, 5, 2, 1], [0, 6, 1, 3, 3], [0], [0, 1], [0], [4], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 9, 8, 3, 11, 6, 5, 3, 4, 2, 2, 1, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(alpha), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), grad), grad))), tf.math.divide_no_nan(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(beta, tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08677849918603897, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 5, 5, 3, 5], [0, 0, 1, 1, 2], [0, 79, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 2, 0, 2], [4, 0, 3, 0, 0], [16, 1, 64], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 0, 2, 5, 2, 1, 1, 8, 6, 3, 1, 1, 0, 3, 9, 4, 1, 8, 3, 0, 0, 7, 3, 0, 8, 9, 1, 5, 1, 5, 7, 3], [7, 1, 3, 3, 6, 1, 2, 5, 6, 1, 1, 7, 5, 7, 5, 1, 2, 5], [0, 39], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 2, 12, 7, 5, 3, 51, 33, 18, 2, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(grad), tf.math.divide_no_nan(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.negative(tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(grad), tf.math.add(tf.math.subtract(tf.math.subtract(alpha, tf.math.sqrt(tf.math.divide_no_nan(sigma, tf.math.multiply(tf.math.subtract(sigma, grad), tf.math.subtract(alpha, beta))))), tf.math.negative(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(grad, tf.math.sqrt(tf.math.multiply(grad, tf.math.negative(alpha)))), tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad))))))), grad))), tf.math.subtract(tf.math.square(grad), tf.math.subtract(tf.math.square(tf.math.add(grad, alpha)), tf.math.multiply(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0956280529499054, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [7, 2, 7, 2, 5, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1], [5, 2, 0, 6, 4, 8, 2], [2, 0, 3, 4, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 4, 2, 2, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(grad, alpha), tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.square(grad)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3105969429016113, 2.3115570545196533, 2.3166637420654297, 2.3312692642211914, 2.3724863529205322, 2.4812591075897217, 2.7136409282684326, 3.1864395141601562], "accuracy": [0.08836349099874496, 0.09694888442754745, 0.10051512718200684, 0.09919429570436478, 0.10236428678035736, 0.10170386731624603, 0.09972262382507324, 0.09906221181154251], "val_loss": [2.3088600635528564, 2.309110641479492, 2.310748815536499, 2.3223955631256104, 2.3567347526550293, 2.438075542449951, 2.6173017024993896, 2.978234052658081], "val_accuracy": [0.09433333575725555, 0.0976666659116745, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 0, 6, 4, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [2, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.09857142716646194, "mapping_values": [1, 11, 6, 5, 2, 4, 2, 2, 1, 7, 4, 3, 0, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.add(grad, alpha))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [29417.228515625, 524830146560.0, 9.067471733396603e+18, 7.2799429850852166e+25, NaN, NaN, NaN, NaN], "accuracy": [0.10302469879388809, 0.10289261490106583, 0.1002509593963623, 0.10328886657953262, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1961367.75, 34771308642304.0, 5.793968529698644e+20, 2.3025853633880615, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.10166666656732559, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}]