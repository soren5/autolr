[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8254285454750061, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.210505485534668, 1.6046768426895142, 1.1658810377120972, 0.9696477055549622, 0.9073792099952698, 0.8551374077796936, 0.7881930470466614, 0.7462737560272217, 0.7426161170005798, 0.7334919571876526, 0.6939189434051514, 0.6692107915878296, 0.6615683436393738, 0.6496553421020508, 0.627952516078949, 0.6298325061798096, 0.5949013233184814, 0.5960009694099426, 0.5893844366073608, 0.5691097378730774, 0.5794931054115295, 0.5530734062194824, 0.5498692989349365, 0.5405014753341675, 0.5366795659065247, 0.5200417041778564, 0.5167288780212402, 0.5105292797088623, 0.530276894569397, 0.49624475836753845, 0.4983232021331787, 0.4908456802368164, 0.48122739791870117, 0.4935798645019531, 0.47001177072525024, 0.46421974897384644, 0.46866393089294434, 0.4537045359611511, 0.4588203430175781, 0.43822506070137024, 0.4437132477760315, 0.4346151351928711, 0.44619831442832947, 0.4289710819721222, 0.4212590456008911, 0.4289666414260864, 0.4234220087528229, 0.41821473836898804, 0.4149441719055176, 0.4055064618587494, 0.4093976616859436, 0.40410923957824707, 0.3952028453350067, 0.3926687240600586, 0.3914198577404022], "accuracy": [0.2665433883666992, 0.5182934999465942, 0.5894861817359924, 0.6535464525222778, 0.6754721999168396, 0.6857746839523315, 0.707568347454071, 0.7259278893470764, 0.7174745798110962, 0.7345132827758789, 0.7416457533836365, 0.7530049085617065, 0.7537974119186401, 0.7548540234565735, 0.7658169269561768, 0.7609298825263977, 0.7769119143486023, 0.7777044177055359, 0.7812706232070923, 0.7882710099220276, 0.7808743715286255, 0.7921014428138733, 0.7930260300636292, 0.800290584564209, 0.7993659973144531, 0.8099326491355896, 0.8128384351730347, 0.8125742673873901, 0.8013472557067871, 0.8113855719566345, 0.8153480291366577, 0.8215559124946594, 0.8203672170639038, 0.817461371421814, 0.8239334225654602, 0.8241975903511047, 0.8277638554573059, 0.8297450542449951, 0.8278959393501282, 0.8389908671379089, 0.8378021121025085, 0.8418967127799988, 0.83119797706604, 0.8422929644584656, 0.8445383906364441, 0.8392550349235535, 0.8384625315666199, 0.8455950617790222, 0.8469158411026001, 0.8499537706375122, 0.8508783578872681, 0.8453308939933777, 0.8553691506385803, 0.854708731174469, 0.8582749962806702], "val_loss": [1.9209285974502563, 1.1125317811965942, 0.8633211255073547, 0.8176829218864441, 0.7324385046958923, 0.6952173113822937, 0.6479561924934387, 0.724783182144165, 0.6758127212524414, 0.6357377171516418, 0.5890439748764038, 0.6088892221450806, 0.6357223987579346, 0.5602865219116211, 0.5909731388092041, 0.5381914973258972, 0.5405343174934387, 0.523008406162262, 0.539053738117218, 0.5324666500091553, 0.5653898119926453, 0.5036235451698303, 0.5060628056526184, 0.5200883150100708, 0.48743340373039246, 0.479912668466568, 0.48797938227653503, 0.48148638010025024, 0.47167709469795227, 0.49843478202819824, 0.4734673798084259, 0.45735448598861694, 0.4699552357196808, 0.48197346925735474, 0.4484630823135376, 0.451201468706131, 0.4478396773338318, 0.45712804794311523, 0.4337817430496216, 0.4453558623790741, 0.42766639590263367, 0.42571789026260376, 0.4309956133365631, 0.4244549870491028, 0.42023810744285583, 0.4260562062263489, 0.41739267110824585, 0.4201430678367615, 0.4183322489261627, 0.4137971103191376, 0.4121374785900116, 0.40135458111763, 0.40630221366882324, 0.40097224712371826, 0.41180917620658875], "val_accuracy": [0.6046666502952576, 0.6276666522026062, 0.6993333101272583, 0.6983333230018616, 0.7323333621025085, 0.7243333458900452, 0.7516666650772095, 0.7183333039283752, 0.7413333058357239, 0.7486666440963745, 0.7599999904632568, 0.768666684627533, 0.753000020980835, 0.784333348274231, 0.7710000276565552, 0.7940000295639038, 0.7976666688919067, 0.7979999780654907, 0.7950000166893005, 0.7973333597183228, 0.762666642665863, 0.8183333277702332, 0.8043333292007446, 0.7900000214576721, 0.8153333067893982, 0.8223333358764648, 0.8199999928474426, 0.8096666932106018, 0.8263333439826965, 0.8076666593551636, 0.8193333148956299, 0.8289999961853027, 0.8230000138282776, 0.8149999976158142, 0.828000009059906, 0.828000009059906, 0.8353333473205566, 0.8209999799728394, 0.8356666564941406, 0.8303333520889282, 0.8399999737739563, 0.8399999737739563, 0.8360000252723694, 0.8416666388511658, 0.8386666774749756, 0.8399999737739563, 0.843999981880188, 0.8433333039283752, 0.8396666646003723, 0.8486666679382324, 0.8453333377838135, 0.8476666808128357, 0.8433333039283752, 0.8486666679382324, 0.8453333377838135]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [1, 3, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [0, 2, 3, 6, 3, 5, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [0, 2, 0, 2, 8, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.1388571411371231, "mapping_values": [1, 6, 3, 3, 0, 6, 3, 3, 1, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.multiply(grad, alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad)), alpha)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.9267749786376953, 5.980777740478516, 2.7724852561950684, 2.4257397651672363, 2.403351306915283, 2.4301209449768066], "accuracy": [0.18782195448875427, 0.14621582627296448, 0.10619468986988068, 0.09787346422672272, 0.09259014576673508, 0.10328886657953262], "val_loss": [2.3300061225891113, 2.5588622093200684, 2.364794969558716, 2.4339654445648193, 2.47971510887146, 2.364348888397217], "val_accuracy": [0.1496666669845581, 0.10100000351667404, 0.09866666793823242, 0.09933333098888397, 0.09866666793823242, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 0, 0, 2], [0, 88, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 7, 5, 2, 8], [0, 6, 1, 6, 0], [0, 34], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 3, 10, 6, 4, 1, 11, 7, 4, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), tf.math.sqrt(alpha))), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 2, 6, 3, 8, 2], [2, 0, 0, 1, 0], [16, 1, 16], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [7, 2, 0, 2, 5, 2, 1], [2, 6, 1, 6, 0], [0, 22], [0, 1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 11, 6, 5, 3, 11, 6, 5, 1, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.sqrt(alpha))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(beta), tf.math.add(grad, alpha))), grad), tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [29269.935546875, 519172063232.0, 9.177021574430065e+18, 7.157462599627609e+25, NaN, NaN], "accuracy": [0.1010434553027153, 0.09866596013307571, 0.10130762308835983, 0.10315678268671036, 0.09998679161071777, 0.09998679161071777], "val_loss": [1969007.75, 34906625277952.0, 5.826434909043614e+20, 2.3025853633880615, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10000000149011612, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 3, 3, 5, 4], [0, 2, 1, 0, 2, 0], [0, 39, 39], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 2, 1, 0], [44, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 6, 2, 5, 2, 1, 3, 6, 0, 6, 6, 3, 0, 3, 5, 9], [0, 6, 1, 6, 0, 2, 0, 7, 5, 1, 2], [0, 34, 52, 59], [1], [0], [2], [0]], "fitness": -0.09200000017881393, "mapping_values": [1, 13, 7, 6, 3, 1, 0, 1, 0, 28, 17, 11, 4, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.square(alpha))), tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(tf.math.negative(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.multiply(alpha, grad), tf.math.negative(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))), beta)), tf.math.multiply(tf.math.square(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), grad)), grad), alpha))), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), beta)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.310344696044922, 2.3093409538269043, 2.310901641845703, 2.311128854751587, 2.3091318607330322, 2.3090574741363525], "accuracy": [0.09047681838274002, 0.09338264167308807, 0.09325055778026581, 0.09113723784685135, 0.09113723784685135, 0.09377889335155487], "val_loss": [2.3090407848358154, 2.3090407848358154, 2.3090407848358154, 2.3090407848358154, 2.3090407848358154, 2.3090407848358154], "val_accuracy": [0.08799999952316284, 0.08799999952316284, 0.08799999952316284, 0.08799999952316284, 0.08799999952316284, 0.08799999952316284]}}]