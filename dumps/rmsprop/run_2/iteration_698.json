[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.7940000295639038, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2132580280303955, 1.6143076419830322, 1.1493594646453857, 0.9956722855567932, 0.8930584788322449, 0.8289593458175659, 0.8315290808677673, 0.7684313654899597, 0.7373425364494324, 0.7125357985496521, 0.7040931582450867, 0.6645710468292236, 0.6583050489425659, 0.6351030468940735, 0.6319689750671387, 0.614177942276001, 0.6120386719703674, 0.5932791233062744], "accuracy": [0.2599392533302307, 0.4962356388568878, 0.6009774208068848, 0.644300639629364, 0.6750759482383728, 0.6976621150970459, 0.6939638257026672, 0.7195879220962524, 0.7259278893470764, 0.7321357727050781, 0.7397965788841248, 0.7523444890975952, 0.7559106945991516, 0.7635715007781982, 0.770439863204956, 0.7766477465629578, 0.7753269076347351, 0.7865539789199829], "val_loss": [1.9275935888290405, 1.095552682876587, 0.8725955486297607, 0.7997420430183411, 0.7379937171936035, 0.6878065466880798, 0.6730995178222656, 0.620355486869812, 0.5967243909835815, 0.6295682191848755, 0.5911687612533569, 0.5693434476852417, 0.5363965034484863, 0.5460505485534668, 0.5450659394264221, 0.5324645042419434, 0.5323149561882019, 0.5096408128738403], "val_accuracy": [0.5346666574478149, 0.6596666574478149, 0.6986666917800903, 0.6913333535194397, 0.7256666421890259, 0.7580000162124634, 0.7636666893959045, 0.7763333320617676, 0.781000018119812, 0.7459999918937683, 0.7486666440963745, 0.784333348274231, 0.8096666932106018, 0.7870000004768372, 0.7963333129882812, 0.7983333468437195, 0.7913333177566528, 0.809333324432373]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 2, 3, 2, 3, 5, 1, 5, 4, 0, 6, 1, 4, 3, 2, 2, 2, 3, 5, 1, 7, 3, 4, 5, 1, 2, 4, 0, 6, 1, 8, 0, 2, 6, 0, 2, 2, 2, 2, 8, 4, 2, 8, 3, 3, 6, 4, 5, 6, 7, 2, 3, 6, 5, 1, 2, 2, 1, 7, 4, 3, 4, 9, 0, 4, 5, 0, 3, 0, 7, 1, 3, 0, 0, 9, 6, 6, 1, 5, 8, 4, 0, 0, 8, 5, 6, 4, 3, 5, 2, 3, 7, 6, 0, 7, 2, 9, 2, 8, 3, 4, 0, 6, 7, 5, 0, 4, 5, 2, 1, 5, 8, 4, 4, 5, 9, 3, 8, 5, 3], [2, 2, 1, 0, 2, 0, 0, 0, 1, 2, 3, 1, 3, 3, 0, 2, 0, 2, 1, 0, 3, 1, 0, 0, 0, 1, 3, 3, 2, 3, 2, 3, 2, 0, 3, 3, 3, 2, 0, 0, 1, 1, 0, 1, 3, 3, 2, 2, 1, 2, 2, 1, 1, 1, 3, 2, 3, 2, 2, 3, 2, 1, 0, 2, 0, 2, 2, 3, 0, 0, 1, 1, 3, 2, 2], [0, 45, 39, 50, 4, 1, 39, 44, 11, 35, 24, 40, 88, 84, 40, 4, 39, 74, 8, 72, 42, 51], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [26, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 2, 3, 2, 5, 5, 0], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 195, 120, 75, 22, 12, 7, 5, 2, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 70, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.math.multiply(grad, grad), tf.math.square(alpha)), tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.pow(tf.math.negative(tf.math.divide_no_nan(tf.math.subtract(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(tf.math.add(tf.math.multiply(tf.math.square(tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.pow(tf.math.square(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(tf.math.pow(tf.math.negative(alpha), tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.sqrt(tf.math.negative(grad)), tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.math.add(tf.math.add(tf.math.add(tf.math.sqrt(alpha), tf.math.pow(grad, tf.math.add(tf.math.sqrt(grad), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), tf.math.multiply(grad, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad), tf.math.multiply(tf.math.divide_no_nan(tf.math.pow(tf.math.square(alpha), tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.subtract(tf.math.add(alpha, grad), grad)))), tf.math.add(tf.math.subtract(tf.math.add(tf.math.pow(tf.math.multiply(grad, tf.math.pow(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), grad)), tf.math.negative(grad)), tf.math.pow(grad, grad)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.square(tf.math.negative(grad))), grad)))), grad), tf.math.multiply(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(alpha), alpha)), tf.math.negative(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))))), tf.math.divide_no_nan(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, tf.math.subtract(tf.math.square(tf.math.sqrt(grad)), grad)))), tf.math.pow(tf.math.negative(tf.math.negative(tf.math.sqrt(tf.math.square(tf.math.divide_no_nan(grad, grad))))), alpha)), grad)), grad), tf.math.pow(alpha, tf.math.multiply(alpha, tf.math.square(tf.math.add(tf.math.multiply(alpha, grad), grad))))), tf.math.add(tf.math.divide_no_nan(grad, tf.math.negative(tf.math.add(grad, tf.math.add(grad, grad)))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad)), tf.math.add(tf.math.sqrt(tf.math.multiply(tf.math.pow(tf.math.negative(alpha), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), grad)), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(grad, tf.math.add(tf.math.square(tf.math.negative(tf.math.pow(tf.math.square(tf.math.add(tf.math.subtract(tf.math.square(grad), grad), tf.math.sqrt(tf.math.pow(tf.math.pow(tf.math.square(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), alpha)))), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(alpha, tf.math.sqrt(grad)))))), tf.math.square(tf.math.multiply(grad, grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(beta), tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), grad)), alpha)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 1, 3, 3], [0, 0, 1, 0, 2, 2], [22, 39, 39], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [0, 2, 1, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [0, 1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 6, 6, 3, 6, 3, 3, 1, 8, 5, 3, 1, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(alpha, tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09008057415485382, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0], [0, 2, 3, 2, 3, 5], [0, 2, 1, 3, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 0, 6, 3, 8, 2], [2, 4, 3, 1, 0], [16, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [0, 1], [0], [2], [0]], "fitness": -0.09228571504354477, "mapping_values": [1, 6, 3, 3, 1, 9, 5, 4, 0, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(grad, grad), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.309445381164551, 2.311518907546997, 2.308082103729248, 2.311062812805176, 2.30910062789917, 2.3105432987213135], "accuracy": [0.0944393053650856, 0.08625016361474991, 0.09179764986038208, 0.08519349992275238, 0.0936468094587326, 0.09219389408826828], "val_loss": [2.3089170455932617, 2.3089170455932617, 2.3089170455932617, 2.3089170455932617, 2.3089170455932617, 2.3089170455932617], "val_accuracy": [0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 5, 3, 2, 3, 9], [0, 2, 1, 0, 1], [0, 39, 39], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 0, 6, 8, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 2, 0, 2, 5, 6, 1, 5, 2, 3], [0, 6, 1, 6, 0, 0, 3, 5], [0, 22, 92], [1], [0], [2], [0]], "fitness": -0.0917142853140831, "mapping_values": [1, 2, 1, 1, 1, 1, 0, 1, 0, 18, 10, 8, 3, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.subtract(alpha, tf.math.square(grad))))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), sigma), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3089122772216797, 2.3096508979797363, 2.3084816932678223, 2.310314416885376, 2.3089640140533447, 2.3097240924835205], "accuracy": [0.09549596905708313, 0.09311848133802414, 0.09100515395402908, 0.08942015469074249, 0.09391097724437714, 0.09021265059709549], "val_loss": [2.3085269927978516, 2.3085269927978516, 2.3085269927978516, 2.3085269927978516, 2.3085269927978516, 2.3085269927978516], "val_accuracy": [0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393]}}]