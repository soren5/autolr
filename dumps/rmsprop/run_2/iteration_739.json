[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8037142753601074, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2149453163146973, 1.6183830499649048, 1.1491433382034302, 0.9936237335205078, 0.8830340504646301, 0.8505569100379944, 0.7843511700630188, 0.7714729309082031, 0.7323716282844543, 0.7233680486679077, 0.6899250745773315, 0.6721370220184326, 0.6485386490821838, 0.6356531977653503, 0.6236144304275513, 0.6084804534912109, 0.6024132370948792, 0.5808963179588318, 0.5721996426582336, 0.5727870464324951, 0.5599909424781799, 0.5425317287445068, 0.5588098168373108, 0.5435945987701416, 0.5316987037658691, 0.5185105204582214, 0.5152843594551086, 0.5138599276542664, 0.5060651898384094, 0.4969685971736908, 0.49895432591438293, 0.4781777560710907, 0.4783567488193512, 0.465883731842041, 0.4683796167373657, 0.46770134568214417, 0.4568707346916199, 0.4614868462085724], "accuracy": [0.2631092369556427, 0.5012547969818115, 0.6017699241638184, 0.6365077495574951, 0.6812838315963745, 0.6881521344184875, 0.7100779414176941, 0.7098137736320496, 0.7243428826332092, 0.7322678565979004, 0.7405890822410583, 0.7458723783493042, 0.7523444890975952, 0.7630431652069092, 0.7668735980987549, 0.7725531458854675, 0.7737419009208679, 0.7792893648147583, 0.7860256433486938, 0.7881389260292053, 0.7922335267066956, 0.7965922355651855, 0.7864218950271606, 0.7956677079200745, 0.800290584564209, 0.804649293422699, 0.8024039268493652, 0.8103289008140564, 0.8088759779930115, 0.8099326491355896, 0.8123101592063904, 0.8232730031013489, 0.8227446675300598, 0.8264430165290833, 0.8296129703521729, 0.8274996876716614, 0.828820526599884, 0.8274996876716614], "val_loss": [1.9360257387161255, 1.1419429779052734, 0.89139324426651, 0.7919982075691223, 0.7197480201721191, 0.6978943943977356, 0.6682916879653931, 0.6276557445526123, 0.654891848564148, 0.6311749815940857, 0.5837341547012329, 0.5843958854675293, 0.5948213338851929, 0.5549507141113281, 0.5478302240371704, 0.5394341945648193, 0.53411865234375, 0.5583714246749878, 0.516396701335907, 0.5167561769485474, 0.4938957393169403, 0.49961018562316895, 0.5041443705558777, 0.49270182847976685, 0.4808714985847473, 0.49954092502593994, 0.4798220098018646, 0.477180540561676, 0.4577473998069763, 0.5058450698852539, 0.4548667371273041, 0.45315250754356384, 0.4532477557659149, 0.4674408435821533, 0.4500802755355835, 0.4535367786884308, 0.4423487186431885, 0.4325645864009857], "val_accuracy": [0.46299999952316284, 0.6166666746139526, 0.6776666641235352, 0.6976666450500488, 0.7350000143051147, 0.737333357334137, 0.7476666569709778, 0.762333333492279, 0.7396666407585144, 0.749666690826416, 0.7743333578109741, 0.7716666460037231, 0.778333306312561, 0.7986666560173035, 0.7929999828338623, 0.7940000295639038, 0.7906666398048401, 0.7820000052452087, 0.8046666383743286, 0.8023333549499512, 0.8153333067893982, 0.8146666884422302, 0.8016666769981384, 0.8196666836738586, 0.8243333101272583, 0.7960000038146973, 0.815666675567627, 0.8166666626930237, 0.8289999961853027, 0.8046666383743286, 0.8333333134651184, 0.8360000252723694, 0.8386666774749756, 0.8190000057220459, 0.8286666870117188, 0.8299999833106995, 0.8343333601951599, 0.8326666951179504]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 3, 3, 2, 3, 2, 8, 2, 6, 9], [0, 1, 1, 0, 0, 0, 2], [14, 39, 39, 19, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2, 6, 1, 5, 5, 0, 4, 5], [2, 0, 3, 1, 0, 2, 0, 3], [4, 1, 98], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 1, 2, 5, 2, 1], [3, 6, 1, 6, 0], [0, 40], [1], [0], [2], [0]], "fitness": -0.11371428519487381, "mapping_values": [1, 17, 10, 7, 5, 22, 14, 8, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.add(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), alpha), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(grad, alpha), tf.math.subtract(tf.math.square(tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.pow(tf.math.square(beta), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [18211179331584.0, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09655263274908066, 0.09377889335155487, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [3.409322074614659e+26, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10633333027362823, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 5, 1, 3, 3], [0, 3, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 0, 6, 3, 0, 2], [3, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 0, 1], [0, 94], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.negative(grad), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.negative(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}, "mapping_values": [1, 11, 6, 5, 2, 12, 7, 5, 2, 8, 5, 3, 2, 1, 0, 1, 0], "tree_depth": 16}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 3, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2, 9], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [2, 2, 0, 7, 5, 2, 1, 7, 4], [0, 6, 1, 6, 0, 4, 2, 2], [0, 25], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 3, 12, 8, 4, 2, 17, 9, 8, 2, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(tf.math.add(alpha, grad), tf.math.pow(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), grad))))), beta), beta), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0952318087220192, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0], [4, 2, 0, 2, 5, 2, 1, 8, 2, 2, 3, 5, 9], [4, 6, 1, 0, 0, 5, 6, 4], [0, 89, 92], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 4, 2, 1, 7], [2, 3, 5, 7, 7], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 3, 4, 2, 2, 1, 21, 13, 8, 3, 10, 5, 5, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(grad), tf.math.add(grad, tf.math.subtract(alpha, tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.multiply(tf.math.square(grad), grad)))), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.add(beta, sigma), tf.math.subtract(grad, tf.math.add(grad, grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}]