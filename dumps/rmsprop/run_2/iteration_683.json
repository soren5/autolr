[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8174285888671875, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.209040641784668, 1.5968223810195923, 1.1382282972335815, 0.9959399104118347, 0.8950886726379395, 0.8365861177444458, 0.7779594659805298, 0.7825803756713867, 0.706693172454834, 0.7314573526382446, 0.6793156266212463, 0.6687465906143188, 0.670160174369812, 0.6344026327133179, 0.6289936900138855, 0.617920458316803, 0.6030715703964233, 0.5913873910903931, 0.5876416563987732, 0.5820708274841309, 0.5609732866287231, 0.5577031373977661, 0.5491247177124023, 0.5356651544570923, 0.5379995703697205, 0.5347127914428711, 0.5225569605827332, 0.5228947997093201, 0.509704053401947, 0.5081262588500977, 0.49609291553497314, 0.5054716467857361, 0.49597427248954773, 0.4881020188331604, 0.4843055009841919, 0.47642114758491516, 0.4656415283679962, 0.4687964618206024, 0.4664195775985718, 0.45482537150382996, 0.44979435205459595, 0.451433390378952, 0.44318652153015137, 0.42763012647628784, 0.4328143894672394, 0.4354085624217987, 0.4199885427951813, 0.41859710216522217, 0.4142149090766907, 0.42607635259628296, 0.40754181146621704], "accuracy": [0.26878878474235535, 0.5037643909454346, 0.5984678268432617, 0.6516972780227661, 0.6761326193809509, 0.6944921612739563, 0.7143045663833618, 0.7128516435623169, 0.7360982894897461, 0.7260599732398987, 0.7528728246688843, 0.7543256878852844, 0.7475894689559937, 0.7618544697761536, 0.76542067527771, 0.7738739848136902, 0.7717606425285339, 0.7796856164932251, 0.7815347909927368, 0.7884030938148499, 0.7905164361000061, 0.7977809906005859, 0.7996301651000977, 0.798309326171875, 0.8020076751708984, 0.7993659973144531, 0.8013472557067871, 0.8082155585289001, 0.8133667707443237, 0.8125742673873901, 0.8169330358505249, 0.8100647330284119, 0.8191784620285034, 0.8198388814926147, 0.8195747137069702, 0.8230088353157043, 0.8309338092803955, 0.8252542614936829, 0.8309338092803955, 0.8329150676727295, 0.8379341959953308, 0.834632158279419, 0.8363492488861084, 0.8441421389579773, 0.8396512866020203, 0.8424250483512878, 0.8437458872795105, 0.8477083444595337, 0.8475762605667114, 0.8430854678153992, 0.8529917001724243], "val_loss": [1.9108351469039917, 1.0884690284729004, 0.8558699488639832, 0.7800613045692444, 0.7753093838691711, 0.6766813397407532, 0.670061469078064, 0.6431996822357178, 0.6185668706893921, 0.6059897541999817, 0.5979476571083069, 0.5768941640853882, 0.5456790924072266, 0.5437025427818298, 0.5352776050567627, 0.5301488637924194, 0.572656512260437, 0.5273081660270691, 0.542266845703125, 0.5229485034942627, 0.5070163607597351, 0.4878287613391876, 0.4777422249317169, 0.4804410934448242, 0.4861326217651367, 0.47174549102783203, 0.4991017282009125, 0.4638599157333374, 0.4694795608520508, 0.45082348585128784, 0.450936496257782, 0.4786059856414795, 0.4373927116394043, 0.4659046232700348, 0.4410198926925659, 0.43979161977767944, 0.43029069900512695, 0.4231809079647064, 0.4308640956878662, 0.41166952252388, 0.41605624556541443, 0.4158320426940918, 0.4061926007270813, 0.4156547784805298, 0.40616610646247864, 0.40767186880111694, 0.40525540709495544, 0.4084755778312683, 0.41031843423843384, 0.40076977014541626, 0.4022831320762634], "val_accuracy": [0.6190000176429749, 0.6696666479110718, 0.7083333134651184, 0.7206666469573975, 0.7036666870117188, 0.7379999756813049, 0.7456666827201843, 0.7566666603088379, 0.7730000019073486, 0.7670000195503235, 0.7773333191871643, 0.7763333320617676, 0.7876666784286499, 0.7916666865348816, 0.793666660785675, 0.7956666946411133, 0.7789999842643738, 0.796999990940094, 0.7883333563804626, 0.8006666898727417, 0.8063333630561829, 0.8106666803359985, 0.8136666417121887, 0.8180000185966492, 0.8209999799728394, 0.8213333487510681, 0.8080000281333923, 0.8223333358764648, 0.8196666836738586, 0.8286666870117188, 0.8333333134651184, 0.8233333230018616, 0.8429999947547913, 0.8253333568572998, 0.8349999785423279, 0.8453333377838135, 0.8429999947547913, 0.846666693687439, 0.8426666855812073, 0.8489999771118164, 0.8460000157356262, 0.8450000286102295, 0.8496666550636292, 0.8496666550636292, 0.8550000190734863, 0.8560000061988831, 0.8513333201408386, 0.8506666421890259, 0.8483333587646484, 0.8516666889190674, 0.8486666679382324]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0], [0, 2, 1, 2, 3, 5], [2, 2, 3, 0, 2], [59, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 2, 2, 5, 2, 1, 6, 5, 3, 7, 6, 9, 0, 0], [0, 6, 1, 6, 0, 1, 3, 0, 7], [0, 22, 29, 26], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 10, 6, 4, 1, 24, 15, 9, 4, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(tf.math.divide_no_nan(alpha, grad), tf.math.square(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), tf.math.multiply(alpha, tf.math.add(tf.math.divide_no_nan(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), sigma), tf.math.negative(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))))), tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08730682730674744, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 2, 2, 3, 5], [0, 2, 3, 3, 2], [0, 21, 39], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 3, 0], [16, 1], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 3, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.0925714299082756, "mapping_values": [1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3105432987213135, 2.31120228767395, 2.3115291595458984, 2.3110406398773193, 2.309030294418335, 2.3091986179351807], "accuracy": [0.08968432247638702, 0.08928807079792023, 0.09087307006120682, 0.09179764986038208, 0.1006472036242485, 0.09311848133802414], "val_loss": [2.3088912963867188, 2.3088912963867188, 2.3088912963867188, 2.3088912963867188, 2.3088912963867188, 2.3088912963867188], "val_accuracy": [0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 1, 3, 1, 0, 4, 7, 2, 5, 1, 6, 4], [0, 0, 1, 0, 2, 3, 0, 0, 2, 3, 2, 0], [0, 39, 78, 48, 62, 83], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 0, 9, 3, 0, 2], [2, 0, 4, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 1, 2, 5, 2, 1], [0, 6, 1, 0, 7], [28, 22], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 2, 4, 8, 2, 0, 7, 4, 5, 0, 8], [2, 2, 5, 4, 7, 6, 0], [0]], "fitness": -0.09200000017881393, "mapping_values": [1, 26, 14, 12, 6, 1, 0, 1, 0, 7, 4, 3, 1, 19, 12, 7, 1], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.pow(alpha, tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.square(grad))))), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.divide_no_nan(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), grad), tf.math.pow(grad, grad))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.subtract(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.math.add(grad, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.add(tf.math.pow(tf.math.sqrt(tf.math.add(tf.math.negative(beta), tf.math.add(beta, grad))), tf.math.pow(grad, tf.math.square(tf.math.negative(grad)))), tf.math.sqrt(grad)), tf.constant(0.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3101441860198975, 2.310608386993408, 2.3101158142089844, 2.3095905780792236, 2.311046600341797, 2.309738874435425], "accuracy": [0.09536388516426086, 0.09206181764602661, 0.09232597798109055, 0.09272222965955734, 0.08902391046285629, 0.09589222073554993], "val_loss": [2.308340072631836, 2.308340072631836, 2.308340072631836, 2.308340072631836, 2.308340072631836, 2.308340072631836], "val_accuracy": [0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 9, 5], [0, 2, 0, 0, 2], [0, 39, 39], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 6, 0, 2, 5, 9], [0, 6, 1, 6, 0], [77, 22], [1], [0], [2], [0]], "fitness": -0.0908571407198906, "mapping_values": [1, 8, 5, 3, 3, 2, 1, 1, 0, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), grad)), tf.math.square(alpha))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.30930233001709, 2.308915615081787, 2.3108856678009033, 2.309680938720703, 2.3084897994995117, 2.3103294372558594], "accuracy": [0.08889182657003403, 0.09153348207473755, 0.08849557489156723, 0.09047681838274002, 0.09430722147226334, 0.08981640636920929], "val_loss": [2.3092586994171143, 2.3092586994171143, 2.3092586994171143, 2.3092586994171143, 2.3092586994171143, 2.3092586994171143], "val_accuracy": [0.08866667002439499, 0.08866667002439499, 0.08866667002439499, 0.08866667002439499, 0.08866667002439499, 0.08866667002439499]}}]