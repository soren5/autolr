[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8251428604125977, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2132248878479004, 1.6085749864578247, 1.153428554534912, 0.9906402826309204, 0.9181845188140869, 0.8168032169342041, 0.8024377226829529, 0.7377200126647949, 0.7323099970817566, 0.727342963218689, 0.6883828043937683, 0.6742575764656067, 0.6522794961929321, 0.6392074823379517, 0.6221675276756287, 0.6091886162757874, 0.6180525422096252, 0.6030678749084473, 0.5759243965148926, 0.56987065076828, 0.5566462278366089, 0.5564797520637512, 0.5514537692070007, 0.5419111847877502, 0.5403182506561279, 0.5178496241569519, 0.5070551037788391, 0.515848696231842, 0.49580591917037964, 0.49771395325660706, 0.4884389042854309, 0.4794037342071533, 0.48046115040779114, 0.4684685468673706, 0.4697551429271698, 0.45521292090415955, 0.4563645124435425, 0.45969948172569275, 0.44649314880371094, 0.44097355008125305, 0.4422377347946167, 0.4482186436653137, 0.4312346875667572, 0.4303807020187378, 0.4285096526145935, 0.41975417733192444, 0.4171530306339264, 0.4153144955635071, 0.4159986078739166, 0.4028244912624359], "accuracy": [0.26865673065185547, 0.5007264614105225, 0.5921278595924377, 0.6409985423088074, 0.6704530715942383, 0.6979262828826904, 0.703209638595581, 0.7253995537757874, 0.7273808121681213, 0.7244749665260315, 0.7469290494918823, 0.7473253011703491, 0.7581561207771301, 0.7589486241340637, 0.7671377658843994, 0.7716285586357117, 0.7667415142059326, 0.7728173136711121, 0.7835160493850708, 0.7905164361000061, 0.7959318161010742, 0.7935543656349182, 0.7944789528846741, 0.7951393723487854, 0.7964601516723633, 0.8064984679222107, 0.81112140417099, 0.805177628993988, 0.8128384351730347, 0.81548011302948, 0.8153480291366577, 0.8227446675300598, 0.8185180425643921, 0.82683926820755, 0.829216718673706, 0.8355567455291748, 0.8363492488861084, 0.8278959393501282, 0.8335754871368408, 0.8399154543876648, 0.8363492488861084, 0.8362171649932861, 0.8428213000297546, 0.843481719493866, 0.8416325449943542, 0.8437458872795105, 0.8494254350662231, 0.844010055065155, 0.8477083444595337, 0.8466516733169556], "val_loss": [1.9277048110961914, 1.1258455514907837, 0.9432593584060669, 0.8399661183357239, 0.7504165172576904, 0.7518206238746643, 0.6600415110588074, 0.6422231793403625, 0.705501139163971, 0.6064422726631165, 0.5996799468994141, 0.6265687942504883, 0.5738973021507263, 0.592820942401886, 0.5711983442306519, 0.553010106086731, 0.5466309785842896, 0.542372465133667, 0.5316168069839478, 0.5453795194625854, 0.5096353888511658, 0.5126255750656128, 0.5020696520805359, 0.5207821726799011, 0.5102031826972961, 0.49157312512397766, 0.49254366755485535, 0.48506641387939453, 0.5171304941177368, 0.47293704748153687, 0.45998266339302063, 0.4838228225708008, 0.46411392092704773, 0.457154780626297, 0.4598456919193268, 0.45221269130706787, 0.4480850398540497, 0.4465964436531067, 0.4628273844718933, 0.43892717361450195, 0.43882548809051514, 0.42975419759750366, 0.4394374191761017, 0.45753616094589233, 0.42472338676452637, 0.4272997975349426, 0.431999146938324, 0.44113171100616455, 0.41973650455474854, 0.43260806798934937], "val_accuracy": [0.4886666536331177, 0.6349999904632568, 0.6596666574478149, 0.7043333053588867, 0.7266666889190674, 0.7116666436195374, 0.7563333511352539, 0.7526666522026062, 0.734000027179718, 0.7739999890327454, 0.765666663646698, 0.7670000195503235, 0.7879999876022339, 0.777999997138977, 0.7806666493415833, 0.7956666946411133, 0.7940000295639038, 0.7896666526794434, 0.8119999766349792, 0.7870000004768372, 0.8180000185966492, 0.8083333373069763, 0.8113333582878113, 0.8223333358764648, 0.8053333163261414, 0.8169999718666077, 0.8183333277702332, 0.8276666402816772, 0.7986666560173035, 0.8273333311080933, 0.8289999961853027, 0.8183333277702332, 0.8339999914169312, 0.82833331823349, 0.8366666436195374, 0.8343333601951599, 0.8333333134651184, 0.8429999947547913, 0.8363333344459534, 0.8393333554267883, 0.8429999947547913, 0.8450000286102295, 0.8346666693687439, 0.8363333344459534, 0.8500000238418579, 0.846666693687439, 0.8489999771118164, 0.8376666903495789, 0.8496666550636292, 0.8396666646003723]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 8, 4, 5], [2, 3, 2, 0, 2], [7, 39, 39], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 0, 12, 7, 5, 2, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(grad, alpha))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 2, 2, 2, 3, 5, 3, 3, 7, 8, 6, 2, 5, 0, 6, 7, 0, 0, 3], [0, 2, 1, 0, 2, 3, 1, 1, 1, 1, 1, 0, 1], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [9, 2, 0, 6, 3, 8, 2], [1, 0, 3, 0, 0], [16, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 4, 9], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 19, 13, 3, 1, 1, 0, 1, 12, 8, 4, 2, 1, 0, 1, 0], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.add(tf.math.multiply(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.multiply(tf.math.add(grad, tf.math.sqrt(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(grad, grad), tf.math.square(tf.math.negative(alpha))))), tf.math.divide_no_nan(tf.math.add(tf.math.negative(alpha), tf.math.negative(alpha)), tf.math.multiply(alpha, alpha))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(tf.math.pow(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), grad), alpha)))), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [93.72777557373047, 10944.6689453125, 189283.40625, 1287342.125, 5659581.0, 18339044.0], "accuracy": [0.09945846349000931, 0.10170386731624603, 0.09668471664190292, 0.10170386731624603, 0.10011887550354004, 0.10355303436517715], "val_loss": [799.9948120117188, 39263.60546875, 417224.96875, 2267774.75, 8483445.0, 25006556.0], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 2, 1, 2, 2, 3, 7, 3], [3, 1, 1, 0, 2, 3, 0, 3, 3, 1], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 5, 1, 0], [95, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 6, 1], [0, 6, 1, 6, 4], [0, 17], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 10, 10, 2, 10, 6, 4, 1, 7, 4, 3, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.math.subtract(grad, alpha), alpha), tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.add(tf.math.multiply(tf.math.add(tf.math.multiply(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), grad), alpha)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, alpha))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [0, 2, 3, 8, 5, 5], [0, 0, 1, 1, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 1, 8, 2], [5, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 0, 2, 5, 3, 4], [4, 0, 1, 7, 2], [33, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 12, 7, 5, 2, 12, 7, 5, 1, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(grad), tf.math.divide_no_nan(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(tf.math.add(tf.math.square(grad), tf.math.multiply(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.pow(alpha, grad)))), beta)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}]