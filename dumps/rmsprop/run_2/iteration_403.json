[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8065714240074158, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2126717567443848, 1.6132477521896362, 1.157204031944275, 0.9716718196868896, 0.9005123376846313, 0.8180591464042664, 0.8043518662452698, 0.7462140917778015, 0.7268562316894531, 0.7193883061408997, 0.6922107934951782, 0.6478997468948364, 0.6343918442726135, 0.6362720727920532, 0.6307721138000488, 0.6055236458778381, 0.6011039614677429, 0.5970638394355774, 0.566706657409668, 0.562086284160614, 0.5581048130989075, 0.5468587875366211, 0.5455517172813416, 0.5387288928031921, 0.5191819071769714, 0.5482107996940613, 0.5126795768737793, 0.5112302303314209, 0.5074581503868103, 0.48138198256492615, 0.490610271692276, 0.4750170111656189, 0.4710789918899536, 0.46816521883010864, 0.4777710437774658, 0.4575759172439575, 0.45831385254859924, 0.4577503204345703, 0.44360968470573425, 0.44328638911247253, 0.43969622254371643, 0.43089136481285095, 0.43675318360328674, 0.42820289731025696, 0.4250296354293823, 0.41865962743759155, 0.41805019974708557, 0.4118632376194, 0.4094792604446411, 0.4070481061935425, 0.407270222902298, 0.40367457270622253, 0.39638176560401917, 0.38883811235427856], "accuracy": [0.26760005950927734, 0.5044247508049011, 0.5881653428077698, 0.655527651309967, 0.6799629926681519, 0.7086250185966492, 0.7028133869171143, 0.7260599732398987, 0.7304186820983887, 0.7391361594200134, 0.7446836829185486, 0.7605336308479309, 0.7658169269561768, 0.7646281719207764, 0.7652885913848877, 0.7737419009208679, 0.7800818681716919, 0.7745344042778015, 0.7893276810646057, 0.7915731072425842, 0.7952714562416077, 0.7960638999938965, 0.7957997918128967, 0.798309326171875, 0.8125742673873901, 0.800818920135498, 0.8125742673873901, 0.811649739742279, 0.8142913579940796, 0.8228767514228821, 0.8157442808151245, 0.8253863453865051, 0.829216718673706, 0.8323867321014404, 0.8241975903511047, 0.8343679904937744, 0.8362171649932861, 0.8330471515655518, 0.8422929644584656, 0.8416325449943542, 0.8400475382804871, 0.8444063067436218, 0.8379341959953308, 0.8465195894241333, 0.8437458872795105, 0.8499537706375122, 0.8481045961380005, 0.852859616279602, 0.8490291833877563, 0.852331280708313, 0.850350022315979, 0.8511425256729126, 0.8578787446022034, 0.8578787446022034], "val_loss": [1.925007700920105, 1.1089776754379272, 0.8644928336143494, 0.8459402918815613, 0.6981043815612793, 0.6867397427558899, 0.6651159524917603, 0.622150719165802, 0.5938020348548889, 0.5776503086090088, 0.5794112682342529, 0.5507819652557373, 0.5477377772331238, 0.5630509257316589, 0.5190552473068237, 0.5320380330085754, 0.5327897667884827, 0.5296321511268616, 0.5192607045173645, 0.490641713142395, 0.4797983467578888, 0.4790286421775818, 0.47349071502685547, 0.46628695726394653, 0.5383943915367126, 0.4654090106487274, 0.4740779995918274, 0.44976797699928284, 0.4445996880531311, 0.4401480257511139, 0.432358980178833, 0.437811940908432, 0.4346487522125244, 0.4590281546115875, 0.42927849292755127, 0.43730565905570984, 0.44977641105651855, 0.41518017649650574, 0.43082454800605774, 0.41865596175193787, 0.4196542203426361, 0.41196566820144653, 0.4131423234939575, 0.4094831943511963, 0.4053271412849426, 0.4020334482192993, 0.4149084985256195, 0.40139469504356384, 0.40051043033599854, 0.421409010887146, 0.40698933601379395, 0.3918152153491974, 0.4032893776893616, 0.4129824936389923], "val_accuracy": [0.5839999914169312, 0.6293333172798157, 0.7083333134651184, 0.7096666693687439, 0.7480000257492065, 0.737666666507721, 0.7453333139419556, 0.7636666893959045, 0.7760000228881836, 0.7846666574478149, 0.7833333611488342, 0.7979999780654907, 0.7956666946411133, 0.7739999890327454, 0.8033333420753479, 0.8029999732971191, 0.7979999780654907, 0.8066666722297668, 0.8036666512489319, 0.8140000104904175, 0.8293333053588867, 0.8149999976158142, 0.8309999704360962, 0.8266666531562805, 0.7773333191871643, 0.8389999866485596, 0.8236666917800903, 0.8363333344459534, 0.8399999737739563, 0.8383333086967468, 0.8479999899864197, 0.8410000205039978, 0.8426666855812073, 0.8299999833106995, 0.8523333072662354, 0.8373333215713501, 0.8309999704360962, 0.8529999852180481, 0.8496666550636292, 0.8543333411216736, 0.8479999899864197, 0.8513333201408386, 0.8529999852180481, 0.8569999933242798, 0.8603333234786987, 0.8576666712760925, 0.8506666421890259, 0.8616666793823242, 0.8650000095367432, 0.8483333587646484, 0.8513333201408386, 0.8583333492279053, 0.8579999804496765, 0.8506666421890259]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 1, 2], [0, 39, 39], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 6, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [0, 6, 0, 2, 5, 2, 1, 1, 0, 9, 4, 6], [0, 6, 2, 6, 0, 5, 5], [0, 22, 36], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 1, 5, 3, 2, 1, 19, 12, 7, 3, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(alpha, tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(tf.math.subtract(beta, grad), tf.math.negative(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.divide_no_nan(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), grad), grad))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.303956985473633, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1], [0, 2, 3, 2, 3, 5, 6, 5, 9], [0, 2, 1, 0, 3], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [3, 2, 0, 6, 3, 8, 2], [2, 0, 3, 5, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [2, 2, 0, 0, 5, 2, 6], [0, 6, 4, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 9, 5, 3, 11, 6, 5, 2, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.math.square(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(tf.math.negative(tf.math.negative(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)))), tf.math.add(grad, tf.math.divide_no_nan(grad, grad))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 5, 6, 2, 3, 7], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 5, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1, 4], [0, 1, 1, 6, 4, 1], [0, 22], [1], [0], [2], [0]], "fitness": -0.09142857044935226, "mapping_values": [1, 3, 2, 1, 1, 10, 6, 4, 1, 14, 8, 6, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.pow(alpha, grad), grad)))), alpha)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3098583221435547, 2.3083884716033936, 2.3093831539154053, 2.3106064796447754, 2.3095009326934814, 2.3103508949279785], "accuracy": [0.09113723784685135, 0.09087307006120682, 0.09377889335155487, 0.09285431355237961, 0.09642054885625839, 0.09192973375320435], "val_loss": [2.308041572570801, 2.308041572570801, 2.308041572570801, 2.308041572570801, 2.308041572570801, 2.308041572570801], "val_accuracy": [0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 4, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 5, 6, 0], [43, 22], [1], [0], [2], [0]], "fitness": -0.0908571407198906, "mapping_values": [1, 11, 6, 5, 2, 2, 1, 1, 0, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(grad, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3104019165039062, 2.3097009658813477, 2.3096954822540283, 2.310645580291748, 2.311342477798462, 2.310889720916748], "accuracy": [0.09311848133802414, 0.08796724677085876, 0.09153348207473755, 0.09655263274908066, 0.09140139818191528, 0.09430722147226334], "val_loss": [2.308253526687622, 2.308253526687622, 2.308253526687622, 2.308253526687622, 2.308253526687622, 2.308253526687622], "val_accuracy": [0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341]}}]