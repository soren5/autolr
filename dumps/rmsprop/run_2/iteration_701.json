[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8057143092155457, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.207935333251953, 1.5900558233261108, 1.1330057382583618, 0.9877474308013916, 0.882564127445221, 0.8033192753791809, 0.8088055849075317, 0.7441290020942688, 0.7303022742271423, 0.7292243242263794, 0.6960751414299011, 0.6662732362747192, 0.665495753288269, 0.6475951075553894, 0.629361629486084, 0.6186171770095825, 0.6059858798980713, 0.5863465070724487, 0.5929103493690491, 0.5869269371032715, 0.5645318627357483, 0.559378981590271, 0.5516236424446106, 0.5516287088394165, 0.5451997518539429, 0.5201531052589417, 0.5196427702903748, 0.5179079174995422, 0.5243343710899353, 0.5043392181396484, 0.49466830492019653, 0.49358662962913513, 0.5043042898178101, 0.47780176997184753, 0.48629048466682434, 0.4762696623802185, 0.4694789946079254, 0.4565434157848358, 0.4607371389865875, 0.4493682384490967, 0.4437638521194458, 0.4505687952041626, 0.44294071197509766], "accuracy": [0.2604675590991974, 0.509840190410614, 0.6059965491294861, 0.6413947939872742, 0.6819442510604858, 0.7096816897392273, 0.7063795924186707, 0.7317395210266113, 0.7349095344543457, 0.7317395210266113, 0.7407211661338806, 0.7531369924545288, 0.7526086568832397, 0.7602694630622864, 0.763439416885376, 0.7693831920623779, 0.7783648371696472, 0.7810064554214478, 0.7829877138137817, 0.7837802171707153, 0.7915731072425842, 0.7917051911354065, 0.7959318161010742, 0.798309326171875, 0.7911768555641174, 0.8075551390647888, 0.8109893202781677, 0.8101968169212341, 0.8025360107421875, 0.8141592741012573, 0.817461371421814, 0.8191784620285034, 0.8158763647079468, 0.826310932636261, 0.821820080280304, 0.8244617581367493, 0.8272355198860168, 0.835160493850708, 0.8338396549224854, 0.8416325449943542, 0.8329150676727295, 0.8345000743865967, 0.8374059200286865], "val_loss": [1.909218430519104, 1.1197011470794678, 0.8946917057037354, 0.7845327258110046, 0.7198989391326904, 0.7894997596740723, 0.6684064865112305, 0.6885843276977539, 0.651233971118927, 0.6435235142707825, 0.6178472638130188, 0.6047365069389343, 0.5913673639297485, 0.5814204216003418, 0.5579962730407715, 0.5832094550132751, 0.5427243113517761, 0.5485678911209106, 0.5546556115150452, 0.5527940988540649, 0.5141074061393738, 0.5084384083747864, 0.5066890716552734, 0.5088268518447876, 0.49385547637939453, 0.4939056932926178, 0.4836685359477997, 0.4882354736328125, 0.4819578528404236, 0.4674393832683563, 0.4748574197292328, 0.47594937682151794, 0.46018725633621216, 0.4596676528453827, 0.46385616064071655, 0.46863752603530884, 0.4580433666706085, 0.43652328848838806, 0.4528258442878723, 0.4347509443759918, 0.43824341893196106, 0.4362013339996338, 0.4361141622066498], "val_accuracy": [0.5723333358764648, 0.6243333220481873, 0.671999990940094, 0.722000002861023, 0.7379999756813049, 0.7176666855812073, 0.7446666955947876, 0.7369999885559082, 0.7606666684150696, 0.7549999952316284, 0.7599999904632568, 0.7699999809265137, 0.7766666412353516, 0.7893333435058594, 0.7833333611488342, 0.7576666474342346, 0.796999990940094, 0.7903333306312561, 0.781000018119812, 0.781333327293396, 0.8056666851043701, 0.812333345413208, 0.8043333292007446, 0.8106666803359985, 0.8190000057220459, 0.8136666417121887, 0.8209999799728394, 0.8149999976158142, 0.8193333148956299, 0.8270000219345093, 0.8273333311080933, 0.8236666917800903, 0.8323333263397217, 0.8286666870117188, 0.8293333053588867, 0.8243333101272583, 0.8306666612625122, 0.8443333506584167, 0.8346666693687439, 0.8393333554267883, 0.8429999947547913, 0.8393333554267883, 0.8379999995231628]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1], [0, 2, 3, 2, 3, 5, 0, 6, 2, 0, 0, 4, 3, 0, 9, 5], [0, 2, 1, 0, 2, 3, 3, 2], [0, 39, 39], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 1, 1, 0], [16, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [0, 1], [0], [6], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 16, 8, 3, 2, 1, 1, 0, 8, 5, 3, 1, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.math.negative(grad), tf.math.negative(grad)), tf.math.pow(tf.math.multiply(grad, tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.square(grad)))))))), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(grad, tf.math.square(alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08308017253875732, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 2, 3, 1, 6, 7, 2], [0, 2, 1, 0, 2, 0, 0, 1, 2], [0, 39, 39, 70], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 7, 6, 3, 8, 2], [2, 0, 3, 1, 0], [62, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 0, 8, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 9, 9, 4, 11, 6, 5, 2, 6, 4, 2, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.subtract(alpha, tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 2, 3, 1, 4, 5], [0, 0, 1, 0, 3], [0, 39, 39], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0], [0, 2, 0, 6, 4, 8, 1], [2, 0, 3, 3, 2], [16, 1], [1, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 1, 1], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [9.960806376705884e+17, 1.1498141473077985e+18, 1.1533885221707448e+18, 1.1902881323989074e+18, 1.1276657225168323e+18, 1.1805404120628593e+18], "accuracy": [0.0940430611371994, 0.09589222073554993, 0.09972262382507324, 0.09919429570436478, 0.09826971590518951, 0.09377889335155487], "val_loss": [1.1626960255388221e+18, 1.1626960255388221e+18, 1.1626960255388221e+18, 1.1626960255388221e+18, 1.1626960255388221e+18, 1.1626960255388221e+18], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}, "mapping_values": [1, 2, 1, 1, 1, 7, 4, 3, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 10}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 2, 1, 2], [0, 39, 39], [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1], [0, 2, 0, 2, 5, 2, 1, 2, 2, 1, 9], [0, 6, 1, 6, 0, 3, 4], [0, 22, 68], [0, 0], [0, 9], [2], [0]], "fitness": -0.09057142585515976, "mapping_values": [1, 11, 6, 5, 1, 1, 0, 1, 0, 18, 11, 7, 3, 2, 2, 0, 1], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), grad), tf.math.multiply(alpha, tf.math.square(grad)))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(alpha, tf.math.add(tf.math.add(grad, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), sigma)))), tf.math.subtract(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.310814380645752, 2.3088502883911133, 2.3084449768066406, 2.308871030807495, 2.3091022968292236, 2.309616804122925], "accuracy": [0.0874389111995697, 0.09470347315073013, 0.09602430462837219, 0.09272222965955734, 0.0882314071059227, 0.09576013684272766], "val_loss": [2.308457612991333, 2.308457612991333, 2.308457612991333, 2.308457612991333, 2.308457612991333, 2.308457612991333], "val_accuracy": [0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446]}}]