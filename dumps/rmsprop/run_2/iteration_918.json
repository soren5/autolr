[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8011428713798523, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.209977626800537, 1.604831576347351, 1.1348676681518555, 0.9806339740753174, 0.8753653168678284, 0.8302832841873169, 0.7919807434082031, 0.7422064542770386, 0.7085000276565552, 0.7489688396453857, 0.6811856031417847, 0.6507958173751831, 0.6769742369651794, 0.6425105929374695, 0.6236875057220459, 0.6090840101242065, 0.6014197468757629, 0.5801879167556763, 0.5756283402442932, 0.5720416307449341, 0.5489038825035095, 0.5517072677612305, 0.5433463454246521, 0.5346795320510864, 0.5222151279449463, 0.5219247341156006, 0.5176027417182922, 0.5148035287857056, 0.4965619742870331, 0.493149995803833, 0.4845426380634308, 0.48107481002807617, 0.4765164256095886, 0.4665600657463074, 0.4767189919948578, 0.45671358704566956, 0.4630851447582245, 0.4519253671169281], "accuracy": [0.2665433883666992, 0.5052172541618347, 0.6061286330223083, 0.6528860330581665, 0.6816800832748413, 0.6975300312042236, 0.711530864238739, 0.7333245277404785, 0.7430986762046814, 0.7305507659912109, 0.7511557340621948, 0.76542067527771, 0.7512878179550171, 0.7656848430633545, 0.7740060687065125, 0.7798177003860474, 0.7799497842788696, 0.791969358921051, 0.7944789528846741, 0.7924976944923401, 0.7997622489929199, 0.8004226684570312, 0.802800178527832, 0.8041210174560547, 0.8070268034934998, 0.8108572363853455, 0.8084797263145447, 0.8090080618858337, 0.8207634687423706, 0.8210275769233704, 0.8277638554573059, 0.8251221776008606, 0.8284242749214172, 0.8325188159942627, 0.8271034359931946, 0.8350284099578857, 0.8319904804229736, 0.8370096683502197], "val_loss": [1.9252479076385498, 1.0956151485443115, 0.9333175420761108, 0.7936868667602539, 0.7648466229438782, 0.7482036352157593, 0.6593915820121765, 0.6510735154151917, 0.6453904509544373, 0.608587384223938, 0.5979740619659424, 0.5899706482887268, 0.5961513519287109, 0.5867524147033691, 0.5697277784347534, 0.6055645942687988, 0.5614612102508545, 0.5341774225234985, 0.5131180286407471, 0.5201124548912048, 0.5228849053382874, 0.5245601534843445, 0.5052725076675415, 0.4976155459880829, 0.48759961128234863, 0.47988951206207275, 0.4982651472091675, 0.4738196134567261, 0.4613800048828125, 0.45857006311416626, 0.46962273120880127, 0.46893224120140076, 0.4487914741039276, 0.44767525792121887, 0.43823397159576416, 0.44640353322029114, 0.45680660009384155, 0.44128140807151794], "val_accuracy": [0.5026666522026062, 0.6690000295639038, 0.6703333258628845, 0.7110000252723694, 0.718999981880188, 0.7160000205039978, 0.7553333044052124, 0.7509999871253967, 0.7723333239555359, 0.7736666798591614, 0.781333327293396, 0.781333327293396, 0.7776666879653931, 0.7696666717529297, 0.7896666526794434, 0.7713333368301392, 0.7893333435058594, 0.79666668176651, 0.8100000023841858, 0.8143333196640015, 0.8130000233650208, 0.8076666593551636, 0.8180000185966492, 0.8186666369438171, 0.8233333230018616, 0.8289999961853027, 0.8183333277702332, 0.8309999704360962, 0.8330000042915344, 0.8333333134651184, 0.8256666660308838, 0.8326666951179504, 0.8420000076293945, 0.8386666774749756, 0.8413333296775818, 0.8416666388511658, 0.8343333601951599, 0.8420000076293945]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 2, 2, 3, 5], [0, 0, 2, 0, 2], [86, 35, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 8, 0, 8, 2], [4, 4, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 1, 0], [0, 8, 80], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 7, 5, 2, 0, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(grad), tf.math.sqrt(tf.math.negative(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad)), alpha)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [47804424192.0, 7034366853120.0, 119128618696704.0, 841411071049728.0, 3707993443008512.0, 1.211931859877888e+16], "accuracy": [0.09536388516426086, 0.09774138033390045, 0.10434553027153015, 0.09906221181154251, 0.1022322028875351, 0.09985470771789551], "val_loss": [466277564416.0, 25137785077760.0, 269828535353344.0, 1471114345709568.0, 5510619134427136.0, 1.625145294716928e+16], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0], [0, 2, 3, 2, 3, 2, 9, 4, 9, 1, 0, 9], [0, 2, 1, 1, 3], [0, 39, 39, 15], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 2, 2, 6, 3, 8, 2], [2, 0, 3, 1, 0, 4], [16, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [4, 2, 0, 2, 9, 2, 1], [0, 6, 2, 6, 0], [20, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 12, 5, 4, 13, 7, 6, 2, 8, 5, 3, 2, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.multiply(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha))), tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.negative(grad), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(grad, alpha)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.add(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), grad), tf.math.negative(tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), beta))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.12759213149547577, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [7, 5, 3, 2, 3, 5], [0, 2, 3, 3, 2], [0, 71, 39], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 6, 2, 3, 8, 2, 5], [2, 0, 4, 1, 0, 1], [12, 1], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 6, 5, 0, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 1, 14, 8, 6, 2, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.square(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), grad)), tf.math.multiply(grad, tf.math.square(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.add(tf.math.square(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), grad)), alpha), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 2, 3, 5, 4, 8, 6, 1, 2, 2, 4], [0, 2, 1, 0, 2, 1, 2, 0, 3, 2, 2], [86, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 0, 6, 3, 6, 2], [2, 2, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 7, 6, 0], [0, 22], [1], [0], [0], [0]], "fitness": -0.09114285558462143, "mapping_values": [1, 24, 13, 11, 3, 9, 5, 4, 0, 7, 4, 3, 1, 1, 0, 1, 1], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.square(alpha))), tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.sqrt(tf.math.divide_no_nan(tf.math.subtract(alpha, tf.math.add(grad, tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), tf.math.pow(grad, grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(beta, grad), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.309109926223755, 2.3110404014587402, 2.3110597133636475, 2.3106961250305176, 2.3103129863739014, 2.3115577697753906], "accuracy": [0.09351472556591034, 0.08651433140039444, 0.09126931428909302, 0.09192973375320435, 0.09126931428909302, 0.09060890227556229], "val_loss": [2.307987689971924, 2.307987689971924, 2.307987689971924, 2.307987689971924, 2.307987689971924, 2.307987689971924], "val_accuracy": [0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816]}}]