[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8157142996788025, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2147278785705566, 1.623425841331482, 1.1559793949127197, 0.9779024124145508, 0.9285891652107239, 0.8185608386993408, 0.7785670161247253, 0.7724881768226624, 0.73560631275177, 0.7376371026039124, 0.699105978012085, 0.6827991604804993, 0.6562202572822571, 0.6587100028991699, 0.6397193074226379, 0.6244622468948364, 0.6078735589981079, 0.6074545383453369, 0.5918305516242981, 0.5787290334701538, 0.5787959098815918, 0.5735433101654053, 0.5528498291969299, 0.5426240563392639, 0.5428261160850525, 0.5263095498085022, 0.5307120084762573, 0.5160064697265625, 0.5220277309417725, 0.5158056616783142, 0.5118696093559265, 0.499546617269516], "accuracy": [0.2572975754737854, 0.5001981258392334, 0.5951657891273499, 0.6452252268791199, 0.6623960137367249, 0.6995112895965576, 0.7125874757766724, 0.7080966830253601, 0.7251353859901428, 0.7248712182044983, 0.7302865982055664, 0.743891179561615, 0.7576277852058411, 0.7486461400985718, 0.7565711140632629, 0.7618544697761536, 0.7687227725982666, 0.7685906887054443, 0.7738739848136902, 0.7804781198501587, 0.7796856164932251, 0.7858935594558716, 0.7917051911354065, 0.7954035401344299, 0.7975168228149414, 0.798309326171875, 0.8009510040283203, 0.8082155585289001, 0.8025360107421875, 0.807158887386322, 0.8070268034934998, 0.8125742673873901], "val_loss": [1.9331212043762207, 1.1259396076202393, 0.9010693430900574, 0.8710426688194275, 0.7598009705543518, 0.673383355140686, 0.651202380657196, 0.669485330581665, 0.6999192833900452, 0.6213634610176086, 0.6167352795600891, 0.5742992162704468, 0.6047501564025879, 0.5533891320228577, 0.5491626262664795, 0.5319573283195496, 0.5424766540527344, 0.5346422791481018, 0.5235990881919861, 0.5097658038139343, 0.49857550859451294, 0.503341794013977, 0.5218022465705872, 0.503547191619873, 0.47621139883995056, 0.48842617869377136, 0.46340063214302063, 0.4613775908946991, 0.4851105511188507, 0.4764429032802582, 0.4804629683494568, 0.4646870493888855], "val_accuracy": [0.593666672706604, 0.6363333463668823, 0.6639999747276306, 0.6666666865348816, 0.7213333249092102, 0.7446666955947876, 0.753333330154419, 0.746666669845581, 0.731333315372467, 0.7680000066757202, 0.7603333592414856, 0.7833333611488342, 0.7616666555404663, 0.7876666784286499, 0.7926666736602783, 0.8023333549499512, 0.7950000166893005, 0.7923333048820496, 0.79666668176651, 0.8180000185966492, 0.8190000057220459, 0.8100000023841858, 0.7923333048820496, 0.8063333630561829, 0.8270000219345093, 0.8106666803359985, 0.831333339214325, 0.8303333520889282, 0.8086666464805603, 0.8166666626930237, 0.8109999895095825, 0.8220000267028809]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [3, 0, 0, 0, 2], [0, 39, 39], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 6, 5, 7, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 0, 2, 1], [0, 6, 1, 6, 0], [97], [1], [0], [2], [0]], "fitness": -0.10400000214576721, "mapping_values": [1, 11, 6, 5, 3, 4, 2, 2, 1, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(grad, tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.negative(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [29080.59765625, 522277224448.0, 9.004420239101788e+18, 8.455868501889183e+25, NaN, NaN, NaN, NaN], "accuracy": [0.09496764093637466, 0.09628847241401672, 0.09985470771789551, 0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1954922.375, 34656806240256.0, 5.759258091101849e+20, 2.3025853633880615, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1], [0, 2, 1, 2, 3, 5, 1, 6, 0], [1, 2, 1, 0, 2, 0, 0], [0, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 0, 6, 5, 8, 2], [2, 0, 3, 1, 0], [16, 1], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 7, 6, 0], [0, 59], [1], [0], [2], [0]], "fitness": -0.10085714608430862, "mapping_values": [1, 16, 9, 7, 3, 9, 6, 3, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), tf.math.multiply(tf.math.square(alpha), tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), grad))), tf.math.divide_no_nan(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.square(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [3743173251694592.0, 4355458420703232.0, 4227942452297728.0, 4275237021548544.0, 4218112614334464.0, 4234065465049088.0], "accuracy": [0.0940430611371994, 0.09813763201236725, 0.09879804402589798, 0.09642054885625839, 0.09430722147226334, 0.09998679161071777], "val_loss": [2588531155271680.0, 2588531155271680.0, 2588531155271680.0, 2588531155271680.0, 2588531155271680.0, 2588531155271680.0], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 3, 2, 8, 5, 9, 0], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [2, 2, 0, 6, 7, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 2, 0, 9, 4, 2, 7], [0, 2, 1, 0, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 8, 3, 2, 8, 4, 4, 1, 7, 5, 2, 2, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.math.sqrt(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.negative(alpha))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), beta))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 0, 3, 2, 3, 5], [0, 2, 3, 0, 2], [0, 39, 39], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 2, 7, 2, 5, 2, 3], [0, 3, 0, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.09057142585515976, "mapping_values": [1, 9, 5, 4, 2, 2, 1, 1, 0, 9, 5, 4, 2, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), sigma), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.309047222137451, 2.310587167739868, 2.3102447986602783, 2.310547351837158, 2.308628559112549, 2.308258295059204], "accuracy": [0.0944393053650856, 0.08968432247638702, 0.09087307006120682, 0.0866464152932167, 0.09126931428909302, 0.09179764986038208], "val_loss": [2.3087522983551025, 2.3087522983551025, 2.3087522983551025, 2.3087522983551025, 2.3087522983551025, 2.3087522983551025], "val_accuracy": [0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869]}}]