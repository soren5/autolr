[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8311428427696228, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.211273670196533, 1.6131116151809692, 1.1406174898147583, 0.9654315710067749, 0.9106237888336182, 0.8389696478843689, 0.7751255631446838, 0.7473682165145874, 0.739177942276001, 0.7023322582244873, 0.686381995677948, 0.6909373998641968, 0.6698768138885498, 0.6443628072738647, 0.6345987319946289, 0.6206710934638977, 0.6065731644630432, 0.594496488571167, 0.5943603515625, 0.5862286686897278, 0.5700963139533997, 0.566895067691803, 0.5589296817779541, 0.548930287361145, 0.5384438633918762, 0.5461382269859314, 0.5353739261627197, 0.516903281211853, 0.5242212414741516, 0.5034711360931396, 0.4983445703983307, 0.49856382608413696, 0.5069864392280579, 0.4875849783420563, 0.4850524961948395, 0.47653329372406006, 0.4784146547317505, 0.4773860573768616, 0.4698731303215027, 0.4533259868621826, 0.45228472352027893, 0.4604164659976959, 0.4453490674495697, 0.44212955236434937, 0.44346746802330017, 0.4446466267108917, 0.439233660697937, 0.4283391535282135, 0.434194415807724, 0.41986173391342163, 0.4164517819881439, 0.4149218797683716, 0.41570547223091125, 0.41830217838287354, 0.40730705857276917, 0.39953234791755676, 0.40601617097854614], "accuracy": [0.2670717239379883, 0.49451854825019836, 0.59661865234375, 0.6568484902381897, 0.6691322326660156, 0.6919825673103333, 0.7136441469192505, 0.7226257920265198, 0.7224937081336975, 0.7396644949913025, 0.7470611333847046, 0.7473253011703491, 0.752212405204773, 0.7576277852058411, 0.7672698497772217, 0.7701756954193115, 0.7777044177055359, 0.783119797706604, 0.7803460359573364, 0.7807422876358032, 0.7942147850990295, 0.7938185334205627, 0.7926297783851624, 0.7988376617431641, 0.802800178527832, 0.8021397590637207, 0.8042530417442322, 0.8067626357078552, 0.8074230551719666, 0.8178576231002808, 0.8149517774581909, 0.8183859586715698, 0.8083476424217224, 0.8210275769233704, 0.8234050869941711, 0.8232730031013489, 0.8257825970649719, 0.8269713521003723, 0.8272355198860168, 0.8345000743865967, 0.8342359066009521, 0.8274996876716614, 0.8379341959953308, 0.8385946154594421, 0.839519202709198, 0.8407079577445984, 0.8404437899589539, 0.846387505531311, 0.8424250483512878, 0.8470479249954224, 0.8461233377456665, 0.8453308939933777, 0.847840428352356, 0.8470479249954224, 0.8551049828529358, 0.8582749962806702, 0.8527275323867798], "val_loss": [1.9307219982147217, 1.13298499584198, 0.9191210269927979, 0.845323920249939, 0.8276147246360779, 0.7551175355911255, 0.6666755676269531, 0.663983166217804, 0.648675799369812, 0.6426045298576355, 0.6331015229225159, 0.599212110042572, 0.5876911878585815, 0.5862298011779785, 0.5654000043869019, 0.5898855924606323, 0.549257755279541, 0.5412310361862183, 0.5675755143165588, 0.5368252992630005, 0.5281109809875488, 0.532893717288971, 0.5232494473457336, 0.5134503841400146, 0.5099984407424927, 0.5079954266548157, 0.5055677890777588, 0.5104652643203735, 0.49795445799827576, 0.48951590061187744, 0.4776007831096649, 0.4924198389053345, 0.4729404151439667, 0.4709429144859314, 0.4611787497997284, 0.4870729148387909, 0.47356969118118286, 0.4628813862800598, 0.45534607768058777, 0.4475679099559784, 0.4670455753803253, 0.44255778193473816, 0.4398851692676544, 0.4368298351764679, 0.4578438699245453, 0.43390583992004395, 0.42911189794540405, 0.43083643913269043, 0.4448239803314209, 0.4244508445262909, 0.42743441462516785, 0.42091143131256104, 0.42140689492225647, 0.4183937609195709, 0.42693859338760376, 0.4223780035972595, 0.4276120066642761], "val_accuracy": [0.5189999938011169, 0.6380000114440918, 0.6549999713897705, 0.6576666831970215, 0.6919999718666077, 0.6980000138282776, 0.7509999871253967, 0.7429999709129333, 0.7379999756813049, 0.7609999775886536, 0.7630000114440918, 0.7730000019073486, 0.778333306312561, 0.7829999923706055, 0.7839999794960022, 0.7829999923706055, 0.7986666560173035, 0.7926666736602783, 0.7823333144187927, 0.7976666688919067, 0.8086666464805603, 0.7940000295639038, 0.8040000200271606, 0.8063333630561829, 0.8083333373069763, 0.8149999976158142, 0.8073333501815796, 0.8073333501815796, 0.8193333148956299, 0.8143333196640015, 0.8276666402816772, 0.8130000233650208, 0.828000009059906, 0.8230000138282776, 0.8333333134651184, 0.8190000057220459, 0.8266666531562805, 0.8336666822433472, 0.8383333086967468, 0.8423333168029785, 0.8259999752044678, 0.8420000076293945, 0.8463333249092102, 0.8403333425521851, 0.8223333358764648, 0.8420000076293945, 0.8489999771118164, 0.8429999947547913, 0.8356666564941406, 0.8500000238418579, 0.8456666469573975, 0.8536666631698608, 0.8486666679382324, 0.8496666550636292, 0.8493333458900452, 0.8463333249092102, 0.8460000157356262]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 3, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1], [2, 2, 0, 2, 5], [0, 6, 4, 6], [0, 22], [1], [0], [5], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 4, 2, 2, 1, 9, 5, 4, 1, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(grad))), grad), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [3.4558675289154053, 2.3089849948883057, 2.304155111312866, 2.303424596786499, 2.3032753467559814, 2.3032758235931396, 2.30312180519104, 2.3031423091888428, 2.302976131439209, 2.3029279708862305], "accuracy": [0.18636904656887054, 0.09576013684272766, 0.10685510188341141, 0.10170386731624603, 0.09298639744520187, 0.09457138925790787, 0.09549596905708313, 0.09747721254825592, 0.09470347315073013, 0.09774138033390045], "val_loss": [2.313765287399292, 2.3044114112854004, 2.302699565887451, 2.302715539932251, 2.3025119304656982, 2.30259108543396, 2.302582025527954, 2.3025288581848145, 2.302583694458008, 2.3024704456329346], "val_accuracy": [0.09833333641290665, 0.09933333098888397, 0.09933333098888397, 0.1003333330154419, 0.10133333504199982, 0.09700000286102295, 0.09833333641290665, 0.09833333641290665, 0.1003333330154419, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 2, 3, 2, 3, 4, 9, 7, 8, 9], [0, 2, 3, 1, 2], [0, 39, 39], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [0, 5, 3, 0, 0], [16, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [6, 2, 0, 2, 5, 5, 1], [0, 6, 1, 6, 0], [61, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 10, 5, 3, 2, 1, 1, 1, 10, 6, 4, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.multiply(grad, tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), tf.math.add(tf.math.sqrt(grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.negative(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), grad)), tf.math.square(alpha)), tf.math.square(grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3038320541381836, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09536388516426086, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 3, 2, 8, 5], [0, 1, 1, 0, 2], [0, 39, 39], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 5, 1, 0], [16, 1], [0, 0, 1, 1, 0, 1, 1, 1], [1, 2, 6, 2, 3, 2, 1], [3, 6, 3, 6, 0], [0], [1], [0], [2], [0]], "fitness": -0.09342857450246811, "mapping_values": [1, 6, 3, 3, 1, 2, 1, 1, 0, 7, 3, 4, 0, 1, 0, 1, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.add(sigma, grad), tf.math.divide_no_nan(sigma, grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3108866214752197, 2.3103561401367188, 2.310732364654541, 2.309605598449707, 2.309764862060547, 2.3099653720855713], "accuracy": [0.09047681838274002, 0.09219389408826828, 0.08968432247638702, 0.09166556596755981, 0.09034473448991776, 0.09047681838274002], "val_loss": [2.3082449436187744, 2.3082449436187744, 2.3082449436187744, 2.3082449436187744, 2.3082449436187744, 2.3082449436187744], "val_accuracy": [0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 6, 2, 6, 5], [0, 2, 1, 0, 2], [53, 39, 39], [1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 6, 5, 2, 1], [0, 6, 1, 6, 5], [0, 9], [1], [0], [2], [0]], "fitness": -0.09285714477300644, "mapping_values": [1, 11, 6, 5, 2, 1, 0, 1, 0, 6, 4, 2, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad), alpha), tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.negative(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.30960750579834, 2.308577060699463, 2.309781789779663, 2.309644937515259, 2.310664653778076, 2.3103811740875244], "accuracy": [0.09536388516426086, 0.09470347315073013, 0.09338264167308807, 0.09060890227556229, 0.09047681838274002, 0.09536388516426086], "val_loss": [2.308457612991333, 2.308457612991333, 2.308457612991333, 2.308457612991333, 2.308457612991333, 2.308457612991333], "val_accuracy": [0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869]}}]