[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8208571672439575, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2092182636260986, 1.605381727218628, 1.1548253297805786, 0.9801524877548218, 0.8900997042655945, 0.842498242855072, 0.8095277547836304, 0.7454591989517212, 0.725960373878479, 0.7367724776268005, 0.6789916157722473, 0.6826003193855286, 0.6392671465873718, 0.646100640296936, 0.6360634565353394, 0.604916512966156, 0.594444751739502, 0.6009414792060852, 0.602782666683197, 0.5680379271507263, 0.5657291412353516, 0.5557680130004883, 0.5545673966407776, 0.5531584620475769, 0.5286248922348022, 0.5224095582962036, 0.5104259848594666, 0.5140957832336426, 0.5043720602989197, 0.5093007683753967, 0.5108616948127747, 0.49339795112609863, 0.4807806611061096, 0.48524191975593567, 0.48302286863327026, 0.4720703065395355, 0.46975335478782654, 0.4635773301124573, 0.45025667548179626, 0.46932747960090637], "accuracy": [0.2665433883666992, 0.5046889185905457, 0.603090763092041, 0.6494518518447876, 0.6804913282394409, 0.6991150379180908, 0.7013604640960693, 0.726192057132721, 0.7268524765968323, 0.7243428826332092, 0.7511557340621948, 0.7458723783493042, 0.7593448758125305, 0.7588165402412415, 0.7618544697761536, 0.7709681391716003, 0.7817989587783813, 0.7741381525993347, 0.7753269076347351, 0.7917051911354065, 0.7927618622779846, 0.7975168228149414, 0.7922335267066956, 0.793950617313385, 0.8034605979919434, 0.8021397590637207, 0.8120459914207458, 0.8075551390647888, 0.8117818236351013, 0.8100647330284119, 0.8108572363853455, 0.8231409192085266, 0.8265751004219055, 0.8183859586715698, 0.8198388814926147, 0.8206313848495483, 0.8249900937080383, 0.8256505131721497, 0.8309338092803955, 0.8245938420295715], "val_loss": [1.916079044342041, 1.102210283279419, 0.9538471698760986, 0.7402086853981018, 0.7957582473754883, 0.7041485905647278, 0.6631180644035339, 0.665131688117981, 0.6410552859306335, 0.5932469964027405, 0.5834534764289856, 0.5636764168739319, 0.5487058162689209, 0.5693286657333374, 0.5625550746917725, 0.5350030660629272, 0.572465181350708, 0.5200717449188232, 0.5099485516548157, 0.5035344362258911, 0.48861101269721985, 0.49908795952796936, 0.5272332429885864, 0.48405787348747253, 0.4667629301548004, 0.4802980124950409, 0.457253098487854, 0.46264997124671936, 0.454804927110672, 0.46556514501571655, 0.46205243468284607, 0.43805012106895447, 0.46438267827033997, 0.4365602135658264, 0.4341735541820526, 0.4627205431461334, 0.43968215584754944, 0.4294351041316986, 0.4384782016277313, 0.4317006766796112], "val_accuracy": [0.5636666417121887, 0.6413333415985107, 0.6626666784286499, 0.7296666502952576, 0.6973333358764648, 0.7336666584014893, 0.7556666731834412, 0.7326666712760925, 0.7549999952316284, 0.7760000228881836, 0.7773333191871643, 0.79666668176651, 0.7893333435058594, 0.7889999747276306, 0.778333306312561, 0.8013333082199097, 0.7816666960716248, 0.796999990940094, 0.8169999718666077, 0.8173333406448364, 0.8226666450500488, 0.8109999895095825, 0.7993333339691162, 0.8183333277702332, 0.8230000138282776, 0.8223333358764648, 0.8353333473205566, 0.8276666402816772, 0.8403333425521851, 0.8266666531562805, 0.8256666660308838, 0.8460000157356262, 0.8323333263397217, 0.8423333168029785, 0.8479999899864197, 0.8220000267028809, 0.8416666388511658, 0.843999981880188, 0.8423333168029785, 0.843999981880188]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1], [8, 2, 2, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 4, 6, 3, 8, 0, 3, 6, 0], [2, 0, 3, 1, 0, 5, 2], [21, 1], [1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [0, 2, 0, 2, 5, 7, 2], [0, 6, 1, 6, 0], [0, 99], [1], [0], [7], [0]], "fitness": -0.23228570818901062, "mapping_values": [1, 6, 3, 3, 1, 17, 10, 7, 2, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(beta), tf.math.negative(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.multiply(grad, alpha)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.negative(beta)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.4128615856170654, 2.3005897998809814, 3.428572416305542, 2.248006820678711, 2.3057310581207275, 2.3035826683044434, 2.303474187850952], "accuracy": [0.19138818979263306, 0.13815876841545105, 0.16457535326480865, 0.15863162279129028, 0.09893012791872025, 0.10038304328918457, 0.1014397069811821], "val_loss": [2.304952383041382, 2.2715024948120117, 2.2735893726348877, 2.305363178253174, 2.3028531074523926, 2.3026700019836426, 2.3025288581848145], "val_accuracy": [0.10133333504199982, 0.23866666853427887, 0.20100000500679016, 0.10166666656732559, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 2, 3, 5, 7, 7, 5, 3], [3, 2, 1, 0, 2, 0, 1, 2], [0, 39, 39], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 6, 6, 7, 8, 2, 9, 7, 0], [2, 0, 3, 0, 0, 1], [16, 1, 0, 26], [1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [7, 2, 0, 2, 5, 2, 1], [0, 6, 1, 7, 0], [0, 22], [0, 1], [0], [2], [0]], "fitness": -0.13942857086658478, "mapping_values": [1, 18, 10, 8, 2, 16, 10, 6, 4, 1, 0, 1, 1, 2, 1, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.math.multiply(grad, grad), tf.math.square(alpha)), tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.multiply(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad)), tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.negative(alpha))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.309372663497925, 2.302945137023926, 2.3009696006774902, 2.302543878555298, 2.302943229675293, 2.303429365158081, 2.304306983947754, 2.3060696125030518], "accuracy": [0.09060890227556229, 0.10540219396352768, 0.10474177449941635, 0.11094967275857925, 0.10896842926740646, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.304656744003296, 2.3005754947662354, 2.3024110794067383, 2.302717685699463, 2.3029537200927734, 2.3036067485809326, 2.3048465251922607, 2.3069651126861572], "val_accuracy": [0.09866666793823242, 0.10899999737739563, 0.1316666603088379, 0.10533333569765091, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 2, 5, 2, 3, 5], [0, 2, 1, 0, 2], [0, 18, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 1, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 8, 2, 5, 9], [3, 6, 1, 6, 0], [0, 89], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 12, 7, 5, 2, 8, 6, 2, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.square(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), alpha), tf.math.multiply(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), alpha), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.add(tf.math.square(sigma), tf.constant(0.0, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], [1, 2, 3, 2, 3, 5, 2, 4, 3, 5, 1, 2, 3, 5], [0, 2, 1, 1, 2, 2, 0, 2, 2, 2, 3, 0], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 2, 3, 0, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 2, 5, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 5, 5, 7, 6, 6], [2, 4, 4, 1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 26, 14, 12, 3, 10, 6, 4, 1, 12, 7, 5, 2, 10, 6, 4, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.math.square(alpha), tf.math.add(alpha, grad))), tf.math.pow(tf.math.multiply(grad, tf.math.square(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), tf.math.add(grad, tf.math.multiply(grad, grad)))), tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.negative(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(grad, tf.math.square(tf.math.add(tf.math.subtract(alpha, grad), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.divide_no_nan(grad, alpha))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}]