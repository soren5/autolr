[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.7854285836219788, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2130653858184814, 1.618186116218567, 1.1535996198654175, 0.986933708190918, 0.8820356130599976, 0.8417869210243225, 0.7952818274497986, 0.7457658648490906, 0.7165766954421997, 0.7146784663200378, 0.7100683450698853, 0.6602024435997009, 0.6580449342727661, 0.6283503770828247, 0.6258163452148438, 0.5933760404586792, 0.6113147735595703, 0.5884076952934265, 0.5642016530036926, 0.5652830004692078], "accuracy": [0.25795799493789673, 0.5070664286613464, 0.6036190986633301, 0.6470743417739868, 0.6811517477035522, 0.6950204968452454, 0.709021270275116, 0.7239466309547424, 0.7387399077415466, 0.7314753532409668, 0.7338528633117676, 0.7535332441329956, 0.7510236501693726, 0.7613261342048645, 0.7658169269561768, 0.7808743715286255, 0.7730814814567566, 0.7783648371696472, 0.7880068421363831, 0.7915731072425842], "val_loss": [1.9291490316390991, 1.092628836631775, 0.8714615106582642, 0.7706102132797241, 0.7837555408477783, 0.6826164126396179, 0.6553797721862793, 0.6454708576202393, 0.6787415146827698, 0.5869993567466736, 0.5792441964149475, 0.5628000497817993, 0.5565205812454224, 0.554539144039154, 0.5380734205245972, 0.5257090926170349, 0.5182806849479675, 0.5186487436294556, 0.5150986909866333, 0.5043604969978333], "val_accuracy": [0.5793333053588867, 0.6576666831970215, 0.6903333067893982, 0.722000002861023, 0.7083333134651184, 0.7386666536331177, 0.7476666569709778, 0.762333333492279, 0.7279999852180481, 0.777999997138977, 0.7856666445732117, 0.7919999957084656, 0.7883333563804626, 0.7833333611488342, 0.8053333163261414, 0.7983333468437195, 0.800000011920929, 0.8026666641235352, 0.8016666769981384, 0.8033333420753479]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 5, 3, 9], [1, 3, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], [0, 2, 0, 6, 3, 6, 2, 7], [2, 0, 1, 1, 0, 3, 3], [90, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0], [5, 2, 7, 2, 5, 2, 1, 7, 8, 6, 3, 5, 9, 2, 3, 4, 9, 2, 2, 6, 2, 8, 1, 9], [0, 6, 5, 6, 1, 1, 3, 0, 1, 5, 0, 4, 1, 0], [9, 22, 40, 41, 32, 90, 7], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 0, 15, 8, 7, 2, 38, 24, 14, 7, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.square(grad), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.add(tf.math.add(tf.math.add(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), grad), tf.math.square(tf.math.add(tf.math.subtract(grad, tf.math.add(tf.math.sqrt(grad), alpha)), tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(sigma, tf.math.pow(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), alpha))))), tf.math.add(tf.math.divide_no_nan(tf.math.add(grad, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), grad), tf.math.sqrt(tf.math.subtract(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))))))), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.5772670752569426e+18, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.16761326789855957, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 3, 2, 3, 9, 9], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 2, 0, 2, 8, 9, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 7, 3, 3, 12, 7, 5, 2, 8, 6, 2, 2, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(grad, alpha)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [155.3220672607422, 305.93243408203125, 380.60272216796875, 311.86370849609375, 400.8907775878906, 346.2603454589844, 372.4816589355469, 467.1567077636719, 468.2528076171875, 466.9736022949219, 370.42388916015625, 388.7358703613281], "accuracy": [0.0944393053650856, 0.10170386731624603, 0.09866596013307571, 0.09879804402589798, 0.10447761416435242, 0.09655263274908066, 0.09893012791872025, 0.10328886657953262, 0.09576013684272766, 0.1002509593963623, 0.10408136248588562, 0.1002509593963623], "val_loss": [405.9084167480469, 286.9870300292969, 214.99249267578125, 399.6653747558594, 315.7434997558594, 589.3748168945312, 478.2568664550781, 388.8265075683594, 379.7797546386719, 356.4132385253906, 650.7272338867188, 441.3174133300781], "val_accuracy": [0.0989999994635582, 0.09966666996479034, 0.1003333330154419, 0.1003333330154419, 0.10133333504199982, 0.0989999994635582, 0.10266666859388351, 0.10066666454076767, 0.09966666996479034, 0.10133333504199982, 0.0989999994635582, 0.10266666859388351]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 1], [1, 2, 1, 0, 2], [91, 39, 39], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 2, 7, 6, 4, 2, 2], [2, 0, 3, 1, 0, 3], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 2, 0, 2, 3, 1, 1], [0, 6, 1, 6, 0, 0], [0, 22, 42], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 12, 6, 6, 2, 13, 7, 6, 3, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.pow(grad, tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.subtract(alpha, grad))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [6, 2, 3, 1, 3, 5], [0, 2, 1, 0, 0], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 0, 2, 5, 0, 7, 1, 6, 4, 5, 4, 6, 1, 8, 7, 9, 1, 3, 1, 3, 6, 5, 5, 1, 8, 7, 5, 5, 0, 7, 9, 4, 5, 1, 2, 3, 7], [0, 3, 1, 2, 3, 0, 5, 3, 3, 7, 1, 2, 5, 1, 1, 2, 3, 2, 3, 4, 0, 4], [0, 22, 80, 86, 98], [1], [0], [2], [0]], "fitness": -0.08714285492897034, "mapping_values": [1, 7, 3, 4, 2, 10, 6, 4, 1, 60, 38, 22, 5, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(grad, alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.math.square(tf.math.negative(tf.math.add(tf.math.subtract(tf.math.divide_no_nan(tf.math.pow(tf.math.square(alpha), beta), tf.math.pow(sigma, tf.math.divide_no_nan(tf.math.subtract(tf.math.sqrt(tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), grad), sigma))), tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(tf.math.square(sigma), tf.math.square(tf.math.subtract(tf.math.sqrt(grad), tf.math.add(tf.math.square(tf.math.square(alpha)), tf.math.negative(beta))))), tf.math.add(grad, alpha)), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.pow(tf.math.square(beta), tf.math.subtract(sigma, beta)))), tf.math.add(sigma, tf.math.multiply(tf.math.add(grad, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), grad)))))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.309401273727417, 2.310580253601074, 2.3105690479278564, 2.3084371089935303, 2.3102176189422607, 2.3096320629119873], "accuracy": [0.08770307898521423, 0.08730682730674744, 0.0944393053650856, 0.09589222073554993, 0.08677849918603897, 0.09311848133802414], "val_loss": [2.3083131313323975, 2.3083131313323975, 2.3083131313323975, 2.3083131313323975, 2.3083131313323975, 2.3083131313323975], "val_accuracy": [0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925]}}]