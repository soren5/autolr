[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8091428279876709, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2058212757110596, 1.5986015796661377, 1.1654384136199951, 0.9720131754875183, 0.8890765309333801, 0.8372957110404968, 0.7888624668121338, 0.7411696910858154, 0.7133470177650452, 0.6762384176254272, 0.6842597126960754, 0.6801716685295105, 0.6532002091407776, 0.6337584257125854, 0.6370555758476257, 0.6102193593978882, 0.6100844740867615, 0.5732309222221375, 0.5744470357894897, 0.5690421462059021, 0.5602041482925415, 0.5562132000923157, 0.5324472188949585, 0.5322641730308533, 0.5309143662452698, 0.5190451741218567, 0.4944901168346405, 0.5037062168121338, 0.501754641532898, 0.5045952200889587, 0.4788398742675781, 0.47550198435783386, 0.48052260279655457, 0.4876541197299957, 0.47471916675567627, 0.4496341347694397, 0.4616973102092743, 0.4532410800457001, 0.4395706057548523, 0.4409697651863098, 0.43254372477531433, 0.42863112688064575, 0.4284783601760864, 0.42062950134277344, 0.4255147874355316], "accuracy": [0.27341169118881226, 0.5071985125541687, 0.5988640785217285, 0.654999315738678, 0.6781138777732849, 0.6980583667755127, 0.709021270275116, 0.7259278893470764, 0.7395324110984802, 0.7493065595626831, 0.7486461400985718, 0.7477215528488159, 0.7577598690986633, 0.7650244235992432, 0.7631752490997314, 0.7751948237419128, 0.778761088848114, 0.7878747582435608, 0.7866860628128052, 0.7907806038856506, 0.796328067779541, 0.7952714562416077, 0.7993659973144531, 0.8033285140991211, 0.8041210174560547, 0.8075551390647888, 0.81548011302948, 0.8123101592063904, 0.8183859586715698, 0.8165367841720581, 0.8234050869941711, 0.824329674243927, 0.8251221776008606, 0.8185180425643921, 0.8255184292793274, 0.8397833704948425, 0.8323867321014404, 0.8323867321014404, 0.8399154543876648, 0.8429533839225769, 0.8389908671379089, 0.8417646288871765, 0.8418967127799988, 0.8457271456718445, 0.8430854678153992], "val_loss": [1.9032213687896729, 1.1461321115493774, 0.9301942586898804, 0.8317991495132446, 0.7513911128044128, 0.6740577220916748, 0.6796981692314148, 0.6444780826568604, 0.586317777633667, 0.6516282558441162, 0.6275708675384521, 0.5530641078948975, 0.5465606451034546, 0.5459762215614319, 0.5495781898498535, 0.5305972695350647, 0.5373591780662537, 0.5130392909049988, 0.4874671995639801, 0.4793221056461334, 0.47624877095222473, 0.4751873314380646, 0.4624157249927521, 0.4668964743614197, 0.4651259779930115, 0.4524700939655304, 0.4451201856136322, 0.4656323790550232, 0.43725186586380005, 0.43756169080734253, 0.4364178776741028, 0.42134562134742737, 0.421700656414032, 0.42742839455604553, 0.4208575487136841, 0.41474610567092896, 0.4047167897224426, 0.4110543727874756, 0.39870354533195496, 0.39242807030677795, 0.40629011392593384, 0.393932044506073, 0.39135652780532837, 0.3865697383880615, 0.38408374786376953], "val_accuracy": [0.5809999704360962, 0.6209999918937683, 0.6543333530426025, 0.6899999976158142, 0.6909999847412109, 0.7403333187103271, 0.7239999771118164, 0.7666666507720947, 0.7739999890327454, 0.7276666760444641, 0.7609999775886536, 0.7866666913032532, 0.7926666736602783, 0.7863333225250244, 0.7799999713897705, 0.800000011920929, 0.7833333611488342, 0.8069999814033508, 0.815666675567627, 0.8243333101272583, 0.8193333148956299, 0.8193333148956299, 0.8296666741371155, 0.8199999928474426, 0.8263333439826965, 0.8289999961853027, 0.8306666612625122, 0.8223333358764648, 0.8356666564941406, 0.8346666693687439, 0.8373333215713501, 0.8420000076293945, 0.8389999866485596, 0.8393333554267883, 0.8399999737739563, 0.843999981880188, 0.8493333458900452, 0.8489999771118164, 0.8493333458900452, 0.859000027179718, 0.8460000157356262, 0.8526666760444641, 0.8553333282470703, 0.8546666502952576, 0.859000027179718]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1], [0, 2, 7, 2, 3, 5, 8, 2, 1, 2, 5, 2, 0, 9, 4, 4, 3, 6, 5, 6, 2, 8, 4, 7, 9, 5, 4, 2, 1, 2, 1, 6, 3, 2, 2, 8, 0, 2, 8, 5, 4, 9, 6, 0, 8, 9, 2, 1, 8, 1, 1, 0, 7, 8, 0, 4, 9], [0, 2, 1, 0, 2, 2, 2, 3, 1, 2, 1, 3, 3, 0, 1, 3, 3, 0, 2, 1, 3, 3, 2, 0, 3, 2, 1, 3, 3, 2], [0, 39, 39, 12, 54, 27, 63, 46, 28, 4], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [3, 2, 0, 6, 3, 9, 2], [2, 2, 3, 1, 0], [16, 1], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [0, 4, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 87, 57, 30, 10, 8, 4, 4, 0, 5, 3, 2, 1, 1, 0, 1, 0], "tree_depth": 39, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(tf.math.add(tf.math.subtract(grad, tf.math.add(tf.math.square(tf.math.add(tf.math.negative(alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.pow(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.square(tf.math.divide_no_nan(grad, grad)), tf.math.add(tf.math.sqrt(tf.math.pow(tf.math.add(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.math.pow(tf.math.add(tf.math.subtract(alpha, grad), tf.math.add(alpha, grad)), grad))), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(alpha, tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.add(grad, tf.math.add(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)))), tf.math.negative(alpha)))), tf.math.add(tf.math.sqrt(grad), tf.math.square(tf.math.pow(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), grad)))))))), grad), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.negative(tf.math.sqrt(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.subtract(tf.math.sqrt(tf.math.subtract(grad, grad)), tf.math.subtract(alpha, tf.math.negative(tf.math.add(grad, tf.math.sqrt(grad))))), tf.math.negative(tf.math.pow(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), grad)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, beta), tf.math.negative(tf.math.divide_no_nan(grad, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [4, 2, 3, 2, 3, 5], [3, 0, 1, 0, 2, 3], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 0, 7, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 0, 2, 5, 5, 1, 6, 1, 2, 9, 8, 2, 5, 0, 6, 8, 3, 9, 2, 5, 8], [5, 6, 1, 6, 0, 2, 1, 5, 5], [0, 22, 72], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 6, 6, 2, 8, 5, 3, 1, 31, 22, 9, 3, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.add(tf.math.multiply(grad, tf.constant(0.0, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad)), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(grad), tf.math.square(tf.math.subtract(tf.math.divide_no_nan(grad, alpha), grad)))), tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(tf.math.square(tf.math.negative(tf.math.divide_no_nan(beta, tf.math.sqrt(tf.math.multiply(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(alpha), tf.math.sqrt(grad))))))), grad)))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09219389408826828, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [2, 0, 9, 2, 3, 5], [0, 2, 1, 0, 3], [0, 39, 39], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 4, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0], [0, 2, 0, 2, 5, 2, 1], [1, 6, 1, 6, 0], [0, 22], [1], [0], [0], [0]], "fitness": -0.09314285963773727, "mapping_values": [1, 6, 4, 2, 2, 5, 3, 2, 1, 8, 5, 3, 0, 1, 0, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(alpha), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.310580253601074, 2.31062912940979, 2.3100430965423584, 2.3096790313720703, 2.3095319271087646, 2.3099286556243896], "accuracy": [0.09285431355237961, 0.08902391046285629, 0.09113723784685135, 0.09219389408826828, 0.09457138925790787, 0.0948355570435524], "val_loss": [2.308166980743408, 2.308166980743408, 2.308166980743408, 2.308166980743408, 2.308166980743408, 2.308166980743408], "val_accuracy": [0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [3, 0, 1, 0, 1], [0, 39, 92], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [13, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 2, 1, 5, 6, 5], [0, 6, 1, 5], [0, 22], [1], [0], [2], [0]], "fitness": -0.09000000357627869, "mapping_values": [1, 11, 6, 5, 2, 1, 0, 1, 0, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(grad, tf.constant(0.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha)))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.311143398284912, 2.309770107269287, 2.3091158866882324, 2.3100249767303467, 2.3106272220611572, 2.3100008964538574], "accuracy": [0.08849557489156723, 0.09219389408826828, 0.08730682730674744, 0.09034473448991776, 0.0878351628780365, 0.08796724677085876], "val_loss": [2.307523727416992, 2.307523727416992, 2.307523727416992, 2.307523727416992, 2.307523727416992, 2.307523727416992], "val_accuracy": [0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186]}}]