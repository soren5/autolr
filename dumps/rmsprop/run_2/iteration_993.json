[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.817714273929596, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.207700729370117, 1.5878180265426636, 1.1272830963134766, 0.9695741534233093, 0.8909139037132263, 0.8102337121963501, 0.7667834758758545, 0.7381280064582825, 0.7085819244384766, 0.6782891750335693, 0.6962730884552002, 0.6606980562210083, 0.6411029696464539, 0.6335099339485168, 0.6066505312919617, 0.5936027765274048, 0.6020014882087708, 0.5725794434547424, 0.5753012895584106, 0.5653704404830933, 0.5486341714859009, 0.545333981513977, 0.5412804484367371, 0.5193957686424255, 0.5313601493835449, 0.5275328159332275], "accuracy": [0.2763175368309021, 0.5130101442337036, 0.6026945114135742, 0.6444327235221863, 0.6732267737388611, 0.7043983340263367, 0.7173424959182739, 0.7255316376686096, 0.7401928305625916, 0.7493065595626831, 0.7374191284179688, 0.7478536367416382, 0.7585523724555969, 0.7672698497772217, 0.7675340175628662, 0.77677983045578, 0.7737419009208679, 0.7845727205276489, 0.783119797706604, 0.7882710099220276, 0.7961959838867188, 0.7997622489929199, 0.7954035401344299, 0.8064984679222107, 0.8053097128868103, 0.8041210174560547], "val_loss": [1.9209991693496704, 1.1153595447540283, 0.9199972152709961, 0.8681474328041077, 0.7841374278068542, 0.7519856691360474, 0.7335663437843323, 0.6569799184799194, 0.6602097749710083, 0.6231489777565002, 0.674775242805481, 0.6235752105712891, 0.6233458518981934, 0.5847620368003845, 0.5900651216506958, 0.6001713275909424, 0.566933810710907, 0.5626722574234009, 0.5509973764419556, 0.5400770902633667, 0.5338671207427979, 0.5419843792915344, 0.5286315679550171, 0.5782226324081421, 0.5358922481536865, 0.522206723690033], "val_accuracy": [0.5326666831970215, 0.6466666460037231, 0.6729999780654907, 0.7046666741371155, 0.6963333487510681, 0.7103333473205566, 0.6996666789054871, 0.7403333187103271, 0.7519999742507935, 0.7586666941642761, 0.7329999804496765, 0.7673333287239075, 0.7583333253860474, 0.7643333077430725, 0.7676666378974915, 0.7676666378974915, 0.7900000214576721, 0.7846666574478149, 0.7963333129882812, 0.7993333339691162, 0.8050000071525574, 0.7903333306312561, 0.8019999861717224, 0.7683333158493042, 0.8006666898727417, 0.7976666688919067]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [6, 3, 3, 9, 3, 5], [1, 2, 1, 3, 2], [0, 39, 39], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 8, 3, 8, 2], [5, 0, 3, 1, 0], [16, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 3, 2, 1], [0, 6, 1, 6, 0], [0, 22], [0, 0, 0, 0, 1], [0, 0, 8, 5], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 1, 5, 3, 2, 1, 1, 0, 1, 1, 5, 4, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha), grad), alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.sqrt(tf.math.square(beta))))", "other_info": {"loss": [2.3031651973724365, 2.3137965202331543, 2.5237877368927, 3.520772933959961, 5.495551586151123, 8.540508270263672, 12.502750396728516, 17.460979461669922, 23.402315139770508], "accuracy": [0.09747721254825592, 0.09430722147226334, 0.09813763201236725, 0.09906221181154251, 0.09734513610601425, 0.09628847241401672, 0.09576013684272766, 0.10051512718200684, 0.09391097724437714], "val_loss": [2.3035290241241455, 2.354494571685791, 2.93226957321167, 4.496122360229492, 7.075941562652588, 10.613909721374512, 15.145362854003906, 20.65321922302246, 27.14727020263672], "val_accuracy": [0.10100000351667404, 0.10133333504199982, 0.09466666728258133, 0.10400000214576721, 0.09466666728258133, 0.10100000351667404, 0.09466666728258133, 0.10400000214576721, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 50, 39], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 3, 0, 6, 3, 8, 2], [0, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1], [7, 2, 0, 2, 5, 2, 1, 4, 3, 2, 1, 0, 1, 3, 8, 6, 7, 1, 4, 5, 7, 9, 2, 0, 6], [0, 6, 1, 4, 0, 1, 3, 5, 4, 5, 6, 2, 6, 5, 7, 2, 1, 7], [0, 22, 43], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [0, 6, 0, 3, 7, 6, 7, 5, 1, 1, 7, 6, 8, 0, 3, 1], [2, 4, 1, 0, 1, 4, 4, 4, 1, 5, 0, 5], [0, 50]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 7, 4, 3, 2, 43, 25, 18, 3, 28, 16, 12, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, alpha)), grad)), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(tf.math.subtract(tf.math.negative(alpha), sigma), tf.math.subtract(tf.math.multiply(tf.math.sqrt(tf.math.divide_no_nan(grad, grad)), tf.math.add(grad, tf.math.subtract(tf.math.pow(grad, beta), tf.math.square(tf.math.add(grad, grad))))), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), grad)), tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(alpha, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(beta, grad)), tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.math.subtract(tf.math.subtract(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(grad, grad)))), tf.math.sqrt(grad)), tf.math.negative(alpha)), tf.math.multiply(tf.math.subtract(grad, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [5, 2, 3, 1, 3, 5, 7, 8, 7, 7], [2, 2, 1, 0, 2, 1, 1, 3], [94, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 2, 6, 7, 8, 2, 3, 0], [2, 4, 3, 1, 4, 5, 2], [80, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 2, 0, 2, 5, 2], [0, 0, 1, 2], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 10, 8, 1, 16, 9, 7, 0, 10, 6, 4, 2, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.subtract(grad, tf.math.multiply(grad, tf.math.square(tf.math.add(tf.math.sqrt(alpha), tf.math.add(tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), grad), alpha))))), alpha), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(grad), tf.math.add(grad, alpha)), grad)), tf.math.multiply(grad, tf.math.negative(beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, beta))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 1], [97, 39, 39], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 9, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [11, 22], [0, 1], [0], [2], [0]], "fitness": -0.09457142651081085, "mapping_values": [1, 6, 3, 3, 1, 2, 1, 1, 0, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), grad), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3089399337768555, 2.3098697662353516, 2.3094472885131836, 2.3098466396331787, 2.310838460922241, 2.309450387954712], "accuracy": [0.09285431355237961, 0.09245806187391281, 0.09113723784685135, 0.08691058307886124, 0.09087307006120682, 0.09087307006120682], "val_loss": [2.3084781169891357, 2.3084781169891357, 2.3084781169891357, 2.3084781169891357, 2.3084781169891357, 2.3084781169891357], "val_accuracy": [0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076]}}]