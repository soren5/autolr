[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8494285941123962, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.208291530609131, 1.6000328063964844, 1.1500056982040405, 0.9872527122497559, 0.8761332035064697, 0.806251585483551, 0.7691217064857483, 0.759144127368927, 0.6970150470733643, 0.6795702576637268, 0.6759670972824097, 0.6559786796569824, 0.643201470375061, 0.6521947979927063, 0.6031301617622375, 0.593582808971405, 0.583027720451355, 0.5767403841018677, 0.5575748085975647, 0.5658671259880066, 0.5500097870826721, 0.5390137434005737, 0.5408197045326233, 0.5299952030181885, 0.5136900544166565, 0.5095890164375305, 0.5132312774658203, 0.5045961737632751, 0.49423447251319885, 0.48714444041252136, 0.47278162837028503, 0.4776287376880646, 0.46100902557373047, 0.4532681107521057, 0.46026018261909485, 0.4584863781929016, 0.4434332847595215, 0.4463467299938202, 0.4401269853115082, 0.4333254098892212, 0.4332103431224823, 0.44146886467933655, 0.4297581613063812, 0.417329877614975, 0.41726022958755493, 0.415508508682251, 0.4147963523864746, 0.4037977159023285, 0.4008182883262634, 0.3978165090084076, 0.38912612199783325, 0.39297983050346375, 0.389731228351593, 0.38997599482536316, 0.39549192786216736, 0.3782496750354767], "accuracy": [0.27116629481315613, 0.5165764093399048, 0.6008453369140625, 0.6478668451309204, 0.6808875799179077, 0.7102100253105164, 0.7213049530982971, 0.7219653725624084, 0.7408532500267029, 0.7512878179550171, 0.7469290494918823, 0.7564390301704407, 0.7519482374191284, 0.7572315335273743, 0.7740060687065125, 0.7778365015983582, 0.7841764688491821, 0.7898560166358948, 0.7947431206703186, 0.7913089394569397, 0.7955356240272522, 0.8018755912780762, 0.7964601516723633, 0.8012151718139648, 0.8107251524925232, 0.8142913579940796, 0.8128384351730347, 0.8162726163864136, 0.816008448600769, 0.8198388814926147, 0.8271034359931946, 0.8232730031013489, 0.8310658931732178, 0.8345000743865967, 0.8304054737091064, 0.8334434032440186, 0.8370096683502197, 0.8339717388153076, 0.8393871188163757, 0.8469158411026001, 0.8425571322441101, 0.8381983637809753, 0.8438779711723328, 0.8442742228507996, 0.8418967127799988, 0.8449346423149109, 0.8428213000297546, 0.8491612672805786, 0.8482366800308228, 0.852331280708313, 0.8585391640663147, 0.8568220734596252, 0.8558974862098694, 0.8576145768165588, 0.857218325138092, 0.8643507957458496], "val_loss": [1.907955527305603, 1.084955096244812, 0.8696974515914917, 0.8296632766723633, 0.7083238363265991, 0.6423558592796326, 0.660045325756073, 0.6243957877159119, 0.5992504954338074, 0.5878039598464966, 0.6146671772003174, 0.5598833560943604, 0.5681401491165161, 0.5513370037078857, 0.5302948951721191, 0.5335811972618103, 0.4983295202255249, 0.5160313248634338, 0.49491673707962036, 0.48806172609329224, 0.47635388374328613, 0.525789201259613, 0.47009292244911194, 0.46708789467811584, 0.446911096572876, 0.4632496237754822, 0.46939799189567566, 0.4388893246650696, 0.4651716351509094, 0.4307521879673004, 0.4495830833911896, 0.42549359798431396, 0.4267941117286682, 0.41875845193862915, 0.42662516236305237, 0.43312281370162964, 0.4063466787338257, 0.42979249358177185, 0.40955305099487305, 0.4017227292060852, 0.4158739149570465, 0.408794105052948, 0.4008736312389374, 0.39490413665771484, 0.3959028422832489, 0.4125216007232666, 0.3871752619743347, 0.3877815902233124, 0.38081949949264526, 0.4039989709854126, 0.37657707929611206, 0.38107097148895264, 0.3966379463672638, 0.3739972412586212, 0.3783443868160248, 0.3706527650356293], "val_accuracy": [0.5889999866485596, 0.6506666541099548, 0.6933333277702332, 0.6743333339691162, 0.7423333525657654, 0.7586666941642761, 0.753333330154419, 0.7676666378974915, 0.7746666669845581, 0.781000018119812, 0.7606666684150696, 0.7910000085830688, 0.7879999876022339, 0.7876666784286499, 0.8073333501815796, 0.8013333082199097, 0.8190000057220459, 0.8069999814033508, 0.8216666579246521, 0.8143333196640015, 0.8230000138282776, 0.7990000247955322, 0.8270000219345093, 0.8203333616256714, 0.8403333425521851, 0.8253333568572998, 0.8266666531562805, 0.8383333086967468, 0.8246666789054871, 0.8426666855812073, 0.8376666903495789, 0.8443333506584167, 0.8413333296775818, 0.8519999980926514, 0.843999981880188, 0.8463333249092102, 0.8550000190734863, 0.8399999737739563, 0.8533333539962769, 0.8600000143051147, 0.847000002861023, 0.847000002861023, 0.8576666712760925, 0.8633333444595337, 0.859666645526886, 0.8496666550636292, 0.8659999966621399, 0.8640000224113464, 0.8616666793823242, 0.8516666889190674, 0.871666669845581, 0.8663333058357239, 0.8523333072662354, 0.8700000047683716, 0.8616666793823242, 0.8706666827201843]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 1, 3, 2, 3, 5, 8], [0, 2, 3, 2, 2], [0, 84, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5, 8, 1], [1, 6, 1, 7, 0], [0, 22], [0, 0, 1, 1], [0, 2], [2, 7], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 1, 12, 7, 5, 2, 8, 5, 3, 0, 4, 2, 2, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(grad, grad), tf.math.multiply(grad, tf.math.square(tf.math.sqrt(grad)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(grad, alpha)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(alpha), grad)), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(beta, grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 5, 3, 2, 3, 5], [0, 2, 1, 0, 1], [0, 85, 39], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 8, 3, 8, 2], [2, 0, 0, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 2, 0, 4, 5, 2, 4, 4, 7, 4, 7, 8, 9, 7, 3], [0, 6, 1, 6, 0, 6, 6, 3, 2, 7], [77, 22, 50], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 11, 7, 4, 2, 25, 15, 10, 3, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.sqrt(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.pow(tf.math.square(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.sqrt(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), grad), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.multiply(grad, grad), sigma)), beta)))), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [4, 2, 3, 2, 3, 5, 6, 8, 7, 6, 6, 5, 2, 1, 4], [0, 2, 1, 0, 2, 1, 2, 1, 1, 0, 3, 0, 3], [77, 39, 39, 55], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 8, 2, 5, 2, 1], [0, 2, 1, 2, 3], [0, 22], [1], [0], [2], [0]], "fitness": -0.0925714299082756, "mapping_values": [1, 28, 15, 13, 4, 1, 0, 1, 0, 4, 3, 1, 1, 1, 0, 1, 0], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.math.square(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.subtract(grad, alpha))), tf.math.pow(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), grad)))), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3095335960388184, 2.308893918991089, 2.3098578453063965, 2.310774564743042, 2.3111789226531982, 2.309319257736206], "accuracy": [0.09298639744520187, 0.09219389408826828, 0.09694888442754745, 0.09285431355237961, 0.09166556596755981, 0.08796724677085876], "val_loss": [2.3088414669036865, 2.3088414669036865, 2.3088414669036865, 2.3088414669036865, 2.3088414669036865, 2.3088414669036865], "val_accuracy": [0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 9, 1, 3, 9], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 8, 0, 6, 3, 8, 2], [5, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 2, 5, 0, 8], [0, 6, 1, 6, 0], [0, 22], [0, 0], [0, 9], [2], [0]], "fitness": -0.09200000017881393, "mapping_values": [1, 2, 1, 1, 1, 3, 2, 1, 0, 7, 5, 2, 1, 2, 2, 0, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.310574769973755, 2.3090407848358154, 2.309978485107422, 2.310250759124756, 2.309314489364624, 2.309065580368042], "accuracy": [0.09219389408826828, 0.09140139818191528, 0.09206181764602661, 0.09206181764602661, 0.09417514503002167, 0.08928807079792023], "val_loss": [2.3084425926208496, 2.3084425926208496, 2.3084425926208496, 2.3084425926208496, 2.3084425926208496, 2.3084425926208496], "val_accuracy": [0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446]}}]