[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8114285469055176, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2086257934570312, 1.6080373525619507, 1.167173981666565, 0.97113436460495, 0.8906053900718689, 0.8194214701652527, 0.8006073236465454, 0.7530642151832581, 0.7435846328735352, 0.7147167325019836, 0.6827445030212402, 0.6659044027328491, 0.6519434452056885, 0.6384440660476685, 0.647457480430603, 0.6229838728904724, 0.591067910194397, 0.5970297455787659, 0.5842454433441162, 0.5689073801040649, 0.5533353686332703, 0.5552752017974854, 0.5484120845794678, 0.5278707146644592, 0.5343915820121765, 0.5300553441047668, 0.5172580480575562, 0.498228520154953, 0.5005232691764832, 0.4924972951412201, 0.48591673374176025, 0.4866926670074463, 0.47978276014328003, 0.4725267291069031], "accuracy": [0.2662792205810547, 0.500990629196167, 0.5927882790565491, 0.6524897813796997, 0.6763967871665955, 0.6954167485237122, 0.7099458575248718, 0.7226257920265198, 0.7207766771316528, 0.7322678565979004, 0.7504953145980835, 0.7530049085617065, 0.7648923397064209, 0.7622507214546204, 0.7572315335273743, 0.7737419009208679, 0.7804781198501587, 0.778761088848114, 0.7858935594558716, 0.7906485199928284, 0.7964601516723633, 0.7956677079200745, 0.7997622489929199, 0.8072909712791443, 0.7971205711364746, 0.8074230551719666, 0.8144234418869019, 0.819442629814148, 0.8152159452438354, 0.819970965385437, 0.8231409192085266, 0.81548011302948, 0.8278959393501282, 0.8232730031013489], "val_loss": [1.9236401319503784, 1.1202961206436157, 0.851212739944458, 0.7974011898040771, 0.7451816201210022, 0.7066635489463806, 0.7480069994926453, 0.6292468905448914, 0.6193787455558777, 0.6271860599517822, 0.5720791220664978, 0.574952244758606, 0.5690981149673462, 0.5693539381027222, 0.5541943311691284, 0.5342540144920349, 0.5214364528656006, 0.5282917618751526, 0.515737771987915, 0.5107871294021606, 0.5457112193107605, 0.5213222503662109, 0.49267977476119995, 0.4820863902568817, 0.49449917674064636, 0.4745577275753021, 0.47303324937820435, 0.478310227394104, 0.4620334506034851, 0.4547455310821533, 0.46375682950019836, 0.4612841308116913, 0.4564622938632965, 0.44815710186958313], "val_accuracy": [0.5370000004768372, 0.6439999938011169, 0.706333339214325, 0.7046666741371155, 0.7143333554267883, 0.7356666922569275, 0.7196666598320007, 0.7743333578109741, 0.7746666669845581, 0.7710000276565552, 0.7976666688919067, 0.7919999957084656, 0.7856666445732117, 0.781000018119812, 0.7986666560173035, 0.7979999780654907, 0.8019999861717224, 0.7926666736602783, 0.8133333325386047, 0.8143333196640015, 0.7956666946411133, 0.7963333129882812, 0.8176666498184204, 0.8259999752044678, 0.8109999895095825, 0.8296666741371155, 0.8246666789054871, 0.8220000267028809, 0.8339999914169312, 0.8296666741371155, 0.8276666402816772, 0.8316666483879089, 0.8263333439826965, 0.8309999704360962]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 2, 3, 2, 3, 5, 5], [0, 2, 2, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 3, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [2, 2, 7, 2, 5, 2, 1], [0, 6, 1, 6, 0, 2], [0, 22], [1], [0], [2], [0]], "fitness": -0.21228571236133575, "mapping_values": [1, 12, 7, 5, 2, 10, 5, 5, 2, 12, 6, 6, 2, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), grad), tf.math.multiply(tf.math.square(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), alpha)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.add(tf.math.add(tf.math.square(alpha), tf.math.add(grad, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), beta))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [265520.15625, 221998645248.0, 1504464229892096.0, 7.659535549157343e+18, 3.922625423815517e+20, 2.6949740017418513e+21, 3.080348204050847e+22], "accuracy": [0.11795007437467575, 0.15717871487140656, 0.16351869702339172, 0.12957337498664856, 0.11847840249538422, 0.11306300014257431, 0.11319508403539658], "val_loss": [138446896.0, 3426145271808.0, 1.858876878094336e+16, 1.7622050539445e+20, 2.2968982974037827e+21, 1.4107900757407057e+22, 1.3518330702128302e+23], "val_accuracy": [0.17266666889190674, 0.21466666460037231, 0.18066667020320892, 0.10833333432674408, 0.10233332961797714, 0.1420000046491623, 0.11833333224058151]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 2, 3, 6, 4, 8, 2, 2, 4, 0, 5, 6, 1, 8, 3, 9, 7, 5, 2, 3, 8, 0, 0], [1, 2, 1, 3, 2, 0, 1, 3, 0, 3, 1, 3, 0, 0, 1], [0, 39, 39, 73, 70], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 9, 8, 2], [3, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 1, 0, 9, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 40, 25, 15, 5, 7, 5, 2, 2, 6, 5, 1, 2, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(alpha, tf.math.pow(grad, tf.math.sqrt(alpha))), grad), tf.math.add(grad, tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.negative(alpha), tf.math.square(grad))))), tf.math.divide_no_nan(tf.math.subtract(tf.math.sqrt(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad), alpha)), tf.math.add(tf.math.square(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.negative(grad)), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(grad), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.302894115447998, 2.4375762939453125, 11.219809532165527, 65.949951171875, 178.14175415039062, 348.69244384765625], "accuracy": [0.10368511080741882, 0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3129947185516357, 3.339263677597046, 34.31447219848633, 123.15437316894531, 269.8092041015625, 474.0155029296875], "val_accuracy": [0.10066666454076767, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 2, 3, 4, 7, 7, 7, 3, 7, 4, 8, 6, 8, 4, 6, 6, 9, 0, 3, 2, 9, 6, 2, 7, 6, 2, 9, 4, 3, 4, 3, 4, 1, 4, 4, 6, 6, 4, 7, 5, 2, 4, 0, 2], [0, 0, 1, 0, 2, 1, 0, 2, 2, 3, 2, 0, 2, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 0, 0, 1, 3, 3, 1, 1, 2, 0, 1, 1, 3], [0, 39, 39, 83, 82, 16, 14, 34, 17, 24, 70, 89, 75, 56], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 2, 6, 0, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1, 9], [6, 6, 4, 7, 0], [0, 22], [0, 1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 81, 46, 35, 14, 10, 6, 4, 1, 12, 8, 4, 1, 2, 1, 1, 0], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.add(tf.math.pow(tf.math.sqrt(alpha), tf.math.divide_no_nan(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.pow(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.multiply(grad, tf.math.add(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.multiply(grad, tf.math.pow(grad, tf.math.multiply(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), alpha))), tf.math.pow(tf.math.subtract(tf.math.pow(grad, tf.math.pow(tf.math.divide_no_nan(grad, tf.math.divide_no_nan(alpha, tf.math.pow(alpha, grad))), tf.math.add(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))), alpha))), grad))), grad)))), alpha)))), alpha), tf.math.pow(tf.math.negative(grad), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(beta, tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(grad), tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0], [0, 2, 1, 2, 3, 5], [0, 2, 1, 0, 3], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [6, 2, 0, 6, 3, 8, 2], [2, 0, 4, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [2, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 10, 5, 5, 2, 8, 5, 3, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.subtract(grad, alpha))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), alpha)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(beta), grad)), alpha)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}]