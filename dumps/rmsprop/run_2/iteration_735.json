[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.819428563117981, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.212348222732544, 1.606329321861267, 1.151687502861023, 0.967046856880188, 0.8762104511260986, 0.8198626041412354, 0.7794127464294434, 0.7282899618148804, 0.7498419880867004, 0.6849781274795532, 0.6868874430656433, 0.6619853377342224, 0.6438319683074951, 0.6070529818534851, 0.6245197057723999, 0.6122820377349854, 0.5830990672111511, 0.592881977558136, 0.5678960084915161, 0.5673226118087769, 0.5549542307853699, 0.548376202583313, 0.5495176315307617, 0.5281635522842407, 0.5196148753166199, 0.5175614953041077, 0.5069299340248108, 0.5059076547622681, 0.4968504011631012, 0.4825291931629181, 0.4905267655849457, 0.4822693169116974, 0.4739053249359131, 0.46403035521507263, 0.47138020396232605, 0.4678107798099518, 0.4581967890262604, 0.4397164583206177, 0.4583815336227417, 0.4336485266685486, 0.43860068917274475, 0.43379610776901245, 0.43763723969459534, 0.4268217384815216, 0.42597082257270813, 0.4220099151134491, 0.4201790392398834, 0.40868446230888367, 0.4077231287956238, 0.40851518511772156, 0.4049074053764343, 0.39603903889656067, 0.39434924721717834, 0.3987902104854584], "accuracy": [0.2744683623313904, 0.5178972482681274, 0.602562427520752, 0.661471426486969, 0.6824725866317749, 0.6989829540252686, 0.709549605846405, 0.7347774505615234, 0.7279091477394104, 0.7417778372764587, 0.7450799345970154, 0.7537974119186401, 0.7586844563484192, 0.778232753276825, 0.76542067527771, 0.7703077793121338, 0.7819310426712036, 0.783119797706604, 0.7907806038856506, 0.7889314293861389, 0.7926297783851624, 0.7938185334205627, 0.7926297783851624, 0.8078193068504333, 0.8087438941001892, 0.8075551390647888, 0.8121780753135681, 0.8149517774581909, 0.8164047002792358, 0.8227446675300598, 0.8208954930305481, 0.826310932636261, 0.8302733898162842, 0.8318583965301514, 0.8289526104927063, 0.8235371708869934, 0.8298771381378174, 0.8393871188163757, 0.8289526104927063, 0.8449346423149109, 0.841500461101532, 0.8424250483512878, 0.841500461101532, 0.8442742228507996, 0.8437458872795105, 0.8453308939933777, 0.8442742228507996, 0.8516708612442017, 0.8516708612442017, 0.850350022315979, 0.8515387773513794, 0.8548408150672913, 0.8536521196365356, 0.8507462739944458], "val_loss": [1.9282360076904297, 1.0879833698272705, 0.905727207660675, 0.7803193926811218, 0.7989347577095032, 0.6829083561897278, 0.6771531701087952, 0.6179922819137573, 0.616581380367279, 0.594683051109314, 0.5919385552406311, 0.6032679080963135, 0.568257749080658, 0.5472026467323303, 0.6007534265518188, 0.537849485874176, 0.5651480555534363, 0.5401568412780762, 0.5207372903823853, 0.5553738474845886, 0.4993770718574524, 0.5085765719413757, 0.4861010015010834, 0.5201926827430725, 0.49903854727745056, 0.4885616898536682, 0.4711081087589264, 0.4626917243003845, 0.4529823362827301, 0.4534856379032135, 0.47256046533584595, 0.4592871069908142, 0.43999820947647095, 0.4411187469959259, 0.49669593572616577, 0.4411059021949768, 0.44209522008895874, 0.42147916555404663, 0.42858031392097473, 0.4425588846206665, 0.4212889075279236, 0.4210777282714844, 0.4080655872821808, 0.4177904427051544, 0.412512868642807, 0.4066137671470642, 0.4088662564754486, 0.39639419317245483, 0.39514169096946716, 0.4085395634174347, 0.40310344099998474, 0.4209844172000885, 0.4185762405395508, 0.3947524130344391], "val_accuracy": [0.5886666774749756, 0.659333348274231, 0.6570000052452087, 0.7183333039283752, 0.6753333210945129, 0.7446666955947876, 0.7493333220481873, 0.7566666603088379, 0.753333330154419, 0.7703333497047424, 0.7713333368301392, 0.7646666765213013, 0.7826666831970215, 0.7919999957084656, 0.7736666798591614, 0.7993333339691162, 0.7746666669845581, 0.7960000038146973, 0.8069999814033508, 0.7829999923706055, 0.8163333535194397, 0.8066666722297668, 0.8223333358764648, 0.7979999780654907, 0.8009999990463257, 0.8086666464805603, 0.8243333101272583, 0.8296666741371155, 0.8293333053588867, 0.8320000171661377, 0.8206666707992554, 0.8246666789054871, 0.8383333086967468, 0.8336666822433472, 0.8046666383743286, 0.8333333134651184, 0.8379999995231628, 0.843999981880188, 0.8463333249092102, 0.8356666564941406, 0.8486666679382324, 0.8420000076293945, 0.8510000109672546, 0.8460000157356262, 0.8510000109672546, 0.8516666889190674, 0.8456666469573975, 0.8500000238418579, 0.8536666631698608, 0.8500000238418579, 0.8479999899864197, 0.8450000286102295, 0.8443333506584167, 0.8529999852180481]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 0, 0, 2], [0, 39, 39], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 4, 8, 2], [0, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 2, 0, 2, 2, 2, 1, 7, 3], [0, 6, 1, 6, 0, 2, 2, 7], [0, 22], [1], [0], [6], [0]], "fitness": -0.10542856901884079, "mapping_values": [1, 1, 0, 1, 1, 1, 0, 1, 1, 17, 9, 8, 2, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.subtract(alpha, grad))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.multiply(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [3.6205084323883057, 2.3065345287323, 2.3039422035217285, 2.3031041622161865, 2.3029627799987793, 2.303001642227173, 2.303356647491455, 2.3028016090393066, 2.3028488159179688, 2.302633762359619, 2.3006205558776855], "accuracy": [0.19416193664073944, 0.09417514503002167, 0.09113723784685135, 0.09496764093637466, 0.09879804402589798, 0.09708096832036972, 0.09325055778026581, 0.09879804402589798, 0.09734513610601425, 0.10434553027153015, 0.1026284471154213], "val_loss": [2.309246301651001, 2.3040266036987305, 2.303037166595459, 2.302647113800049, 2.3026130199432373, 2.3025410175323486, 2.3024985790252686, 2.3024485111236572, 2.3023786544799805, 2.301973581314087, 2.291137933731079], "val_accuracy": [0.09399999678134918, 0.10000000149011612, 0.10066666454076767, 0.10133333504199982, 0.10133333504199982, 0.10533333569765091, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10266666859388351, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0], [0, 2, 3, 2, 3, 3], [0, 2, 1, 0, 3], [81, 71, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 5, 1, 6, 9, 8, 2], [2, 3, 3, 1, 0], [16, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 7, 5, 2, 1, 10, 6, 4, 1, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), grad), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.square(tf.math.subtract(beta, tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(grad, alpha)))), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 7, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [5, 0, 3, 1, 0], [16, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 3, 0, 2, 7, 2, 2, 2, 1, 9, 4, 6, 0, 6, 3, 5, 1, 5, 5, 4, 0, 6, 3, 5, 4, 0], [0, 6, 1, 6, 0, 2, 3, 0, 0, 3, 5, 6, 1, 5, 2, 1], [0, 22, 70, 23, 79], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 1, 0, 1, 0, 42, 26, 16, 5, 1, 0, 1, 0], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(grad, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.divide_no_nan(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.square(sigma), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), sigma), tf.math.subtract(tf.math.square(tf.math.square(grad)), tf.math.pow(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(grad, alpha), tf.math.square(grad))), tf.math.pow(beta, tf.math.negative(alpha))))))))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08677849918603897, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1], [0, 2, 3, 8, 3, 3], [1, 2, 1, 0, 2], [0, 39, 39], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2, 3, 1, 2, 6], [2, 0, 3, 1, 0, 1, 2, 4, 0], [16, 47, 54], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 2, 4, 2, 5, 0, 1], [0, 6, 1, 7], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 20, 11, 9, 3, 10, 6, 4, 1, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), alpha), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.negative(grad)), alpha), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}]