[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.7954285740852356, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2100305557250977, 1.5970430374145508, 1.1272897720336914, 0.9367415308952332, 0.8744899034500122, 0.8304805755615234, 0.7726688385009766, 0.7632518410682678, 0.7167021632194519, 0.709870457649231, 0.6878921389579773, 0.6624650359153748, 0.6512633562088013, 0.6581801176071167, 0.6274805068969727, 0.6008861660957336, 0.6121007204055786, 0.5836625099182129, 0.5826947093009949, 0.5849307179450989, 0.5614447593688965], "accuracy": [0.2616563141345978, 0.502971887588501, 0.6044115424156189, 0.6639809608459473, 0.6873596906661987, 0.69673752784729, 0.7197200059890747, 0.7166820764541626, 0.7386078238487244, 0.7359662055969238, 0.7347774505615234, 0.7549861073493958, 0.7510236501693726, 0.755118191242218, 0.7652885913848877, 0.7737419009208679, 0.7687227725982666, 0.7837802171707153, 0.7825914621353149, 0.7858935594558716, 0.7898560166358948], "val_loss": [1.9196885824203491, 1.109790325164795, 0.8804643750190735, 0.775461733341217, 0.7593459486961365, 0.7103227376937866, 0.6638113260269165, 0.6309489607810974, 0.6322575807571411, 0.6105125546455383, 0.6148818135261536, 0.5735471248626709, 0.5788917541503906, 0.6503149271011353, 0.560181736946106, 0.529604971408844, 0.5461515188217163, 0.523232638835907, 0.5871314406394958, 0.5254990458488464, 0.525151789188385], "val_accuracy": [0.5553333163261414, 0.628333330154419, 0.6826666593551636, 0.7123333215713501, 0.7103333473205566, 0.7293333411216736, 0.7580000162124634, 0.7580000162124634, 0.765999972820282, 0.7716666460037231, 0.7696666717529297, 0.7763333320617676, 0.7733333110809326, 0.7450000047683716, 0.7756666541099548, 0.8083333373069763, 0.7926666736602783, 0.8006666898727417, 0.7793333530426025, 0.7940000295639038, 0.7823333144187927]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 8, 3, 3], [0, 2, 3, 0, 2], [0, 39, 39], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0], [6, 2, 0, 6, 3, 8, 2, 3, 6, 4, 3, 8, 5, 3, 3, 5, 7, 6, 0, 8, 7, 4, 0, 6, 2, 8, 1, 8, 5, 9], [2, 0, 3, 1, 0, 5, 0, 0, 0, 2, 5, 0, 5, 5, 0, 4, 4, 2], [16, 1, 36, 25, 19, 95, 91, 37], [1, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1, 6, 0], [97], [0, 1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 48, 30, 18, 8, 1, 0, 1, 1, 2, 1, 1, 0], "tree_depth": 33, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), alpha))), tf.math.pow(tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.square(tf.math.multiply(tf.math.multiply(tf.math.square(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(tf.math.add(beta, grad)))))), tf.math.pow(tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), grad), grad)), tf.math.sqrt(tf.math.subtract(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(grad))))))))), grad)), beta), tf.math.square(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5, 3, 8, 4, 1, 5], [0, 2, 1, 0, 2, 1, 0, 1], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 4, 8, 2], [4, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1], [0, 2, 0, 2, 5, 2, 1, 1, 8], [0, 6, 1, 6, 0, 4], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 11, 8, 3, 12, 7, 5, 2, 15, 9, 6, 2, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(grad, alpha), tf.math.multiply(tf.math.square(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.sqrt(tf.math.pow(alpha, tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha)))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(grad), tf.math.divide_no_nan(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, tf.math.subtract(grad, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1445.0098876953125, 14289.267578125, 42471.390625, 85820.3359375, 144586.59375, 218365.140625], "accuracy": [0.10302469879388809, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [6575.7666015625, 28360.744140625, 65370.453125, 117635.84375, 185138.640625, 267894.96875], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 2, 3, 2, 3, 5], [0, 1, 1, 0, 2], [0, 19, 39], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 0, 9, 3, 8, 2], [0, 0, 3, 1, 0], [16, 1], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 2, 2, 5, 9], [0, 6, 1], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 5, 4, 1, 2, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [83.84452056884766, 9608.94140625, 158617.1875, 1108433.25, 4918636.0, 16203936.0], "accuracy": [0.10170386731624603, 0.09840179979801178, 0.10302469879388809, 0.1014397069811821, 0.09708096832036972, 0.09906221181154251], "val_loss": [689.109375, 33438.5546875, 354990.28125, 1929016.625, 7215430.5, 21267708.0], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [0, 3, 3, 6, 3, 5, 7, 3], [0, 2, 1, 0, 0, 2, 3], [0, 39, 39], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 5, 6, 3, 8, 2], [2, 3, 3, 1, 0], [96, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.09000000357627869, "mapping_values": [1, 15, 8, 7, 3, 1, 0, 1, 0, 11, 6, 5, 2, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.square(tf.math.add(tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), grad), grad)), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.add(tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), tf.math.square(alpha)), tf.math.add(grad, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.310342788696289, 2.3088161945343018, 2.311131715774536, 2.310722827911377, 2.3110032081604004, 2.3106188774108887], "accuracy": [0.09166556596755981, 0.0940430611371994, 0.09113723784685135, 0.08981640636920929, 0.08611807972192764, 0.08809932321310043], "val_loss": [2.309218645095825, 2.309218645095825, 2.309218645095825, 2.309218645095825, 2.309218645095825, 2.309218645095825], "val_accuracy": [0.08799999952316284, 0.08799999952316284, 0.08799999952316284, 0.08799999952316284, 0.08799999952316284, 0.08799999952316284]}}]