[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8305714130401611, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2112579345703125, 1.6087191104888916, 1.1700787544250488, 0.9781380891799927, 0.8983722925186157, 0.8393294811248779, 0.7880197763442993, 0.7610481381416321, 0.7312340140342712, 0.6997947692871094, 0.6871130466461182, 0.6765372157096863, 0.6658596992492676, 0.6397092342376709, 0.6358008980751038, 0.6216818690299988, 0.6083008050918579, 0.6034471988677979, 0.5943217873573303, 0.5653729438781738, 0.5630955696105957, 0.5716138482093811, 0.5458415150642395, 0.5442219376564026, 0.5351542234420776, 0.532878041267395, 0.5216557383537292, 0.5260668396949768, 0.5102948546409607, 0.5012654066085815, 0.5204362869262695, 0.4966610074043274, 0.49620556831359863, 0.4919193387031555, 0.4800061285495758, 0.48104947805404663, 0.4651810824871063, 0.45464178919792175, 0.44856637716293335, 0.4602169096469879, 0.4477492868900299, 0.45941293239593506, 0.4375697076320648, 0.4418342113494873, 0.42890772223472595, 0.43491092324256897, 0.4245941936969757, 0.4149654507637024, 0.4193424582481384, 0.40630069375038147, 0.41240429878234863, 0.41847652196884155, 0.4046581983566284, 0.39958178997039795, 0.39615997672080994, 0.4060840308666229, 0.3887841999530792, 0.39475172758102417, 0.3938868045806885, 0.38515764474868774, 0.379697322845459, 0.38184571266174316], "accuracy": [0.2677321434020996, 0.5021793842315674, 0.585919976234436, 0.6516972780227661, 0.6775855422019958, 0.6939638257026672, 0.7112666964530945, 0.7206445932388306, 0.7321357727050781, 0.744419515132904, 0.7526086568832397, 0.7574957013130188, 0.7518161535263062, 0.7708360552787781, 0.7709681391716003, 0.7720248103141785, 0.7817989587783813, 0.7796856164932251, 0.7795535326004028, 0.7971205711364746, 0.7976489067077637, 0.7926297783851624, 0.7988376617431641, 0.7976489067077637, 0.8034605979919434, 0.8053097128868103, 0.8098005652427673, 0.8095363974571228, 0.813498854637146, 0.8137630224227905, 0.8080834746360779, 0.8260467648506165, 0.8168009519577026, 0.8197067975997925, 0.8276317715644836, 0.8277638554573059, 0.8352925777435303, 0.8350284099578857, 0.8392550349235535, 0.8267071843147278, 0.8380662798881531, 0.8341038227081299, 0.8424250483512878, 0.8418967127799988, 0.8459912538528442, 0.8455950617790222, 0.8459912538528442, 0.8525954484939575, 0.8475762605667114, 0.8518029451370239, 0.8496896028518677, 0.8454629778862, 0.8531237840652466, 0.8556333184242249, 0.8613129258155823, 0.850350022315979, 0.8541803956031799, 0.8549728989601135, 0.8585391640663147, 0.8605204224586487, 0.8639545440673828, 0.8605204224586487], "val_loss": [1.9249045848846436, 1.1117619276046753, 0.9184109568595886, 0.8150263428688049, 0.7532786726951599, 0.7194655537605286, 0.6777748465538025, 0.6521512269973755, 0.6591945886611938, 0.6401430368423462, 0.6683617234230042, 0.5995513796806335, 0.5799373388290405, 0.5764800906181335, 0.5639416575431824, 0.5701753497123718, 0.5550514459609985, 0.5664523243904114, 0.5210070610046387, 0.5131701827049255, 0.5484094023704529, 0.5294050574302673, 0.4934329092502594, 0.49346575140953064, 0.509915828704834, 0.48110297322273254, 0.48546338081359863, 0.48569172620773315, 0.4704049527645111, 0.48191016912460327, 0.45849791169166565, 0.466255784034729, 0.46537500619888306, 0.4423830211162567, 0.45514872670173645, 0.4379623234272003, 0.4357907772064209, 0.4333668351173401, 0.4302476942539215, 0.43330371379852295, 0.4491492211818695, 0.4534626007080078, 0.4207685589790344, 0.4170639216899872, 0.41652247309684753, 0.41783657670021057, 0.4172387719154358, 0.4036162197589874, 0.40464118123054504, 0.41567879915237427, 0.42615580558776855, 0.39573827385902405, 0.39484843611717224, 0.40264949202537537, 0.3987411558628082, 0.3908848464488983, 0.38943952322006226, 0.39392298460006714, 0.40416836738586426, 0.39582476019859314, 0.3913929760456085, 0.38764238357543945], "val_accuracy": [0.5473333597183228, 0.6383333206176758, 0.684333324432373, 0.7073333263397217, 0.734000027179718, 0.746666669845581, 0.7453333139419556, 0.7546666860580444, 0.746999979019165, 0.7676666378974915, 0.7443333268165588, 0.7789999842643738, 0.7839999794960022, 0.7903333306312561, 0.7900000214576721, 0.7860000133514404, 0.7910000085830688, 0.7839999794960022, 0.8133333325386047, 0.8090000152587891, 0.793666660785675, 0.7963333129882812, 0.8190000057220459, 0.8209999799728394, 0.8136666417121887, 0.8276666402816772, 0.8106666803359985, 0.8159999847412109, 0.8183333277702332, 0.8100000023841858, 0.8316666483879089, 0.8213333487510681, 0.8243333101272583, 0.8389999866485596, 0.8306666612625122, 0.8370000123977661, 0.8403333425521851, 0.8363333344459534, 0.8420000076293945, 0.8429999947547913, 0.8273333311080933, 0.8303333520889282, 0.8423333168029785, 0.8450000286102295, 0.847000002861023, 0.846666693687439, 0.8493333458900452, 0.8500000238418579, 0.8489999771118164, 0.8410000205039978, 0.843666672706604, 0.8526666760444641, 0.8543333411216736, 0.8533333539962769, 0.8510000109672546, 0.8576666712760925, 0.8600000143051147, 0.8510000109672546, 0.847000002861023, 0.8516666889190674, 0.8573333621025085, 0.8550000190734863]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [0, 2, 3, 2, 3, 5], [1, 2, 1, 0, 2], [0, 70, 39], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [0, 0, 3, 1, 0], [16, 1], [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 7, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.13942857086658478, "mapping_values": [1, 4, 2, 2, 0, 7, 4, 3, 2, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [166301754458112.0, 6810168864014336.0, 5.179081159920845e+16, 2.181257209231442e+17, 6.548848622635581e+17, 1.5839435317124792e+18, 3.301484323269509e+18, 6.302231875377168e+18, 1.1191983834713293e+19, 1.8823315811106554e+19, 2.9720153341529424e+19, 4.5803402613334475e+19, 6.690424021314647e+19, 9.296914411394852e+19, 1.3276701421637049e+20, 1.8142680730117865e+20, 2.423383089207134e+20, 3.266910114163395e+20, 4.1760728815639305e+20, 5.36437297599354e+20, 6.835415036372724e+20, 8.596930476624283e+20, 1.0627101115772211e+21, 1.3253822079998844e+21, 1.583386253040034e+21, 1.9932019971817273e+21, 2.3930183427757745e+21, 2.8781762124586324e+21], "accuracy": [0.108440101146698, 0.11147800832986832, 0.11200633645057678, 0.11068551242351532, 0.10989301651716232, 0.11359133571386337, 0.11147800832986832, 0.11042134463787079, 0.11372341960668564, 0.11200633645057678, 0.11451591551303864, 0.11253467202186584, 0.10698718577623367, 0.11517632752656937, 0.11411966383457184, 0.11927089840173721, 0.11940298229455948, 0.10738343745470047, 0.11253467202186584, 0.11874257028102875, 0.11240258812904358, 0.11530841141939163, 0.11557257920503616, 0.11068551242351532, 0.11055342853069305, 0.11213842034339905, 0.10936468094587326, 0.11213842034339905], "val_loss": [923295763398656.0, 1.5228475489124352e+16, 8.302486174774067e+16, 2.839272827775877e+17, 7.487743591826063e+17, 1.6715175712805356e+18, 3.3213667920345825e+18, 6.054946212732207e+18, 1.0327535698327896e+19, 1.6707054994800509e+19, 2.588407162142825e+19, 3.868655411781016e+19, 5.609066210122531e+19, 7.923121251781758e+19, 1.094155071008266e+20, 1.4813790529770226e+20, 1.970944257845216e+20, 2.5819011759194138e+20, 3.3354661594910425e+20, 4.2552496814503127e+20, 5.367318611624817e+20, 6.700385860545088e+20, 8.285658558879037e+20, 1.0157358786138866e+21, 1.2352699645308049e+21, 1.491205168492131e+21, 1.787895838018835e+21, 2.130003902412687e+21], "val_accuracy": [0.1316666603088379, 0.13066667318344116, 0.13099999725818634, 0.1313333362340927, 0.13233333826065063, 0.13099999725818634, 0.1313333362340927, 0.13199999928474426, 0.13300000131130219, 0.13333334028720856, 0.13300000131130219, 0.13366666436195374, 0.1340000033378601, 0.13500000536441803, 0.13466666638851166, 0.13466666638851166, 0.13466666638851166, 0.13466666638851166, 0.1353333294391632, 0.13500000536441803, 0.1353333294391632, 0.13566666841506958, 0.13600000739097595, 0.13600000739097595, 0.13566666841506958, 0.13566666841506958, 0.1353333294391632, 0.1353333294391632]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 9, 2, 3, 8], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 9, 0, 7, 1, 8, 2], [2, 0, 0, 1, 0], [16, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 2, 0, 2, 5, 2, 1, 6, 0, 7], [0, 4, 1, 6, 0, 0, 3], [66, 22, 80], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 2, 2, 2, 0, 1, 17, 10, 7, 3, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.math.add(tf.math.subtract(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, alpha)), grad)), tf.math.negative(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), sigma))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3035645484924316, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [95, 20, 39], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 2, 0, 6, 3, 9, 2, 5, 7, 1, 9, 0, 0, 1, 4, 3, 0], [2, 0, 3, 1, 0, 3, 1, 0, 0], [16, 2, 89, 3, 20, 86], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1], [0, 2, 0, 2, 5, 4, 4, 5, 7, 8, 0, 6, 7, 7, 4, 5, 0, 7, 1, 7, 7, 4, 7, 3, 1, 2, 0, 2, 8, 5, 0, 8, 4, 3, 8, 1, 5, 7, 9, 0, 7, 0, 9], [4, 6, 1, 6, 0, 1, 1, 6, 3, 6, 7, 5, 7, 3, 7, 5, 5, 4, 6, 1, 0, 7, 6], [0, 22, 20, 68], [0, 1], [0], [1], [0]], "fitness": -0.09628571569919586, "mapping_values": [1, 11, 6, 5, 3, 26, 17, 9, 6, 66, 43, 23, 4, 2, 1, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(tf.math.add(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha)))), tf.math.negative(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), tf.math.subtract(grad, tf.math.pow(alpha, tf.math.multiply(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(grad), tf.math.pow(tf.math.pow(grad, tf.math.square(alpha)), tf.math.add(grad, tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)))))), tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.math.pow(tf.math.square(tf.math.negative(tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(alpha, alpha), grad), tf.math.pow(tf.math.add(sigma, tf.math.multiply(tf.math.subtract(tf.math.add(grad, tf.math.negative(tf.math.add(grad, tf.math.sqrt(grad)))), tf.math.square(grad)), tf.math.negative(tf.math.sqrt(sigma)))), grad)), tf.math.pow(tf.math.multiply(tf.math.sqrt(grad), grad), grad)))), grad), tf.math.subtract(tf.math.square(alpha), tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))), tf.math.negative(grad)), tf.math.add(tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3102240562438965, 5.2594769433569264e+23, NaN, NaN, NaN, NaN], "accuracy": [0.09272222965955734, 0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.31591796875, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 4, 7, 3, 5], [0, 2, 2, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 5, 3, 1, 0], [66, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 2, 0, 2, 5, 2, 5], [0, 7, 1, 6, 4], [0, 22], [1], [0], [2], [0]], "fitness": -0.0917142853140831, "mapping_values": [1, 2, 1, 1, 1, 9, 5, 4, 0, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(grad, grad), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(grad, tf.math.square(alpha))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.310462713241577, 2.309460401535034, 2.3109638690948486, 2.310901165008545, 2.3103489875793457, 2.310182571411133], "accuracy": [0.08545766770839691, 0.08994849026203156, 0.08849557489156723, 0.08598599582910538, 0.09272222965955734, 0.0882314071059227], "val_loss": [2.308539867401123, 2.308539867401123, 2.308539867401123, 2.308539867401123, 2.308539867401123, 2.308539867401123], "val_accuracy": [0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763]}}]