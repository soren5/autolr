[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8091428279876709, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.210801124572754, 1.6042436361312866, 1.150763750076294, 0.9929423332214355, 0.8930795788764954, 0.8159518837928772, 0.7916066646575928, 0.7712622880935669, 0.7257380485534668, 0.7016267776489258, 0.6991837024688721, 0.6750281453132629, 0.6604666113853455, 0.6562050580978394, 0.635087251663208, 0.6149051189422607, 0.5954963564872742, 0.6116739511489868, 0.5933507084846497, 0.5645942091941833, 0.5689435005187988, 0.554443895816803, 0.5666751861572266, 0.5457054972648621, 0.5395025610923767, 0.5209835171699524, 0.521337628364563, 0.5221377611160278, 0.5132914185523987, 0.5103445649147034, 0.4896843731403351, 0.4826386272907257, 0.4875205457210541, 0.47533494234085083, 0.47748708724975586, 0.47010543942451477, 0.45997750759124756, 0.4664996266365051, 0.4495052993297577, 0.45923590660095215, 0.4429396688938141, 0.4362426996231079, 0.4363194406032562, 0.4365760385990143, 0.4284210503101349, 0.4334908723831177, 0.42610472440719604, 0.41277968883514404, 0.4219679534435272, 0.41132867336273193, 0.4015326201915741, 0.40029603242874146, 0.40162208676338196, 0.3977090120315552, 0.3888702690601349, 0.3928653597831726, 0.3947923481464386, 0.3787592053413391, 0.3852384388446808, 0.3820408284664154, 0.38475361466407776, 0.37894749641418457, 0.3765603303909302, 0.3677527606487274, 0.36334899067878723, 0.363924115896225, 0.3595898747444153, 0.36213114857673645, 0.35081595182418823, 0.3579469323158264], "accuracy": [0.25861841440200806, 0.5128780603408813, 0.6003170013427734, 0.6520935297012329, 0.6785101294517517, 0.702681303024292, 0.7079645991325378, 0.720380425453186, 0.7312111854553223, 0.7450799345970154, 0.744419515132904, 0.752212405204773, 0.7584202885627747, 0.7536653280258179, 0.7663452625274658, 0.778761088848114, 0.7828556299209595, 0.769911527633667, 0.7847048044204712, 0.7947431206703186, 0.7903843522071838, 0.7987055778503418, 0.7938185334205627, 0.7998943328857422, 0.8038568496704102, 0.8088759779930115, 0.8096684813499451, 0.8128384351730347, 0.8150838613510132, 0.8181217908859253, 0.8256505131721497, 0.8284242749214172, 0.8208954930305481, 0.8274996876716614, 0.8296129703521729, 0.8304054737091064, 0.8329150676727295, 0.8304054737091064, 0.8391229510307312, 0.8308017253875732, 0.8404437899589539, 0.8467837572097778, 0.8441421389579773, 0.8404437899589539, 0.8459912538528442, 0.8417646288871765, 0.847840428352356, 0.854708731174469, 0.8459912538528442, 0.854708731174469, 0.8570862412452698, 0.8577466607093811, 0.8558974862098694, 0.8590674996376038, 0.860652506351471, 0.8560295701026917, 0.8564258217811584, 0.8638224601745605, 0.86118084192276, 0.8643507957458496, 0.8561616539955139, 0.8603883385658264, 0.8659358024597168, 0.8665962219238281, 0.8713511824607849, 0.8661999702453613, 0.8689737319946289, 0.8668603897094727, 0.8746532797813416, 0.872407853603363], "val_loss": [1.919378399848938, 1.0963575839996338, 0.9570494890213013, 0.7845385670661926, 0.7191506624221802, 0.7250511050224304, 0.7082679271697998, 0.6485595107078552, 0.6186412572860718, 0.6143189668655396, 0.5948975682258606, 0.5950731039047241, 0.5678605437278748, 0.5514264106750488, 0.5350619554519653, 0.5370920300483704, 0.5790149569511414, 0.5222463607788086, 0.5072251558303833, 0.49638670682907104, 0.5191143155097961, 0.5006551146507263, 0.49172696471214294, 0.4775950014591217, 0.4707743227481842, 0.4912695288658142, 0.4640452563762665, 0.4793655574321747, 0.4586912989616394, 0.460722416639328, 0.45446833968162537, 0.45118221640586853, 0.47137004137039185, 0.4420056939125061, 0.43998420238494873, 0.4442358911037445, 0.4288029670715332, 0.4249040186405182, 0.4304770529270172, 0.43027523159980774, 0.4300225079059601, 0.4172232151031494, 0.4167957305908203, 0.4144839346408844, 0.4152621328830719, 0.417456716299057, 0.40781065821647644, 0.4022751450538635, 0.401419997215271, 0.39688265323638916, 0.3995876908302307, 0.4004620909690857, 0.4005911946296692, 0.3841167092323303, 0.3830791711807251, 0.3827328383922577, 0.3814654052257538, 0.3890274167060852, 0.392372727394104, 0.38409414887428284, 0.37913766503334045, 0.37630367279052734, 0.3760802447795868, 0.37278470396995544, 0.3679766356945038, 0.37037593126296997, 0.37202519178390503, 0.390473335981369, 0.3757510185241699, 0.38040465116500854], "val_accuracy": [0.5986666679382324, 0.6800000071525574, 0.6819999814033508, 0.7126666903495789, 0.7429999709129333, 0.7193333506584167, 0.7323333621025085, 0.7536666393280029, 0.753000020980835, 0.749666690826416, 0.7753333449363708, 0.7663333415985107, 0.7743333578109741, 0.7860000133514404, 0.7906666398048401, 0.7923333048820496, 0.7633333206176758, 0.8029999732971191, 0.8050000071525574, 0.812333345413208, 0.7979999780654907, 0.8140000104904175, 0.812666654586792, 0.8236666917800903, 0.8216666579246521, 0.8109999895095825, 0.8256666660308838, 0.8173333406448364, 0.8293333053588867, 0.8370000123977661, 0.8366666436195374, 0.8330000042915344, 0.8276666402816772, 0.8399999737739563, 0.8360000252723694, 0.8333333134651184, 0.8450000286102295, 0.8476666808128357, 0.843666672706604, 0.8413333296775818, 0.8429999947547913, 0.8486666679382324, 0.8503333330154419, 0.8429999947547913, 0.8443333506584167, 0.8443333506584167, 0.8543333411216736, 0.8579999804496765, 0.8576666712760925, 0.8603333234786987, 0.8566666841506958, 0.8546666502952576, 0.8539999723434448, 0.862333357334137, 0.8640000224113464, 0.8629999756813049, 0.8656666874885559, 0.8619999885559082, 0.8550000190734863, 0.8633333444595337, 0.8629999756813049, 0.8659999966621399, 0.8666666746139526, 0.8659999966621399, 0.8736666440963745, 0.8733333349227905, 0.8676666617393494, 0.8533333539962769, 0.8690000176429749, 0.8603333234786987]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 2, 3, 7, 8, 8, 4, 5, 5, 2, 4, 2, 8, 7, 3, 0, 1, 7, 2, 1, 1, 1, 7, 5, 9, 5, 6], [0, 2, 1, 0, 2, 1, 1, 3, 1, 3, 2, 3, 2, 2, 0, 1, 2, 0, 1], [0, 39, 39, 89, 89], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 2, 0, 6, 3, 9, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [6, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.12971428036689758, "mapping_values": [1, 48, 29, 19, 5, 7, 4, 3, 1, 11, 6, 5, 2, 1, 0, 1, 0], "tree_depth": 39, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.pow(tf.math.square(tf.math.square(tf.math.add(tf.math.pow(tf.math.add(grad, alpha), tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.negative(alpha), tf.math.subtract(tf.math.add(tf.math.add(grad, tf.math.subtract(tf.math.subtract(alpha, grad), grad)), grad), tf.math.subtract(grad, grad))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.square(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), alpha)))), grad)))), tf.math.square(tf.math.divide_no_nan(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), alpha)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad)), alpha), tf.math.add(grad, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1655064707989504.0, 1866111347851264.0, 1908455698857984.0, 1850603697340416.0, 1924333253427200.0, 1874200113446912.0], "accuracy": [0.10619468986988068, 0.1138555034995079, 0.10500594228506088, 0.11227050423622131, 0.10857218503952026, 0.12032756209373474], "val_loss": [1146578832195584.0, 1146578832195584.0, 1146578832195584.0, 1146578832195584.0, 1146578832195584.0, 1146578832195584.0], "val_accuracy": [0.12999999523162842, 0.12999999523162842, 0.12999999523162842, 0.12999999523162842, 0.12999999523162842, 0.12999999523162842]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 6, 3, 8, 2], [2, 0, 3, 3, 0], [16, 1], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 3, 6, 2], [24, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 12, 7, 5, 2, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.subtract(beta, tf.math.negative(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(grad, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [3, 2, 3, 2, 3, 5, 2, 1, 9, 3], [0, 2, 1, 3, 2, 1, 1, 1], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1], [0, 2, 8, 2, 5, 2, 1, 1, 1, 3, 8, 9], [0, 6, 1, 6, 0, 7, 2], [0, 54, 95], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 10, 8, 2, 10, 6, 4, 1, 19, 12, 7, 3, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.math.square(alpha), grad)), grad), tf.math.add(tf.math.subtract(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.math.subtract(tf.math.subtract(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.sqrt(grad), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), beta))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [9, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 96], [1], [0], [2], [0]], "fitness": -0.09228571504354477, "mapping_values": [1, 1, 0, 1, 1, 1, 0, 1, 0, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.30961537361145, 2.309176206588745, 2.3107571601867676, 2.310117721557617, 2.310068130493164, 2.3093509674072266], "accuracy": [0.08889182657003403, 0.09179764986038208, 0.09034473448991776, 0.09206181764602661, 0.08915598690509796, 0.09325055778026581], "val_loss": [2.3092823028564453, 2.3092823028564453, 2.3092823028564453, 2.3092823028564453, 2.3092823028564453, 2.3092823028564453], "val_accuracy": [0.08866667002439499, 0.08866667002439499, 0.08866667002439499, 0.08866667002439499, 0.08866667002439499, 0.08866667002439499]}}]