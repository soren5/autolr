[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8479999899864197, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2111141681671143, 1.6098462343215942, 1.1665583848953247, 0.9760736227035522, 0.8930473923683167, 0.8394874930381775, 0.7989145517349243, 0.7805085778236389, 0.7452699542045593, 0.7169589400291443, 0.7025920748710632, 0.6747971773147583, 0.6742919683456421, 0.6500173211097717, 0.6404195427894592, 0.6223631501197815, 0.6169601678848267, 0.6050325632095337, 0.5931193232536316, 0.5818095803260803, 0.5823572278022766, 0.5585650205612183, 0.566207766532898, 0.5501691699028015, 0.5448248386383057, 0.5351163148880005, 0.5289164781570435, 0.5230806469917297, 0.5156989097595215, 0.52337646484375, 0.5018486976623535, 0.5054841637611389, 0.49982142448425293, 0.5017988085746765, 0.4763811230659485, 0.48596975207328796, 0.47529691457748413, 0.46715739369392395, 0.4692200720310211, 0.46244949102401733, 0.45781999826431274, 0.44231072068214417, 0.44913360476493835, 0.4388955235481262, 0.43299224972724915, 0.4382714033126831, 0.4265565276145935, 0.42100369930267334, 0.4248588979244232, 0.42615246772766113, 0.4155440926551819, 0.40962734818458557, 0.4037463366985321, 0.41041141748428345, 0.39997896552085876, 0.3966900408267975, 0.39443087577819824, 0.3857877850532532, 0.38934326171875, 0.3781620264053345, 0.382220983505249, 0.3769834339618683], "accuracy": [0.2646942138671875, 0.5037643909454346, 0.5892220139503479, 0.6547351479530334, 0.6779817938804626, 0.6975300312042236, 0.7100779414176941, 0.7131158113479614, 0.72672039270401, 0.7368907928466797, 0.737947404384613, 0.7500990629196167, 0.7528728246688843, 0.7626469135284424, 0.7609298825263977, 0.7700436115264893, 0.769911527633667, 0.7794214487075806, 0.7777044177055359, 0.78113853931427, 0.7857614755630493, 0.7924976944923401, 0.7895918488502502, 0.8000264167785645, 0.8010830879211426, 0.8045172095298767, 0.8064984679222107, 0.8058380484580994, 0.8087438941001892, 0.8105930685997009, 0.8138951063156128, 0.8153480291366577, 0.8181217908859253, 0.817461371421814, 0.8264430165290833, 0.8226125836372375, 0.8264430165290833, 0.8298771381378174, 0.8314621448516846, 0.8308017253875732, 0.8286884427070618, 0.8411042094230652, 0.8380662798881531, 0.8408400416374207, 0.8392550349235535, 0.8385946154594421, 0.8433496356010437, 0.8438779711723328, 0.8416325449943542, 0.8430854678153992, 0.8438779711723328, 0.8511425256729126, 0.8537842035293579, 0.8502179384231567, 0.8535200357437134, 0.8589354157447815, 0.8552370667457581, 0.8598600029945374, 0.8610487580299377, 0.8594637513160706, 0.8619733452796936, 0.8623695969581604], "val_loss": [1.9155113697052002, 1.0936139822006226, 0.8787098526954651, 0.7963187098503113, 0.7265007495880127, 0.6839323043823242, 0.6525487303733826, 0.6600804328918457, 0.6194010972976685, 0.594377338886261, 0.6254890561103821, 0.5703696012496948, 0.5727823376655579, 0.5692228078842163, 0.5374784469604492, 0.5277859568595886, 0.5368707776069641, 0.5379505157470703, 0.5268217921257019, 0.5416750311851501, 0.5038392543792725, 0.5008469223976135, 0.5038136839866638, 0.5026513338088989, 0.487984836101532, 0.4739965498447418, 0.471904456615448, 0.47148099541664124, 0.4979373812675476, 0.4778006672859192, 0.45801272988319397, 0.4590452015399933, 0.48271098732948303, 0.4392734467983246, 0.4420943260192871, 0.45588403940200806, 0.4358920753002167, 0.4423042833805084, 0.43205171823501587, 0.42247042059898376, 0.4285406172275543, 0.43086352944374084, 0.42154955863952637, 0.44110187888145447, 0.4266031086444855, 0.41633373498916626, 0.4137529730796814, 0.4113953411579132, 0.41529569029808044, 0.40918293595314026, 0.41197702288627625, 0.4003090560436249, 0.4025375545024872, 0.4029795825481415, 0.3962770104408264, 0.4200989603996277, 0.3964158594608307, 0.3976019024848938, 0.41738492250442505, 0.40025821328163147, 0.4257369041442871, 0.40011852979660034], "val_accuracy": [0.5763333439826965, 0.6743333339691162, 0.699999988079071, 0.706333339214325, 0.7363333106040955, 0.7566666603088379, 0.762333333492279, 0.749666690826416, 0.7723333239555359, 0.7839999794960022, 0.7516666650772095, 0.7846666574478149, 0.7803333401679993, 0.7706666588783264, 0.7926666736602783, 0.7983333468437195, 0.796999990940094, 0.7986666560173035, 0.8026666641235352, 0.7793333530426025, 0.8106666803359985, 0.8159999847412109, 0.8149999976158142, 0.8013333082199097, 0.812333345413208, 0.8196666836738586, 0.8213333487510681, 0.8259999752044678, 0.8056666851043701, 0.8203333616256714, 0.8316666483879089, 0.8293333053588867, 0.8086666464805603, 0.8379999995231628, 0.8360000252723694, 0.828000009059906, 0.8360000252723694, 0.8356666564941406, 0.8413333296775818, 0.8473333120346069, 0.8433333039283752, 0.843999981880188, 0.8489999771118164, 0.831333339214325, 0.843666672706604, 0.8476666808128357, 0.8510000109672546, 0.8513333201408386, 0.8463333249092102, 0.8526666760444641, 0.847000002861023, 0.8546666502952576, 0.8533333539962769, 0.8503333330154419, 0.8553333282470703, 0.8456666469573975, 0.859333336353302, 0.856333315372467, 0.8476666808128357, 0.8556666374206543, 0.8519999980926514, 0.8546666502952576]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8148571252822876, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.210676670074463, 1.5975481271743774, 1.1651378870010376, 0.9763145446777344, 0.8832077980041504, 0.8252490162849426, 0.8279218673706055, 0.7472283840179443, 0.7427698969841003, 0.7093011140823364, 0.6786796450614929, 0.6502910256385803, 0.6397114992141724, 0.632377564907074, 0.6037460565567017, 0.6226416826248169, 0.5794273018836975, 0.5822819471359253, 0.5557465553283691, 0.5591641664505005, 0.5710604786872864, 0.5380526185035706, 0.5419759750366211, 0.5175474882125854, 0.5221099853515625, 0.5126191973686218, 0.5072729587554932, 0.5068429708480835], "accuracy": [0.26865673065185547, 0.5087835192680359, 0.5908070206642151, 0.6452252268791199, 0.6785101294517517, 0.6979262828826904, 0.6970016956329346, 0.7218332886695862, 0.7154933214187622, 0.7342491149902344, 0.7464007139205933, 0.7574957013130188, 0.7584202885627747, 0.7597411274909973, 0.7712323069572449, 0.7680623531341553, 0.7814027070999146, 0.7847048044204712, 0.7957997918128967, 0.7905164361000061, 0.7861577272415161, 0.7964601516723633, 0.7952714562416077, 0.8100647330284119, 0.8087438941001892, 0.8098005652427673, 0.8101968169212341, 0.8117818236351013], "val_loss": [1.9194945096969604, 1.0746034383773804, 0.8758036494255066, 0.8065437078475952, 0.7649843096733093, 0.7009566426277161, 0.6525177359580994, 0.6407917737960815, 0.5941725373268127, 0.5938137769699097, 0.5908467769622803, 0.5510433316230774, 0.5611077547073364, 0.5335941910743713, 0.5227486491203308, 0.5233108997344971, 0.5104984641075134, 0.4919930398464203, 0.49438151717185974, 0.4898557662963867, 0.48798060417175293, 0.5059283375740051, 0.46169987320899963, 0.4634367823600769, 0.45597463846206665, 0.4714629650115967, 0.4861321747303009, 0.44467976689338684], "val_accuracy": [0.5476666688919067, 0.6790000200271606, 0.7073333263397217, 0.7296666502952576, 0.7256666421890259, 0.7356666922569275, 0.7576666474342346, 0.7736666798591614, 0.7860000133514404, 0.7856666445732117, 0.7749999761581421, 0.8080000281333923, 0.7866666913032532, 0.8116666674613953, 0.812333345413208, 0.8056666851043701, 0.8190000057220459, 0.8256666660308838, 0.8289999961853027, 0.8243333101272583, 0.8259999752044678, 0.8143333196640015, 0.840666651725769, 0.8333333134651184, 0.8356666564941406, 0.8230000138282776, 0.8146666884422302, 0.8386666774749756]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 1, 0], [0, 65, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2, 6, 3, 3, 1, 7, 7, 3, 1, 7, 9, 5, 2, 8], [1, 0, 3, 1, 4, 2, 2, 3, 3, 3, 1, 2, 5, 3], [16, 49], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [4, 2, 0, 2, 5, 3], [0, 6, 1, 1, 6], [0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [0, 2, 6, 0, 6, 1, 9, 6, 6, 9], [1, 0, 4, 3, 0], [0, 33, 76, 71]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 34, 20, 14, 2, 11, 6, 5, 1, 15, 10, 5, 4], "tree_depth": 30, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(alpha), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.multiply(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(grad, beta), tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), grad), grad), grad), tf.math.square(tf.math.add(alpha, tf.math.sqrt(beta))))), grad)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.math.multiply(grad, alpha)), alpha)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.math.divide_no_nan(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), grad), sigma)), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1087599488.0, 21100691456.0, 96146350080.0, 268888768512.0, 561037115392.0, 1050987986944.0], "accuracy": [0.09919429570436478, 0.09694888442754745, 0.09734513610601425, 0.09853387624025345, 0.10051512718200684, 0.09840179979801178], "val_loss": [4999492096.0, 39990886400.0, 134964076544.0, 319906283520.0, 624816685056.0, 1079662280704.0], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0], [0, 2, 3, 1, 3, 5], [0, 0, 2, 0, 2], [0, 15, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 0, 6, 3, 8, 2, 6], [2, 0, 3, 1, 0, 4, 5], [16, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 2, 0, 2, 5, 1, 4, 6, 9, 0, 8, 7, 4, 1, 4, 5, 1, 8, 4, 0, 2, 6, 9, 5, 9, 6, 8, 4, 3, 9], [7, 6, 1, 7, 0, 2, 1, 5, 4, 6, 5, 5, 3], [0, 9, 6, 96, 42], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 3, 15, 8, 7, 2, 43, 30, 13, 5, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.divide_no_nan(grad, alpha), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(tf.math.add(tf.math.pow(tf.math.subtract(grad, tf.math.pow(tf.math.square(tf.math.subtract(tf.math.sqrt(tf.math.pow(grad, tf.math.negative(alpha))), tf.math.add(grad, tf.math.divide_no_nan(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), beta)))), alpha)), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.square(grad))))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, grad))), tf.math.sqrt(tf.math.pow(tf.math.multiply(grad, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09509972482919693, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 8, 5, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 5, 8, 2], [5, 5, 3, 1, 0], [16, 1], [0, 0, 0, 1, 1, 1, 0, 1], [0, 7, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 2, 4, 2, 2, 0, 5, 3, 2, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.sqrt(tf.math.square(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(grad, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.15889579057693481, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [0, 3, 3, 8, 0, 5], [0, 0, 2, 0, 2], [0, 39, 39], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 6, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 2, 0, 2, 0, 2], [0, 6, 1, 5], [0], [1], [0], [2], [0]], "fitness": -0.09342857450246811, "mapping_values": [1, 4, 2, 2, 2, 2, 1, 1, 0, 10, 6, 4, 1, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.negative(tf.math.add(grad, alpha)), grad))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.310771942138672, 2.3100900650024414, 2.3102235794067383, 2.310704469680786, 2.3087570667266846, 2.309070587158203], "accuracy": [0.08677849918603897, 0.09192973375320435, 0.09232597798109055, 0.08994849026203156, 0.09232597798109055, 0.09113723784685135], "val_loss": [2.3079380989074707, 2.3079380989074707, 2.3079380989074707, 2.3079380989074707, 2.3079380989074707, 2.3079380989074707], "val_accuracy": [0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393]}}]