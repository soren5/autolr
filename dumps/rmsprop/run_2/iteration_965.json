[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.834857165813446, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.211339235305786, 1.6098169088363647, 1.1306270360946655, 0.9699772000312805, 0.8821436166763306, 0.8256213068962097, 0.7936753034591675, 0.7465343475341797, 0.736643373966217, 0.6883997917175293, 0.6809791922569275, 0.6709415912628174, 0.6565264463424683, 0.6354867219924927, 0.6223853826522827, 0.6149269342422485, 0.5987699627876282, 0.5926530957221985, 0.5909525752067566, 0.5540013909339905, 0.5714870691299438, 0.5510056614875793, 0.553471028804779, 0.5398707389831543, 0.537605345249176, 0.5270245671272278, 0.5235883593559265, 0.5184749364852905, 0.5122767686843872, 0.4921938180923462, 0.5037632584571838, 0.48733314871788025, 0.4791935086250305, 0.47124919295310974, 0.46669507026672363, 0.4703604280948639, 0.46219033002853394, 0.4555762708187103, 0.45172587037086487, 0.4452113211154938, 0.4540092945098877, 0.4425126314163208, 0.44128337502479553, 0.4353832006454468, 0.431993305683136, 0.4303945302963257, 0.42251306772232056, 0.4189435839653015, 0.40977561473846436, 0.41133633255958557, 0.41407597064971924, 0.39982879161834717, 0.39328813552856445, 0.39282524585723877, 0.39541277289390564, 0.3952973783016205], "accuracy": [0.2709021270275116, 0.507330596446991, 0.6104874014854431, 0.6635847091674805, 0.6913221478462219, 0.6976621150970459, 0.7065116763114929, 0.7234182953834534, 0.7257958054542542, 0.7452120184898376, 0.7506273984909058, 0.7485140562057495, 0.7544577717781067, 0.7687227725982666, 0.7695152759552002, 0.7720248103141785, 0.7816668748855591, 0.7795535326004028, 0.7808743715286255, 0.798309326171875, 0.7877426743507385, 0.7954035401344299, 0.8029322624206543, 0.7984414100646973, 0.8030643463134766, 0.8034605979919434, 0.8076872229576111, 0.8113855719566345, 0.809140145778656, 0.8144234418869019, 0.8137630224227905, 0.8165367841720581, 0.8235371708869934, 0.8265751004219055, 0.8310658931732178, 0.8278959393501282, 0.8345000743865967, 0.835160493850708, 0.8305375576019287, 0.8381983637809753, 0.8318583965301514, 0.8356888294219971, 0.8393871188163757, 0.8442742228507996, 0.8405758738517761, 0.8441421389579773, 0.846387505531311, 0.8465195894241333, 0.8494254350662231, 0.8492933511734009, 0.8486329317092896, 0.8551049828529358, 0.8565579056739807, 0.8595958352088928, 0.8603883385658264, 0.8524633646011353], "val_loss": [1.9233860969543457, 1.0909818410873413, 0.8785462975502014, 0.768339216709137, 0.760164737701416, 0.7346590757369995, 0.674485981464386, 0.6437240242958069, 0.6220422387123108, 0.6381905674934387, 0.6119663715362549, 0.6326046586036682, 0.5923647284507751, 0.584837794303894, 0.5760248303413391, 0.5863509774208069, 0.536668598651886, 0.5558513402938843, 0.5279877781867981, 0.5247219204902649, 0.5286948680877686, 0.5191870331764221, 0.5037638545036316, 0.4947999119758606, 0.48557591438293457, 0.49282848834991455, 0.49216052889823914, 0.4808706045150757, 0.46754759550094604, 0.4910443127155304, 0.464839369058609, 0.45932722091674805, 0.45265889167785645, 0.44918766617774963, 0.44650253653526306, 0.45413753390312195, 0.4414619207382202, 0.44238048791885376, 0.44607487320899963, 0.4460241198539734, 0.4287266433238983, 0.4321092963218689, 0.4244420528411865, 0.4250040650367737, 0.4181203246116638, 0.43277326226234436, 0.4186214208602905, 0.40998852252960205, 0.4140249490737915, 0.41120800375938416, 0.399375319480896, 0.4019492566585541, 0.40338167548179626, 0.4013820290565491, 0.42779839038848877, 0.4004124402999878], "val_accuracy": [0.48500001430511475, 0.659333348274231, 0.6816666722297668, 0.7170000076293945, 0.7049999833106995, 0.7203333377838135, 0.7310000061988831, 0.7553333044052124, 0.7670000195503235, 0.7480000257492065, 0.7583333253860474, 0.7526666522026062, 0.7753333449363708, 0.781000018119812, 0.7820000052452087, 0.7726666927337646, 0.7940000295639038, 0.7856666445732117, 0.7953333258628845, 0.8083333373069763, 0.7986666560173035, 0.8056666851043701, 0.8130000233650208, 0.8153333067893982, 0.8236666917800903, 0.8180000185966492, 0.8113333582878113, 0.828000009059906, 0.8240000009536743, 0.8159999847412109, 0.8256666660308838, 0.8320000171661377, 0.8339999914169312, 0.8356666564941406, 0.8360000252723694, 0.82833331823349, 0.8456666469573975, 0.8426666855812073, 0.8296666741371155, 0.8309999704360962, 0.8460000157356262, 0.8446666598320007, 0.8453333377838135, 0.8493333458900452, 0.8523333072662354, 0.8366666436195374, 0.8476666808128357, 0.8513333201408386, 0.8453333377838135, 0.8526666760444641, 0.8603333234786987, 0.8566666841506958, 0.8523333072662354, 0.8586666584014893, 0.8363333344459534, 0.8519999980926514]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1], [0, 2, 3, 2, 8, 5], [0, 2, 2, 0, 1], [50, 39, 39], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 6, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [6], [0]], "fitness": -0.46057143807411194, "mapping_values": [1, 8, 4, 4, 2, 5, 3, 2, 1, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), grad), grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.divide_no_nan(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad)), alpha)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [3.095381498336792, 23.355262756347656, 2.305525302886963, 2.310188055038452, 2.243664264678955, 2.2950844764709473, 2.076998472213745, 2.2442445755004883, 2.3530445098876953, 2.3055338859558105, 2.3039584159851074, 2.30367112159729], "accuracy": [0.18901069462299347, 0.09998679161071777, 0.11055342853069305, 0.1542728841304779, 0.17302866280078888, 0.16180160641670227, 0.26324132084846497, 0.3155461549758911, 0.09602430462837219, 0.10077928751707077, 0.09338264167308807, 0.09655263274908066], "val_loss": [8.412541389465332, 2.3138537406921387, 2.2825920581817627, 2.2960269451141357, 1.941999077796936, 2.2672743797302246, 1.6982719898223877, 2.319225549697876, 2.3041787147521973, 2.303252696990967, 2.302570343017578, 2.3026015758514404], "val_accuracy": [0.0989999994635582, 0.10000000149011612, 0.22366666793823242, 0.11500000208616257, 0.35899999737739563, 0.15566666424274445, 0.45100000500679016, 0.10166666656732559, 0.0989999994635582, 0.0989999994635582, 0.10166666656732559, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], [0, 2, 3, 2, 3, 5, 4, 8, 6, 4, 1, 6], [0, 2, 1, 0, 2, 0, 0, 2, 1, 3], [0, 39, 39, 29], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [4, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10999999940395355, "mapping_values": [1, 22, 12, 10, 4, 7, 4, 3, 1, 11, 6, 5, 2, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(tf.math.square(tf.math.pow(grad, alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.divide_no_nan(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.subtract(tf.math.divide_no_nan(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), grad), alpha), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.add(grad, tf.math.square(tf.math.add(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.1536860102721536e+16, 2.425240042025779e+16, 2.455510327282893e+16, 2.496180016853811e+16, 2.431502319091712e+16, 2.393307174928384e+16], "accuracy": [0.09576013684272766, 0.08902391046285629, 0.09338264167308807, 0.08994849026203156, 0.09311848133802414, 0.09034473448991776], "val_loss": [1.91503464923136e+16, 1.91503464923136e+16, 1.91503464923136e+16, 1.91503464923136e+16, 1.91503464923136e+16, 1.91503464923136e+16], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 6, 3, 2, 3, 5, 4, 3, 7, 5, 8, 7, 2, 6, 3, 0], [0, 2, 1, 0, 2, 2, 2, 3, 1, 0, 3, 0], [0, 31, 39, 19], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 0, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 2, 0, 2, 5, 2, 1, 5], [0, 6, 1, 6, 0], [0, 22], [1], [0], [3], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 28, 16, 12, 4, 5, 3, 2, 1, 13, 8, 5, 2, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.square(tf.math.pow(grad, tf.math.multiply(alpha, tf.math.add(tf.math.square(tf.math.sqrt(tf.math.add(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), grad))), grad)))), tf.math.add(grad, grad))), tf.math.divide_no_nan(tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad))), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, tf.math.square(grad))))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 5, 1, 3, 5], [0, 0, 0, 0, 2], [0, 39, 39], [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 7, 7, 3, 4], [0, 6, 1, 2, 5], [0, 22], [1], [0], [2], [0]], "fitness": -0.09114285558462143, "mapping_values": [1, 7, 4, 3, 3, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.309366464614868, 2.3102939128875732, 2.3097994327545166, 2.3098747730255127, 2.3102011680603027, 2.310154676437378], "accuracy": [0.09708096832036972, 0.09628847241401672, 0.09206181764602661, 0.09549596905708313, 0.09060890227556229, 0.08915598690509796], "val_loss": [2.309117078781128, 2.309117078781128, 2.309117078781128, 2.309117078781128, 2.309117078781128, 2.309117078781128], "val_accuracy": [0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869]}}]