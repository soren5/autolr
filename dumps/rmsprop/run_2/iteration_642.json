[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8222857117652893, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2120635509490967, 1.6137220859527588, 1.1456738710403442, 0.9736431837081909, 0.8663241863250732, 0.8268864750862122, 0.7720061540603638, 0.7368077635765076, 0.7439443469047546, 0.6764277219772339, 0.6518586874008179, 0.6519141793251038, 0.6387196779251099, 0.614189088344574, 0.6138561367988586, 0.5906819105148315, 0.5736147165298462, 0.5800947546958923, 0.5715049505233765, 0.5701570510864258, 0.5384606719017029, 0.5347070693969727, 0.5286327600479126, 0.5109555125236511, 0.5117480754852295, 0.5080176591873169, 0.5011147260665894, 0.4884031414985657, 0.5067796111106873, 0.4961865246295929, 0.4772353172302246, 0.4789988696575165, 0.4626105725765228, 0.4608580470085144, 0.45514976978302, 0.4468885362148285, 0.44255945086479187, 0.44105178117752075, 0.4438280463218689, 0.43925729393959045, 0.4290520250797272, 0.43262332677841187, 0.41169974207878113, 0.42270076274871826, 0.4080948531627655, 0.39921873807907104, 0.4237877428531647, 0.4089215397834778, 0.4023331105709076, 0.393226683139801, 0.39179888367652893, 0.3908066749572754, 0.38815444707870483, 0.3942427337169647, 0.3789650797843933, 0.37158069014549255, 0.37536823749542236, 0.36845922470092773, 0.37069830298423767, 0.3614092171192169, 0.36732354760169983, 0.36703237891197205, 0.3568604290485382], "accuracy": [0.2673358917236328, 0.5046889185905457, 0.602562427520752, 0.6452252268791199, 0.6837934255599976, 0.698190450668335, 0.7172104120254517, 0.72672039270401, 0.7289658188819885, 0.750231146812439, 0.7614582180976868, 0.7656848430633545, 0.7593448758125305, 0.7716285586357117, 0.7713643908500671, 0.7835160493850708, 0.7881389260292053, 0.7815347909927368, 0.789459764957428, 0.7901201844215393, 0.8006868362426758, 0.8013472557067871, 0.802800178527832, 0.813498854637146, 0.811649739742279, 0.8100647330284119, 0.8181217908859253, 0.8256505131721497, 0.8062343001365662, 0.8127063512802124, 0.826310932636261, 0.8175934553146362, 0.8322546482086182, 0.8304054737091064, 0.8372738361358643, 0.8343679904937744, 0.8416325449943542, 0.8393871188163757, 0.8381983637809753, 0.837537944316864, 0.8475762605667114, 0.8413683772087097, 0.8520671129226685, 0.8445383906364441, 0.8495575189590454, 0.8561616539955139, 0.845859169960022, 0.8499537706375122, 0.8544445633888245, 0.8577466607093811, 0.8560295701026917, 0.8589354157447815, 0.8581429123878479, 0.8568220734596252, 0.8613129258155823, 0.8607845902442932, 0.8648791313171387, 0.8679170608520508, 0.86553955078125, 0.8677849769592285, 0.8661999702453613, 0.8669924736022949, 0.8717474341392517], "val_loss": [1.9325683116912842, 1.1016374826431274, 0.866298496723175, 0.791648268699646, 0.7691699862480164, 0.7119858264923096, 0.663918137550354, 0.8019972443580627, 0.6104667782783508, 0.5920730233192444, 0.6002790331840515, 0.6178051233291626, 0.5839144587516785, 0.559907078742981, 0.5602322816848755, 0.5334439873695374, 0.5695583820343018, 0.5179421305656433, 0.5341729521751404, 0.5170629620552063, 0.5027758479118347, 0.4883010983467102, 0.4939473569393158, 0.48568326234817505, 0.4871774911880493, 0.48511436581611633, 0.4724222719669342, 0.4951576292514801, 0.4698890745639801, 0.47713443636894226, 0.46106836199760437, 0.47689318656921387, 0.4529619812965393, 0.44820964336395264, 0.4463386535644531, 0.4629231095314026, 0.4453340768814087, 0.4624464511871338, 0.4387529194355011, 0.4408533573150635, 0.4466979205608368, 0.42479076981544495, 0.4321468770503998, 0.4227248430252075, 0.420260488986969, 0.43073591589927673, 0.43658748269081116, 0.41703057289123535, 0.41939347982406616, 0.4190298318862915, 0.41882166266441345, 0.4202588200569153, 0.408174604177475, 0.40423446893692017, 0.41075122356414795, 0.40542861819267273, 0.4001523554325104, 0.3976030945777893, 0.4113990068435669, 0.4029909670352936, 0.43019014596939087, 0.3961646258831024, 0.4021706283092499], "val_accuracy": [0.546999990940094, 0.6639999747276306, 0.6946666836738586, 0.7096666693687439, 0.6919999718666077, 0.7153333425521851, 0.7443333268165588, 0.7046666741371155, 0.7710000276565552, 0.7723333239555359, 0.7710000276565552, 0.753000020980835, 0.7583333253860474, 0.7803333401679993, 0.777999997138977, 0.8046666383743286, 0.7716666460037231, 0.8003333210945129, 0.8033333420753479, 0.8066666722297668, 0.8206666707992554, 0.8246666789054871, 0.8166666626930237, 0.8173333406448364, 0.824999988079071, 0.8233333230018616, 0.8276666402816772, 0.812666654586792, 0.8339999914169312, 0.8186666369438171, 0.8299999833106995, 0.8213333487510681, 0.8346666693687439, 0.840666651725769, 0.8403333425521851, 0.8243333101272583, 0.8370000123977661, 0.8320000171661377, 0.8410000205039978, 0.8383333086967468, 0.8353333473205566, 0.847000002861023, 0.8453333377838135, 0.8503333330154419, 0.8500000238418579, 0.8456666469573975, 0.8360000252723694, 0.8510000109672546, 0.8526666760444641, 0.8529999852180481, 0.8510000109672546, 0.8483333587646484, 0.8543333411216736, 0.8553333282470703, 0.8526666760444641, 0.8566666841506958, 0.8586666584014893, 0.8619999885559082, 0.856333315372467, 0.8529999852180481, 0.846666693687439, 0.8610000014305115, 0.8539999723434448]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [5, 2, 0, 6, 3, 8, 2, 2, 5], [2, 0, 3, 1, 0, 0], [28, 1, 5], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 6], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 15, 9, 6, 3, 12, 7, 5, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(grad, alpha), tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 1, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [3, 0, 3, 1, 0], [66, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1], [0, 2, 0, 6, 5, 2, 1, 6, 1, 8, 3, 5, 9, 5, 2], [0, 6, 1, 6, 0, 0, 0, 5], [0, 22, 42, 55, 8], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 10, 6, 4, 1, 23, 15, 8, 5, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(grad), tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), tf.math.square(tf.math.add(tf.math.subtract(tf.math.divide_no_nan(alpha, tf.math.subtract(grad, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.square(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), grad))))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 8, 2, 4, 5], [0, 2, 1, 3, 2], [19, 39, 39], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 3, 0, 8, 2], [2, 0, 3, 1, 0], [59, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 6, 2, 5, 2, 1], [0, 6, 1, 6, 5], [0, 22], [1], [0], [2], [0]], "fitness": -0.09428571164608002, "mapping_values": [1, 7, 4, 3, 1, 2, 1, 1, 0, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.add(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3105270862579346, 2.3092405796051025, 2.310987710952759, 2.3096513748168945, 2.311479091644287, 2.3107101917266846], "accuracy": [0.08942015469074249, 0.08968432247638702, 0.08347642421722412, 0.09166556596755981, 0.08955223858356476, 0.08849557489156723], "val_loss": [2.308973550796509, 2.308973550796509, 2.308973550796509, 2.308973550796509, 2.308973550796509, 2.308973550796509], "val_accuracy": [0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 1, 3, 5, 2, 7, 1, 4, 1, 8, 1, 0, 1, 6, 9, 7, 7, 5, 0], [3, 0, 1, 0, 3, 3, 2, 1, 2, 3, 2, 1, 3, 1], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 2, 7, 6, 3, 8, 2], [2, 0, 4, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 1, 0], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [0], [0]], "fitness": -0.09000000357627869, "mapping_values": [1, 35, 21, 14, 3, 11, 6, 5, 2, 7, 4, 3, 1, 1, 0, 1, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(grad, tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(alpha))), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.subtract(tf.math.pow(tf.math.subtract(tf.math.sqrt(tf.math.subtract(grad, tf.math.negative(grad))), tf.math.subtract(tf.math.divide_no_nan(alpha, grad), grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.math.square(grad), alpha), tf.math.negative(grad)))))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), alpha)), tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.310763359069824, 2.310873508453369, 2.3100204467773438, 2.3104658126831055, 2.3099875450134277, 2.3101282119750977], "accuracy": [0.09377889335155487, 0.09113723784685135, 0.09206181764602661, 0.08638224750757217, 0.09272222965955734, 0.08968432247638702], "val_loss": [2.308758497238159, 2.308758497238159, 2.308758497238159, 2.308758497238159, 2.308758497238159, 2.308758497238159], "val_accuracy": [0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816]}}]