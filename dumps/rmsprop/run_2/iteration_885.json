[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8220000267028809, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2116267681121826, 1.5927542448043823, 1.1293598413467407, 1.015072226524353, 0.8772172927856445, 0.8355330228805542, 0.7609009742736816, 0.7393776178359985, 0.7307562828063965, 0.7107110619544983, 0.6827359199523926, 0.6572441458702087, 0.6493740677833557, 0.6274336576461792, 0.6140583753585815, 0.606696367263794, 0.6028258800506592, 0.5887427926063538, 0.5789310336112976, 0.5697910785675049, 0.557805597782135, 0.54994797706604, 0.5372852087020874, 0.5345478653907776, 0.5441008806228638, 0.5154535174369812, 0.5055436491966248], "accuracy": [0.25941091775894165, 0.5149914026260376, 0.6091665625572205, 0.6349227428436279, 0.6866992712020874, 0.6947563290596008, 0.7170783281326294, 0.7253995537757874, 0.7342491149902344, 0.7345132827758789, 0.7445515990257263, 0.7548540234565735, 0.7604015469551086, 0.7650244235992432, 0.7709681391716003, 0.7695152759552002, 0.7761194109916687, 0.7770439982414246, 0.7844406366348267, 0.7854973077774048, 0.7876105904579163, 0.7965922355651855, 0.804649293422699, 0.8018755912780762, 0.7972526550292969, 0.8109893202781677, 0.8137630224227905], "val_loss": [1.9213181734085083, 1.0893752574920654, 0.8940919041633606, 0.7621716856956482, 0.7268462181091309, 0.6706376671791077, 0.6372442245483398, 0.6058825850486755, 0.6170005798339844, 0.5801019668579102, 0.5806138515472412, 0.6206551194190979, 0.5706497430801392, 0.5422332286834717, 0.5264175534248352, 0.5329005718231201, 0.5308535099029541, 0.5232482552528381, 0.5066695809364319, 0.5063859224319458, 0.47915059328079224, 0.47415030002593994, 0.4884108006954193, 0.5002996325492859, 0.47513240575790405, 0.4679340720176697, 0.463034987449646], "val_accuracy": [0.5376666784286499, 0.6613333225250244, 0.6676666736602783, 0.7153333425521851, 0.7283333539962769, 0.7336666584014893, 0.7573333382606506, 0.7696666717529297, 0.7609999775886536, 0.7743333578109741, 0.7770000100135803, 0.7329999804496765, 0.7793333530426025, 0.8006666898727417, 0.7993333339691162, 0.8086666464805603, 0.7913333177566528, 0.7950000166893005, 0.8159999847412109, 0.8043333292007446, 0.8270000219345093, 0.8289999961853027, 0.8066666722297668, 0.8033333420753479, 0.8206666707992554, 0.8186666369438171, 0.8263333439826965]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 2, 3, 5, 4, 7], [1, 2, 1, 1, 2, 3, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 9, 0, 9, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 8, 7, 0, 2, 2, 0, 1, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.math.multiply(alpha, grad), tf.math.square(alpha)), tf.math.pow(alpha, tf.math.add(grad, grad))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3042690753936768, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 5, 1, 3, 5], [0, 0, 1, 0, 0], [0, 39, 39], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0], [0, 2, 7, 6, 3, 8, 2, 9], [2, 2, 3, 1, 0], [80, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 0, 2, 5, 0], [0, 7, 1], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(beta), beta), grad), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.negative(grad))), alpha)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}, "mapping_values": [1, 7, 4, 3, 2, 13, 8, 5, 2, 9, 6, 3, 1, 1, 0, 1, 0], "tree_depth": 15}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 3, 2, 3, 5], [3, 2, 1, 1, 2], [15, 39, 39], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 7, 0, 1, 3, 8, 2], [5, 0, 3, 2, 0], [16, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 0, 12, 7, 5, 2, 11, 6, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(grad, tf.math.multiply(grad, alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.sqrt(grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.add(tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), tf.math.square(alpha)), tf.math.add(grad, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 2, 3, 2, 3, 5, 5], [0, 3, 1, 1, 2], [0, 39, 39], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 2, 0, 3, 3, 8, 2], [2, 5, 5, 1, 0], [16, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [48, 22], [1], [0], [2], [0]], "fitness": -0.08799999952316284, "mapping_values": [1, 12, 7, 5, 1, 2, 1, 1, 0, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.math.square(alpha), tf.math.square(alpha))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.31146240234375, 2.3114640712738037, 2.3108572959899902, 2.310255527496338, 2.3100249767303467, 2.309166431427002], "accuracy": [0.08572183549404144, 0.08836349099874496, 0.09166556596755981, 0.08598599582910538, 0.08889182657003403, 0.09391097724437714], "val_loss": [2.3092942237854004, 2.3092942237854004, 2.3092942237854004, 2.3092942237854004, 2.3092942237854004, 2.3092942237854004], "val_accuracy": [0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446]}}]