[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.828000009059906, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2095723152160645, 1.6197116374969482, 1.1485525369644165, 1.0012329816818237, 0.8808576464653015, 0.8502261638641357, 0.7880433797836304, 0.745902955532074, 0.7354695796966553, 0.7396535277366638, 0.6856582164764404, 0.6750343441963196, 0.6664873361587524, 0.6516221761703491, 0.6358737349510193, 0.626768946647644, 0.6111614108085632, 0.5998474955558777, 0.6043520569801331, 0.5685510635375977, 0.5625928640365601, 0.5570901036262512, 0.55357426404953, 0.5456796884536743, 0.5385705828666687, 0.5351617932319641, 0.5394918918609619], "accuracy": [0.2604675590991974, 0.4865935742855072, 0.589750349521637, 0.6371681690216064, 0.6796988248825073, 0.6905296444892883, 0.7079645991325378, 0.7323999404907227, 0.722757875919342, 0.7239466309547424, 0.7437590956687927, 0.7485140562057495, 0.7483819723129272, 0.7526086568832397, 0.7582882046699524, 0.7696473598480225, 0.7685906887054443, 0.7692511081695557, 0.776251494884491, 0.785629391670227, 0.7905164361000061, 0.7979130744934082, 0.7891955971717834, 0.7987055778503418, 0.7977809906005859, 0.7979130744934082, 0.7987055778503418], "val_loss": [1.9193769693374634, 1.0934500694274902, 0.8706812262535095, 0.7730815410614014, 0.7144213914871216, 0.6757813096046448, 0.6506605744361877, 0.6482576727867126, 0.7051537036895752, 0.6021069884300232, 0.5889082551002502, 0.5826749205589294, 0.5898070335388184, 0.5778180956840515, 0.5625949501991272, 0.5501865148544312, 0.5626816153526306, 0.5415726900100708, 0.5221018195152283, 0.5218347907066345, 0.5000488758087158, 0.49875009059906006, 0.49122354388237, 0.4933524429798126, 0.4802917540073395, 0.5150748491287231, 0.47883909940719604], "val_accuracy": [0.5836666822433472, 0.6650000214576721, 0.6946666836738586, 0.7136666774749756, 0.7360000014305115, 0.7453333139419556, 0.7603333592414856, 0.7543333172798157, 0.7143333554267883, 0.7573333382606506, 0.7730000019073486, 0.7766666412353516, 0.7676666378974915, 0.765333354473114, 0.778333306312561, 0.7976666688919067, 0.7820000052452087, 0.7960000038146973, 0.8036666512489319, 0.7919999957084656, 0.8103333115577698, 0.8196666836738586, 0.8130000233650208, 0.8103333115577698, 0.8163333535194397, 0.7996666431427002, 0.8180000185966492]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1], [0, 2, 6, 2, 3, 5], [3, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 2, 0, 6, 3, 7, 2], [2, 5, 3, 0, 0], [99, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 2, 0, 2, 6, 4, 3], [0, 6, 0, 6, 0, 4], [0, 77, 23], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 2, 2, 1, 7, 4, 3, 0, 13, 7, 6, 3, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(grad, tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.divide_no_nan(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), grad)))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0936468094587326, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 8, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 2, 6, 3, 8, 2], [2, 0, 3, 4, 0], [16, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5, 4, 1], [0, 6, 3, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 2, 11, 6, 5, 2, 7, 4, 3, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.math.square(alpha))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(grad)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(grad, sigma)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 9, 2, 3, 5], [0, 2, 1, 0, 2], [90, 39, 39], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 8, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [8, 2, 0, 2, 6, 2, 1], [0, 6, 1, 4, 0, 6], [0, 22], [0, 1], [0], [2], [0]], "fitness": -0.09285714477300644, "mapping_values": [1, 6, 4, 2, 2, 4, 3, 1, 0, 13, 7, 6, 2, 2, 1, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.negative(beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(grad, tf.math.divide_no_nan(alpha, tf.math.add(grad, tf.math.subtract(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3104543685913086, 2.308684825897217, 2.3110885620117188, 2.3091065883636475, 2.3092000484466553, 2.3109946250915527], "accuracy": [0.09681680053472519, 0.09642054885625839, 0.09232597798109055, 0.09179764986038208, 0.09470347315073013, 0.08889182657003403], "val_loss": [2.3090689182281494, 2.3090689182281494, 2.3090689182281494, 2.3090689182281494, 2.3090689182281494, 2.3090689182281494], "val_accuracy": [0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 4, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [92, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 3, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.08657142519950867, "mapping_values": [1, 11, 6, 5, 2, 2, 1, 1, 0, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3097827434539795, 2.3090977668762207, 2.30942702293396, 2.3103787899017334, 2.3092007637023926, 2.3103139400482178], "accuracy": [0.09602430462837219, 0.09893012791872025, 0.09391097724437714, 0.0940430611371994, 0.09774138033390045, 0.09457138925790787], "val_loss": [2.308593511581421, 2.308593511581421, 2.308593511581421, 2.308593511581421, 2.308593511581421, 2.308593511581421], "val_accuracy": [0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601]}}]