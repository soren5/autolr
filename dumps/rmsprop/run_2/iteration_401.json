[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8471428751945496, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.207252264022827, 1.6032887697219849, 1.1734532117843628, 0.9628435373306274, 0.8648271560668945, 0.8489422798156738, 0.7856231331825256, 0.7516050338745117, 0.7238808274269104, 0.6939696073532104, 0.6740825176239014, 0.6852080225944519, 0.6361701488494873, 0.6232331991195679, 0.6327469348907471, 0.6027001142501831, 0.5925498604774475, 0.5889844298362732, 0.5690956711769104, 0.5729191899299622, 0.5609625577926636, 0.5384750962257385, 0.5371628403663635, 0.5336079597473145, 0.5361040234565735, 0.5208185911178589, 0.505416989326477, 0.5125100016593933, 0.49666205048561096, 0.4925389885902405, 0.48513227701187134, 0.4785158932209015, 0.4717453122138977, 0.4780292212963104, 0.46416887640953064, 0.46648311614990234, 0.45734649896621704, 0.44958698749542236, 0.4460096061229706, 0.4433094561100006, 0.44146496057510376, 0.42977553606033325, 0.4309535324573517, 0.4186599552631378, 0.4348854720592499, 0.41422098875045776, 0.41230449080467224, 0.408558189868927], "accuracy": [0.2719587981700897, 0.501518964767456, 0.5898824334144592, 0.6581693291664124, 0.6859067678451538, 0.6863030195236206, 0.7111346125602722, 0.7252674698829651, 0.7334566116333008, 0.7465327978134155, 0.7495707273483276, 0.7474573850631714, 0.7666094303131104, 0.7713643908500671, 0.765949010848999, 0.7799497842788696, 0.7827235460281372, 0.7876105904579163, 0.7895918488502502, 0.7882710099220276, 0.7947431206703186, 0.7992339134216309, 0.8024039268493652, 0.8033285140991211, 0.8013472557067871, 0.8049134612083435, 0.8162726163864136, 0.8100647330284119, 0.8153480291366577, 0.8141592741012573, 0.8265751004219055, 0.8265751004219055, 0.8267071843147278, 0.8273676037788391, 0.8278959393501282, 0.8290846943855286, 0.8367455005645752, 0.8362171649932861, 0.837141752243042, 0.8376700282096863, 0.8400475382804871, 0.8432175517082214, 0.8385946154594421, 0.8479725122451782, 0.8379341959953308, 0.8510104417800903, 0.8539162874221802, 0.8494254350662231], "val_loss": [1.9161653518676758, 1.0894540548324585, 0.9240426421165466, 0.7968453168869019, 0.7423833012580872, 0.7050509452819824, 0.6827210187911987, 0.6967614889144897, 0.6380469799041748, 0.640137791633606, 0.6263382434844971, 0.585008978843689, 0.5741032958030701, 0.6234186291694641, 0.5699402689933777, 0.5453664660453796, 0.5486429333686829, 0.5420445203781128, 0.5348649621009827, 0.5293224453926086, 0.5617616176605225, 0.5076390504837036, 0.5124763250350952, 0.5176416635513306, 0.5229375958442688, 0.47670960426330566, 0.4954221248626709, 0.49016740918159485, 0.49463093280792236, 0.46455761790275574, 0.4569483995437622, 0.4533923268318176, 0.4719216227531433, 0.46698468923568726, 0.46963298320770264, 0.44527286291122437, 0.44694653153419495, 0.43160155415534973, 0.4591112434864044, 0.4416044056415558, 0.41997045278549194, 0.4198061525821686, 0.4248112738132477, 0.4243588149547577, 0.4252091348171234, 0.41912174224853516, 0.4227156639099121, 0.4168447256088257], "val_accuracy": [0.5776666402816772, 0.656333327293396, 0.6586666703224182, 0.6980000138282776, 0.7083333134651184, 0.7243333458900452, 0.7303333282470703, 0.7296666502952576, 0.7516666650772095, 0.7519999742507935, 0.7549999952316284, 0.7663333415985107, 0.7836666703224182, 0.7519999742507935, 0.762333333492279, 0.7863333225250244, 0.7926666736602783, 0.7870000004768372, 0.7933333516120911, 0.7940000295639038, 0.7746666669845581, 0.8066666722297668, 0.8040000200271606, 0.7956666946411133, 0.7940000295639038, 0.8169999718666077, 0.8059999942779541, 0.8066666722297668, 0.809333324432373, 0.8190000057220459, 0.8286666870117188, 0.8316666483879089, 0.8180000185966492, 0.8173333406448364, 0.8153333067893982, 0.8323333263397217, 0.8273333311080933, 0.8339999914169312, 0.8286666870117188, 0.8326666951179504, 0.8370000123977661, 0.8349999785423279, 0.8429999947547913, 0.8389999866485596, 0.8346666693687439, 0.8389999866485596, 0.8373333215713501, 0.8396666646003723]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [0, 6, 3, 2, 3, 5, 3, 9], [0, 1, 2, 0, 2], [0, 39, 39], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [0, 2, 0, 1, 3, 8, 2, 7], [2, 0, 3, 1, 0, 2], [16, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [0, 2, 0, 2, 5, 6, 1], [0, 6, 1, 6, 0], [0, 13], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 8, 5, 3, 14, 8, 6, 2, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha), tf.math.square(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.sqrt(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(grad, alpha), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.12376172095537186, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1], [0, 2, 3, 7, 3, 0, 4, 6, 0, 1, 3, 6, 9, 1, 1, 0, 7, 4, 6, 7, 8, 1, 6, 6, 4, 5, 6, 0, 3, 6, 7, 3, 1, 3, 2, 1, 2, 4, 9, 9], [0, 3, 1, 0, 2, 3, 1, 0, 2, 2, 1, 2, 2, 3, 2, 2, 2, 0, 3, 1, 2, 3, 0, 1, 1, 0, 3, 3], [0, 39, 39, 9, 79, 21, 25, 84, 18], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], [0, 2, 0, 6, 9, 8, 2], [2, 0, 5, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 7, 0, 2, 5, 2, 1, 8, 4, 2], [0, 6, 1, 6, 0, 4, 3], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 68, 40, 28, 9, 5, 3, 2, 1, 17, 10, 7, 2, 1, 0, 1, 0], "tree_depth": 48, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.negative(alpha))), tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), alpha), tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), grad))), tf.math.subtract(grad, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(grad, grad), tf.math.add(tf.math.sqrt(tf.math.subtract(grad, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.pow(grad, tf.math.square(tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.divide_no_nan(grad, grad), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.math.multiply(tf.math.subtract(alpha, grad), tf.math.multiply(grad, tf.math.add(tf.math.subtract(tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), alpha), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))))), grad), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), grad)))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.subtract(tf.math.sqrt(grad), alpha), grad))), tf.math.pow(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, sigma)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3039586544036865, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [0, 3, 3, 2, 3, 5, 6], [0, 2, 1, 0, 2, 3], [0, 39, 39], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 3, 0, 2, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 3, 0, 2, 5, 8, 1], [0, 6, 1, 6, 0], [0, 22], [0, 0, 1], [0, 5], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 7, 6, 2, 12, 7, 5, 2, 1, 0, 1, 1, 3, 2, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.math.square(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.math.negative(tf.math.add(tf.math.multiply(tf.math.sqrt(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(grad, alpha))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 1], [0, 64, 39], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [0, 2, 4, 6, 3, 0, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 0, 2, 5, 2, 1], [0, 0, 1, 6, 0, 2], [0, 22, 52], [0, 1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 10, 5, 5, 2, 13, 7, 6, 3, 2, 1, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, alpha))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, grad)))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [48731803648.0, 7269975064576.0, 120216528879616.0, 856633441779712.0, 3771649153302528.0, 1.2395042614280192e+16], "accuracy": [0.09959053993225098, 0.09589222073554993, 0.10210011899471283, 0.1002509593963623, 0.09853387624025345, 0.10038304328918457], "val_loss": [463655665664.0, 24996896309248.0, 268307814940672.0, 1462761171189760.0, 5478478283538432.0, 1.6158283295358976e+16], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}]