[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8382856845855713, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2088615894317627, 1.6021225452423096, 1.1407175064086914, 0.9709400534629822, 0.8598068952560425, 0.8329852223396301, 0.802935779094696, 0.7651503086090088, 0.7138625383377075, 0.7021191716194153, 0.7010287046432495, 0.654197633266449, 0.6541264653205872, 0.6474598050117493, 0.6000521183013916, 0.6082820892333984, 0.5948992967605591, 0.5833678245544434, 0.5688002109527588, 0.5608077645301819, 0.5683781504631042, 0.5262461304664612, 0.5307058095932007, 0.5320699214935303, 0.5128224492073059, 0.5346609354019165, 0.4992572069168091, 0.48680350184440613, 0.48750096559524536, 0.4979594349861145, 0.4730931520462036, 0.47418299317359924, 0.47631803154945374, 0.461849570274353, 0.45795348286628723, 0.45253950357437134, 0.45056846737861633, 0.4400349259376526, 0.4403538107872009, 0.4364822804927826, 0.43716832995414734, 0.41985997557640076, 0.41743606328964233, 0.4111362397670746, 0.40563133358955383, 0.41394439339637756, 0.4099981188774109, 0.39523711800575256, 0.40731582045555115, 0.3977838456630707, 0.39297911524772644, 0.3849991261959076, 0.392265260219574, 0.3885515332221985, 0.3753981292247772, 0.3966693878173828, 0.3664064109325409, 0.37626659870147705], "accuracy": [0.2747325301170349, 0.497820645570755, 0.5931845307350159, 0.6518293619155884, 0.6886804699897766, 0.6975300312042236, 0.7017567157745361, 0.7194558382034302, 0.735569953918457, 0.7407211661338806, 0.7364945411682129, 0.7548540234565735, 0.7548540234565735, 0.7561748623847961, 0.7724210619926453, 0.7708360552787781, 0.7810064554214478, 0.7853652238845825, 0.7905164361000061, 0.791969358921051, 0.7852331399917603, 0.8075551390647888, 0.8041210174560547, 0.7996301651000977, 0.8087438941001892, 0.7973847389221191, 0.8177255392074585, 0.8201030492782593, 0.8224804997444153, 0.8162726163864136, 0.8227446675300598, 0.8244617581367493, 0.8210275769233704, 0.8265751004219055, 0.8305375576019287, 0.829216718673706, 0.832650899887085, 0.8354246616363525, 0.8381983637809753, 0.8379341959953308, 0.8366134166717529, 0.842028796672821, 0.8430854678153992, 0.8455950617790222, 0.8514066934585571, 0.8451988101005554, 0.8527275323867798, 0.8531237840652466, 0.8433496356010437, 0.8525954484939575, 0.8536521196365356, 0.8607845902442932, 0.8527275323867798, 0.8632941246032715, 0.8605204224586487, 0.8533879518508911, 0.8623695969581604, 0.8618412613868713], "val_loss": [1.9133232831954956, 1.0855941772460938, 0.964236319065094, 0.7571316957473755, 0.7126690149307251, 0.7207639217376709, 0.6601781845092773, 0.6102540493011475, 0.6157996654510498, 0.5804657340049744, 0.5830152034759521, 0.6072414517402649, 0.5486153960227966, 0.5362474918365479, 0.5325115919113159, 0.5410898327827454, 0.5210065841674805, 0.5150771737098694, 0.5117125511169434, 0.5402304530143738, 0.49430492520332336, 0.4836355447769165, 0.48213204741477966, 0.4917202293872833, 0.4878261685371399, 0.4707263112068176, 0.45137715339660645, 0.45702001452445984, 0.4723840355873108, 0.45107221603393555, 0.436179518699646, 0.4463574290275574, 0.43188589811325073, 0.43010130524635315, 0.4279904365539551, 0.4448132812976837, 0.4183429479598999, 0.4305759370326996, 0.42908596992492676, 0.42637136578559875, 0.42209383845329285, 0.4176655411720276, 0.4139200747013092, 0.39939776062965393, 0.4314381182193756, 0.4104423522949219, 0.4057202935218811, 0.4121418595314026, 0.3928814232349396, 0.4002009332180023, 0.3973073363304138, 0.3917316794395447, 0.39255475997924805, 0.3859804570674896, 0.39674681425094604, 0.3890964388847351, 0.3863714933395386, 0.3925641179084778], "val_accuracy": [0.5376666784286499, 0.6700000166893005, 0.6600000262260437, 0.7226666808128357, 0.7396666407585144, 0.7213333249092102, 0.7403333187103271, 0.7803333401679993, 0.7646666765213013, 0.7866666913032532, 0.7773333191871643, 0.7596666812896729, 0.7846666574478149, 0.7990000247955322, 0.7919999957084656, 0.8013333082199097, 0.7993333339691162, 0.8076666593551636, 0.8036666512489319, 0.7829999923706055, 0.8143333196640015, 0.8109999895095825, 0.8240000009536743, 0.8033333420753479, 0.8143333196640015, 0.8286666870117188, 0.8296666741371155, 0.8256666660308838, 0.8213333487510681, 0.828000009059906, 0.831333339214325, 0.8263333439826965, 0.8393333554267883, 0.8403333425521851, 0.8376666903495789, 0.8360000252723694, 0.8413333296775818, 0.8379999995231628, 0.8366666436195374, 0.8360000252723694, 0.8433333039283752, 0.8446666598320007, 0.847000002861023, 0.8506666421890259, 0.8346666693687439, 0.8463333249092102, 0.8483333587646484, 0.8483333587646484, 0.8556666374206543, 0.8506666421890259, 0.8519999980926514, 0.8546666502952576, 0.8586666584014893, 0.8579999804496765, 0.8526666760444641, 0.856333315372467, 0.8519999980926514, 0.8539999723434448]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 8], [0, 2, 1, 0, 2], [80, 39, 39], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 2, 0, 6, 3, 6, 2], [2, 0, 3, 1, 0, 2], [16, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 2, 0, 2, 5, 2, 1], [5, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 13, 7, 6, 2, 7, 4, 3, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(grad, alpha)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(grad, tf.math.negative(tf.math.add(grad, alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10289261490106583, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [4, 8, 3, 2, 3, 5], [1, 2, 1, 0, 3], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 3, 0, 6, 3, 4, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 3, 2], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 0, 11, 6, 5, 2, 5, 3, 2, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(alpha, tf.math.sqrt(tf.math.multiply(grad, alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.pow(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09457138925790787, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0], [0, 2, 3, 2, 3, 7], [0, 3, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [1, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 6, 0, 1, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.09200000017881393, "mapping_values": [1, 2, 1, 1, 1, 9, 5, 4, 1, 5, 3, 2, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(alpha), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.309995412826538, 2.3105082511901855, 2.309694766998291, 2.3091650009155273, 2.311206340789795, 2.309645414352417], "accuracy": [0.09113723784685135, 0.08889182657003403, 0.09140139818191528, 0.09549596905708313, 0.08757099509239197, 0.08849557489156723], "val_loss": [2.30859637260437, 2.30859637260437, 2.30859637260437, 2.30859637260437, 2.30859637260437, 2.30859637260437], "val_accuracy": [0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 2, 3, 3], [0, 2, 1, 0, 2, 3], [0, 39, 39], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [7, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.052000001072883606, "mapping_values": [1, 12, 6, 6, 2, 7, 4, 3, 1, 12, 7, 5, 1, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(grad), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1051271293304832.0, 1259725450641408.0, 1233457699094528.0, 1199292173778944.0, 1285920724615168.0, 1252372869283840.0], "accuracy": [0.08770307898521423, 0.07938185334205627, 0.0874389111995697, 0.08506141602993011, 0.07951393723487854, 0.080042265355587], "val_loss": [786416363634688.0, 786416363634688.0, 786416229416960.0, 786416229416960.0, 786416229416960.0, 786416229416960.0], "val_accuracy": [0.04633333161473274, 0.04633333161473274, 0.04633333161473274, 0.04633333161473274, 0.04633333161473274, 0.04633333161473274]}}]