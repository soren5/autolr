[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8248571157455444, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.20674204826355, 1.597675085067749, 1.1319267749786377, 0.991909921169281, 0.8959968686103821, 0.807264506816864, 0.7952490448951721, 0.7454735040664673, 0.7141376733779907, 0.7135478258132935, 0.675439178943634, 0.6849035620689392, 0.6547781229019165, 0.622676432132721, 0.6330455541610718, 0.6006464958190918, 0.5892478823661804, 0.5945213437080383, 0.5850942730903625, 0.571844756603241, 0.5552605390548706, 0.549536406993866, 0.5449180603027344, 0.5522465705871582, 0.5272120833396912, 0.5235392451286316, 0.5097600817680359, 0.5357514023780823, 0.5086982250213623, 0.510649561882019, 0.508170485496521, 0.4872746467590332, 0.48808524012565613, 0.4766101539134979, 0.46702325344085693, 0.4594840407371521, 0.46970465779304504, 0.458869606256485, 0.46036580204963684, 0.4409155249595642, 0.45056983828544617, 0.4375338554382324, 0.4424499571323395, 0.43225663900375366, 0.42688995599746704], "accuracy": [0.270109623670578, 0.5065380930900574, 0.6056002974510193, 0.6571126580238342, 0.6804913282394409, 0.7099458575248718, 0.7099458575248718, 0.7257958054542542, 0.7339849472045898, 0.7382115721702576, 0.7515519857406616, 0.7430986762046814, 0.7559106945991516, 0.7689869403839111, 0.7675340175628662, 0.7744023203849792, 0.7837802171707153, 0.7800818681716919, 0.7798177003860474, 0.7862898111343384, 0.7960638999938965, 0.7967243194580078, 0.7975168228149414, 0.7924976944923401, 0.804649293422699, 0.8053097128868103, 0.8113855719566345, 0.8001585006713867, 0.813498854637146, 0.8121780753135681, 0.8101968169212341, 0.8251221776008606, 0.8256505131721497, 0.8220842480659485, 0.828292191028595, 0.8341038227081299, 0.8285563588142395, 0.8323867321014404, 0.8277638554573059, 0.8376700282096863, 0.8330471515655518, 0.837141752243042, 0.834632158279419, 0.8392550349235535, 0.8451988101005554], "val_loss": [1.9201250076293945, 1.1550228595733643, 1.0582135915756226, 0.8472368121147156, 0.7295628190040588, 0.6953414082527161, 0.6548088192939758, 0.6544867157936096, 0.674315333366394, 0.6108517050743103, 0.6320796012878418, 0.649962842464447, 0.5731392502784729, 0.5879182815551758, 0.5463659763336182, 0.5579560399055481, 0.573546290397644, 0.53420090675354, 0.5668930411338806, 0.5248034596443176, 0.5031113028526306, 0.5070462226867676, 0.5019286870956421, 0.49569979310035706, 0.49127376079559326, 0.4841621220111847, 0.5022759437561035, 0.4972074329853058, 0.4780615270137787, 0.4960060119628906, 0.47131428122520447, 0.47448548674583435, 0.4670020341873169, 0.45513269305229187, 0.4514513313770294, 0.4478056728839874, 0.4536606967449188, 0.4517102837562561, 0.4515058100223541, 0.4379795789718628, 0.44269564747810364, 0.4431920647621155, 0.4471363425254822, 0.4408458173274994, 0.43941551446914673], "val_accuracy": [0.5770000219345093, 0.593666672706604, 0.6136666536331177, 0.6866666674613953, 0.7433333396911621, 0.749666690826416, 0.7603333592414856, 0.7540000081062317, 0.7483333349227905, 0.7670000195503235, 0.7506666779518127, 0.7580000162124634, 0.7896666526794434, 0.7820000052452087, 0.8003333210945129, 0.7856666445732117, 0.762666642665863, 0.7993333339691162, 0.7796666622161865, 0.8063333630561829, 0.8190000057220459, 0.8086666464805603, 0.8059999942779541, 0.8216666579246521, 0.8206666707992554, 0.8233333230018616, 0.8106666803359985, 0.8176666498184204, 0.8226666450500488, 0.8069999814033508, 0.8306666612625122, 0.8259999752044678, 0.8216666579246521, 0.8330000042915344, 0.8339999914169312, 0.8309999704360962, 0.8339999914169312, 0.8266666531562805, 0.8363333344459534, 0.8410000205039978, 0.8399999737739563, 0.8353333473205566, 0.8343333601951599, 0.8383333086967468, 0.8399999737739563]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [0, 2, 3, 3, 3, 5, 2, 6, 2, 8, 8, 0, 0, 2, 7, 4, 3, 4, 0, 3, 2, 5, 0, 4, 3, 5, 0], [0, 2, 1, 0, 2, 2, 0, 1, 1, 3, 1, 2, 3, 1, 3, 1, 2], [0, 39, 39], [0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 1], [1], [0], [6], [0]], "fitness": -0.4034285843372345, "mapping_values": [1, 44, 27, 17, 3, 2, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.square(alpha)), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.add(grad, tf.math.sqrt(tf.math.sqrt(tf.math.negative(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.pow(tf.math.negative(tf.math.multiply(tf.math.add(alpha, grad), tf.math.square(tf.math.negative(alpha)))), tf.math.pow(tf.math.multiply(grad, grad), alpha)), tf.math.square(tf.math.negative(grad))), alpha)), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.667933225631714, 2.3164000511169434, 2.3715269565582275, 2.1783130168914795, 2.338364362716675, 2.304267406463623, 2.3031508922576904, 2.303140163421631, 2.3030245304107666], "accuracy": [0.20459648966789246, 0.12574297189712524, 0.14753665030002594, 0.2001056671142578, 0.12930920720100403, 0.09747721254825592, 0.10011887550354004, 0.09787346422672272, 0.09642054885625839], "val_loss": [2.266279935836792, 2.2811245918273926, 2.305878162384033, 2.148031711578369, 2.3040406703948975, 2.302673101425171, 2.302572011947632, 2.302694797515869, 2.3025975227355957], "val_accuracy": [0.16300000250339508, 0.09300000220537186, 0.09966666996479034, 0.41600000858306885, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.1003333330154419, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5, 0, 9, 3, 7, 0, 3, 9], [0, 2, 1, 0, 0, 1], [0, 39, 39, 14, 33], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 0, 6, 9, 8, 2], [2, 1, 1, 1, 0], [16, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 2, 0, 2, 5, 4, 1, 5, 4, 8, 7, 0, 3], [0, 6, 1, 5, 0, 7, 0, 7], [76, 22, 41], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 13, 6, 5, 7, 5, 2, 1, 21, 13, 8, 3, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.math.square(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.multiply(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), alpha)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.math.pow(tf.math.subtract(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)), alpha)), grad)), tf.math.pow(tf.math.sqrt(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.negative(grad), tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5, 1, 7, 3, 7, 4, 5, 8, 8, 3, 5, 4, 6, 6, 3, 0], [0, 2, 1, 0, 0, 2, 2, 3, 0, 1, 1, 2, 2, 1, 3], [79, 39, 39, 37], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [0, 4, 0, 6, 3, 8, 2], [2, 4, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [4, 4, 0, 2, 5, 2, 1, 5, 3, 2, 2, 2, 6, 0, 5, 0, 7, 1, 3], [0, 6, 1, 6, 0, 1, 0, 5, 6, 2, 7, 4, 6, 6], [0, 22, 96], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 36, 21, 15, 4, 5, 3, 2, 0, 33, 19, 14, 3, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.math.square(tf.math.subtract(tf.math.add(tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.pow(tf.math.square(tf.math.sqrt(tf.math.sqrt(grad))), tf.math.multiply(grad, tf.math.square(grad))), tf.math.pow(tf.math.divide_no_nan(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), alpha), alpha)))), grad)), tf.math.divide_no_nan(grad, tf.math.multiply(alpha, tf.math.negative(grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.negative(beta), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.pow(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.square(tf.math.add(grad, tf.math.subtract(alpha, grad))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(tf.math.divide_no_nan(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad)), grad), tf.math.square(tf.math.negative(tf.math.add(beta, grad)))), tf.math.subtract(tf.math.multiply(grad, grad), grad)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 3], [0, 39, 39], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 2, 1, 1, 0], [16, 1], [0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [6, 6, 5, 1, 0], [60, 22], [1], [0], [2], [0]], "fitness": -0.09142857044935226, "mapping_values": [1, 2, 1, 1, 1, 2, 1, 1, 0, 8, 5, 3, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(grad, tf.math.negative(tf.math.add(grad, tf.math.square(grad))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.309561014175415, 2.3111913204193115, 2.309537649154663, 2.309687614440918, 2.310051202774048, 2.3110063076019287], "accuracy": [0.0944393053650856, 0.08519349992275238, 0.09034473448991776, 0.09219389408826828, 0.0952318087220192, 0.09245806187391281], "val_loss": [2.309213161468506, 2.309213161468506, 2.309213161468506, 2.309213161468506, 2.309213161468506, 2.309213161468506], "val_accuracy": [0.08833333104848862, 0.08833333104848862, 0.08833333104848862, 0.08833333104848862, 0.08833333104848862, 0.08833333104848862]}}]