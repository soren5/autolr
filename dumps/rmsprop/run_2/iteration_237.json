[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8311428427696228, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.20937442779541, 1.6018012762069702, 1.150208830833435, 0.9800814390182495, 0.8916057348251343, 0.8349903225898743, 0.7986549139022827, 0.7452484369277954, 0.7318456768989563, 0.713022768497467, 0.7165487408638, 0.668076753616333, 0.6674734950065613, 0.6346432566642761, 0.6387004852294922, 0.6286869645118713, 0.5935190916061401, 0.5969842076301575, 0.5733785629272461, 0.5733401775360107, 0.5681080222129822, 0.5432595610618591, 0.5604789853096008, 0.5317017436027527, 0.5314459204673767, 0.5266588926315308, 0.5141040086746216, 0.5047839879989624, 0.5074958801269531, 0.4920137822628021, 0.48567068576812744, 0.48766613006591797], "accuracy": [0.26099589467048645, 0.5091797709465027, 0.5968828201293945, 0.6454893946647644, 0.6773213744163513, 0.6996433734893799, 0.7055870890617371, 0.7264562249183655, 0.7260599732398987, 0.7314753532409668, 0.7283053994178772, 0.7512878179550171, 0.7520803213119507, 0.7574957013130188, 0.759609043598175, 0.7598732113838196, 0.7779685854911804, 0.7667415142059326, 0.7839123010635376, 0.78113853931427, 0.7815347909927368, 0.7994980812072754, 0.7918372750282288, 0.8000264167785645, 0.7996301651000977, 0.8039889335632324, 0.8086118102073669, 0.8133667707443237, 0.8127063512802124, 0.8201030492782593, 0.8245938420295715, 0.8234050869941711], "val_loss": [1.921008586883545, 1.089176058769226, 0.8593246340751648, 0.7943066358566284, 0.7576282620429993, 0.6920226812362671, 0.6569977402687073, 0.6638493537902832, 0.6537734270095825, 0.6974291801452637, 0.5929819941520691, 0.5825221538543701, 0.5611373782157898, 0.5517576336860657, 0.5487386584281921, 0.5445287823677063, 0.5083043575286865, 0.5479013919830322, 0.5351788997650146, 0.5131259560585022, 0.4920662045478821, 0.48180291056632996, 0.4959714710712433, 0.4772918224334717, 0.4904129207134247, 0.46940481662750244, 0.46390560269355774, 0.4577992260456085, 0.481259286403656, 0.4535798728466034, 0.4676002562046051, 0.44969043135643005], "val_accuracy": [0.5139999985694885, 0.6726666688919067, 0.6983333230018616, 0.7083333134651184, 0.7273333072662354, 0.7463333606719971, 0.7546666860580444, 0.7506666779518127, 0.7423333525657654, 0.7116666436195374, 0.7776666879653931, 0.7953333258628845, 0.796999990940094, 0.7933333516120911, 0.7960000038146973, 0.7953333258628845, 0.8209999799728394, 0.7846666574478149, 0.7900000214576721, 0.8029999732971191, 0.8223333358764648, 0.824999988079071, 0.8236666917800903, 0.8266666531562805, 0.8190000057220459, 0.8306666612625122, 0.8363333344459534, 0.8299999833106995, 0.8143333196640015, 0.8326666951179504, 0.8253333568572998, 0.8330000042915344]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 8, 3, 1, 3, 5], [0, 1, 1, 0, 2], [0, 39, 77], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 2, 5, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 2, 0, 2, 4, 8, 6], [0, 6, 1, 1], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 1, 5, 3, 2, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.square(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.303140163421631, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 3], [0, 39, 39], [1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [0, 2, 8, 6, 7, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1], [6, 2, 0, 2, 5, 2, 1, 6, 4], [0, 6, 1, 6, 0, 2, 4, 3], [0, 22], [1], [0], [2], [0]], "fitness": -0.09428571164608002, "mapping_values": [1, 11, 6, 5, 2, 1, 0, 1, 0, 17, 9, 8, 2, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(alpha, grad))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(beta, tf.math.pow(grad, sigma))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3097050189971924, 2.310757875442505, 2.309849500656128, 2.310762882232666, 2.3102924823760986, 2.310389280319214], "accuracy": [0.09325055778026581, 0.09034473448991776, 0.09192973375320435, 0.09100515395402908, 0.09021265059709549, 0.09140139818191528], "val_loss": [2.3090078830718994, 2.3090078830718994, 2.3090078830718994, 2.3090078830718994, 2.3090078830718994, 2.3090078830718994], "val_accuracy": [0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 2, 0, 2, 5, 2, 1, 0], [0, 6, 1, 6, 0], [0, 22], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 3, 4, 8, 3, 6, 1, 4, 9, 3, 3, 7, 3, 7, 6, 5, 4, 7, 8, 5, 1, 4, 5, 9, 1, 4], [2, 5, 0, 1, 3, 4, 1, 7, 6, 0, 1, 3, 5, 4, 4, 7, 0], [0, 9, 59, 78, 66]], "fitness": -0.09342857450246811, "mapping_values": [1, 6, 3, 3, 1, 12, 7, 5, 2, 13, 8, 5, 2, 43, 26, 17, 5], "tree_depth": 42, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(grad, alpha)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(alpha, grad))), tf.math.negative(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.pow(beta, tf.math.sqrt(grad)), tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, tf.math.subtract(tf.math.pow(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.multiply(sigma, tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.square(tf.math.pow(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.subtract(grad, tf.math.pow(grad, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))))))), alpha), sigma), grad), tf.math.square(grad)), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.pow(grad, grad), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [2.309983730316162, 2.3109281063079834, 2.3118441104888916, 2.3091881275177, 2.3098909854888916, 2.3097898960113525], "accuracy": [0.09338264167308807, 0.08757099509239197, 0.09021265059709549, 0.09021265059709549, 0.09259014576673508, 0.09206181764602661], "val_loss": [2.308852434158325, 2.308852434158325, 2.308852434158325, 2.308852434158325, 2.308852434158325, 2.308852434158325], "val_accuracy": [0.08866667002439499, 0.08866667002439499, 0.08866667002439499, 0.08866667002439499, 0.08866667002439499, 0.08866667002439499]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [30, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 1, 1, 0], [16, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0], [0, 2, 0, 2, 5, 8, 1], [6, 6, 1, 6, 6], [0], [1], [0], [2], [0]], "fitness": -0.09314285963773727, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 8, 5, 3, 0, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), alpha), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(grad, grad)), tf.math.square(alpha))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3107645511627197, 2.310072660446167, 2.309499979019165, 2.3091280460357666, 2.30741024017334, 2.3083770275115967], "accuracy": [0.09087307006120682, 0.09206181764602661, 0.08928807079792023, 0.08981640636920929, 0.09140139818191528, 0.08915598690509796], "val_loss": [2.3088505268096924, 2.308579444885254, 2.3082094192504883, 2.307729721069336, 2.30716609954834, 2.306544542312622], "val_accuracy": [0.08966666460037231, 0.08900000154972076, 0.08766666799783707, 0.08533333241939545, 0.08433333039283752, 0.08366666734218597]}}]