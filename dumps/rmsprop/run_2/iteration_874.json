[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8100000023841858, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2132136821746826, 1.6175251007080078, 1.1355472803115845, 0.9955974221229553, 0.8831884860992432, 0.86468505859375, 0.7824053764343262, 0.7838886976242065, 0.7305846214294434, 0.7084650993347168, 0.6902158856391907, 0.6948092579841614, 0.6388872265815735, 0.6468361616134644, 0.6336523294448853, 0.6176498532295227, 0.6287094950675964, 0.6004918813705444, 0.594150722026825, 0.5683234930038452, 0.5673695206642151, 0.561649739742279, 0.5507552623748779, 0.5395093560218811, 0.5372843742370605, 0.5249104499816895, 0.5480396151542664, 0.518486499786377, 0.5122469067573547], "accuracy": [0.26958128809928894, 0.499009370803833, 0.6058644652366638, 0.6456214785575867, 0.6894729733467102, 0.6851142644882202, 0.7161537408828735, 0.7119271159172058, 0.7276449799537659, 0.7384757399559021, 0.7473253011703491, 0.7391361594200134, 0.7642319202423096, 0.7574957013130188, 0.7656848430633545, 0.7759873270988464, 0.7663452625274658, 0.7778365015983582, 0.7825914621353149, 0.7891955971717834, 0.7922335267066956, 0.7981772422790527, 0.7975168228149414, 0.8047813773155212, 0.8035926818847656, 0.8082155585289001, 0.7987055778503418, 0.8185180425643921, 0.8136309385299683], "val_loss": [1.9345881938934326, 1.108273983001709, 0.9751541614532471, 0.7900526523590088, 0.749043881893158, 0.7484109997749329, 0.6848156452178955, 0.6559541821479797, 0.6763786673545837, 0.6244489550590515, 0.6088153123855591, 0.6056725382804871, 0.5885602235794067, 0.6008993983268738, 0.5571054816246033, 0.5938962697982788, 0.557403564453125, 0.543763279914856, 0.5354564189910889, 0.5542974472045898, 0.5405351519584656, 0.5242820978164673, 0.5176045894622803, 0.5014957785606384, 0.49805375933647156, 0.5545157790184021, 0.5002040863037109, 0.49654191732406616, 0.4948709011077881], "val_accuracy": [0.47866666316986084, 0.6639999747276306, 0.6186666488647461, 0.7200000286102295, 0.7166666388511658, 0.7316666841506958, 0.7386666536331177, 0.7483333349227905, 0.749666690826416, 0.7590000033378601, 0.7723333239555359, 0.7716666460037231, 0.7753333449363708, 0.7673333287239075, 0.7916666865348816, 0.7793333530426025, 0.7803333401679993, 0.7976666688919067, 0.7976666688919067, 0.79666668176651, 0.7946666479110718, 0.7996666431427002, 0.7990000247955322, 0.8180000185966492, 0.8143333196640015, 0.7826666831970215, 0.8149999976158142, 0.8136666417121887, 0.8106666803359985]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 2, 3, 2, 3, 5, 0, 2, 8], [2, 2, 1, 0, 2, 0, 3], [0, 39, 39], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 6, 6, 3, 8, 2], [3, 0, 3, 1, 0], [16, 1], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 4, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.2574285566806793, "mapping_values": [1, 16, 9, 7, 2, 4, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(grad, tf.math.multiply(grad, alpha)), tf.math.add(tf.math.multiply(tf.math.square(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.25372314453125, 2.333266019821167, 2.334125280380249, 2.3354339599609375, 2.3573648929595947, 2.3457438945770264], "accuracy": [0.12059172987937927, 0.1228371411561966, 0.10077928751707077, 0.09985470771789551, 0.0944393053650856, 0.09853387624025345], "val_loss": [2.051962375640869, 2.3383238315582275, 2.3667049407958984, 2.3648600578308105, 2.3252878189086914, 2.3202269077301025], "val_accuracy": [0.2549999952316284, 0.09933333098888397, 0.10066666454076767, 0.09866666793823242, 0.09833333641290665, 0.09933333098888397]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1], [2, 1, 3, 2, 3, 5], [0, 1, 3, 0, 2], [58, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [1, 0, 3, 1, 0], [16, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [0, 8, 6, 0, 5, 2, 1], [0, 6, 5, 1, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 1, 2, 1, 9, 5, 4, 1, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(alpha), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3032093048095703, 2.3025834560394287, 2.302583694458008, 2.3025832176208496, 2.302584409713745, 2.3025825023651123, 2.302584648132324], "accuracy": [0.10685510188341141, 0.1026284471154213, 0.10249637067317963, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.302586078643799, 2.3025848865509033, 2.302584409713745, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10066666454076767, 0.10100000351667404, 0.10066666454076767, 0.10066666454076767, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 1, 2, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 7, 8, 2], [3, 0, 3, 1, 0], [16, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 1, 6, 8], [6, 6, 1, 6, 0], [0, 43], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 12, 7, 5, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(grad), tf.math.divide_no_nan(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [431.0942687988281, 280.9953918457031, 344.7440490722656, 529.41162109375, 586.0289306640625, 689.7352294921875, 580.7495727539062, 907.161865234375, 1136.68603515625, 908.1195068359375], "accuracy": [0.09681680053472519, 0.10434553027153015, 0.1026284471154213, 0.10368511080741882, 0.09972262382507324, 0.09536388516426086, 0.10711926966905594, 0.10051512718200684, 0.1006472036242485, 0.09972262382507324], "val_loss": [189.37432861328125, 203.468994140625, 542.954833984375, 451.6330871582031, 661.9932250976562, 619.4393310546875, 675.9353637695312, 1081.338134765625, 953.4818115234375, 754.8588256835938], "val_accuracy": [0.1003333330154419, 0.09666666388511658, 0.10166666656732559, 0.09666666388511658, 0.10266666859388351, 0.09666666388511658, 0.10133333504199982, 0.10100000351667404, 0.10100000351667404, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [4, 2, 3, 2, 3, 5], [3, 2, 1, 0, 2, 0], [0, 39, 39], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 5, 3, 1, 0], [16, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [3], [0]], "fitness": -0.09314285963773727, "mapping_values": [1, 11, 5, 6, 2, 12, 7, 5, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.add(grad, grad), alpha), tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(beta), grad), tf.math.add(grad, alpha))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3088645935058594, 2.310704231262207, 2.310181140899658, 2.309994697570801, 2.309062957763672, 2.310084819793701], "accuracy": [0.09245806187391281, 0.09008057415485382, 0.09311848133802414, 0.09232597798109055, 0.09232597798109055, 0.09166556596755981], "val_loss": [2.308806896209717, 2.308806896209717, 2.308806896209717, 2.308806896209717, 2.308806896209717, 2.308806896209717], "val_accuracy": [0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186]}}]