[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.819428563117981, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.211765766143799, 1.6010847091674805, 1.1750946044921875, 0.9412996768951416, 0.8567760586738586, 0.8390197157859802, 0.7601687908172607, 0.7660806179046631, 0.7146304249763489, 0.7038130164146423, 0.6803382039070129, 0.6484429240226746, 0.639298677444458, 0.626717746257782, 0.6286773681640625, 0.594671368598938, 0.5893044471740723, 0.5907182097434998, 0.5696942806243896, 0.5744515061378479, 0.5482787489891052, 0.5411378145217896, 0.5482216477394104, 0.5195230841636658, 0.5298896431922913, 0.5295888781547546, 0.5122241377830505, 0.5096212029457092, 0.4929368793964386], "accuracy": [0.26376965641975403, 0.5160480737686157, 0.59225994348526, 0.6672830581665039, 0.6812838315963745, 0.6903975605964661, 0.7173424959182739, 0.713908314704895, 0.7354378700256348, 0.7371549606323242, 0.7461365461349487, 0.7553823590278625, 0.759609043598175, 0.7655527591705322, 0.7642319202423096, 0.7786290049552917, 0.7720248103141785, 0.7803460359573364, 0.7849689722061157, 0.7788931727409363, 0.7964601516723633, 0.8010830879211426, 0.7938185334205627, 0.8079513907432556, 0.804649293422699, 0.7994980812072754, 0.8055738806724548, 0.8138951063156128, 0.8131026029586792], "val_loss": [1.9216479063034058, 1.082798957824707, 0.8835329413414001, 0.7685413360595703, 0.7457687854766846, 0.7213424444198608, 0.6880110502243042, 0.6746345162391663, 0.6867775917053223, 0.612405002117157, 0.6036346554756165, 0.5940284729003906, 0.5634841918945312, 0.5712867975234985, 0.5906875133514404, 0.553493082523346, 0.5711500644683838, 0.5364934206008911, 0.5810667872428894, 0.5289945602416992, 0.5019805431365967, 0.5156790614128113, 0.5043651461601257, 0.48308634757995605, 0.48142969608306885, 0.494097501039505, 0.47167447209358215, 0.477540522813797, 0.469146728515625], "val_accuracy": [0.5830000042915344, 0.6866666674613953, 0.7026666402816772, 0.7233333587646484, 0.7306666374206543, 0.7266666889190674, 0.7440000176429749, 0.7506666779518127, 0.7413333058357239, 0.7743333578109741, 0.7770000100135803, 0.7689999938011169, 0.7976666688919067, 0.7853333353996277, 0.7639999985694885, 0.7883333563804626, 0.7853333353996277, 0.8046666383743286, 0.7803333401679993, 0.8009999990463257, 0.8203333616256714, 0.8140000104904175, 0.8130000233650208, 0.8353333473205566, 0.8339999914169312, 0.8259999752044678, 0.8346666693687439, 0.8286666870117188, 0.8243333101272583]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 2, 3, 7, 8, 8], [1, 0, 1, 0, 2, 1], [11, 39, 39], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 7, 0, 6, 0, 8, 2], [2, 3, 3, 2, 0], [16, 1], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5, 2, 1], [6, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 8, 6, 2, 4, 2, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.add(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad)), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: grad, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1922124928.0, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.18412363529205322, 0.09047681838274002, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [4.9075227988174293e+27, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.07866666465997696, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 2, 3, 2, 3, 4, 5, 2, 5, 3], [1, 0, 1, 0, 1, 1, 1, 1], [0, 39, 39], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 6, 6, 8, 2], [2, 5, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1], [0, 2, 0, 2, 7, 7, 0, 2, 3, 7, 5], [0, 6, 1, 6, 0, 5, 3, 0], [0, 22, 56], [1], [0], [2], [0]], "fitness": -0.09285714477300644, "mapping_values": [1, 18, 10, 8, 2, 6, 3, 3, 0, 19, 11, 8, 3, 1, 0, 1, 0], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.math.square(tf.math.add(tf.math.square(tf.math.multiply(alpha, alpha)), alpha)))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(beta, tf.math.add(grad, tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.add(tf.math.multiply(grad, alpha), grad)), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.math.square(sigma)))), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.310262441635132, 2.309994697570801, 2.3101158142089844, 2.3099863529205322, 2.310694932937622, 2.31046199798584], "accuracy": [0.09074098616838455, 0.0952318087220192, 0.08968432247638702, 0.09140139818191528, 0.09602430462837219, 0.09047681838274002], "val_loss": [2.3080854415893555, 2.3080854415893555, 2.3080854415893555, 2.3080854415893555, 2.3080854415893555, 2.3080854415893555], "val_accuracy": [0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 3, 3, 2, 3, 5], [0, 1, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [4, 2, 0, 6, 2, 8, 2], [2, 0, 3, 1, 0], [66, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0], [0, 2, 0, 2, 5, 2, 1], [0, 6, 0, 6, 3], [0, 22], [1], [0], [2], [0]], "fitness": -0.08942857384681702, "mapping_values": [1, 11, 6, 5, 2, 11, 6, 5, 2, 8, 5, 3, 2, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.add(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad)), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.311190366744995, 2.3105990886688232, 2.309816837310791, 2.3105149269104004, 2.3110570907592773, 2.309295177459717], "accuracy": [0.08809932321310043, 0.08915598690509796, 0.09153348207473755, 0.09734513610601425, 0.09126931428909302, 0.10117553919553757], "val_loss": [2.3082685470581055, 2.3082685470581055, 2.3082685470581055, 2.3082685470581055, 2.3082685470581055, 2.3082685470581055], "val_accuracy": [0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 1], [0, 2, 1, 0, 2], [0, 39, 39], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 1, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1, 2], [0, 6, 1, 6, 7, 6], [0, 22], [1], [0], [2], [0]], "fitness": -0.08914285898208618, "mapping_values": [1, 1, 0, 1, 1, 2, 1, 1, 0, 14, 8, 6, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(tf.math.add(alpha, grad), grad)))), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3096201419830322, 2.3098504543304443, 2.310276746749878, 2.309576988220215, 2.3095226287841797, 2.3086628913879395], "accuracy": [0.09589222073554993, 0.09206181764602661, 0.09351472556591034, 0.08981640636920929, 0.09219389408826828, 0.10077928751707077], "val_loss": [2.3085200786590576, 2.3085200786590576, 2.3085200786590576, 2.3085200786590576, 2.3085200786590576, 2.3085200786590576], "val_accuracy": [0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654]}}]