[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8137142658233643, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.210350275039673, 1.6195343732833862, 1.1389988660812378, 0.994820237159729, 0.8737200498580933, 0.8268435001373291, 0.7958510518074036, 0.763079822063446, 0.7321546673774719, 0.7057802081108093, 0.6929437518119812, 0.6679032444953918, 0.6274726390838623, 0.6459251046180725, 0.6083869338035583, 0.613458514213562, 0.6109572052955627, 0.5908939838409424, 0.5631248950958252, 0.5726150274276733, 0.5575374960899353, 0.5523383617401123, 0.557415783405304, 0.5237082839012146, 0.5218426585197449, 0.541601300239563, 0.5053035616874695, 0.5184849500656128, 0.5088672637939453, 0.4934723377227783, 0.4936342239379883], "accuracy": [0.2608638107776642, 0.495839387178421, 0.6012415885925293, 0.637828528881073, 0.6848500967025757, 0.6973979473114014, 0.7087571024894714, 0.7218332886695862, 0.7314753532409668, 0.7380794882774353, 0.7415136694908142, 0.7534011602401733, 0.770439863204956, 0.761590301990509, 0.7725531458854675, 0.7717606425285339, 0.7667415142059326, 0.7819310426712036, 0.7923656105995178, 0.7832518815994263, 0.7905164361000061, 0.7893276810646057, 0.7890635132789612, 0.805177628993988, 0.8045172095298767, 0.7998943328857422, 0.8121780753135681, 0.8084797263145447, 0.8079513907432556, 0.8173292875289917, 0.8152159452438354], "val_loss": [1.9203674793243408, 1.1150412559509277, 0.8969159126281738, 0.8081486821174622, 0.7486802339553833, 0.7190765738487244, 0.6832342147827148, 0.6683170199394226, 0.6438742876052856, 0.6153319478034973, 0.611435055732727, 0.5741450786590576, 0.5874132513999939, 0.5565237402915955, 0.6006199717521667, 0.5557762384414673, 0.550039529800415, 0.5208460092544556, 0.5267808437347412, 0.5297864675521851, 0.5077064633369446, 0.5492546558380127, 0.5058139562606812, 0.5035842061042786, 0.49213090538978577, 0.48236778378486633, 0.48101067543029785, 0.49586060643196106, 0.47563084959983826, 0.4852600395679474, 0.4627492129802704], "val_accuracy": [0.5726666450500488, 0.6713333129882812, 0.6819999814033508, 0.7089999914169312, 0.722000002861023, 0.7303333282470703, 0.75, 0.7593333125114441, 0.7580000162124634, 0.7696666717529297, 0.7666666507720947, 0.7913333177566528, 0.7833333611488342, 0.7976666688919067, 0.7693333625793457, 0.8063333630561829, 0.7933333516120911, 0.8130000233650208, 0.79666668176651, 0.8056666851043701, 0.8166666626930237, 0.7946666479110718, 0.8230000138282776, 0.8103333115577698, 0.8149999976158142, 0.8286666870117188, 0.8236666917800903, 0.8190000057220459, 0.8253333568572998, 0.8190000057220459, 0.8286666870117188]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1], [0, 2, 3, 2, 3, 9, 5], [0, 1, 1, 0, 2], [15, 39, 39], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 17], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 4, 0, 0, 2, 7, 4, 7, 4, 1, 5, 5, 6, 8, 5, 4, 6, 5, 7, 2, 8, 1, 4, 1, 0, 7, 6, 9, 5, 2, 0, 7, 8, 1, 9, 5, 7, 1, 1], [2, 7, 3, 4, 6, 3, 2, 1, 3, 4, 1, 4, 2, 0, 4, 0, 6, 1, 6, 3, 6, 3, 5], [0, 66, 36, 82]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 7, 4, 3, 8, 4, 4, 1, 12, 7, 5, 2, 63, 40, 23, 4], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.pow(beta, grad), tf.math.negative(tf.math.negative(tf.math.add(sigma, tf.math.add(tf.math.pow(tf.math.add(tf.math.pow(tf.math.subtract(tf.math.square(grad), grad), tf.math.square(tf.math.divide_no_nan(tf.math.sqrt(sigma), beta))), alpha), tf.math.square(tf.math.pow(tf.math.divide_no_nan(tf.math.square(tf.math.add(sigma, grad)), tf.math.add(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(alpha, grad), tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))), tf.math.square(tf.math.add(grad, tf.math.negative(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.sqrt(grad), alpha))), tf.math.subtract(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(tf.math.subtract(grad, sigma), grad)))))), tf.math.subtract(sigma, grad)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 1, 3, 2, 3, 5], [0, 2, 1, 0, 3], [63, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 6, 6, 3, 8, 2], [5, 1, 3, 1, 0], [16, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 4, 2, 1], [0, 7, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 11, 6, 5, 1, 11, 6, 5, 2, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.multiply(alpha, grad), tf.math.sqrt(alpha))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), tf.math.pow(alpha, tf.math.add(grad, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 2, 3, 2, 3, 8], [0, 2, 1, 0, 2], [0, 39, 39], [1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 0, 8, 2], [2, 0, 2, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.09114285558462143, "mapping_values": [1, 11, 6, 5, 2, 1, 0, 1, 0, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(grad))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad)), alpha)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.309500217437744, 2.3107619285583496, 2.3107845783233643, 2.31064772605896, 2.3096840381622314, 2.3091375827789307], "accuracy": [0.09496764093637466, 0.09219389408826828, 0.09113723784685135, 0.08928807079792023, 0.09470347315073013, 0.09351472556591034], "val_loss": [2.3091585636138916, 2.3091585636138916, 2.3091585636138916, 2.3091585636138916, 2.3091585636138916, 2.3091585636138916], "val_accuracy": [0.08566666394472122, 0.08566666394472122, 0.08566666394472122, 0.08566666394472122, 0.08566666394472122, 0.08566666394472122]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 2, 5], [0, 0, 1, 0, 2], [0, 39, 39], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 0, 6, 2, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0], [2, 2, 0, 2, 5, 7, 1, 5, 9], [5, 6, 1, 2, 0], [98, 22], [1], [0], [2], [0]], "fitness": -0.09114285558462143, "mapping_values": [1, 2, 1, 1, 1, 1, 0, 1, 0, 14, 9, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(grad), tf.math.add(grad, tf.math.subtract(alpha, beta)))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.309800386428833, 2.3085241317749023, 2.309760808944702, 2.309802770614624, 2.309648036956787, 2.3096604347229004], "accuracy": [0.08849557489156723, 0.09853387624025345, 0.0956280529499054, 0.09325055778026581, 0.09060890227556229, 0.09206181764602661], "val_loss": [2.3093714714050293, 2.3093714714050293, 2.3093714714050293, 2.3093714714050293, 2.3093714714050293, 2.3093714714050293], "val_accuracy": [0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393]}}]