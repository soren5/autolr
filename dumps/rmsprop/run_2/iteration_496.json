[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8145714402198792, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.208122491836548, 1.5996545553207397, 1.1274243593215942, 0.9804791808128357, 0.8923438787460327, 0.8367177844047546, 0.7910026907920837, 0.7519820332527161, 0.7446768879890442, 0.7041721343994141, 0.6815683245658875, 0.6850960850715637, 0.6626250147819519, 0.6366269588470459, 0.6384142637252808, 0.6278046369552612, 0.6157243847846985, 0.6003758311271667, 0.5987386107444763, 0.5856865048408508, 0.563014566898346, 0.5704790949821472, 0.5514485836029053, 0.5526413321495056], "accuracy": [0.27116629481315613, 0.49993395805358887, 0.6066569685935974, 0.6514331102371216, 0.6831330060958862, 0.6944921612739563, 0.7117950320243835, 0.7257958054542542, 0.7243428826332092, 0.7437590956687927, 0.7440232634544373, 0.7466648817062378, 0.7555144429206848, 0.7668735980987549, 0.7675340175628662, 0.7711002230644226, 0.7792893648147583, 0.7751948237419128, 0.7804781198501587, 0.7840443849563599, 0.7973847389221191, 0.789459764957428, 0.7989697456359863, 0.7946110367774963], "val_loss": [1.907849907875061, 1.1107980012893677, 0.9314658045768738, 0.7932317852973938, 0.7170599102973938, 0.7348092198371887, 0.6503403186798096, 0.6583036184310913, 0.6000728607177734, 0.5955212712287903, 0.580362856388092, 0.5607947707176208, 0.5496556162834167, 0.5451920032501221, 0.5503215193748474, 0.597610592842102, 0.5169719457626343, 0.5058975219726562, 0.4988374412059784, 0.4983963668346405, 0.5250754952430725, 0.48627904057502747, 0.48693791031837463, 0.481141597032547], "val_accuracy": [0.5403333306312561, 0.6473333239555359, 0.6606666445732117, 0.7123333215713501, 0.7286666631698608, 0.731333315372467, 0.7590000033378601, 0.7443333268165588, 0.7756666541099548, 0.7873333096504211, 0.784333348274231, 0.7950000166893005, 0.7976666688919067, 0.7973333597183228, 0.7900000214576721, 0.7680000066757202, 0.8073333501815796, 0.8220000267028809, 0.8263333439826965, 0.8113333582878113, 0.7963333129882812, 0.8203333616256714, 0.8209999799728394, 0.8259999752044678]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0], [0, 1, 1, 2, 3, 5], [0, 2, 2, 0, 0], [0, 39, 39], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 3, 2], [2, 1, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 9, 0, 2, 5, 2, 1], [3, 6, 1, 6, 0], [78, 22], [1], [0], [5], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 2, 2, 1, 1, 0, 2, 2, 0, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.subtract(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [111.8879623413086, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.18055738508701324, 0.09496764093637466, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [153.73956298828125, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 0], [0, 39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [5, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 4, 2, 5, 2, 1, 9, 7, 2, 1, 7, 2, 4, 1, 3, 7, 9, 6], [6, 6, 1, 6, 0, 1, 4, 4, 1, 0, 4, 7, 0, 7], [0, 22, 21, 31, 69], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 12, 7, 5, 2, 33, 19, 14, 5, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(beta, tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(grad, alpha))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.add(tf.math.square(grad), tf.math.add(grad, tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(tf.math.pow(tf.math.subtract(tf.math.multiply(grad, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), alpha), grad), grad), alpha), tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), grad))))), tf.math.divide_no_nan(grad, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [0, 2, 3, 1, 3, 5, 7, 3, 8, 7, 0, 9, 1, 4, 4, 7, 8, 7, 0, 9, 0, 9], [0, 2, 0, 0, 0, 1, 1, 0, 3, 2], [0, 39, 39, 85, 60, 54, 41, 64], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 2, 0, 6, 8, 8, 2], [1, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0], [0, 2, 0, 8, 1, 2, 1, 5, 9], [0, 6, 1, 6, 0], [0, 22], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 4, 5, 1, 4, 8, 8], [2, 0, 6, 6], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 22, 10, 8, 1, 0, 1, 0, 13, 9, 4, 2, 11, 7, 4, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(tf.math.negative(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), alpha))))), tf.math.subtract(tf.math.pow(tf.math.pow(tf.math.add(tf.math.sqrt(alpha), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), grad))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.subtract(tf.math.square(alpha), grad))))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(beta, tf.math.square(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.sqrt(tf.math.sqrt(grad)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1], [0, 4, 3, 2, 3, 5], [0, 3, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [1, 0, 3, 1, 0], [16, 1], [1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 7], [0, 22], [1], [0], [0], [0]], "fitness": -0.09200000017881393, "mapping_values": [1, 6, 3, 3, 1, 10, 6, 4, 1, 1, 0, 1, 1, 1, 0, 1, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(alpha), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.310621976852417, 2.310155153274536, 2.3096742630004883, 2.309687614440918, 2.310502052307129, 2.309657335281372], "accuracy": [0.09087307006120682, 0.09338264167308807, 0.0936468094587326, 0.08717474341392517, 0.08902391046285629, 0.09840179979801178], "val_loss": [2.308911085128784, 2.308911085128784, 2.308911085128784, 2.308911085128784, 2.308911085128784, 2.308911085128784], "val_accuracy": [0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816]}}]