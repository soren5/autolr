[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8445714116096497, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.210587978363037, 1.6093934774398804, 1.162933349609375, 1.0022445917129517, 0.8985646963119507, 0.8321287035942078, 0.7818036079406738, 0.7685539126396179, 0.7428028583526611, 0.7215803861618042, 0.7066303491592407, 0.6797624826431274, 0.6653380990028381, 0.648425281047821, 0.6480646133422852, 0.6257582902908325, 0.6249006986618042, 0.6061160564422607, 0.6051174402236938, 0.5780221819877625, 0.5641009211540222, 0.5690135955810547, 0.5550302863121033, 0.5465211868286133, 0.5326636433601379, 0.5391101241111755, 0.523862361907959, 0.5144956111907959, 0.5171604156494141, 0.5121342539787292, 0.4997228980064392, 0.48670321702957153, 0.482697457075119, 0.49591076374053955, 0.47753259539604187, 0.4818620979785919, 0.4721560776233673, 0.4641575515270233, 0.4652782380580902], "accuracy": [0.26218464970588684, 0.5017831325531006, 0.590278685092926, 0.6425835490226746, 0.6754721999168396, 0.7010962963104248, 0.7148329019546509, 0.7230220437049866, 0.7218332886695862, 0.7386078238487244, 0.7427024245262146, 0.7483819723129272, 0.7523444890975952, 0.7565711140632629, 0.7607977986335754, 0.7658169269561768, 0.7687227725982666, 0.7753269076347351, 0.7737419009208679, 0.7890635132789612, 0.793422281742096, 0.7886672616004944, 0.7907806038856506, 0.7928939461708069, 0.8050455451011658, 0.8001585006713867, 0.8092722296714783, 0.8080834746360779, 0.8062343001365662, 0.8068947196006775, 0.8158763647079468, 0.817989706993103, 0.8212917447090149, 0.8166688680648804, 0.8285563588142395, 0.8247259259223938, 0.8257825970649719, 0.8285563588142395, 0.8314621448516846], "val_loss": [1.9199655055999756, 1.0877612829208374, 0.8980299234390259, 0.8076653480529785, 0.7819618582725525, 0.6865472197532654, 0.6981233954429626, 0.6399781107902527, 0.6659992933273315, 0.6059567332267761, 0.591518223285675, 0.5914584994316101, 0.602938175201416, 0.5653009414672852, 0.5739607214927673, 0.5584340691566467, 0.5357149839401245, 0.5420475006103516, 0.5136969685554504, 0.5118059515953064, 0.5174068808555603, 0.5257040858268738, 0.5027490854263306, 0.48664847016334534, 0.4776434004306793, 0.4782019853591919, 0.47089076042175293, 0.48095691204071045, 0.46802011132240295, 0.47050127387046814, 0.4584965109825134, 0.44870221614837646, 0.45411133766174316, 0.4440138638019562, 0.4587056040763855, 0.462810218334198, 0.43538525700569153, 0.43402090668678284, 0.4413883090019226], "val_accuracy": [0.609000027179718, 0.6636666655540466, 0.6893333196640015, 0.6949999928474426, 0.6993333101272583, 0.7366666793823242, 0.7193333506584167, 0.765999972820282, 0.7429999709129333, 0.7633333206176758, 0.762333333492279, 0.7793333530426025, 0.7576666474342346, 0.7689999938011169, 0.7753333449363708, 0.777999997138977, 0.7963333129882812, 0.7896666526794434, 0.7973333597183228, 0.8013333082199097, 0.8080000281333923, 0.7973333597183228, 0.815666675567627, 0.8176666498184204, 0.812666654586792, 0.8083333373069763, 0.824999988079071, 0.8190000057220459, 0.8323333263397217, 0.8259999752044678, 0.8216666579246521, 0.8339999914169312, 0.8360000252723694, 0.8399999737739563, 0.8206666707992554, 0.8293333053588867, 0.8363333344459534, 0.8386666774749756, 0.8343333601951599]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 2, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [4, 0, 3, 1, 0], [69, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 0, 2, 5, 2, 1, 1, 4], [0, 6, 1, 6, 0, 1, 1], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 1, 12, 7, 5, 2, 16, 9, 7, 2, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(grad), tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(grad, alpha))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(tf.math.subtract(alpha, grad), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), tf.math.pow(alpha, alpha))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 12, 39], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 2, 0, 9, 3, 7, 2], [0, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 5, 3, 2, 2, 11, 7, 4, 1, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [83.19784545898438, 9262.677734375, 159912.859375, 1101503.5, 4811449.5, 16066868.0], "accuracy": [0.10236428678035736, 0.09734513610601425, 0.09457138925790787, 0.09866596013307571, 0.1006472036242485, 0.09919429570436478], "val_loss": [699.6500244140625, 34041.12109375, 361479.96875, 1964426.625, 7348120.0, 21659176.0], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 2, 3, 2, 3, 5, 8], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [1, 2, 0, 6, 6, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 5, 2, 7], [0, 6, 7, 6, 5], [0, 22], [0, 1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 2, 11, 6, 5, 2, 11, 6, 5, 1, 2, 1, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(grad))), tf.math.add(grad, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [0, 5, 3, 2, 3, 5, 4, 2, 5, 8, 1, 6], [0, 2, 1, 0, 2, 3, 1, 1], [0, 39, 39], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [53, 1], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 3, 2, 1], [0, 6, 1, 6, 0], [65, 22], [0, 0, 1, 0], [0, 6, 9], [2], [0]], "fitness": -0.0908571407198906, "mapping_values": [1, 20, 12, 8, 2, 1, 0, 1, 0, 5, 3, 2, 1, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.square(tf.math.pow(grad, tf.math.add(alpha, tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), tf.math.sqrt(grad))), tf.math.subtract(tf.math.divide_no_nan(grad, alpha), alpha)))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(beta, tf.constant(0.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3101565837860107, 2.3098671436309814, 2.3098642826080322, 2.3096065521240234, 2.309842348098755, 2.3098020553588867], "accuracy": [0.09047681838274002, 0.09589222073554993, 0.09245806187391281, 0.09338264167308807, 0.0944393053650856, 0.09100515395402908], "val_loss": [2.3087034225463867, 2.3087034225463867, 2.3087034225463867, 2.3087034225463867, 2.3087034225463867, 2.3087034225463867], "val_accuracy": [0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071]}}]