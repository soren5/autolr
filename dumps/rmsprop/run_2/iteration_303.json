[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8182857036590576, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2130846977233887, 1.6041903495788574, 1.157124638557434, 0.9617608785629272, 0.8884925246238708, 0.8404759764671326, 0.78619784116745, 0.734397292137146, 0.752098560333252, 0.7064810395240784, 0.6673579812049866, 0.6552119255065918, 0.6799353957176208, 0.6311244964599609, 0.6089622378349304, 0.6271293759346008, 0.5920560956001282, 0.6091015934944153, 0.5747968554496765, 0.5610482096672058, 0.5624424815177917, 0.5435243248939514, 0.5362995266914368, 0.5309118032455444, 0.5124305486679077, 0.5206568837165833, 0.5140523314476013, 0.4984177350997925, 0.5014724731445312, 0.5007998943328857, 0.47629842162132263], "accuracy": [0.26720380783081055, 0.5145951509475708, 0.5947695374488831, 0.657508909702301, 0.67666095495224, 0.694360077381134, 0.7054550051689148, 0.7305507659912109, 0.7202483415603638, 0.7412495017051697, 0.755118191242218, 0.7574957013130188, 0.7489103078842163, 0.7660810947418213, 0.778761088848114, 0.763967752456665, 0.7774402499198914, 0.7771760821342468, 0.789459764957428, 0.7923656105995178, 0.7917051911354065, 0.7955356240272522, 0.8045172095298767, 0.8026680946350098, 0.8119139075279236, 0.8038568496704102, 0.8101968169212341, 0.8127063512802124, 0.8115176558494568, 0.816008448600769, 0.8260467648506165], "val_loss": [1.9237182140350342, 1.0756549835205078, 0.8479349613189697, 0.7739487290382385, 0.6998271346092224, 0.6855802536010742, 0.6670565605163574, 0.664384663105011, 0.6482581496238708, 0.5981899499893188, 0.5837801694869995, 0.5660811066627502, 0.5510841608047485, 0.5469424724578857, 0.5737078785896301, 0.5305674076080322, 0.5248028039932251, 0.5188232660293579, 0.5307630896568298, 0.4902462661266327, 0.48679834604263306, 0.4911370873451233, 0.47426289319992065, 0.4748423993587494, 0.46622762084007263, 0.4641570746898651, 0.47054383158683777, 0.47336864471435547, 0.4439811110496521, 0.4589601755142212, 0.453274667263031], "val_accuracy": [0.6263333559036255, 0.6669999957084656, 0.7003333568572998, 0.7116666436195374, 0.7486666440963745, 0.7443333268165588, 0.7426666617393494, 0.7409999966621399, 0.7486666440963745, 0.7863333225250244, 0.7883333563804626, 0.7893333435058594, 0.8063333630561829, 0.7960000038146973, 0.7839999794960022, 0.8073333501815796, 0.7986666560173035, 0.8059999942779541, 0.8059999942779541, 0.8183333277702332, 0.8226666450500488, 0.8159999847412109, 0.8233333230018616, 0.8266666531562805, 0.8309999704360962, 0.8366666436195374, 0.8213333487510681, 0.8206666707992554, 0.8333333134651184, 0.8286666870117188, 0.8299999833106995]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 15, 39], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 3, 3, 8, 2], [2, 0, 2, 1, 0], [63, 1], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 5, 3, 2, 1, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.add(alpha, tf.math.multiply(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.square(grad)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), tf.math.square(alpha))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.303431510925293, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 6], [0, 3, 1, 3, 2], [0, 23, 39], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [3, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [2, 2, 6, 2, 5, 6, 0], [0, 6, 1, 6, 0], [0, 56], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 1, 4, 2, 2, 1, 10, 5, 5, 2, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), tf.math.square(alpha)), tf.math.divide_no_nan(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.add(tf.math.square(grad), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2681491374969482, 2.328864574432373, 2.3268191814422607, 2.321087598800659, 2.3364555835723877, 2.3941550254821777, 2.342527151107788, 2.34574031829834], "accuracy": [0.11795007437467575, 0.09919429570436478, 0.09628847241401672, 0.09840179979801178, 0.09708096832036972, 0.09853387624025345, 0.09866596013307571, 0.0936468094587326], "val_loss": [2.3219997882843018, 2.30419659614563, 2.3133461475372314, 2.3443541526794434, 2.4974205493927, 2.3289294242858887, 2.3110063076019287, 2.3255324363708496], "val_accuracy": [0.10066666454076767, 0.09966666996479034, 0.10233332961797714, 0.09966666996479034, 0.10233332961797714, 0.10066666454076767, 0.09966666996479034, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [8, 5, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 8, 0, 6, 3, 4, 2], [2, 1, 3, 1, 0], [16, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 1, 0, 2, 5, 2, 4], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.0925714299082756, "mapping_values": [1, 7, 4, 3, 1, 4, 3, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.square(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.negative(beta))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.309638500213623, 2.309852361679077, 2.3115663528442383, 2.309638738632202, 2.3110527992248535, 2.309685468673706], "accuracy": [0.09655263274908066, 0.08889182657003403, 0.08981640636920929, 0.08915598690509796, 0.08942015469074249, 0.09153348207473755], "val_loss": [2.308842420578003, 2.308842420578003, 2.308842420578003, 2.308842420578003, 2.308842420578003, 2.308842420578003], "val_accuracy": [0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [4, 2, 3, 9, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [6, 6, 0, 6, 3, 8, 2], [1, 5, 1, 1, 0], [16, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 2, 0, 2, 5, 2, 1, 9], [0, 6, 1, 6, 4], [0, 80], [1], [0], [2], [0]], "fitness": -0.09200000017881393, "mapping_values": [1, 7, 4, 3, 2, 8, 4, 4, 0, 12, 8, 4, 2, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(grad, alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, grad), tf.math.negative(tf.math.divide_no_nan(alpha, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha)), grad)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3095197677612305, 2.309699773788452, 2.310213804244995, 2.3085238933563232, 2.3106069564819336, 2.3103458881378174], "accuracy": [0.09391097724437714, 0.09325055778026581, 0.09391097724437714, 0.09668471664190292, 0.0952318087220192, 0.09377889335155487], "val_loss": [2.308872699737549, 2.308872699737549, 2.308872699737549, 2.308872699737549, 2.308872699737549, 2.308872699737549], "val_accuracy": [0.09266666322946548, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548]}}]