[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8334285616874695, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2138831615448, 1.6179734468460083, 1.1506987810134888, 0.997637927532196, 0.8891170024871826, 0.8613904714584351, 0.7814847826957703, 0.76133793592453, 0.732690691947937, 0.7251076698303223, 0.6937292814254761, 0.6746902465820312, 0.6520365476608276, 0.6472485661506653, 0.6373327970504761, 0.6140283346176147, 0.5996130108833313, 0.5910512208938599, 0.583686888217926, 0.5877780914306641, 0.5635538697242737, 0.5597125887870789, 0.5513113141059875, 0.5533714294433594, 0.5264496803283691, 0.524036705493927, 0.5317943096160889, 0.5037935972213745, 0.5042739510536194, 0.5052587985992432, 0.5009719729423523, 0.48188871145248413, 0.4918263256549835, 0.4836459457874298, 0.47184672951698303, 0.46757301688194275], "accuracy": [0.2620525658130646, 0.4959714710712433, 0.6037511825561523, 0.6435081362724304, 0.6745476126670837, 0.6886804699897766, 0.7107383608818054, 0.7170783281326294, 0.7290979027748108, 0.7259278893470764, 0.741909921169281, 0.7491744756698608, 0.7549861073493958, 0.7589486241340637, 0.7658169269561768, 0.7664773464202881, 0.7781006693840027, 0.7796856164932251, 0.7861577272415161, 0.7832518815994263, 0.791969358921051, 0.793422281742096, 0.7932901978492737, 0.7951393723487854, 0.8062343001365662, 0.8086118102073669, 0.8004226684570312, 0.8166688680648804, 0.8064984679222107, 0.8157442808151245, 0.8183859586715698, 0.8240655064582825, 0.8195747137069702, 0.821820080280304, 0.8216879963874817, 0.8304054737091064], "val_loss": [1.9306093454360962, 1.1193610429763794, 0.8951667547225952, 0.7751005291938782, 0.8175960183143616, 0.671104907989502, 0.657439112663269, 0.6463061571121216, 0.6027272343635559, 0.6176146268844604, 0.5795877575874329, 0.5876119136810303, 0.5917482972145081, 0.549079954624176, 0.5649961233139038, 0.543990969657898, 0.5164881944656372, 0.5159623622894287, 0.5191432237625122, 0.5085513591766357, 0.5122687220573425, 0.48640862107276917, 0.47596415877342224, 0.4670545756816864, 0.4593032896518707, 0.4714439809322357, 0.45632386207580566, 0.4542611539363861, 0.45226550102233887, 0.44445905089378357, 0.43949833512306213, 0.44710835814476013, 0.45425593852996826, 0.4250276982784271, 0.4282546937465668, 0.4247376322746277], "val_accuracy": [0.5306666493415833, 0.5986666679382324, 0.6786666512489319, 0.7116666436195374, 0.6943333148956299, 0.7486666440963745, 0.7463333606719971, 0.7559999823570251, 0.7643333077430725, 0.7613333463668823, 0.7776666879653931, 0.7726666927337646, 0.7670000195503235, 0.7946666479110718, 0.7773333191871643, 0.7883333563804626, 0.7956666946411133, 0.7953333258628845, 0.7953333258628845, 0.8019999861717224, 0.7926666736602783, 0.8233333230018616, 0.8259999752044678, 0.8180000185966492, 0.8309999704360962, 0.8130000233650208, 0.8296666741371155, 0.8286666870117188, 0.8243333101272583, 0.8333333134651184, 0.8366666436195374, 0.824999988079071, 0.8256666660308838, 0.8343333601951599, 0.8356666564941406, 0.8353333473205566]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 5, 5, 0, 3, 8], [2, 2, 3, 0, 2], [0, 39, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 2, 0, 7, 0, 3, 2, 7, 1, 1, 2, 6, 7, 9, 2, 4, 2, 5, 7, 9, 0, 9], [2, 0, 3, 1, 0, 5, 5, 3, 0, 3, 2, 2], [16, 1, 92, 95, 39, 27], [1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 3, 0, 2, 5, 6, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 4, 1, 0, 34, 22, 12, 6, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.square(tf.math.square(tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.negative(tf.math.multiply(tf.math.add(tf.math.add(tf.math.subtract(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), alpha), tf.math.subtract(tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(grad, grad)), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), grad)), tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(beta)))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 0, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 0, 6, 2, 8, 2], [2, 5, 5, 1, 0], [42, 1], [1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [5, 2, 0, 2, 5, 2, 1], [5, 6, 1, 6, 0], [62, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.add(grad, tf.math.sqrt(tf.math.add(grad, alpha))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: grad, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 1], [58, 39, 39], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0], [2, 9, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [18, 67], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 10, 6, 4, 1, 3, 2, 1, 2, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 8, 0], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [0, 2, 4, 6, 3, 6, 2, 4, 7, 0, 7, 5, 1, 6, 4, 3, 5, 4, 8, 4, 8, 4, 0, 9, 8, 5, 3, 3, 5, 6, 6, 9, 8, 5], [2, 1, 3, 1, 0, 2, 4, 4, 4, 1, 4, 1, 1, 5, 3, 1, 2, 0, 1], [16, 1, 84, 45], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 2, 4, 2, 5, 2, 8, 1, 6, 9, 3, 8, 3, 1, 2, 2, 3, 8, 9, 8], [5, 6, 1, 6, 0, 2, 0, 7, 4, 6, 0, 0], [0, 22, 86, 32, 48, 92], [0, 1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 53, 34, 19, 4, 32, 20, 12, 6, 2, 1, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(alpha, grad)), alpha), tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta)), grad), grad), tf.math.add(tf.math.square(tf.math.subtract(grad, tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(tf.math.square(alpha), tf.math.pow(grad, tf.math.sqrt(tf.math.pow(tf.math.sqrt(tf.math.pow(alpha, tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), alpha)))), tf.math.sqrt(grad)), tf.math.square(tf.math.multiply(tf.math.multiply(grad, tf.math.square(alpha)), beta))))), tf.math.divide_no_nan(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.square(alpha))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(tf.math.pow(grad, tf.math.add(tf.math.square(tf.math.add(grad, tf.math.sqrt(alpha))), grad)), tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.divide_no_nan(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.sqrt(tf.math.multiply(tf.math.subtract(beta, tf.math.add(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(grad, tf.math.sqrt(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), grad))), tf.math.sqrt(grad))), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555]}}]