[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.824571430683136, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.211677312850952, 1.6049938201904297, 1.1211382150650024, 0.9730054140090942, 0.8844521641731262, 0.8253695964813232, 0.7912336587905884, 0.7434929013252258, 0.7267424464225769, 0.7196401357650757, 0.6861448884010315, 0.6779385805130005, 0.6476872563362122, 0.632190465927124, 0.6375855207443237, 0.6188339591026306, 0.5877743363380432, 0.5982806086540222, 0.5840537548065186, 0.5856457948684692, 0.5758922696113586, 0.5543035268783569, 0.5406083464622498, 0.566405713558197, 0.5239051580429077, 0.5392761826515198, 0.512986958026886, 0.5072832107543945, 0.5261325836181641, 0.4873087406158447, 0.4952584505081177, 0.49050411581993103, 0.48083269596099854, 0.48395344614982605, 0.4774242341518402, 0.462850958108902, 0.4592829942703247, 0.4554316997528076, 0.4524647891521454, 0.44726645946502686, 0.4400814473628998, 0.4308735728263855, 0.4307093024253845, 0.4339911639690399, 0.4246457815170288], "accuracy": [0.2665433883666992, 0.5122177004814148, 0.6089023947715759, 0.6499801874160767, 0.677189290523529, 0.6999075412750244, 0.7125874757766724, 0.7280412316322327, 0.7327961921691895, 0.7366266250610352, 0.7452120184898376, 0.7442874312400818, 0.7601373791694641, 0.7675340175628662, 0.7623828053474426, 0.7692511081695557, 0.7803460359573364, 0.7815347909927368, 0.787082314491272, 0.7861577272415161, 0.785101056098938, 0.7987055778503418, 0.8013472557067871, 0.7926297783851624, 0.806630551815033, 0.8053097128868103, 0.81112140417099, 0.8100647330284119, 0.8068947196006775, 0.8234050869941711, 0.8191784620285034, 0.8220842480659485, 0.8293488025665283, 0.8256505131721497, 0.8278959393501282, 0.8315942287445068, 0.8330471515655518, 0.8378021121025085, 0.8356888294219971, 0.842028796672821, 0.8405758738517761, 0.8449346423149109, 0.8438779711723328, 0.8418967127799988, 0.846387505531311], "val_loss": [1.9254459142684937, 1.0819616317749023, 0.9841536283493042, 0.7904185652732849, 0.7707744836807251, 0.7728075981140137, 0.6842085123062134, 0.6664586663246155, 0.6369580626487732, 0.6018637418746948, 0.6320918798446655, 0.5613747835159302, 0.5726741552352905, 0.604168176651001, 0.5753671526908875, 0.5481312870979309, 0.549340009689331, 0.5227479934692383, 0.5113670229911804, 0.5274730920791626, 0.5108504891395569, 0.5000417232513428, 0.4949248731136322, 0.5050329566001892, 0.4807145893573761, 0.47713378071784973, 0.47757047414779663, 0.48825588822364807, 0.4829426407814026, 0.46341732144355774, 0.46984007954597473, 0.4693135619163513, 0.45656561851501465, 0.46506786346435547, 0.46506425738334656, 0.4393482208251953, 0.4372912645339966, 0.443633109331131, 0.44391295313835144, 0.4278196096420288, 0.44572752714157104, 0.4305284023284912, 0.4462911784648895, 0.4240567088127136, 0.42766663432121277], "val_accuracy": [0.5759999752044678, 0.6666666865348816, 0.6596666574478149, 0.7106666564941406, 0.7070000171661377, 0.6833333373069763, 0.7276666760444641, 0.7316666841506958, 0.7616666555404663, 0.7716666460037231, 0.7526666522026062, 0.7896666526794434, 0.7860000133514404, 0.7733333110809326, 0.7766666412353516, 0.7956666946411133, 0.79666668176651, 0.7956666946411133, 0.8019999861717224, 0.7960000038146973, 0.8196666836738586, 0.8073333501815796, 0.8163333535194397, 0.809333324432373, 0.8209999799728394, 0.8259999752044678, 0.8223333358764648, 0.8293333053588867, 0.8153333067893982, 0.8286666870117188, 0.8296666741371155, 0.8220000267028809, 0.8323333263397217, 0.831333339214325, 0.8299999833106995, 0.8420000076293945, 0.8396666646003723, 0.840666651725769, 0.8323333263397217, 0.8503333330154419, 0.8356666564941406, 0.8453333377838135, 0.8420000076293945, 0.846666693687439, 0.8496666550636292]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 2, 3, 2, 3, 5, 1, 8, 8, 8, 3, 0, 4, 3, 2, 7, 8, 3, 0, 8, 7, 3, 9, 8, 1], [0, 2, 0, 1, 0, 3, 0, 1, 0, 0, 1, 3, 1, 2], [29, 39, 39, 74, 34, 64, 85], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 2, 0, 0, 5, 2, 7], [4, 6, 1, 6, 0], [0, 22], [0, 0, 1, 0, 0], [0, 4, 0, 9], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 39, 25, 14, 7, 10, 6, 4, 1, 11, 7, 4, 0, 5, 4, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, tf.math.square(tf.math.subtract(tf.math.sqrt(tf.math.sqrt(tf.math.sqrt(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(grad))))), tf.math.pow(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.multiply(tf.math.negative(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(alpha))))), tf.math.add(tf.math.multiply(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.subtract(grad, alpha))), grad)))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(tf.math.square(grad))), tf.math.add(tf.math.add(grad, alpha), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(beta, tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [1144654976.0, 21358850048.0, 99298361344.0, 276656226304.0, 591667462144.0, 1083020541952.0], "accuracy": [0.09536388516426086, 0.10011887550354004, 0.10157178342342377, 0.09602430462837219, 0.1002509593963623, 0.09853387624025345], "val_loss": [5270000128.0, 42154901504.0, 142266318848.0, 337218404352.0, 658612486144.0, 1138095554560.0], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 2, 3, 2, 3, 5], [2, 2, 1, 0, 2], [89, 39, 39], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 5, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 4, 5, 2, 1], [0, 6, 1, 0, 0], [0, 22, 95], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 7, 4, 3, 0, 12, 7, 5, 3, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.pow(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09311848133802414, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 8, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 2, 5, 7, 1], [0, 2, 1, 6, 4], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 8, 5, 3, 1, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.1666155920773087e+19, 1.3313589377041957e+19, 1.36035943649609e+19, 1.3369134505453945e+19, 1.3711940240761946e+19, 1.359165476819488e+19], "accuracy": [0.09219389408826828, 0.09549596905708313, 0.09206181764602661, 0.08942015469074249, 0.08757099509239197, 0.08968432247638702], "val_loss": [1.2095526206535893e+19, 1.2095526206535893e+19, 1.2095526206535893e+19, 1.2095526206535893e+19, 1.2095526206535893e+19, 1.2095526206535893e+19], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 2, 3, 5, 7, 5, 3, 0, 2, 3, 8, 8], [0, 2, 1, 0, 2, 1, 0, 1, 3], [0, 39, 39], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 9, 6, 3, 8, 2], [2, 1, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.09114285558462143, "mapping_values": [1, 23, 14, 9, 3, 2, 1, 1, 0, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.square(tf.math.multiply(grad, tf.math.negative(alpha))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad), tf.math.add(tf.math.multiply(alpha, tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(alpha))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.308838367462158, 2.3103089332580566, 2.310203790664673, 2.3111331462860107, 2.3094282150268555, 2.311099052429199], "accuracy": [0.09232597798109055, 0.08889182657003403, 0.0940430611371994, 0.08677849918603897, 0.09998679161071777, 0.08915598690509796], "val_loss": [2.3089377880096436, 2.3089377880096436, 2.3089377880096436, 2.3089377880096436, 2.3089377880096436, 2.3089377880096436], "val_accuracy": [0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071]}}]