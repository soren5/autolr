[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8002856969833374, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2138049602508545, 1.6145387887954712, 1.1553868055343628, 0.9741672873497009, 0.8805536031723022, 0.8114017248153687, 0.8005357384681702, 0.738880455493927, 0.7310428023338318, 0.7129716277122498, 0.6743650436401367, 0.6607134938240051, 0.6317611336708069, 0.651285707950592, 0.6202793717384338, 0.6111702919006348, 0.5993204712867737, 0.5987556576728821, 0.5816961526870728, 0.5678658485412598, 0.5610647201538086, 0.5480471253395081, 0.5488826632499695, 0.5380892753601074, 0.52713942527771, 0.5249506235122681, 0.5128644704818726, 0.5055199861526489, 0.5074342489242554, 0.5051939487457275, 0.49438390135765076, 0.48544928431510925, 0.48402130603790283, 0.47113651037216187, 0.4713270366191864, 0.46939900517463684, 0.46117883920669556, 0.4643051028251648, 0.44665804505348206, 0.4474741220474243, 0.449492484331131, 0.44073256850242615, 0.42893609404563904, 0.42752015590667725, 0.43029630184173584, 0.4225238561630249, 0.42326465249061584, 0.4135306179523468, 0.41267669200897217, 0.41152477264404297, 0.41035589575767517, 0.40458565950393677, 0.39801692962646484, 0.3976256549358368, 0.38950875401496887], "accuracy": [0.27182671427726746, 0.5107647776603699, 0.6081098914146423, 0.6580372452735901, 0.6877558827400208, 0.7046625018119812, 0.7066437602043152, 0.7320036888122559, 0.7263241410255432, 0.7371549606323242, 0.7514199018478394, 0.7584202885627747, 0.7695152759552002, 0.7609298825263977, 0.7721568942070007, 0.7798177003860474, 0.7815347909927368, 0.7788931727409363, 0.7860256433486938, 0.7921014428138733, 0.7940827012062073, 0.7998943328857422, 0.798309326171875, 0.8041210174560547, 0.807158887386322, 0.8104609847068787, 0.8153480291366577, 0.8168009519577026, 0.8117818236351013, 0.809140145778656, 0.8226125836372375, 0.8189142942428589, 0.8245938420295715, 0.830669641494751, 0.8257825970649719, 0.8273676037788391, 0.8319904804229736, 0.8280280232429504, 0.8335754871368408, 0.8330471515655518, 0.8383304476737976, 0.8404437899589539, 0.843481719493866, 0.8429533839225769, 0.8450667262077332, 0.8450667262077332, 0.8462554216384888, 0.8491612672805786, 0.8510104417800903, 0.8521991968154907, 0.847840428352356, 0.8508783578872681, 0.8532558679580688, 0.8535200357437134, 0.8573504090309143], "val_loss": [1.9313349723815918, 1.1785221099853516, 0.8815887570381165, 0.8246484398841858, 0.7127882242202759, 0.707470715045929, 0.6602293848991394, 0.6638553738594055, 0.7507609128952026, 0.6023046970367432, 0.5919200778007507, 0.5812702775001526, 0.5705193877220154, 0.5382533669471741, 0.56351238489151, 0.5370522737503052, 0.5611441135406494, 0.5483757257461548, 0.5078969597816467, 0.5190142393112183, 0.49034595489501953, 0.492534875869751, 0.5233256220817566, 0.47168001532554626, 0.49648478627204895, 0.47365623712539673, 0.4654787480831146, 0.47787296772003174, 0.497920423746109, 0.45828771591186523, 0.47021883726119995, 0.4601401090621948, 0.446370005607605, 0.4400327205657959, 0.4652141034603119, 0.43301618099212646, 0.4359486401081085, 0.4398595094680786, 0.44661766290664673, 0.4175244867801666, 0.413407564163208, 0.4159332811832428, 0.42485058307647705, 0.406781941652298, 0.40302303433418274, 0.42826855182647705, 0.40816813707351685, 0.41630256175994873, 0.4043392837047577, 0.3977304995059967, 0.39690569043159485, 0.3901270627975464, 0.39880314469337463, 0.3866709768772125, 0.3838955760002136], "val_accuracy": [0.621666669845581, 0.6069999933242798, 0.7003333568572998, 0.6833333373069763, 0.7456666827201843, 0.7360000014305115, 0.7559999823570251, 0.7456666827201843, 0.7046666741371155, 0.7726666927337646, 0.7829999923706055, 0.7829999923706055, 0.7723333239555359, 0.8083333373069763, 0.7973333597183228, 0.7923333048820496, 0.7696666717529297, 0.7879999876022339, 0.8166666626930237, 0.8016666769981384, 0.8223333358764648, 0.8190000057220459, 0.8006666898727417, 0.8299999833106995, 0.8113333582878113, 0.8253333568572998, 0.831333339214325, 0.824999988079071, 0.8163333535194397, 0.8366666436195374, 0.8233333230018616, 0.8346666693687439, 0.8323333263397217, 0.8376666903495789, 0.8243333101272583, 0.847000002861023, 0.8389999866485596, 0.8386666774749756, 0.8296666741371155, 0.8486666679382324, 0.8510000109672546, 0.8433333039283752, 0.8433333039283752, 0.8503333330154419, 0.8513333201408386, 0.8370000123977661, 0.8493333458900452, 0.8453333377838135, 0.8519999980926514, 0.8600000143051147, 0.859666645526886, 0.8566666841506958, 0.8506666421890259, 0.8556666374206543, 0.8586666584014893]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0], [4, 2, 7, 2, 3, 5], [0, 2, 0, 0, 2], [0, 39, 39], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 12, 7, 5, 2, 5, 3, 2, 1, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(grad, alpha))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 3, 9, 3, 5], [0, 2, 1, 0, 2], [34, 39, 39], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 2, 1, 3, 8, 2], [2, 0, 5, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 7, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [58, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 2, 6, 3, 3, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3420820236206055, 21.860431671142578, 4867.92529296875, 1210249.125, 320503808.0, 82479128576.0, 20803045294080.0], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.732900381088257, 182.8616180419922, 46311.55078125, 11853425.0, 3034472704.0, 776825012224.0, 198867203129344.0], "val_accuracy": [0.09733333438634872, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 8, 3, 2, 3, 5, 5, 8, 5, 5, 8], [0, 2, 0, 0, 1], [0, 44, 39], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 2, 0, 6, 3, 5, 2, 6, 5, 2, 7], [2, 0, 3, 1, 0, 5, 0, 2], [16, 1, 57], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 2, 4, 2, 5, 2, 1], [0, 6, 1, 3, 0, 6], [0, 22], [0, 1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 11, 4, 3, 19, 11, 8, 3, 13, 7, 6, 2, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.sqrt(tf.math.square(grad)))), tf.math.square(tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.add(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), alpha)), tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.add(grad, tf.math.add(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, sigma))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 2, 3, 1, 0, 5], [1, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 0, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [9, 2, 0, 2, 5, 2, 5], [0, 6, 1, 4, 7], [0, 22], [1], [0], [2], [0]], "fitness": -0.07199999690055847, "mapping_values": [1, 9, 5, 4, 2, 7, 4, 3, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)), alpha), tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [8313917444980736.0, 9413705024405504.0, 9739716664492032.0, 9566442651385856.0, 9553434269188096.0, 9550112111984640.0], "accuracy": [0.09113723784685135, 0.09259014576673508, 0.08770307898521423, 0.0870426595211029, 0.09047681838274002, 0.08836349099874496], "val_loss": [6583935756664832.0, 6583935756664832.0, 6583935756664832.0, 6583935756664832.0, 6583935756664832.0, 6583935756664832.0], "val_accuracy": [0.07133333384990692, 0.07133333384990692, 0.07133333384990692, 0.07133333384990692, 0.07133333384990692, 0.07133333384990692]}}]