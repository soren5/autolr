[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.7991428375244141, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2097885608673096, 1.5959289073944092, 1.121570348739624, 0.984434962272644, 0.8992111682891846, 0.8255950808525085, 0.7749807238578796, 0.7323898673057556, 0.7415831089019775, 0.6835747957229614, 0.6970456838607788, 0.6797094941139221, 0.6504929065704346, 0.627867579460144, 0.6311299800872803, 0.6026230454444885, 0.6006016135215759], "accuracy": [0.27143046259880066, 0.5099722743034363, 0.605468213558197, 0.6454893946647644, 0.6843217611312866, 0.7033417224884033, 0.7119271159172058, 0.7308149337768555, 0.7317395210266113, 0.7506273984909058, 0.7446836829185486, 0.7483819723129272, 0.7617223858833313, 0.7656848430633545, 0.7640998363494873, 0.7790252566337585, 0.7828556299209595], "val_loss": [1.9227838516235352, 1.1174412965774536, 0.9152829051017761, 0.7810481786727905, 0.7344024777412415, 0.7224944829940796, 0.669200599193573, 0.6754645705223083, 0.63213050365448, 0.6128965020179749, 0.6769173741340637, 0.584683895111084, 0.5833588242530823, 0.560129702091217, 0.5804405212402344, 0.5425252318382263, 0.5580008625984192], "val_accuracy": [0.5496666431427002, 0.6443333625793457, 0.6816666722297668, 0.7196666598320007, 0.7403333187103271, 0.7210000157356262, 0.7570000290870667, 0.7580000162124634, 0.765999972820282, 0.7710000276565552, 0.7473333477973938, 0.796999990940094, 0.7906666398048401, 0.7903333306312561, 0.7789999842643738, 0.7960000038146973, 0.7883333563804626]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 2, 5, 2, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [8, 2, 0, 6, 3, 8, 2], [2, 0, 0, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 6, 2, 5, 7, 4], [0, 6, 1, 7, 6, 3], [0, 22], [1], [0], [4], [0]], "fitness": -0.3094285726547241, "mapping_values": [1, 7, 4, 3, 2, 2, 1, 1, 0, 13, 7, 6, 1, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.math.sqrt(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.square(alpha))), tf.math.add(tf.math.pow(grad, grad), sigma))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.5860936641693115, 2.2452945709228516, 2.3005857467651367, 2.30305814743042, 2.303480863571167, 2.2912304401397705, 2.112595796585083, 2.3052103519439697, 2.2034974098205566, 2.40339732170105, 2.3065199851989746, 2.3039002418518066, 2.303363084793091, 2.3019914627075195], "accuracy": [0.18240654468536377, 0.19416193664073944, 0.11306300014257431, 0.14238542318344116, 0.10170386731624603, 0.12798838317394257, 0.2094835489988327, 0.09932637959718704, 0.16153743863105774, 0.12336547672748566, 0.09272222965955734, 0.09800554811954498, 0.10011887550354004, 0.10540219396352768], "val_loss": [2.298428773880005, 2.310286045074463, 2.2708964347839355, 2.305464267730713, 2.301852226257324, 2.0185999870300293, 2.304816246032715, 2.2985143661499023, 2.8143117427825928, 2.307586669921875, 2.3034229278564453, 2.302539110183716, 2.3020617961883545, 2.298715591430664], "val_accuracy": [0.1940000057220459, 0.09933333098888397, 0.1589999943971634, 0.09966666996479034, 0.0963333323597908, 0.3070000112056732, 0.1066666692495346, 0.09933333098888397, 0.3086666762828827, 0.09933333098888397, 0.09933333098888397, 0.10000000149011612, 0.10433333367109299, 0.13699999451637268]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 5, 6, 3, 8, 2], [2, 2, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [5], [0]], "fitness": -0.1468571424484253, "mapping_values": [1, 2, 1, 1, 1, 12, 7, 5, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.square(beta), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(beta), tf.math.add(grad, alpha)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.subtract(grad, alpha), grad))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [539.7944946289062, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.18333113193511963, 0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [3048.9873046875, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.14499999582767487, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 33], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 0, 1, 3, 3], [5, 6, 1, 1, 1], [0, 22], [1], [0], [2], [0]], "fitness": -0.09028571099042892, "mapping_values": [1, 6, 3, 3, 1, 2, 1, 1, 0, 12, 7, 5, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(tf.math.subtract(grad, tf.math.multiply(grad, tf.math.multiply(alpha, alpha))))), alpha)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3096022605895996, 2.3107643127441406, 2.3089301586151123, 2.3092072010040283, 2.3099279403686523, 2.309948205947876], "accuracy": [0.09140139818191528, 0.09047681838274002, 0.09259014576673508, 0.09113723784685135, 0.09496764093637466, 0.08479725569486618], "val_loss": [2.308678388595581, 2.308678388595581, 2.308678388595581, 2.308678388595581, 2.308678388595581, 2.308678388595581], "val_accuracy": [0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [6, 2, 3, 2, 4, 1, 9, 2, 2, 3, 8, 5, 9, 4, 9, 6, 2, 7, 5, 3, 1, 7, 3, 5, 3, 0, 6, 5, 3, 4, 3, 8, 0, 1, 5, 3, 2, 5, 8, 9, 1, 6, 6, 9, 4, 4, 7, 2, 4, 3, 9, 7, 0, 0, 4, 5], [1, 2, 1, 0, 2, 1, 2, 2, 1, 2, 2, 3, 3, 1, 0, 2, 0, 2, 0, 1, 3, 2, 1, 1, 0, 1, 1, 2, 2, 1, 1], [0, 39, 39, 93, 78, 52, 48, 23, 57, 20, 24], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 5, 2], [2, 0, 0, 1, 0], [16, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 2, 6, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.08799999952316284, "mapping_values": [1, 87, 56, 31, 11, 10, 6, 4, 2, 11, 6, 5, 2, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(tf.math.multiply(tf.math.sqrt(grad), alpha), tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), grad))))))), tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.math.square(tf.math.multiply(tf.math.subtract(grad, tf.math.add(alpha, tf.math.multiply(grad, grad))), tf.math.square(tf.math.multiply(grad, tf.math.negative(grad))))), alpha), tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.math.pow(tf.math.multiply(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), grad), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad))), tf.math.negative(tf.math.subtract(tf.math.square(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(tf.math.square(tf.math.sqrt(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))), alpha), tf.math.subtract(grad, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.pow(grad, tf.math.add(tf.math.add(alpha, alpha), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.multiply(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.negative(alpha)))), tf.math.pow(tf.math.square(grad), grad)))), alpha))))))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.divide_no_nan(grad, alpha), tf.math.add(grad, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.310826063156128, 2.309774875640869, 2.309474468231201, 2.309314727783203, 2.309976577758789, 2.309833526611328], "accuracy": [0.08809932321310043, 0.09417514503002167, 0.09642054885625839, 0.09985470771789551, 0.09074098616838455, 0.09021265059709549], "val_loss": [2.3086166381835938, 2.3086166381835938, 2.3086166381835938, 2.3086166381835938, 2.3086166381835938, 2.3086166381835938], "val_accuracy": [0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763]}}]