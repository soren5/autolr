[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8048571348190308, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.210221767425537, 1.6126329898834229, 1.1594492197036743, 0.9722687005996704, 0.8895499110221863, 0.8121962547302246, 0.7890276908874512, 0.7653331160545349, 0.7219020128250122, 0.7196832299232483, 0.7183423638343811, 0.6691848635673523, 0.6517302393913269, 0.6354917883872986, 0.6223650574684143, 0.6035541296005249, 0.6205936074256897, 0.5902138352394104, 0.5759605169296265, 0.5587406158447266, 0.5476008057594299, 0.5481284260749817, 0.5476999878883362, 0.5326306223869324, 0.5276286602020264, 0.5307270884513855, 0.51188725233078, 0.5065170526504517, 0.4922296404838562, 0.4899144172668457, 0.48692426085472107, 0.48274412751197815, 0.4767325818538666, 0.4704999029636383, 0.4731808602809906, 0.4696446657180786, 0.4648606777191162, 0.4695727229118347, 0.4505731761455536, 0.44515499472618103, 0.4371953010559082, 0.4416782855987549, 0.4237213134765625, 0.43194082379341125, 0.4174192547798157, 0.4203662872314453, 0.4131897985935211, 0.40630313754081726, 0.4116572141647339, 0.4200705587863922, 0.3983539342880249, 0.40957966446876526], "accuracy": [0.26680755615234375, 0.5046889185905457, 0.5913353562355042, 0.6519614458084106, 0.6757363677024841, 0.7062475085258484, 0.7165499925613403, 0.7218332886695862, 0.7331924438476562, 0.7338528633117676, 0.7250033020973206, 0.7532690763473511, 0.765949010848999, 0.7655527591705322, 0.7671377658843994, 0.770439863204956, 0.7712323069572449, 0.7817989587783813, 0.7835160493850708, 0.7911768555641174, 0.8000264167785645, 0.7994980812072754, 0.7917051911354065, 0.8037247657775879, 0.809140145778656, 0.7969884872436523, 0.8086118102073669, 0.8136309385299683, 0.8181217908859253, 0.8152159452438354, 0.8202351331710815, 0.8181217908859253, 0.8244617581367493, 0.8259146809577942, 0.8224804997444153, 0.8257825970649719, 0.8314621448516846, 0.8219521641731262, 0.832650899887085, 0.8416325449943542, 0.8396512866020203, 0.8372738361358643, 0.8486329317092896, 0.8444063067436218, 0.8446704745292664, 0.8442742228507996, 0.8486329317092896, 0.8498216867446899, 0.8490291833877563, 0.8442742228507996, 0.8535200357437134, 0.850350022315979], "val_loss": [1.92059326171875, 1.1227686405181885, 0.917546808719635, 0.8008643984794617, 0.7177016735076904, 0.7187098264694214, 0.7226689457893372, 0.654700756072998, 0.623274028301239, 0.6268789768218994, 0.6174028515815735, 0.5949611663818359, 0.5851985812187195, 0.5606217980384827, 0.5597924590110779, 0.5411372780799866, 0.5268781185150146, 0.5258326530456543, 0.5380243062973022, 0.5206000208854675, 0.5260066986083984, 0.4988150894641876, 0.4925670623779297, 0.49108585715293884, 0.5195501446723938, 0.487193763256073, 0.49584946036338806, 0.463700532913208, 0.4623773694038391, 0.4671695828437805, 0.453884482383728, 0.45056745409965515, 0.4492303133010864, 0.4675436317920685, 0.45496296882629395, 0.44187384843826294, 0.44698894023895264, 0.44245874881744385, 0.43346965312957764, 0.42793339490890503, 0.4378737807273865, 0.4190104603767395, 0.4224851131439209, 0.4231926202774048, 0.41587525606155396, 0.40923529863357544, 0.40368667244911194, 0.4038914442062378, 0.41827356815338135, 0.40672966837882996, 0.40654417872428894, 0.3990287780761719], "val_accuracy": [0.6076666712760925, 0.6349999904632568, 0.6623333096504211, 0.7013333439826965, 0.7319999933242798, 0.7223333120346069, 0.7263333201408386, 0.75, 0.7666666507720947, 0.762333333492279, 0.762666642665863, 0.7793333530426025, 0.7799999713897705, 0.7906666398048401, 0.7846666574478149, 0.7926666736602783, 0.8016666769981384, 0.7973333597183228, 0.7929999828338623, 0.8003333210945129, 0.8026666641235352, 0.8069999814033508, 0.8149999976158142, 0.8106666803359985, 0.7979999780654907, 0.8176666498184204, 0.8116666674613953, 0.8276666402816772, 0.831333339214325, 0.8193333148956299, 0.8286666870117188, 0.8303333520889282, 0.8360000252723694, 0.8186666369438171, 0.8323333263397217, 0.8296666741371155, 0.824999988079071, 0.8386666774749756, 0.8356666564941406, 0.843666672706604, 0.8336666822433472, 0.843999981880188, 0.8403333425521851, 0.8413333296775818, 0.846666693687439, 0.8429999947547913, 0.8533333539962769, 0.8443333506584167, 0.8416666388511658, 0.8429999947547913, 0.8516666889190674, 0.8463333249092102]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 2, 3, 2, 3, 5, 0, 2, 6, 0, 4, 1, 0, 6, 6, 9], [2, 2, 1, 0, 2, 0, 1, 1, 2, 1], [0, 39, 39], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 3, 2], [4, 0, 1, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 2, 7], [0, 6, 2, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.18971428275108337, "mapping_values": [1, 26, 16, 10, 3, 4, 2, 2, 1, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.square(tf.math.negative(tf.math.add(grad, tf.math.divide_no_nan(grad, alpha)))), tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32))), grad), tf.math.pow(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.divide_no_nan(alpha, alpha))), grad)), tf.math.divide_no_nan(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, beta)), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2771477699279785, 2.3157129287719727, 2.3191123008728027, 2.315690517425537, 2.3265297412872314, 2.3272056579589844], "accuracy": [0.11755382269620895, 0.11438383162021637, 0.09747721254825592, 0.09985470771789551, 0.1010434553027153, 0.09774138033390045], "val_loss": [2.1590487957000732, 2.3124637603759766, 2.3248066902160645, 2.3400301933288574, 2.3160200119018555, 2.3120110034942627], "val_accuracy": [0.1993333399295807, 0.09966666996479034, 0.10333333164453506, 0.09933333098888397, 0.10333333164453506, 0.09933333098888397]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1], [0, 2, 0, 6, 3, 8, 1, 4, 7, 9, 8, 1, 3, 1, 2, 8, 2, 2, 7, 8, 6, 4, 9, 5], [2, 0, 3, 1, 0, 5, 4, 1, 0, 0, 3, 0, 4, 5], [77, 1, 22, 30, 25, 64, 91], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 38, 24, 14, 7, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(beta), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(tf.math.add(grad, alpha), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.add(tf.math.add(tf.math.add(tf.math.sqrt(grad), grad), tf.math.divide_no_nan(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), grad))), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), grad), tf.math.square(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 2, 3, 7], [0, 3, 1, 0, 2, 1], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 2, 3, 1, 0], [16, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], [0, 7, 0, 2, 5, 2, 5, 7, 4, 0, 6, 0, 5, 2], [0, 4, 1, 6, 1, 7, 0, 4], [0, 22], [0, 0, 0, 1, 1], [0, 3, 5], [2, 4], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 6, 6, 2, 10, 6, 4, 0, 22, 14, 8, 2, 5, 3, 2, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, alpha)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(beta, grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(grad, tf.math.square(tf.math.add(tf.math.square(tf.math.add(alpha, grad)), tf.math.pow(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.negative(tf.math.square(grad)), tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), grad)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.square(beta), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [9, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [65, 39, 63], [1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 0, 1, 0], [16, 1], [0, 1, 0, 1, 0, 0, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1], [0, 22], [1], [0], [2], [0]], "fitness": -0.08885714411735535, "mapping_values": [1, 1, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.310497522354126, 2.31052565574646, 2.311093330383301, 2.3103575706481934, 2.3104605674743652, 2.310495615005493], "accuracy": [0.09192973375320435, 0.09140139818191528, 0.09034473448991776, 0.09628847241401672, 0.09219389408826828, 0.09166556596755981], "val_loss": [2.308932304382324, 2.308932304382324, 2.308932304382324, 2.308932304382324, 2.308932304382324, 2.308932304382324], "val_accuracy": [0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503]}}]