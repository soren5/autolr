[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8140000104904175, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2121031284332275, 1.6125019788742065, 1.1295393705368042, 0.9968718886375427, 0.8981205224990845, 0.8491025567054749, 0.7768939733505249, 0.747641921043396, 0.7413896918296814, 0.69203120470047, 0.6902764439582825, 0.6825864911079407, 0.640819251537323, 0.6638935208320618, 0.6278993487358093, 0.5932934284210205, 0.6113582849502563, 0.5819724202156067, 0.5792291164398193, 0.5659740567207336, 0.5803732872009277, 0.5551687479019165, 0.5390241742134094, 0.5417453050613403, 0.5371170043945312, 0.5306500196456909, 0.5293899178504944, 0.5186609625816345, 0.5127658247947693], "accuracy": [0.2658829689025879, 0.49927353858947754, 0.601109504699707, 0.6427156329154968, 0.6712455153465271, 0.6892088055610657, 0.7099458575248718, 0.7199841737747192, 0.7228899598121643, 0.7429665923118591, 0.7367587089538574, 0.7478536367416382, 0.7621186375617981, 0.7489103078842163, 0.7675340175628662, 0.7814027070999146, 0.7740060687065125, 0.7880068421363831, 0.7833839654922485, 0.7890635132789612, 0.7865539789199829, 0.7943468689918518, 0.7951393723487854, 0.800818920135498, 0.8000264167785645, 0.8079513907432556, 0.8049134612083435, 0.8083476424217224, 0.8109893202781677], "val_loss": [1.9175137281417847, 1.075758457183838, 0.8842489123344421, 0.7617759704589844, 0.7725626826286316, 0.6748301982879639, 0.6631426811218262, 0.7092098593711853, 0.6248138546943665, 0.6108686327934265, 0.6227925419807434, 0.581858217716217, 0.5924525260925293, 0.5408207774162292, 0.535628080368042, 0.5695381760597229, 0.5059170126914978, 0.5372413992881775, 0.5007546544075012, 0.5207764506340027, 0.534767746925354, 0.49477824568748474, 0.4995845854282379, 0.4754880368709564, 0.4977867007255554, 0.49010059237480164, 0.47984302043914795, 0.505810558795929, 0.45399755239486694], "val_accuracy": [0.5756666660308838, 0.6553333401679993, 0.6826666593551636, 0.7229999899864197, 0.684333324432373, 0.7386666536331177, 0.7566666603088379, 0.7329999804496765, 0.7580000162124634, 0.7693333625793457, 0.7513333559036255, 0.7839999794960022, 0.7680000066757202, 0.7983333468437195, 0.8043333292007446, 0.781000018119812, 0.8100000023841858, 0.7990000247955322, 0.8096666932106018, 0.8169999718666077, 0.7916666865348816, 0.8136666417121887, 0.8043333292007446, 0.8286666870117188, 0.8146666884422302, 0.8066666722297668, 0.8183333277702332, 0.8143333196640015, 0.8286666870117188]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0], [0, 2, 3, 2, 8, 5], [3, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 1, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 4, 4, 2, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 5, 3, 2, 1, 10, 6, 4, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, grad))), beta)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.303769111633301, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09945846349000931, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10499999672174454, 0.10499999672174454, 0.10499999672174454, 0.10499999672174454, 0.10499999672174454, 0.10499999672174454]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [0, 2, 3, 6, 3, 2, 3, 3, 8, 4, 6, 0, 6, 7, 3, 2, 7, 8, 6, 4, 5, 4, 1, 1, 0, 1, 9, 9], [0, 2, 3, 0, 2, 2, 1, 2, 2, 2, 3, 2, 3, 3, 0, 3, 1, 2, 1], [0, 39, 39, 15, 68], [1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 6, 4, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 6, 4], [1, 6, 6, 3, 4], [0, 22], [1], [0], [2], [0]], "fitness": -0.09142857044935226, "mapping_values": [1, 47, 28, 19, 5, 1, 0, 1, 0, 12, 7, 5, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.multiply(tf.math.multiply(grad, tf.math.sqrt(tf.math.pow(tf.math.divide_no_nan(tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.math.multiply(alpha, tf.math.add(grad, tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(tf.math.pow(grad, grad), tf.math.square(tf.math.pow(tf.math.subtract(grad, grad), grad)))), grad))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.subtract(tf.math.negative(alpha), tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), grad))), alpha))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(alpha), tf.math.divide_no_nan(grad, tf.math.pow(grad, sigma)))), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.309875726699829, 2.3106722831726074, 2.3097329139709473, 2.31061053276062, 2.310122013092041, 2.309103488922119], "accuracy": [0.09311848133802414, 0.08942015469074249, 0.08928807079792023, 0.09087307006120682, 0.09430722147226334, 0.09087307006120682], "val_loss": [2.308760643005371, 2.308760643005371, 2.308760643005371, 2.308760643005371, 2.308760643005371, 2.308760643005371], "val_accuracy": [0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 2, 6, 1, 3, 5, 4, 9, 6, 1], [0, 0, 1, 2, 1, 0, 1], [0, 39, 39, 59], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 2, 0, 6, 3, 8, 6], [2, 0, 3, 1, 0], [41, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 1, 0, 3, 5, 2, 1, 3, 0], [4, 6, 1, 6, 0, 5], [0, 22], [1], [0], [0], [0]], "fitness": -0.0908571407198906, "mapping_values": [1, 17, 10, 7, 4, 2, 1, 1, 0, 15, 9, 6, 1, 1, 0, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha))), tf.math.pow(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(alpha, tf.math.subtract(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), alpha)))), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.negative(grad), tf.math.multiply(grad, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.multiply(grad, tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32))), grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3096911907196045, 2.309786558151245, 2.30899977684021, 2.3111093044281006, 2.3102352619171143, 2.309577465057373], "accuracy": [0.09655263274908066, 0.09008057415485382, 0.09232597798109055, 0.08677849918603897, 0.09153348207473755, 0.09430722147226334], "val_loss": [2.3080852031707764, 2.3080852031707764, 2.3080852031707764, 2.3080852031707764, 2.3080852031707764, 2.3080852031707764], "val_accuracy": [0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [6, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 9, 2, 5, 2, 1, 7, 0, 6, 5, 0, 4, 8, 8, 1, 8, 3, 0, 9, 2, 5, 4], [0, 6, 1, 6, 0, 3, 2, 7, 7, 6], [0, 22, 24, 16], [1], [0], [0], [0]], "fitness": -0.08914285898208618, "mapping_values": [1, 1, 0, 1, 1, 8, 4, 4, 1, 33, 23, 10, 4, 1, 0, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(beta, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.divide_no_nan(grad, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(tf.math.add(tf.math.subtract(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, alpha)), grad)), tf.math.negative(tf.math.divide_no_nan(tf.math.square(tf.math.negative(tf.math.pow(tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(tf.math.sqrt(sigma), tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta)))))), tf.math.add(tf.math.square(tf.math.pow(grad, grad)), grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.310098886489868, 2.3100788593292236, 2.3100223541259766, 2.3101375102996826, 2.309379816055298, 2.310687780380249], "accuracy": [0.08849557489156723, 0.09549596905708313, 0.09285431355237961, 0.09021265059709549, 0.09285431355237961, 0.08875974267721176], "val_loss": [2.308802843093872, 2.308802843093872, 2.308802843093872, 2.308802843093872, 2.308802843093872, 2.308802843093872], "val_accuracy": [0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971]}}]