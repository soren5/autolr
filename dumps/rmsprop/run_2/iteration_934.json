[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8342857360839844, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2059028148651123, 1.5957646369934082, 1.1313459873199463, 0.9577102661132812, 0.9096315503120422, 0.8202676177024841, 0.7832327485084534, 0.7680621147155762, 0.7064862847328186, 0.6991538405418396, 0.6949326395988464, 0.6851158738136292, 0.649408221244812, 0.6437246799468994, 0.6325353980064392, 0.6171440482139587, 0.6174805760383606, 0.6099854111671448, 0.5854552984237671, 0.5802140831947327, 0.5794991850852966, 0.5709129571914673, 0.553687334060669, 0.5415313243865967, 0.5677015781402588, 0.5284028649330139, 0.5216287970542908, 0.5325672030448914, 0.5075608491897583, 0.5041339993476868, 0.5023274421691895, 0.5095309615135193, 0.49283960461616516, 0.4731004536151886, 0.4770512878894806, 0.4720180034637451, 0.4649711847305298, 0.472281813621521, 0.45618221163749695, 0.461243599653244, 0.4513688087463379, 0.44776561856269836, 0.44582241773605347, 0.436777263879776, 0.43646499514579773, 0.4289986789226532, 0.43679505586624146, 0.4319389760494232, 0.42413368821144104, 0.4206562340259552, 0.40990975499153137, 0.4064035713672638, 0.4106287360191345, 0.40791991353034973, 0.4279429614543915, 0.3982097804546356, 0.39322683215141296, 0.40485692024230957, 0.39103028178215027, 0.3852054476737976, 0.38327282667160034, 0.39160454273223877, 0.38195571303367615, 0.37044066190719604, 0.3706120252609253, 0.3795528709888458, 0.36859703063964844, 0.37466540932655334, 0.3624473512172699, 0.3670625686645508, 0.36448684334754944, 0.36313578486442566], "accuracy": [0.275260865688324, 0.5134063959121704, 0.6021661758422852, 0.6635847091674805, 0.6753401160240173, 0.7065116763114929, 0.7202483415603638, 0.7193237543106079, 0.739400327205658, 0.7428345084190369, 0.7428345084190369, 0.7465327978134155, 0.7611940503120422, 0.767930269241333, 0.7614582180976868, 0.7707040309906006, 0.7726852297782898, 0.7749306559562683, 0.7884030938148499, 0.7858935594558716, 0.785101056098938, 0.7877426743507385, 0.798309326171875, 0.7998943328857422, 0.7869502305984497, 0.8107251524925232, 0.8075551390647888, 0.8020076751708984, 0.8125742673873901, 0.81548011302948, 0.8203672170639038, 0.8138951063156128, 0.8195747137069702, 0.8296129703521729, 0.8272355198860168, 0.8249900937080383, 0.8290846943855286, 0.828292191028595, 0.8352925777435303, 0.8310658931732178, 0.8354246616363525, 0.8425571322441101, 0.8396512866020203, 0.8400475382804871, 0.8437458872795105, 0.8473120927810669, 0.8436138033866882, 0.847840428352356, 0.8473120927810669, 0.8445383906364441, 0.8507462739944458, 0.8537842035293579, 0.8535200357437134, 0.8511425256729126, 0.8461233377456665, 0.8568220734596252, 0.859199583530426, 0.8510104417800903, 0.8580108284950256, 0.8618412613868713, 0.8634262084960938, 0.8585391640663147, 0.8636903762817383, 0.8648791313171387, 0.8652753829956055, 0.8648791313171387, 0.8664641380310059, 0.8625016212463379, 0.8647470474243164, 0.8692378997802734, 0.8658037185668945, 0.8689737319946289], "val_loss": [1.9102994203567505, 1.1149096488952637, 0.9487210512161255, 0.8541679978370667, 0.713535487651825, 0.6776160597801208, 0.6841551065444946, 0.6285533905029297, 0.6103468537330627, 0.5894205570220947, 0.6075973510742188, 0.5850912928581238, 0.568621814250946, 0.5608165860176086, 0.5395271182060242, 0.5378567576408386, 0.5349169969558716, 0.5258494019508362, 0.5156153440475464, 0.5041358470916748, 0.49655887484550476, 0.5031929016113281, 0.4875977337360382, 0.48926663398742676, 0.48122256994247437, 0.47198957204818726, 0.46582797169685364, 0.47263428568840027, 0.4690098464488983, 0.4539206624031067, 0.4653261601924896, 0.44987979531288147, 0.4471970200538635, 0.4447046220302582, 0.45165327191352844, 0.4377501904964447, 0.44031989574432373, 0.42719075083732605, 0.41972866654396057, 0.42463386058807373, 0.4218830168247223, 0.4294700026512146, 0.41825953125953674, 0.4194776117801666, 0.41666561365127563, 0.4150170087814331, 0.41707536578178406, 0.40255194902420044, 0.4022026062011719, 0.4124995470046997, 0.39602792263031006, 0.4016216993331909, 0.3934158980846405, 0.39550358057022095, 0.39992576837539673, 0.3893076479434967, 0.4131670594215393, 0.38944804668426514, 0.38596636056900024, 0.3934912085533142, 0.38761723041534424, 0.3826952576637268, 0.37529560923576355, 0.3810608685016632, 0.37481191754341125, 0.3908146619796753, 0.37230372428894043, 0.37623921036720276, 0.3802126348018646, 0.3750171661376953, 0.3783336579799652, 0.38711628317832947], "val_accuracy": [0.5860000252723694, 0.6496666669845581, 0.6150000095367432, 0.6863333582878113, 0.7336666584014893, 0.7450000047683716, 0.7390000224113464, 0.7613333463668823, 0.7696666717529297, 0.7799999713897705, 0.7673333287239075, 0.7820000052452087, 0.7766666412353516, 0.7756666541099548, 0.8033333420753479, 0.7916666865348816, 0.800000011920929, 0.8063333630561829, 0.8103333115577698, 0.8106666803359985, 0.812333345413208, 0.7953333258628845, 0.8196666836738586, 0.8086666464805603, 0.8220000267028809, 0.8159999847412109, 0.8233333230018616, 0.8180000185966492, 0.8143333196640015, 0.8233333230018616, 0.8199999928474426, 0.8320000171661377, 0.8320000171661377, 0.8346666693687439, 0.8216666579246521, 0.8356666564941406, 0.8353333473205566, 0.8386666774749756, 0.8423333168029785, 0.8396666646003723, 0.847000002861023, 0.8343333601951599, 0.8483333587646484, 0.8423333168029785, 0.8429999947547913, 0.8399999737739563, 0.8426666855812073, 0.8503333330154419, 0.8536666631698608, 0.8476666808128357, 0.8536666631698608, 0.8539999723434448, 0.8566666841506958, 0.8566666841506958, 0.8506666421890259, 0.8569999933242798, 0.8356666564941406, 0.8600000143051147, 0.856333315372467, 0.8529999852180481, 0.8553333282470703, 0.8616666793823242, 0.8656666874885559, 0.8619999885559082, 0.8636666536331177, 0.8516666889190674, 0.8673333525657654, 0.8653333187103271, 0.862666666507721, 0.8600000143051147, 0.8610000014305115, 0.8586666584014893]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 0, 1, 0, 3], [64, 39, 39], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [11, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5, 2, 1], [6, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 3, 4, 2, 2, 1, 8, 5, 3, 0, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(grad), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3030004501342773, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09919429570436478, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 2, 1, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 4, 8, 2], [2, 0, 5, 1, 0], [16, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 4, 0, 3, 5, 0, 3], [0, 6, 1, 6, 2], [0, 58], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 7, 4, 3, 1, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.negative(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), tf.math.square(alpha))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [361414384418816.0, 413743192211456.0, 418345518104576.0, 413399695491072.0, 420158229184512.0, 418646971121664.0], "accuracy": [0.09959053993225098, 0.09893012791872025, 0.09734513610601425, 0.0952318087220192, 0.09840179979801178, 0.09919429570436478], "val_loss": [387404439486464.0, 387404506595328.0, 387416183537664.0, 387416183537664.0, 387416183537664.0, 387416183537664.0], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 3, 2, 3, 5, 7, 3, 5, 0, 2, 2, 3, 8, 1, 9, 7, 6, 2, 0, 8], [3, 0, 1, 0, 2, 2, 0, 2, 1, 0, 1, 0], [0, 39, 87, 8, 0, 88], [0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [7, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 3], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 2, 0, 4, 5, 5, 5, 3], [0, 2, 1, 0], [99, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 33, 21, 12, 6, 5, 2, 3, 1, 12, 8, 4, 2, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.add(tf.math.multiply(grad, tf.math.square(tf.math.add(tf.math.multiply(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), alpha), tf.math.negative(tf.math.add(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.sqrt(grad))), tf.math.subtract(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.add(tf.math.negative(alpha), tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))))))))))), alpha), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.pow(tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.square(beta))), tf.math.square(tf.math.multiply(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], [0, 2, 3, 1, 3, 5, 6, 8], [0, 2, 1, 0, 2, 3], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 1, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1], [7, 2, 0, 2, 5, 2, 6, 9, 0], [0, 6, 1, 6, 0], [0, 22, 45], [0, 1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 8, 6, 2, 11, 6, 5, 2, 14, 9, 5, 3, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.square(alpha)), tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.sqrt(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(beta, tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), tf.math.square(alpha)), tf.math.add(tf.math.divide_no_nan(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.negative(grad)), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908]}}]