[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8451428413391113, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.209761142730713, 1.6033341884613037, 1.1596530675888062, 0.9672435522079468, 0.8799850940704346, 0.8289000988006592, 0.781687319278717, 0.7623417377471924, 0.7296006083488464, 0.7007434964179993, 0.6798195242881775, 0.6773896813392639, 0.6443347930908203, 0.639927089214325, 0.6220694184303284, 0.6194202303886414, 0.6029465794563293, 0.5889182686805725, 0.5759505033493042, 0.5672586560249329, 0.5610641241073608, 0.5493075847625732, 0.5386446714401245, 0.5383374094963074, 0.535810112953186, 0.5185227394104004, 0.5091256499290466, 0.5089631080627441, 0.513821542263031, 0.4969453811645508, 0.4918176233768463, 0.4939461052417755, 0.48012128472328186, 0.4718066453933716, 0.46868857741355896, 0.462738960981369, 0.47041717171669006, 0.4645363390445709, 0.46428099274635315, 0.44081658124923706, 0.44136521220207214, 0.44723957777023315, 0.44171878695487976, 0.4352480173110962, 0.4426826536655426, 0.431970477104187], "accuracy": [0.2744683623313904, 0.5083872675895691, 0.5997886657714844, 0.6557918190956116, 0.6730946898460388, 0.6926429867744446, 0.707568347454071, 0.7143045663833618, 0.7238145470619202, 0.7367587089538574, 0.7469290494918823, 0.7432307600975037, 0.761590301990509, 0.7567031979560852, 0.7670056819915771, 0.7713643908500671, 0.778232753276825, 0.776251494884491, 0.7814027070999146, 0.785629391670227, 0.787082314491272, 0.7957997918128967, 0.7980451583862305, 0.8050455451011658, 0.8012151718139648, 0.8055738806724548, 0.8094043135643005, 0.8115176558494568, 0.8117818236351013, 0.8197067975997925, 0.8198388814926147, 0.8203672170639038, 0.8240655064582825, 0.8272355198860168, 0.8264430165290833, 0.8269713521003723, 0.8278959393501282, 0.8256505131721497, 0.8301413059234619, 0.8444063067436218, 0.8368775844573975, 0.834632158279419, 0.8433496356010437, 0.8426892161369324, 0.8392550349235535, 0.8417646288871765], "val_loss": [1.919018268585205, 1.0951743125915527, 0.9356778860092163, 0.8086492419242859, 0.7261332869529724, 0.6918087005615234, 0.6595712304115295, 0.6362075805664062, 0.6247843503952026, 0.648836612701416, 0.6431865096092224, 0.5859177112579346, 0.576589822769165, 0.5525819659233093, 0.5526368021965027, 0.5348593592643738, 0.5430195927619934, 0.518621027469635, 0.5173264145851135, 0.49520576000213623, 0.49753662943840027, 0.48824504017829895, 0.4862165153026581, 0.4973217248916626, 0.4738537669181824, 0.46324703097343445, 0.47026485204696655, 0.4666394591331482, 0.4705231189727783, 0.45973196625709534, 0.45349833369255066, 0.4456118047237396, 0.439104825258255, 0.43641236424446106, 0.4330997169017792, 0.4243473410606384, 0.42544490098953247, 0.4306459128856659, 0.4315507709980011, 0.41499555110931396, 0.4092372953891754, 0.4162538945674896, 0.42177072167396545, 0.4271065294742584, 0.4125480651855469, 0.4066498279571533], "val_accuracy": [0.5306666493415833, 0.6629999876022339, 0.6970000267028809, 0.6880000233650208, 0.7303333282470703, 0.7516666650772095, 0.762666642665863, 0.7523333430290222, 0.762666642665863, 0.753000020980835, 0.7513333559036255, 0.7726666927337646, 0.7799999713897705, 0.7866666913032532, 0.7933333516120911, 0.8016666769981384, 0.777999997138977, 0.7996666431427002, 0.8073333501815796, 0.8133333325386047, 0.8140000104904175, 0.8136666417121887, 0.8216666579246521, 0.8086666464805603, 0.8209999799728394, 0.8289999961853027, 0.8230000138282776, 0.8303333520889282, 0.8203333616256714, 0.8303333520889282, 0.831333339214325, 0.8330000042915344, 0.8356666564941406, 0.8333333134651184, 0.8379999995231628, 0.8389999866485596, 0.8410000205039978, 0.8353333473205566, 0.8376666903495789, 0.8519999980926514, 0.8526666760444641, 0.8456666469573975, 0.8446666598320007, 0.8356666564941406, 0.8460000157356262, 0.8463333249092102]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 2, 3, 2, 3, 4, 3, 4, 2, 0, 9, 8, 9, 1, 1], [0, 2, 1, 0, 0, 1, 1, 1, 1, 1], [0, 39, 39, 50, 57], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [4, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 0, 2, 5, 2, 1, 7], [0, 6, 1, 6, 0, 6], [0, 49], [1], [0], [7], [0]], "fitness": -0.19142857193946838, "mapping_values": [1, 25, 15, 10, 5, 1, 0, 1, 0, 14, 8, 6, 2, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.add(tf.math.multiply(tf.math.pow(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(tf.math.negative(alpha), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(alpha))), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(alpha, tf.math.subtract(alpha, alpha)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.math.add(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.30403208732605, 2.252393960952759, 2.206670045852661, 2.514021022379593e+20, NaN, NaN, NaN], "accuracy": [0.1950865089893341, 0.15876370668411255, 0.18676528334617615, 0.11570466309785843, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.301616668701172, 2.308302640914917, 3.910961151123047, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.19366666674613953, 0.09733333438634872, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1], [0, 2, 3, 2, 3, 8], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2, 7, 6, 3], [5, 0, 3, 1, 0, 5, 2, 0], [16, 1, 27], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 2, 0, 2, 7, 2, 1, 3, 0, 8, 6, 5], [5, 6, 1, 6, 0, 0, 7, 7], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 18, 10, 8, 3, 20, 12, 8, 2, 1, 0, 1, 0], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(grad), tf.math.add(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), alpha)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.multiply(grad, beta), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(grad, tf.math.negative(tf.math.add(grad, tf.math.add(alpha, tf.math.add(grad, tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.square(grad), grad))))))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [7, 2, 0, 6, 3, 8, 2], [2, 2, 3, 3, 0], [14, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [8, 2, 8, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 6, 6, 4, 4, 4], [2, 5, 0, 7, 0, 4], [0, 10]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 11, 6, 5, 1, 10, 6, 4, 1, 12, 6, 6, 2], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(beta, grad), tf.math.sqrt(grad))), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.add(tf.math.sqrt(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, alpha))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.pow(tf.math.pow(tf.math.pow(beta, grad), tf.constant(0.0, shape=shape, dtype=tf.float32)), grad), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 2, 3, 5, 5, 2, 2, 3, 0, 0, 5, 6, 0, 7, 5], [0, 2, 1, 0, 2, 3, 2, 3, 3, 1], [0, 58, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [7, 2, 0, 6, 3, 8, 2], [5, 0, 5, 1, 0], [16, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 3, 2, 1], [0, 6, 1, 6, 0], [0, 56], [0, 1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 27, 17, 10, 2, 11, 6, 5, 2, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.negative(grad)), grad)))))), tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.math.negative(grad), grad)))), tf.math.add(tf.math.square(grad), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.negative(grad), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.12930920720100403, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}]