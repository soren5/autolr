[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.819428563117981, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2066447734832764, 1.5959078073501587, 1.129238486289978, 0.9532277584075928, 0.8413202166557312, 0.8434481024742126, 0.7702712416648865, 0.7433997392654419, 0.7342170476913452, 0.6984229683876038, 0.6790301203727722, 0.6729584336280823, 0.6526124477386475, 0.618611752986908, 0.6190037131309509, 0.6052192449569702, 0.5768560767173767, 0.582313597202301, 0.5767683982849121, 0.5568241477012634, 0.5513651967048645, 0.5457355380058289, 0.5270863771438599, 0.5257111191749573, 0.5170073509216309, 0.5186742544174194, 0.5034459829330444, 0.49989596009254456, 0.5074902176856995, 0.49014076590538025, 0.48157110810279846, 0.48165401816368103, 0.4753468632698059, 0.45659005641937256, 0.46043020486831665, 0.463935911655426, 0.4608195722103119, 0.44605687260627747, 0.4520728290081024, 0.43870219588279724, 0.4344581067562103, 0.42736196517944336, 0.4232088625431061, 0.43217650055885315, 0.4160361886024475, 0.42300504446029663, 0.4155504107475281, 0.4103872776031494, 0.4063882827758789, 0.4094492793083191, 0.4025457501411438, 0.39219605922698975, 0.38647496700286865, 0.38383838534355164, 0.38462552428245544, 0.3773845434188843, 0.37707650661468506], "accuracy": [0.2666754722595215, 0.497820645570755, 0.6012415885925293, 0.6660943031311035, 0.6964733600616455, 0.6903975605964661, 0.7223616242408752, 0.7277770638465881, 0.7305507659912109, 0.7471932172775269, 0.7469290494918823, 0.7475894689559937, 0.7572315335273743, 0.7726852297782898, 0.7714964747428894, 0.7750627398490906, 0.7903843522071838, 0.7827235460281372, 0.7860256433486938, 0.7959318161010742, 0.7964601516723633, 0.7984414100646973, 0.8063663840293884, 0.8009510040283203, 0.807158887386322, 0.8092722296714783, 0.8152159452438354, 0.8201030492782593, 0.8109893202781677, 0.8175934553146362, 0.8208954930305481, 0.8234050869941711, 0.8231409192085266, 0.8313300609588623, 0.8278959393501282, 0.8265751004219055, 0.8289526104927063, 0.8359529972076416, 0.8329150676727295, 0.8358209133148193, 0.8372738361358643, 0.8428213000297546, 0.8453308939933777, 0.8444063067436218, 0.8454629778862, 0.8459912538528442, 0.844010055065155, 0.8490291833877563, 0.8487650156021118, 0.8504821062088013, 0.8520671129226685, 0.8531237840652466, 0.8589354157447815, 0.8617091774940491, 0.8558974862098694, 0.8551049828529358, 0.8582749962806702], "val_loss": [1.9139289855957031, 1.1095064878463745, 0.9021852016448975, 0.7715529203414917, 0.7859216928482056, 0.7312944531440735, 0.728768527507782, 0.764205813407898, 0.6396651864051819, 0.6171290278434753, 0.6186301112174988, 0.5873421430587769, 0.5908757448196411, 0.5683871507644653, 0.5484189391136169, 0.5424994826316833, 0.5739277601242065, 0.5491642355918884, 0.560361385345459, 0.5394484996795654, 0.5183454751968384, 0.5189671516418457, 0.5205862522125244, 0.4987333118915558, 0.4898240566253662, 0.48279401659965515, 0.47486722469329834, 0.49651989340782166, 0.48917412757873535, 0.4679297208786011, 0.45996952056884766, 0.491858571767807, 0.47199746966362, 0.4506937265396118, 0.44801241159439087, 0.4713062345981598, 0.4390435516834259, 0.4419574439525604, 0.4564652144908905, 0.43650808930397034, 0.43728283047676086, 0.4220244884490967, 0.44956812262535095, 0.41738972067832947, 0.4244839549064636, 0.421464204788208, 0.40963050723075867, 0.4148118495941162, 0.42294999957084656, 0.41012999415397644, 0.4063013792037964, 0.4059555232524872, 0.40477684140205383, 0.40506869554519653, 0.41910839080810547, 0.4068789780139923, 0.4005434513092041], "val_accuracy": [0.5680000185966492, 0.6539999842643738, 0.6733333468437195, 0.7226666808128357, 0.6853333115577698, 0.7260000109672546, 0.7289999723434448, 0.7049999833106995, 0.7556666731834412, 0.7580000162124634, 0.7636666893959045, 0.777999997138977, 0.7806666493415833, 0.7823333144187927, 0.7870000004768372, 0.7943333387374878, 0.7596666812896729, 0.7839999794960022, 0.7730000019073486, 0.778333306312561, 0.8013333082199097, 0.7923333048820496, 0.7879999876022339, 0.8059999942779541, 0.8153333067893982, 0.8186666369438171, 0.8209999799728394, 0.8033333420753479, 0.8056666851043701, 0.8209999799728394, 0.8270000219345093, 0.8096666932106018, 0.8216666579246521, 0.8309999704360962, 0.8366666436195374, 0.8140000104904175, 0.8343333601951599, 0.8393333554267883, 0.828000009059906, 0.8429999947547913, 0.8353333473205566, 0.8483333587646484, 0.831333339214325, 0.8460000157356262, 0.8396666646003723, 0.8420000076293945, 0.8516666889190674, 0.8423333168029785, 0.8433333039283752, 0.847000002861023, 0.8479999899864197, 0.856333315372467, 0.8506666421890259, 0.846666693687439, 0.8456666469573975, 0.8526666760444641, 0.8506666421890259]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1], [0, 2, 0, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 7, 6, 3, 8, 2], [3, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 6, 0, 2, 5], [0, 6, 1], [0, 22], [1], [0], [2], [0]], "fitness": -0.18028570711612701, "mapping_values": [1, 7, 4, 3, 1, 4, 2, 2, 1, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.287580728530884, 2.317765951156616, 2.3122549057006836, 2.3112680912017822, 2.3160648345947266, 2.320495367050171], "accuracy": [0.11200633645057678, 0.10328886657953262, 0.09708096832036972, 0.09840179979801178, 0.1006472036242485, 0.09826971590518951], "val_loss": [2.0816783905029297, 2.310570001602173, 2.320248603820801, 2.324819326400757, 2.310030221939087, 2.3041555881500244], "val_accuracy": [0.18533332645893097, 0.0976666659116745, 0.10133333504199982, 0.10166666656732559, 0.10133333504199982, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 2, 3, 2, 3, 5], [2, 2, 1, 0, 1], [0, 51, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 2, 0, 6, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 0, 12, 7, 5, 2, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 65, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [5, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [1, 6, 1, 6, 0], [5, 39], [1], [0], [2], [0]], "fitness": -0.09342857450246811, "mapping_values": [1, 2, 1, 1, 1, 10, 6, 4, 1, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.309274435043335, 2.311358690261841, 2.310401678085327, 2.3087923526763916, 2.310703754425049, 2.3095805644989014], "accuracy": [0.0886276587843895, 0.09100515395402908, 0.09351472556591034, 0.09285431355237961, 0.09153348207473755, 0.08994849026203156], "val_loss": [2.3087453842163086, 2.3087453842163086, 2.3087453842163086, 2.3087453842163086, 2.3087453842163086, 2.3087453842163086], "val_accuracy": [0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 6, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 0, 2, 4, 2, 1, 0, 3, 4, 0, 8, 4, 3, 1, 5, 7, 6, 7], [0, 6, 1, 6, 3, 4, 3, 0, 5, 7, 6, 7, 3, 5], [0, 22], [1], [0], [2], [0]], "fitness": -0.09057142585515976, "mapping_values": [1, 8, 4, 4, 2, 10, 6, 4, 1, 33, 19, 14, 2, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.subtract(alpha, grad))), sigma)), tf.math.negative(tf.math.multiply(tf.math.pow(grad, tf.math.negative(tf.math.sqrt(sigma))), tf.math.pow(tf.math.multiply(tf.math.subtract(tf.math.square(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.divide_no_nan(tf.math.add(grad, grad), grad), grad)), sigma), grad))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.310458183288574, 2.309215545654297, 2.3100225925445557, 2.3093466758728027, 2.3094663619995117, 2.3088083267211914], "accuracy": [0.09285431355237961, 0.09192973375320435, 0.09179764986038208, 0.09140139818191528, 0.09694888442754745, 0.09351472556591034], "val_loss": [2.308840751647949, 2.308840751647949, 2.308840751647949, 2.308840751647949, 2.308840751647949, 2.308840751647949], "val_accuracy": [0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446]}}]