[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8205714225769043, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2126858234405518, 1.6015986204147339, 1.1248871088027954, 0.981107234954834, 0.8845002055168152, 0.8088362216949463, 0.7783482670783997, 0.7528970241546631, 0.7086068987846375, 0.7031569480895996, 0.6849845051765442, 0.6634070873260498, 0.643844723701477, 0.6550695896148682, 0.6214233040809631, 0.601015031337738, 0.5960069894790649, 0.6071067452430725, 0.5759557485580444, 0.574317216873169, 0.5485647916793823, 0.5597988963127136, 0.5444352030754089, 0.5442439317703247, 0.527306079864502, 0.5192117691040039, 0.5125945210456848, 0.4953579306602478], "accuracy": [0.26680755615234375, 0.5105006098747253, 0.6095628142356873, 0.6527539491653442, 0.6756042838096619, 0.7038700580596924, 0.709549605846405, 0.722229540348053, 0.7363624572753906, 0.7358341217041016, 0.7456082701683044, 0.7520803213119507, 0.7601373791694641, 0.7559106945991516, 0.7717606425285339, 0.7792893648147583, 0.7750627398490906, 0.7693831920623779, 0.7885351777076721, 0.7844406366348267, 0.7955356240272522, 0.7878747582435608, 0.7971205711364746, 0.7911768555641174, 0.8013472557067871, 0.8054417967796326, 0.8053097128868103, 0.8125742673873901], "val_loss": [1.92998468875885, 1.119704008102417, 0.9039071202278137, 0.8113405108451843, 0.7001597285270691, 0.6926990747451782, 0.6517533659934998, 0.6559967994689941, 0.6384640336036682, 0.5774030089378357, 0.5992077589035034, 0.5384168028831482, 0.5681309700012207, 0.5258771181106567, 0.5401111841201782, 0.5408455729484558, 0.5165687203407288, 0.5039368271827698, 0.49835383892059326, 0.48109546303749084, 0.48523226380348206, 0.48877978324890137, 0.46525394916534424, 0.47589111328125, 0.4609259068965912, 0.451509028673172, 0.45526960492134094, 0.4612604081630707], "val_accuracy": [0.5929999947547913, 0.637333333492279, 0.6753333210945129, 0.6806666851043701, 0.737666666507721, 0.7390000224113464, 0.7599999904632568, 0.7559999823570251, 0.7403333187103271, 0.7826666831970215, 0.7699999809265137, 0.7929999828338623, 0.7893333435058594, 0.809333324432373, 0.7973333597183228, 0.793666660785675, 0.8056666851043701, 0.8196666836738586, 0.8073333501815796, 0.8323333263397217, 0.8289999961853027, 0.8193333148956299, 0.8386666774749756, 0.8223333358764648, 0.8356666564941406, 0.8353333473205566, 0.8349999785423279, 0.8326666951179504]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 0, 0, 1, 2], [0, 39, 39], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 2, 6, 3, 8, 2], [2, 0, 2, 1, 0], [16, 1], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 5, 5, 2, 1], [3, 6, 1, 6, 4], [0, 22], [1], [0], [7], [0]], "fitness": -0.10685714334249496, "mapping_values": [1, 8, 4, 4, 3, 3, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.4144139289855957, 2.3037075996398926, 2.3031318187713623, 2.3027658462524414, 2.2873125076293945, 2.4517698287963867, 2.308875799179077, 2.303546667098999, 2.3030331134796143], "accuracy": [0.1760665625333786, 0.10091137140989304, 0.09708096832036972, 0.09708096832036972, 0.12732796370983124, 0.2071060687303543, 0.10645885765552521, 0.10540219396352768, 0.10342095047235489], "val_loss": [2.3039634227752686, 2.3028640747070312, 2.3026556968688965, 2.301631212234497, 2.2902114391326904, 2.31484317779541, 2.302748441696167, 2.303907632827759, 2.302541494369507], "val_accuracy": [0.09866666793823242, 0.10166666656732559, 0.0963333323597908, 0.11133333295583725, 0.10266666859388351, 0.09933333098888397, 0.10333333164453506, 0.09933333098888397, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 2, 2, 7, 3, 5], [0, 2, 2, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0], [6, 7, 0, 6, 3, 4, 2, 4, 8, 9], [0, 0, 3, 1, 0, 4, 2], [16, 1, 89, 90], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1], [0, 2, 0, 2, 5, 2, 6], [0, 6, 1, 6, 0], [0, 65], [1], [0], [3], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 2, 2, 1, 17, 10, 7, 4, 5, 3, 2, 1, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.add(grad, alpha)), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.sqrt(grad), beta))), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [389.9765625, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.21503104269504547, 0.09853387624025345, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [17519845376.0, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0949999988079071, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 0, 2, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 7, 6, 2, 8, 8], [2, 0, 3, 3, 0], [79, 99], [0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 2, 4, 2, 5, 2, 1], [0, 6, 1, 4], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 11, 6, 5, 2, 9, 5, 4, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), grad), grad)), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.square(alpha))), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [3.700105289645908e+33, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10659094154834747, 0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [Infinity, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 4, 3, 5], [0, 3, 2, 0, 2], [0, 39, 39], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 3, 6, 3, 8, 2], [2, 5, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1, 3, 9, 1, 8, 5, 3, 2, 8, 6, 1, 3, 4], [0, 2, 1, 6, 0, 4, 5, 6, 3, 7, 6, 2], [0, 86, 96], [1], [0], [2], [0]], "fitness": -0.09399999678134918, "mapping_values": [1, 11, 6, 5, 2, 5, 3, 2, 0, 31, 19, 12, 3, 1, 0, 1, 0], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(alpha, tf.math.sqrt(tf.math.square(grad))))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(grad, tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.multiply(tf.math.pow(grad, sigma), grad), grad))), beta)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.309581756591797, 2.3100662231445312, 2.3094966411590576, 2.309619903564453, 2.3110508918762207, 2.310924768447876], "accuracy": [0.09615638852119446, 0.09311848133802414, 0.09047681838274002, 0.09100515395402908, 0.09259014576673508, 0.09087307006120682], "val_loss": [2.3082058429718018, 2.3082058429718018, 2.3082058429718018, 2.3082058429718018, 2.3082058429718018, 2.3082058429718018], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}]