[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8631428480148315, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223928689956665, 1.872135043144226, 1.390397310256958, 1.0875040292739868, 0.931922197341919, 0.8290881514549255, 0.7621635794639587, 0.7358366250991821, 0.6876312494277954, 0.6563035845756531, 0.632442831993103, 0.6164954900741577, 0.5919244885444641, 0.5829605460166931, 0.5681706070899963, 0.551311194896698, 0.5422223210334778, 0.5306169390678406, 0.5158964395523071, 0.5077179670333862, 0.4938583970069885, 0.4909801781177521, 0.472075492143631, 0.46755272150039673, 0.45282891392707825, 0.450733482837677, 0.4415033757686615, 0.43196871876716614, 0.4266049265861511, 0.4195760488510132, 0.4036409556865692, 0.41181185841560364, 0.4037378430366516, 0.3987623155117035, 0.39144524931907654, 0.3831365406513214, 0.3774571716785431, 0.3773548901081085, 0.37000641226768494, 0.37040963768959045, 0.35662633180618286, 0.3529205620288849, 0.34859052300453186, 0.34740111231803894, 0.3431754410266876, 0.3304647207260132, 0.33423659205436707, 0.32423707842826843, 0.317550390958786, 0.31134310364723206, 0.3143421411514282, 0.3092615604400635, 0.3013363182544708, 0.30147886276245117, 0.30022352933883667, 0.2933639585971832, 0.27748826146125793, 0.2872168719768524, 0.27495163679122925, 0.28196606040000916, 0.2748720347881317, 0.2668215036392212], "accuracy": [0.27182671427726746, 0.4843481779098511, 0.5692775249481201, 0.6180161237716675, 0.6664905548095703, 0.7096816897392273, 0.7265883088111877, 0.7358341217041016, 0.7518161535263062, 0.7691190242767334, 0.7758552432060242, 0.780610203742981, 0.7880068421363831, 0.7873464822769165, 0.7981772422790527, 0.804649293422699, 0.8057059645652771, 0.8127063512802124, 0.8212917447090149, 0.8182538747787476, 0.8280280232429504, 0.8259146809577942, 0.8360850811004639, 0.830669641494751, 0.8388587832450867, 0.8401796221733093, 0.8474441766738892, 0.8459912538528442, 0.8504821062088013, 0.8533879518508911, 0.8552370667457581, 0.8578787446022034, 0.8585391640663147, 0.8584070801734924, 0.863558292388916, 0.8634262084960938, 0.8651432991027832, 0.869502067565918, 0.8689737319946289, 0.8687095642089844, 0.8742570281028748, 0.8767666220664978, 0.8761062026023865, 0.8759741187095642, 0.8808611631393433, 0.8811253309249878, 0.8791441321372986, 0.8825782537460327, 0.8842953443527222, 0.8878615498542786, 0.8873332738876343, 0.8873332738876343, 0.8918240666389465, 0.8906353116035461, 0.8956544995307922, 0.8927486538887024, 0.9017302989959717, 0.898428201675415, 0.8968431949615479, 0.895918607711792, 0.9008057117462158, 0.9055606722831726], "val_loss": [2.041461229324341, 1.5221993923187256, 1.0419083833694458, 0.8351836204528809, 0.7462688684463501, 0.6923638582229614, 0.643740177154541, 0.6188275814056396, 0.5925360918045044, 0.5641840100288391, 0.5494758486747742, 0.5344474911689758, 0.5222393274307251, 0.5135359168052673, 0.498867392539978, 0.4879835546016693, 0.47785335779190063, 0.4717300534248352, 0.459615558385849, 0.4544309079647064, 0.4460260272026062, 0.4410524368286133, 0.43367627263069153, 0.4334241449832916, 0.42625245451927185, 0.42908453941345215, 0.41702795028686523, 0.41337865591049194, 0.41185876727104187, 0.40558576583862305, 0.40207770466804504, 0.39767247438430786, 0.39823001623153687, 0.3899371027946472, 0.38812580704689026, 0.38980916142463684, 0.3853013515472412, 0.3854421377182007, 0.3790302872657776, 0.3830221891403198, 0.3774715065956116, 0.372773677110672, 0.3729594647884369, 0.3734579384326935, 0.3685547709465027, 0.36629387736320496, 0.3631603717803955, 0.36494937539100647, 0.36158642172813416, 0.36197590827941895, 0.3622815012931824, 0.35914355516433716, 0.36035293340682983, 0.3598179221153259, 0.3588697612285614, 0.3523533046245575, 0.3551984131336212, 0.3536922335624695, 0.35718396306037903, 0.3527745008468628, 0.35123372077941895, 0.35508397221565247], "val_accuracy": [0.5559999942779541, 0.6493333578109741, 0.6809999942779541, 0.7183333039283752, 0.7433333396911621, 0.7563333511352539, 0.7680000066757202, 0.7789999842643738, 0.7850000262260437, 0.7963333129882812, 0.8019999861717224, 0.8140000104904175, 0.8163333535194397, 0.8133333325386047, 0.8230000138282776, 0.8276666402816772, 0.8316666483879089, 0.8343333601951599, 0.8389999866485596, 0.8416666388511658, 0.8456666469573975, 0.843999981880188, 0.8493333458900452, 0.8486666679382324, 0.8463333249092102, 0.8460000157356262, 0.8553333282470703, 0.8553333282470703, 0.8603333234786987, 0.8606666922569275, 0.8600000143051147, 0.8619999885559082, 0.8586666584014893, 0.8640000224113464, 0.8640000224113464, 0.8633333444595337, 0.8650000095367432, 0.8653333187103271, 0.8659999966621399, 0.8613333106040955, 0.8673333525657654, 0.8683333396911621, 0.8666666746139526, 0.8696666955947876, 0.8730000257492065, 0.8696666955947876, 0.8713333606719971, 0.8686666488647461, 0.871666669845581, 0.8733333349227905, 0.875333309173584, 0.8713333606719971, 0.8766666650772095, 0.8706666827201843, 0.8736666440963745, 0.8763333559036255, 0.8796666860580444, 0.8796666860580444, 0.875333309173584, 0.878000020980835, 0.8756666779518127, 0.8766666650772095]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8605714440345764, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2235360145568848, 1.8652989864349365, 1.3916027545928955, 1.0994335412979126, 0.9393782019615173, 0.8363612294197083, 0.7791241407394409, 0.7336828708648682, 0.6945117712020874, 0.6548944711685181, 0.6320593953132629, 0.6096011996269226, 0.5911142230033875, 0.5747931599617004, 0.5571113228797913, 0.5466029644012451, 0.5354469418525696, 0.521047830581665, 0.5202981233596802, 0.5010934472084045, 0.48941224813461304, 0.4815727472305298, 0.46832120418548584, 0.45941561460494995, 0.4535755217075348, 0.44510936737060547, 0.4419773519039154, 0.43145719170570374, 0.4290418028831482, 0.4239885210990906, 0.4145141839981079, 0.4080060124397278, 0.3918980360031128, 0.3933616578578949, 0.3913589119911194, 0.38463902473449707, 0.3789762556552887, 0.3790574371814728, 0.3683769702911377, 0.3579856753349304, 0.3559558391571045, 0.3479899764060974, 0.3422865569591522, 0.34200963377952576, 0.33467134833335876, 0.33479052782058716, 0.325227290391922, 0.31978124380111694, 0.3167150914669037, 0.31432753801345825, 0.3031212389469147, 0.3039191961288452, 0.3030201196670532, 0.29674580693244934, 0.28724345564842224, 0.28860029578208923], "accuracy": [0.27222296595573425, 0.4880464971065521, 0.5643904209136963, 0.6123365759849548, 0.661471426486969, 0.7038700580596924, 0.7140403985977173, 0.7351737022399902, 0.748249888420105, 0.7670056819915771, 0.769911527633667, 0.7766477465629578, 0.7905164361000061, 0.7940827012062073, 0.798309326171875, 0.8037247657775879, 0.8075551390647888, 0.8145555257797241, 0.8115176558494568, 0.8227446675300598, 0.8300092220306396, 0.8273676037788391, 0.8304054737091064, 0.8352925777435303, 0.8343679904937744, 0.841500461101532, 0.8417646288871765, 0.8474441766738892, 0.8442742228507996, 0.8486329317092896, 0.8495575189590454, 0.8584070801734924, 0.8621054291725159, 0.8594637513160706, 0.8589354157447815, 0.8639545440673828, 0.8607845902442932, 0.86553955078125, 0.8709549307823181, 0.8728041052818298, 0.8713511824607849, 0.8766345381736755, 0.8809932470321655, 0.8761062026023865, 0.8802007436752319, 0.8812574148178101, 0.8824461698532104, 0.8879936337471008, 0.8868049383163452, 0.887597382068634, 0.8923524022102356, 0.889050304889679, 0.8901069760322571, 0.8948619961738586, 0.8990886211395264, 0.8948619961738586], "val_loss": [2.035839080810547, 1.5084822177886963, 1.0419069528579712, 0.845371425151825, 0.7604301571846008, 0.7078641057014465, 0.6651561856269836, 0.6297493577003479, 0.6033005118370056, 0.5839208960533142, 0.5628786087036133, 0.5496494174003601, 0.5371343493461609, 0.5215692520141602, 0.5108463168144226, 0.5038920640945435, 0.49606335163116455, 0.4896065294742584, 0.4780194163322449, 0.4720064401626587, 0.4631800949573517, 0.4576348066329956, 0.45565298199653625, 0.45175161957740784, 0.43782955408096313, 0.43519487977027893, 0.4357883334159851, 0.4325140118598938, 0.4324336647987366, 0.4221412241458893, 0.41978251934051514, 0.4125496745109558, 0.415750116109848, 0.40992221236228943, 0.4062342643737793, 0.4033883512020111, 0.4064905643463135, 0.40712809562683105, 0.4050113558769226, 0.39720600843429565, 0.39169010519981384, 0.39479124546051025, 0.3921564519405365, 0.38689908385276794, 0.38601595163345337, 0.38549235463142395, 0.38880154490470886, 0.3840125799179077, 0.3869875371456146, 0.3827342092990875, 0.3778060972690582, 0.37982237339019775, 0.37563762068748474, 0.375629723072052, 0.3806134760379791, 0.37296465039253235], "val_accuracy": [0.5566666722297668, 0.6523333191871643, 0.6850000023841858, 0.7176666855812073, 0.7396666407585144, 0.7546666860580444, 0.7646666765213013, 0.7730000019073486, 0.7823333144187927, 0.7913333177566528, 0.7996666431427002, 0.8026666641235352, 0.8090000152587891, 0.815666675567627, 0.8196666836738586, 0.8223333358764648, 0.8186666369438171, 0.8226666450500488, 0.8306666612625122, 0.8339999914169312, 0.8379999995231628, 0.8393333554267883, 0.8333333134651184, 0.8366666436195374, 0.8429999947547913, 0.843666672706604, 0.8396666646003723, 0.843666672706604, 0.8506666421890259, 0.8519999980926514, 0.8483333587646484, 0.8573333621025085, 0.8519999980926514, 0.8539999723434448, 0.859000027179718, 0.8603333234786987, 0.8539999723434448, 0.8546666502952576, 0.8536666631698608, 0.8606666922569275, 0.8656666874885559, 0.8650000095367432, 0.859666645526886, 0.8663333058357239, 0.8693333268165588, 0.8723333477973938, 0.8613333106040955, 0.8653333187103271, 0.8683333396911621, 0.8703333139419556, 0.8730000257492065, 0.8653333187103271, 0.8696666955947876, 0.8700000047683716, 0.8653333187103271, 0.8629999756813049]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 1, 0], [0, 1, 9], [0], [0, 18], [1], [0], [2], [0]], "fitness": -0.8254285454750061, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5464017391204834, 0.8296853303909302, 0.6748021841049194, 0.6234803795814514, 0.590031623840332, 0.6040563583374023, 0.5685719847679138, 0.5705944895744324, 0.5241342782974243, 0.5727890729904175, 0.5537942051887512, 0.549293577671051], "accuracy": [0.47404569387435913, 0.7131158113479614, 0.7467969655990601, 0.7688548564910889, 0.7709681391716003, 0.78113853931427, 0.7956677079200745, 0.7943468689918518, 0.807158887386322, 0.8068947196006775, 0.8068947196006775, 0.7905164361000061], "val_loss": [0.8826174139976501, 0.6685206890106201, 0.5708977580070496, 0.5587127208709717, 0.5584335327148438, 0.5536139607429504, 0.5493175983428955, 0.5452112555503845, 0.6154285669326782, 0.581007719039917, 0.5404177308082581, 0.5756567120552063], "val_accuracy": [0.7039999961853027, 0.7513333559036255, 0.7836666703224182, 0.7866666913032532, 0.8003333210945129, 0.8069999814033508, 0.824999988079071, 0.8153333067893982, 0.8109999895095825, 0.8190000057220459, 0.8186666369438171, 0.8236666917800903]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 4, 3, 1, 2, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0], [0, 8, 9], [0], [0], [0, 0], [0, 9], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.7808571457862854, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2917935848236084, 2.1871635913848877, 1.7598257064819336, 1.3469098806381226, 1.0816408395767212, 0.9187464118003845, 0.8454325795173645, 0.8115789294242859, 0.773003339767456, 0.7505093812942505, 0.7116873264312744, 0.6861940026283264, 0.6523774266242981, 0.6380274295806885, 0.6237302422523499, 0.6042616963386536, 0.5948490500450134], "accuracy": [0.1298375427722931, 0.3303394615650177, 0.4434024691581726, 0.5452384352684021, 0.6415268778800964, 0.6720380187034607, 0.6886804699897766, 0.6940959095954895, 0.7124554514884949, 0.7103421092033386, 0.7343811988830566, 0.7465327978134155, 0.7421740889549255, 0.7598732113838196, 0.7675340175628662, 0.767401933670044, 0.7773081660270691], "val_loss": [2.245183229446411, 2.0134494304656982, 1.1088122129440308, 0.8243265151977539, 0.7462249994277954, 0.6844832301139832, 0.6285660862922668, 0.6280477046966553, 0.6176921129226685, 0.5742871761322021, 0.5613042116165161, 0.5271132588386536, 0.5292763113975525, 0.52581787109375, 0.5107017159461975, 0.4932062029838562, 0.4914688766002655], "val_accuracy": [0.4320000112056732, 0.4363333284854889, 0.6570000052452087, 0.7009999752044678, 0.7283333539962769, 0.7409999966621399, 0.7609999775886536, 0.7536666393280029, 0.7676666378974915, 0.7726666927337646, 0.7743333578109741, 0.7956666946411133, 0.7929999828338623, 0.7866666913032532, 0.7923333048820496, 0.7950000166893005, 0.7940000295639038]}, "mapping_values": [1, 10, 5, 5, 3, 3, 3, 0, 1, 2, 2, 0, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 77], [0, 0, 1, 1, 1], [0, 5, 1], [0, 3], [0], [0, 0, 0, 0, 1], [0, 2, 9, 0], [0], [0, 86], [0, 1, 0], [1, 9], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 3, 3, 2, 1, 1, 5, 4, 1, 2, 3, 2, 1, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09192973375320435, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 2, 3, 0, 3, 2, 9, 4, 2, 1, 3, 6, 9], [0, 1, 0, 2, 0, 3, 0, 2, 0], [39, 39, 25, 82, 10, 39, 97], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 3], [0, 2, 0, 3, 0], [16, 16, 60], [0, 1], [5], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 3, 1, 4, 1, 4, 3, 8], [0, 1, 0, 3, 2, 0, 3, 1, 2, 0], [2, 99, 9, 99, 61, 94]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 13, 9, 7, 11, 6, 5, 3, 2, 1, 1, 1, 17, 8, 9, 3], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(grad, tf.math.multiply(tf.math.divide_no_nan(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, beta)), tf.math.pow(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha))), beta))", "other_info": {"loss": [1.1156686432829125e+21, 1.213435037363928e+30, 1.8544899405529294e+30, 1.8544896383214745e+30, 1.854489789437202e+30, 2.787447584008974e+31, 5.705566025578781e+31], "accuracy": [0.1006472036242485, 0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.10236428678035736], "val_loss": [5.65386756784234e+25, 1.8546809508324285e+30, 1.8546809508324285e+30, 1.8546809508324285e+30, 1.8546809508324285e+30, 4.534195244765317e+31, 6.144073401713334e+31], "val_accuracy": [0.10000000149011612, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.09433333575725555]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 0, 3], [0, 1, 0, 2], [39, 40], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 2, 3, 2, 3, 5, 8, 2], [0, 2, 2, 3, 4, 5], [16, 0], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 3, 0, 3, 0, 0, 3, 1, 2, 4], [65, 47, 96, 99, 61, 71]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 14, 8, 6, 1, 2, 1, 1, 0, 21, 11, 10, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.square(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta)), grad), grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(sigma, tf.math.pow(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 3, 3, 3], [1, 0, 1, 2, 2], [83, 99, 27], [0, 0, 0, 1, 1], [0, 0, 1], [0, 3], [0], [1, 0, 1, 0, 1], [3, 2, 9, 0], [0], [0, 86], [1, 0], [4], [1], [0]], "fitness": -0.0917142853140831, "mapping_values": [1, 1, 0, 1, 0, 5, 3, 2, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.309297800064087, 2.310037612915039, 2.3090620040893555, 2.30940318107605, 2.309680223464966, 2.3095192909240723], "accuracy": [0.08968432247638702, 0.09021265059709549, 0.09298639744520187, 0.09153348207473755, 0.08730682730674744, 0.09496764093637466], "val_loss": [2.3092336654663086, 2.3092336654663086, 2.3092336654663086, 2.3092336654663086, 2.3092336654663086, 2.3092336654663086], "val_accuracy": [0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446]}}]