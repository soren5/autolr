[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8768571615219116, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222250461578369, 1.8634382486343384, 1.386461853981018, 1.0833044052124023, 0.9265413284301758, 0.8440244197845459, 0.7689846158027649, 0.7217835783958435, 0.6946391463279724, 0.6591481566429138, 0.6302332282066345, 0.6071098446846008, 0.58745938539505, 0.5740339159965515, 0.5700055360794067, 0.5476945638656616, 0.5300565958023071, 0.515175998210907, 0.5132865309715271, 0.49766114354133606, 0.4853062033653259, 0.4709930121898651, 0.4710473418235779, 0.45622146129608154, 0.4409819543361664, 0.44101276993751526, 0.42332780361175537, 0.42639458179473877, 0.413105309009552, 0.4150063693523407, 0.4078751504421234, 0.3973477780818939, 0.39182016253471375, 0.3888950049877167, 0.3774554133415222, 0.3726383447647095, 0.3688918352127075, 0.3662937879562378, 0.34987398982048035, 0.35581469535827637, 0.34829020500183105, 0.33901554346084595, 0.33875879645347595, 0.33434274792671204, 0.3242861330509186, 0.3246440291404724, 0.316322922706604, 0.3147198557853699, 0.30453887581825256, 0.30218783020973206, 0.3011622130870819, 0.2966826260089874], "accuracy": [0.2744683623313904, 0.4897635579109192, 0.5694096088409424, 0.6217144131660461, 0.6646413803100586, 0.6939638257026672, 0.7255316376686096, 0.7404569983482361, 0.7494386434555054, 0.7559106945991516, 0.7676661014556885, 0.7788931727409363, 0.7827235460281372, 0.7905164361000061, 0.7917051911354065, 0.7971205711364746, 0.8080834746360779, 0.8150838613510132, 0.8153480291366577, 0.8183859586715698, 0.8239334225654602, 0.830669641494751, 0.8300092220306396, 0.8387266993522644, 0.8397833704948425, 0.8421608805656433, 0.8455950617790222, 0.8449346423149109, 0.852331280708313, 0.8475762605667114, 0.850350022315979, 0.8577466607093811, 0.8562937378883362, 0.8622375130653381, 0.8676528930664062, 0.8672566413879395, 0.867520809173584, 0.8693699836730957, 0.8765024542808533, 0.8693699836730957, 0.8729361891746521, 0.8742570281028748, 0.8754457831382751, 0.878351628780365, 0.8824461698532104, 0.8805969953536987, 0.8819178342819214, 0.8868049383163452, 0.887597382068634, 0.8906353116035461, 0.887201189994812, 0.8918240666389465], "val_loss": [2.0386195182800293, 1.5141637325286865, 1.0538526773452759, 0.8596723675727844, 0.7759342193603516, 0.7192841172218323, 0.6771690249443054, 0.6437584757804871, 0.6193508505821228, 0.5922199487686157, 0.5729194283485413, 0.5551856756210327, 0.5385822653770447, 0.5257654786109924, 0.5165361166000366, 0.5011810660362244, 0.4919561743736267, 0.48552361130714417, 0.47933295369148254, 0.4656471014022827, 0.4598849415779114, 0.45053231716156006, 0.4469571113586426, 0.437753826379776, 0.434342622756958, 0.42675578594207764, 0.4235270917415619, 0.4175274670124054, 0.41885218024253845, 0.4114329516887665, 0.4080221652984619, 0.403830349445343, 0.40030863881111145, 0.3936823010444641, 0.39308154582977295, 0.3908149003982544, 0.38946422934532166, 0.38555654883384705, 0.385292649269104, 0.37694936990737915, 0.3787061274051666, 0.3754332959651947, 0.37116917967796326, 0.3721087574958801, 0.36685043573379517, 0.36866259574890137, 0.3663710057735443, 0.36438125371932983, 0.3633136749267578, 0.36815738677978516, 0.3613807260990143, 0.3633389472961426], "val_accuracy": [0.5276666879653931, 0.6579999923706055, 0.6809999942779541, 0.7016666531562805, 0.7269999980926514, 0.7383333444595337, 0.7506666779518127, 0.7563333511352539, 0.7643333077430725, 0.7766666412353516, 0.7789999842643738, 0.7913333177566528, 0.79666668176651, 0.8036666512489319, 0.8026666641235352, 0.8106666803359985, 0.8183333277702332, 0.8220000267028809, 0.8230000138282776, 0.8293333053588867, 0.831333339214325, 0.8403333425521851, 0.8343333601951599, 0.8423333168029785, 0.8403333425521851, 0.8443333506584167, 0.8450000286102295, 0.8473333120346069, 0.8479999899864197, 0.846666693687439, 0.8566666841506958, 0.8539999723434448, 0.8546666502952576, 0.8583333492279053, 0.8573333621025085, 0.8600000143051147, 0.859666645526886, 0.8603333234786987, 0.8616666793823242, 0.8673333525657654, 0.8629999756813049, 0.8666666746139526, 0.8646666407585144, 0.8646666407585144, 0.8706666827201843, 0.8673333525657654, 0.8726666569709778, 0.8659999966621399, 0.8703333139419556, 0.8643333315849304, 0.8693333268165588, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8505714535713196, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222816944122314, 1.8704657554626465, 1.39720618724823, 1.0996184349060059, 0.9379794597625732, 0.8486579060554504, 0.772354781627655, 0.7144333124160767, 0.6725675463676453, 0.6492160558700562, 0.6239071488380432, 0.6002792716026306, 0.5770940184593201, 0.5655441880226135, 0.543927013874054, 0.5352296233177185, 0.5204405188560486, 0.5052978992462158, 0.4953197240829468, 0.4829278588294983, 0.4771503210067749, 0.46944403648376465, 0.44931936264038086, 0.4472918212413788, 0.43707263469696045, 0.43558943271636963, 0.42340320348739624, 0.4200993478298187, 0.4131934344768524, 0.40061479806900024, 0.39139172434806824, 0.38930240273475647, 0.3824036121368408, 0.3835749328136444, 0.3711465001106262, 0.36718958616256714, 0.3601566255092621, 0.3548261821269989, 0.35225725173950195, 0.3369835615158081, 0.3437519371509552, 0.33172404766082764, 0.33059778809547424, 0.3217534124851227, 0.32113921642303467, 0.3216190040111542, 0.3122648000717163, 0.3043208420276642, 0.30580630898475647, 0.29859161376953125, 0.2891356945037842, 0.29608696699142456, 0.28840407729148865, 0.27609145641326904, 0.27834755182266235, 0.26845583319664, 0.2713388204574585, 0.2699686884880066, 0.2644329071044922, 0.25402528047561646, 0.2551795542240143, 0.2430998980998993, 0.2456735074520111, 0.24331752955913544, 0.2386023998260498, 0.23800165951251984, 0.23287610709667206, 0.2278233766555786, 0.2298545241355896, 0.22858582437038422, 0.224314346909523, 0.21268481016159058, 0.2085358202457428, 0.2114015519618988, 0.20839940011501312, 0.20700575411319733, 0.2073974460363388, 0.2017146199941635, 0.19972597062587738, 0.18934279680252075, 0.19190461933612823, 0.18732576072216034, 0.17928259074687958, 0.1864216923713684], "accuracy": [0.27261921763420105, 0.48646149039268494, 0.5667679309844971, 0.6192048788070679, 0.6668868064880371, 0.6983225345611572, 0.7257958054542542, 0.7411174178123474, 0.7569673657417297, 0.7691190242767334, 0.7741381525993347, 0.7825914621353149, 0.7905164361000061, 0.798309326171875, 0.8034605979919434, 0.8115176558494568, 0.8140271902084351, 0.8195747137069702, 0.8249900937080383, 0.8240655064582825, 0.8276317715644836, 0.833179235458374, 0.8424250483512878, 0.8438779711723328, 0.8444063067436218, 0.8477083444595337, 0.850350022315979, 0.850350022315979, 0.8511425256729126, 0.8588033318519592, 0.8627657890319824, 0.8650112152099609, 0.8631620407104492, 0.8640866279602051, 0.8673887252807617, 0.8671245574951172, 0.8721436858177185, 0.8737286925315857, 0.8776912093162537, 0.8784837126731873, 0.8765024542808533, 0.8824461698532104, 0.8813894987106323, 0.8842953443527222, 0.8848236799240112, 0.8857482671737671, 0.886672854423523, 0.889050304889679, 0.8907673954963684, 0.8944657444953918, 0.8965790271759033, 0.8919561505317688, 0.8976356983184814, 0.9002773761749268, 0.8982961177825928, 0.9025228023529053, 0.9015982151031494, 0.9043719172477722, 0.9056927561759949, 0.9076740145683289, 0.9058248400688171, 0.9099194407463074, 0.9121648669242859, 0.9117686152458191, 0.9116365313529968, 0.9165235757827759, 0.9163914918899536, 0.9170519113540649, 0.9158631563186646, 0.9167877435684204, 0.9206181764602661, 0.9233918786048889, 0.9243164658546448, 0.9261656403541565, 0.9248448014259338, 0.9257693886756897, 0.9211464524269104, 0.9266939759254456, 0.9293355941772461, 0.9314489364624023, 0.9309206008911133, 0.9319772720336914, 0.9350152015686035, 0.9313168525695801], "val_loss": [2.038069486618042, 1.5110751390457153, 1.034847617149353, 0.8270336389541626, 0.7427911758422852, 0.6836289167404175, 0.6405945420265198, 0.6042395234107971, 0.5795652866363525, 0.561665952205658, 0.5455366969108582, 0.5301762819290161, 0.5161959528923035, 0.5072619915008545, 0.49385949969291687, 0.48584163188934326, 0.48521459102630615, 0.47553515434265137, 0.4781094491481781, 0.4622361660003662, 0.45261889696121216, 0.4497508108615875, 0.4436756670475006, 0.4333304762840271, 0.43239423632621765, 0.4291275143623352, 0.4214450418949127, 0.4172336757183075, 0.41666537523269653, 0.4129728078842163, 0.41670921444892883, 0.403975248336792, 0.40554800629615784, 0.40017396211624146, 0.3978389501571655, 0.39738383889198303, 0.39600056409835815, 0.3883984684944153, 0.3904787600040436, 0.38620877265930176, 0.38258740305900574, 0.38709989190101624, 0.38267654180526733, 0.37740442156791687, 0.3810703456401825, 0.37869563698768616, 0.3764173686504364, 0.3757135272026062, 0.3725574016571045, 0.37347713112831116, 0.3722164034843445, 0.3713217079639435, 0.3651520907878876, 0.37059447169303894, 0.36233484745025635, 0.3689650893211365, 0.3678135573863983, 0.361636221408844, 0.3616167902946472, 0.367279976606369, 0.3622099757194519, 0.35805240273475647, 0.3564973473548889, 0.3581407964229584, 0.3638099730014801, 0.3570234477519989, 0.3533991277217865, 0.3604792058467865, 0.36015379428863525, 0.35522136092185974, 0.355121374130249, 0.35372164845466614, 0.35453465580940247, 0.350887656211853, 0.3611583113670349, 0.36184749007225037, 0.3549472689628601, 0.3559705317020416, 0.35215237736701965, 0.35563305020332336, 0.3567218780517578, 0.35215622186660767, 0.36201152205467224, 0.34957799315452576], "val_accuracy": [0.5166666507720947, 0.6633333563804626, 0.6819999814033508, 0.7076666951179504, 0.734333336353302, 0.75, 0.7639999985694885, 0.7773333191871643, 0.7806666493415833, 0.7953333258628845, 0.796999990940094, 0.8119999766349792, 0.8143333196640015, 0.8166666626930237, 0.82833331823349, 0.8246666789054871, 0.8263333439826965, 0.8273333311080933, 0.8226666450500488, 0.8349999785423279, 0.840666651725769, 0.8393333554267883, 0.8443333506584167, 0.8489999771118164, 0.8453333377838135, 0.8443333506584167, 0.8519999980926514, 0.8529999852180481, 0.8510000109672546, 0.8503333330154419, 0.8489999771118164, 0.8566666841506958, 0.8583333492279053, 0.859000027179718, 0.859333336353302, 0.8586666584014893, 0.8610000014305115, 0.8640000224113464, 0.8629999756813049, 0.8633333444595337, 0.8656666874885559, 0.8603333234786987, 0.8636666536331177, 0.8656666874885559, 0.8663333058357239, 0.8659999966621399, 0.8673333525657654, 0.8690000176429749, 0.8673333525657654, 0.8686666488647461, 0.8690000176429749, 0.8703333139419556, 0.8733333349227905, 0.8700000047683716, 0.874666690826416, 0.8690000176429749, 0.8730000257492065, 0.8713333606719971, 0.8759999871253967, 0.8696666955947876, 0.8723333477973938, 0.8756666779518127, 0.8793333172798157, 0.8773333430290222, 0.8766666650772095, 0.8766666650772095, 0.8763333559036255, 0.8799999952316284, 0.8769999742507935, 0.874666690826416, 0.8796666860580444, 0.8790000081062317, 0.8806666731834412, 0.8793333172798157, 0.8799999952316284, 0.8843333125114441, 0.8806666731834412, 0.8833333253860474, 0.8889999985694885, 0.8799999952316284, 0.8830000162124634, 0.8830000162124634, 0.8840000033378601, 0.8863333463668823]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0, 0, 1, 1, 1], [0, 7, 6, 8], [0, 5, 5], [0], [0, 0, 1], [0, 5], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.845714271068573, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2940752506256104, 2.189009189605713, 1.7740052938461304, 1.3388652801513672, 1.0700814723968506, 0.9071667790412903, 0.8360781073570251, 0.8005115389823914, 0.7444738149642944, 0.7277024388313293, 0.688642680644989, 0.6683503985404968, 0.642889678478241, 0.6169193387031555, 0.6039486527442932, 0.5842057466506958, 0.5846508145332336, 0.5566011667251587, 0.5471808314323425, 0.5349072813987732, 0.5238091945648193, 0.5104086399078369, 0.5154865384101868, 0.4903604984283447, 0.4968404173851013, 0.4658273160457611, 0.46898481249809265, 0.4558187425136566, 0.450063556432724, 0.4531764090061188, 0.4346485733985901, 0.43637022376060486, 0.4247826039791107, 0.4108636677265167, 0.4007059931755066, 0.4100817143917084, 0.4010901153087616, 0.38613834977149963], "accuracy": [0.1278562992811203, 0.3303394615650177, 0.44366663694381714, 0.5444459319114685, 0.6326773166656494, 0.6627922058105469, 0.691850483417511, 0.7074362635612488, 0.713908314704895, 0.7160216569900513, 0.7400607466697693, 0.7395324110984802, 0.7543256878852844, 0.7611940503120422, 0.770439863204956, 0.7766477465629578, 0.7807422876358032, 0.7872143983840942, 0.7898560166358948, 0.796328067779541, 0.8009510040283203, 0.8047813773155212, 0.8020076751708984, 0.8157442808151245, 0.816008448600769, 0.8232730031013489, 0.8202351331710815, 0.8239334225654602, 0.8315942287445068, 0.8278959393501282, 0.8313300609588623, 0.8358209133148193, 0.8379341959953308, 0.8428213000297546, 0.8430854678153992, 0.8432175517082214, 0.8470479249954224, 0.8539162874221802], "val_loss": [2.246107339859009, 2.020146369934082, 1.1330647468566895, 0.8674396872520447, 0.763892412185669, 0.689009428024292, 0.6700851321220398, 0.6479892730712891, 0.6265917420387268, 0.5937818884849548, 0.5672152042388916, 0.5573728084564209, 0.5425653457641602, 0.5364506840705872, 0.5248072147369385, 0.5251929759979248, 0.5208742022514343, 0.5093541145324707, 0.5015450716018677, 0.4888124465942383, 0.48659366369247437, 0.49320197105407715, 0.47249260544776917, 0.4712594747543335, 0.4688449203968048, 0.4588741362094879, 0.4521532356739044, 0.4569506347179413, 0.45129358768463135, 0.43893423676490784, 0.4322047829627991, 0.42486295104026794, 0.4239449203014374, 0.42288467288017273, 0.42866194248199463, 0.41740962862968445, 0.41685861349105835, 0.41279736161231995], "val_accuracy": [0.43533334136009216, 0.46700000762939453, 0.6489999890327454, 0.6916666626930237, 0.7246666550636292, 0.7336666584014893, 0.7446666955947876, 0.750333309173584, 0.7536666393280029, 0.7683333158493042, 0.7726666927337646, 0.7900000214576721, 0.7863333225250244, 0.8043333292007446, 0.8033333420753479, 0.8046666383743286, 0.8086666464805603, 0.8016666769981384, 0.8136666417121887, 0.8183333277702332, 0.8299999833106995, 0.8163333535194397, 0.8259999752044678, 0.8293333053588867, 0.8339999914169312, 0.8356666564941406, 0.8370000123977661, 0.8336666822433472, 0.8373333215713501, 0.8373333215713501, 0.8343333601951599, 0.8399999737739563, 0.8523333072662354, 0.8523333072662354, 0.8453333377838135, 0.8476666808128357, 0.8493333458900452, 0.8506666421890259]}, "mapping_values": [1, 10, 5, 5, 3, 7, 4, 3, 1, 3, 2, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 1], [0, 4, 0], [0, 3], [0], [1], [0], [2], [0]], "fitness": -0.8159999847412109, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.4884716272354126, 0.7612907290458679, 0.6184908747673035, 0.5798336267471313, 0.5654517412185669, 0.5508425831794739, 0.5070227384567261, 0.4821262061595917, 0.5162675976753235, 0.48956042528152466, 0.5173432230949402, 0.5028352737426758, 0.5085640549659729, 0.5587752461433411], "accuracy": [0.4859331548213959, 0.7316074371337891, 0.7725531458854675, 0.7798177003860474, 0.7980451583862305, 0.8087438941001892, 0.816008448600769, 0.8257825970649719, 0.8251221776008606, 0.8170651197433472, 0.8239334225654602, 0.8253863453865051, 0.8335754871368408, 0.8140271902084351], "val_loss": [0.7800442576408386, 0.5736933350563049, 0.5027654767036438, 0.4967232942581177, 0.4989217221736908, 0.4876083433628082, 0.487572580575943, 0.5247145891189575, 0.49131861329078674, 0.5434579849243164, 0.5178461670875549, 0.5293717980384827, 0.5517978072166443, 0.651356041431427], "val_accuracy": [0.7223333120346069, 0.7903333306312561, 0.8213333487510681, 0.8180000185966492, 0.8259999752044678, 0.8309999704360962, 0.8370000123977661, 0.8293333053588867, 0.8383333086967468, 0.8379999995231628, 0.8343333601951599, 0.8339999914169312, 0.8299999833106995, 0.8236666917800903]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 5, 3, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 9], [0, 1, 0, 2], [39, 49], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 0], [16, 16], [0, 1], [0], [2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 5, 2, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [99, 53, 49, 99, 65, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 6, 3, 3, 2, 2, 1, 1, 0, 17, 9, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(grad)))), sigma), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 4, 0, 3], [0, 1, 0, 2], [39, 39], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 6, 8], [0, 3, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [8, 3, 3, 6, 8, 1, 4, 1, 4, 2, 9], [0, 0, 0, 0, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 67, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 1, 0, 1, 1, 2, 1, 1, 1, 17, 9, 8, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), sigma)))), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 1], [0, 1, 0, 2, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 70], [1, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 2, 9, 6, 2, 6, 9], [0, 0, 0, 3, 4, 4, 3, 1, 2, 0, 1, 5], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 2, 1, 0, 1, 1, 29, 17, 12, 6], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, grad)), tf.math.pow(tf.math.subtract(tf.math.pow(grad, tf.math.add(sigma, tf.math.sqrt(tf.math.add(alpha, beta)))), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), alpha), grad), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 52], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 0, 21, 11, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}]