[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8768571615219116, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222250461578369, 1.8634382486343384, 1.386461853981018, 1.0833044052124023, 0.9265413284301758, 0.8440244197845459, 0.7689846158027649, 0.7217835783958435, 0.6946391463279724, 0.6591481566429138, 0.6302332282066345, 0.6071098446846008, 0.58745938539505, 0.5740339159965515, 0.5700055360794067, 0.5476945638656616, 0.5300565958023071, 0.515175998210907, 0.5132865309715271, 0.49766114354133606, 0.4853062033653259, 0.4709930121898651, 0.4710473418235779, 0.45622146129608154, 0.4409819543361664, 0.44101276993751526, 0.42332780361175537, 0.42639458179473877, 0.413105309009552, 0.4150063693523407, 0.4078751504421234, 0.3973477780818939, 0.39182016253471375, 0.3888950049877167, 0.3774554133415222, 0.3726383447647095, 0.3688918352127075, 0.3662937879562378, 0.34987398982048035, 0.35581469535827637, 0.34829020500183105, 0.33901554346084595, 0.33875879645347595, 0.33434274792671204, 0.3242861330509186, 0.3246440291404724, 0.316322922706604, 0.3147198557853699, 0.30453887581825256, 0.30218783020973206, 0.3011622130870819, 0.2966826260089874], "accuracy": [0.2744683623313904, 0.4897635579109192, 0.5694096088409424, 0.6217144131660461, 0.6646413803100586, 0.6939638257026672, 0.7255316376686096, 0.7404569983482361, 0.7494386434555054, 0.7559106945991516, 0.7676661014556885, 0.7788931727409363, 0.7827235460281372, 0.7905164361000061, 0.7917051911354065, 0.7971205711364746, 0.8080834746360779, 0.8150838613510132, 0.8153480291366577, 0.8183859586715698, 0.8239334225654602, 0.830669641494751, 0.8300092220306396, 0.8387266993522644, 0.8397833704948425, 0.8421608805656433, 0.8455950617790222, 0.8449346423149109, 0.852331280708313, 0.8475762605667114, 0.850350022315979, 0.8577466607093811, 0.8562937378883362, 0.8622375130653381, 0.8676528930664062, 0.8672566413879395, 0.867520809173584, 0.8693699836730957, 0.8765024542808533, 0.8693699836730957, 0.8729361891746521, 0.8742570281028748, 0.8754457831382751, 0.878351628780365, 0.8824461698532104, 0.8805969953536987, 0.8819178342819214, 0.8868049383163452, 0.887597382068634, 0.8906353116035461, 0.887201189994812, 0.8918240666389465], "val_loss": [2.0386195182800293, 1.5141637325286865, 1.0538526773452759, 0.8596723675727844, 0.7759342193603516, 0.7192841172218323, 0.6771690249443054, 0.6437584757804871, 0.6193508505821228, 0.5922199487686157, 0.5729194283485413, 0.5551856756210327, 0.5385822653770447, 0.5257654786109924, 0.5165361166000366, 0.5011810660362244, 0.4919561743736267, 0.48552361130714417, 0.47933295369148254, 0.4656471014022827, 0.4598849415779114, 0.45053231716156006, 0.4469571113586426, 0.437753826379776, 0.434342622756958, 0.42675578594207764, 0.4235270917415619, 0.4175274670124054, 0.41885218024253845, 0.4114329516887665, 0.4080221652984619, 0.403830349445343, 0.40030863881111145, 0.3936823010444641, 0.39308154582977295, 0.3908149003982544, 0.38946422934532166, 0.38555654883384705, 0.385292649269104, 0.37694936990737915, 0.3787061274051666, 0.3754332959651947, 0.37116917967796326, 0.3721087574958801, 0.36685043573379517, 0.36866259574890137, 0.3663710057735443, 0.36438125371932983, 0.3633136749267578, 0.36815738677978516, 0.3613807260990143, 0.3633389472961426], "val_accuracy": [0.5276666879653931, 0.6579999923706055, 0.6809999942779541, 0.7016666531562805, 0.7269999980926514, 0.7383333444595337, 0.7506666779518127, 0.7563333511352539, 0.7643333077430725, 0.7766666412353516, 0.7789999842643738, 0.7913333177566528, 0.79666668176651, 0.8036666512489319, 0.8026666641235352, 0.8106666803359985, 0.8183333277702332, 0.8220000267028809, 0.8230000138282776, 0.8293333053588867, 0.831333339214325, 0.8403333425521851, 0.8343333601951599, 0.8423333168029785, 0.8403333425521851, 0.8443333506584167, 0.8450000286102295, 0.8473333120346069, 0.8479999899864197, 0.846666693687439, 0.8566666841506958, 0.8539999723434448, 0.8546666502952576, 0.8583333492279053, 0.8573333621025085, 0.8600000143051147, 0.859666645526886, 0.8603333234786987, 0.8616666793823242, 0.8673333525657654, 0.8629999756813049, 0.8666666746139526, 0.8646666407585144, 0.8646666407585144, 0.8706666827201843, 0.8673333525657654, 0.8726666569709778, 0.8659999966621399, 0.8703333139419556, 0.8643333315849304, 0.8693333268165588, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8654285669326782, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221762180328369, 1.8632090091705322, 1.3892251253128052, 1.09567391872406, 0.9385700821876526, 0.8526105284690857, 0.7949221134185791, 0.7279919385910034, 0.6946175694465637, 0.6698650121688843, 0.6380500197410583, 0.6179060935974121, 0.6046843528747559, 0.5829291343688965, 0.5669810771942139, 0.5613151788711548, 0.5383509993553162, 0.5286790132522583, 0.5185531377792358, 0.5077927708625793, 0.50135338306427, 0.48308107256889343, 0.4791717827320099, 0.4739840030670166, 0.462912380695343, 0.45217636227607727, 0.44462713599205017, 0.44408103823661804, 0.42831307649612427, 0.43102651834487915, 0.4168790876865387, 0.4129425585269928, 0.41096752882003784, 0.4000982344150543, 0.3887608051300049, 0.3879391849040985, 0.39130595326423645, 0.3776663541793823, 0.3705125153064728, 0.3731353282928467, 0.3669705092906952, 0.3618667423725128, 0.35336267948150635, 0.3595246374607086, 0.3425533175468445, 0.33709877729415894, 0.3327328860759735, 0.3297298550605774, 0.32400697469711304, 0.31773900985717773, 0.3189966380596161, 0.3116579055786133, 0.302285373210907, 0.30327075719833374, 0.3050003945827484, 0.3012591600418091, 0.28507474064826965, 0.2762080729007721, 0.28223568201065063, 0.27767908573150635, 0.2687452733516693, 0.2713790833950043, 0.26589345932006836, 0.2572549283504486, 0.2545897662639618], "accuracy": [0.26958128809928894, 0.49108439683914185, 0.5650508403778076, 0.6184123754501343, 0.6679434776306152, 0.6929071545600891, 0.7160216569900513, 0.7388719916343689, 0.7425703406333923, 0.7573636174201965, 0.7683265209197998, 0.7730814814567566, 0.7791573405265808, 0.7881389260292053, 0.7965922355651855, 0.7975168228149414, 0.8074230551719666, 0.8095363974571228, 0.8108572363853455, 0.8162726163864136, 0.8215559124946594, 0.829216718673706, 0.8284242749214172, 0.8314621448516846, 0.8304054737091064, 0.8393871188163757, 0.8408400416374207, 0.8428213000297546, 0.8470479249954224, 0.8461233377456665, 0.8477083444595337, 0.8516708612442017, 0.8568220734596252, 0.8556333184242249, 0.8628978729248047, 0.863558292388916, 0.8605204224586487, 0.8685774803161621, 0.8654074668884277, 0.8661999702453613, 0.8714832663536072, 0.8684453964233398, 0.8716153502464294, 0.8735966086387634, 0.878351628780365, 0.8805969953536987, 0.8812574148178101, 0.8817857503890991, 0.8844274282455444, 0.8862766027450562, 0.8849557638168335, 0.8870691061019897, 0.8882578015327454, 0.8924844861030579, 0.8907673954963684, 0.891559898853302, 0.8980319499969482, 0.8982961177825928, 0.8992207050323486, 0.9014661312103271, 0.9034473896026611, 0.9035794734954834, 0.9033153057098389, 0.9063531756401062, 0.9088627696037292], "val_loss": [2.038341999053955, 1.513564944267273, 1.061765193939209, 0.8726619482040405, 0.7892543077468872, 0.743744969367981, 0.6864254474639893, 0.6518180966377258, 0.6244626641273499, 0.606460452079773, 0.5825533270835876, 0.5649902820587158, 0.5510894656181335, 0.5363311171531677, 0.5269292593002319, 0.5162482261657715, 0.500307023525238, 0.49713727831840515, 0.4852932393550873, 0.4833683669567108, 0.473353773355484, 0.46600598096847534, 0.4591866731643677, 0.4512147903442383, 0.447432279586792, 0.44040393829345703, 0.43812358379364014, 0.43110230565071106, 0.4226348102092743, 0.4250844419002533, 0.4147799015045166, 0.4172254204750061, 0.4139680862426758, 0.4127123951911926, 0.4075065851211548, 0.40190616250038147, 0.3988778591156006, 0.3956643044948578, 0.3984794020652771, 0.38851383328437805, 0.3942365348339081, 0.3923676013946533, 0.3864244520664215, 0.3791629374027252, 0.3761862814426422, 0.37842199206352234, 0.3760867416858673, 0.37112635374069214, 0.36986109614372253, 0.36736229062080383, 0.3769715428352356, 0.369731605052948, 0.36574968695640564, 0.36815837025642395, 0.364169180393219, 0.3609200417995453, 0.3578362762928009, 0.3573325276374817, 0.3539508581161499, 0.35403522849082947, 0.354213148355484, 0.35305339097976685, 0.3508615791797638, 0.3509453237056732, 0.3456107974052429], "val_accuracy": [0.5306666493415833, 0.6493333578109741, 0.6636666655540466, 0.6949999928474426, 0.7106666564941406, 0.7250000238418579, 0.7476666569709778, 0.7553333044052124, 0.7559999823570251, 0.7793333530426025, 0.7896666526794434, 0.7946666479110718, 0.8050000071525574, 0.8119999766349792, 0.8069999814033508, 0.8133333325386047, 0.8220000267028809, 0.824999988079071, 0.824999988079071, 0.8259999752044678, 0.831333339214325, 0.8306666612625122, 0.8336666822433472, 0.8360000252723694, 0.8393333554267883, 0.840666651725769, 0.8403333425521851, 0.8423333168029785, 0.8476666808128357, 0.8426666855812073, 0.8519999980926514, 0.8473333120346069, 0.8510000109672546, 0.8443333506584167, 0.8510000109672546, 0.8529999852180481, 0.8556666374206543, 0.8566666841506958, 0.8543333411216736, 0.8576666712760925, 0.8573333621025085, 0.8543333411216736, 0.8583333492279053, 0.859666645526886, 0.8646666407585144, 0.862333357334137, 0.8646666407585144, 0.8643333315849304, 0.8686666488647461, 0.8690000176429749, 0.8610000014305115, 0.8663333058357239, 0.8703333139419556, 0.8656666874885559, 0.871666669845581, 0.8683333396911621, 0.8726666569709778, 0.875333309173584, 0.8713333606719971, 0.8786666393280029, 0.8763333559036255, 0.8763333559036255, 0.8756666779518127, 0.8733333349227905, 0.8776666522026062]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1], [0, 8], [0], [0], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.845714271068573, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2925374507904053, 2.1867432594299316, 1.7602702379226685, 1.3048523664474487, 1.0662225484848022, 0.8953908681869507, 0.823688805103302, 0.8157554268836975, 0.745292067527771, 0.7260980010032654, 0.6995949149131775, 0.6695654988288879, 0.6385232210159302, 0.6211819052696228, 0.5952660441398621, 0.5850864052772522, 0.5780858397483826, 0.5595269203186035, 0.5477294921875, 0.5378755331039429, 0.5340250730514526, 0.5198286771774292, 0.5078174471855164, 0.4957902431488037, 0.4928264915943146, 0.47364023327827454, 0.45920777320861816, 0.4601012170314789, 0.4521312415599823, 0.447581946849823, 0.44416624307632446, 0.4215507209300995, 0.4174758791923523, 0.407629132270813, 0.4069230258464813], "accuracy": [0.1278562992811203, 0.31779158115386963, 0.43666622042655945, 0.5564654469490051, 0.6384889483451843, 0.6802271604537964, 0.6948884129524231, 0.7100779414176941, 0.7066437602043152, 0.7235503792762756, 0.7302865982055664, 0.7452120184898376, 0.7544577717781067, 0.7611940503120422, 0.7664773464202881, 0.7749306559562683, 0.7730814814567566, 0.7853652238845825, 0.791441023349762, 0.7931581139564514, 0.798309326171875, 0.8020076751708984, 0.8074230551719666, 0.8090080618858337, 0.8144234418869019, 0.817461371421814, 0.8234050869941711, 0.8260467648506165, 0.8267071843147278, 0.8301413059234619, 0.8314621448516846, 0.8387266993522644, 0.8424250483512878, 0.8474441766738892, 0.8424250483512878], "val_loss": [2.244617462158203, 2.0090928077697754, 1.113845944404602, 0.8677479028701782, 0.7484975457191467, 0.6994851231575012, 0.6788195967674255, 0.6530060768127441, 0.6389741897583008, 0.6153103709220886, 0.5771855711936951, 0.5549551844596863, 0.5420432686805725, 0.5375660061836243, 0.5386713743209839, 0.5220724940299988, 0.5165830850601196, 0.5094203352928162, 0.5029959082603455, 0.4940967559814453, 0.48871105909347534, 0.49061572551727295, 0.4828439950942993, 0.4688481092453003, 0.46392831206321716, 0.4622250199317932, 0.4569377303123474, 0.45800715684890747, 0.4490152597427368, 0.44871455430984497, 0.4362098276615143, 0.4325200915336609, 0.43510210514068604, 0.42509913444519043, 0.42583078145980835], "val_accuracy": [0.4286666810512543, 0.4729999899864197, 0.6596666574478149, 0.6953333616256714, 0.7196666598320007, 0.7433333396911621, 0.7473333477973938, 0.765666663646698, 0.7519999742507935, 0.762333333492279, 0.7726666927337646, 0.7856666445732117, 0.7886666655540466, 0.8033333420753479, 0.8003333210945129, 0.8059999942779541, 0.8016666769981384, 0.800000011920929, 0.8186666369438171, 0.8206666707992554, 0.8276666402816772, 0.8276666402816772, 0.8233333230018616, 0.8383333086967468, 0.8383333086967468, 0.8376666903495789, 0.8433333039283752, 0.8399999737739563, 0.8446666598320007, 0.8503333330154419, 0.8479999899864197, 0.8456666469573975, 0.8496666550636292, 0.8496666550636292, 0.8476666808128357]}, "mapping_values": [1, 10, 5, 5, 3, 3, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8442857265472412, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5737143754959106, 0.8636460900306702, 0.7315877676010132, 0.6452099680900574, 0.612734317779541, 0.5512741804122925, 0.5225292444229126, 0.5282949805259705, 0.5036224722862244, 0.478873610496521, 0.48612990975379944, 0.43678683042526245, 0.4575473964214325, 0.47437673807144165, 0.5041640400886536, 0.5010908842086792, 0.47957631945610046, 0.5165724158287048, 0.49866539239883423, 0.4924750030040741, 0.5056319236755371, 0.546765923500061], "accuracy": [0.4694227874279022, 0.7096816897392273, 0.7412495017051697, 0.7647602558135986, 0.7666094303131104, 0.7967243194580078, 0.8029322624206543, 0.8136309385299683, 0.822348415851593, 0.8289526104927063, 0.8261788487434387, 0.8352925777435303, 0.8437458872795105, 0.8409721255302429, 0.8260467648506165, 0.8366134166717529, 0.83119797706604, 0.8253863453865051, 0.8248580098152161, 0.8342359066009521, 0.8330471515655518, 0.8182538747787476], "val_loss": [0.8162620663642883, 0.6644324660301208, 0.5832237601280212, 0.5450724363327026, 0.5219025611877441, 0.5156112909317017, 0.5060751438140869, 0.5379796624183655, 0.48779651522636414, 0.5045781135559082, 0.4860607981681824, 0.4635922312736511, 0.5123612284660339, 0.4954588711261749, 0.5468317270278931, 0.5567917227745056, 0.5153486132621765, 0.5294874906539917, 0.5747148990631104, 0.6062085628509521, 0.5533407330513, 0.6111658811569214], "val_accuracy": [0.731333315372467, 0.7676666378974915, 0.79666668176651, 0.7953333258628845, 0.815666675567627, 0.8289999961853027, 0.8306666612625122, 0.8273333311080933, 0.8320000171661377, 0.8426666855812073, 0.8420000076293945, 0.847000002861023, 0.8493333458900452, 0.8456666469573975, 0.8370000123977661, 0.8363333344459534, 0.8516666889190674, 0.8363333344459534, 0.8370000123977661, 0.8476666808128357, 0.8370000123977661, 0.8226666450500488]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1], [2, 2, 3, 0, 3, 7, 4, 2, 1, 2, 6, 5, 7, 7, 0, 1, 7, 3, 7, 8, 4, 4, 7, 4, 6, 9, 1, 2, 6, 5, 9], [2, 1, 0, 2, 2, 2, 0, 0, 1, 0, 0, 0, 2, 2, 1, 2, 2, 1, 3, 1, 1, 1, 3], [39, 63, 6, 84, 61, 88, 77, 28], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5, 5, 8], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 2, 4, 1, 2, 4, 2, 2, 8, 8, 0, 5, 2], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 4, 1], [33, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 54, 31, 23, 8, 12, 8, 4, 2, 2, 1, 1, 1, 27, 15, 12, 6], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(tf.math.pow(tf.math.add(grad, tf.math.subtract(tf.math.add(tf.math.divide_no_nan(tf.math.square(tf.math.add(grad, tf.math.add(tf.math.negative(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))), alpha), tf.math.subtract(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.multiply(grad, tf.math.add(tf.math.sqrt(grad), tf.math.pow(tf.math.pow(tf.math.add(alpha, grad), grad), tf.math.pow(tf.math.divide_no_nan(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), alpha), grad)))), tf.math.subtract(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.square(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), alpha)))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha)), tf.math.add(tf.math.sqrt(tf.math.sqrt(beta)), tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.add(grad, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0], [0, 4, 3, 0, 3, 1, 3, 8, 7, 5, 5, 9], [0, 1, 0, 2, 1, 3], [39, 39, 62], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 0, 1, 1], [2, 6], [0, 7, 1], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 0, 2, 8, 3, 1, 2, 3, 4], [4, 4, 0, 3, 0, 0, 3, 4, 1, 4, 2, 3, 3, 1], [16, 99, 61, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 12, 6, 3, 10, 6, 4, 2, 5, 2, 3, 1, 30, 16, 14, 3], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.multiply(alpha, tf.math.sqrt(tf.math.add(tf.math.square(tf.math.square(grad)), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(grad, grad), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.multiply(tf.math.subtract(sigma, grad), tf.math.add(alpha, tf.math.multiply(tf.math.pow(grad, beta), sigma))))))), sigma)), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [8, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [95, 16], [0, 1], [0], [4], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 5, 0, 8, 4], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0, 4], [16, 22, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 10, 6, 4, 2, 2, 1, 1, 0, 26, 15, 11, 5], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma), tf.math.sqrt(tf.math.square(alpha))), beta)), tf.math.negative(tf.math.sqrt(tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), grad))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1022322028875351, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 0], [0, 2, 3, 0, 3], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 1, 0, 3], [16, 56], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 4, 3, 4, 0, 3, 1, 2, 0], [16, 99, 96, 99, 90, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 2, 2, 1, 1, 1, 16, 8, 8, 3], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), tf.math.subtract(grad, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), sigma), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}]