[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222564220428467, 1.8654934167861938, 1.392636775970459, 1.0800100564956665, 0.9349965453147888, 0.83723384141922, 0.771166205406189, 0.7229189872741699, 0.6917352080345154, 0.6532851457595825, 0.6217012405395508, 0.6138775944709778, 0.5917757749557495, 0.5793368220329285, 0.5567960739135742, 0.5480981469154358, 0.5474538803100586, 0.5317270755767822, 0.5151227116584778, 0.5055264234542847, 0.5014929175376892, 0.4862228035926819, 0.4727080464363098, 0.47010233998298645, 0.46293196082115173, 0.4504174590110779, 0.447412371635437, 0.4438058137893677, 0.42948198318481445, 0.417126327753067, 0.4136964678764343, 0.40704113245010376, 0.4020131528377533, 0.39997783303260803, 0.39442774653434753, 0.3916949927806854, 0.38260385394096375, 0.3716582953929901, 0.3650337755680084, 0.3573426902294159, 0.36132100224494934, 0.3564379811286926, 0.3445151448249817, 0.33812835812568665, 0.3384065330028534, 0.3359524607658386, 0.33294373750686646, 0.3212839663028717, 0.3217304050922394, 0.3110441267490387, 0.31119072437286377], "accuracy": [0.2685246467590332, 0.4955752193927765, 0.5610883831977844, 0.6197332143783569, 0.6668868064880371, 0.6963412761688232, 0.7205125093460083, 0.7349095344543457, 0.7469290494918823, 0.7604015469551086, 0.7732135653495789, 0.7761194109916687, 0.7878747582435608, 0.7901201844215393, 0.8009510040283203, 0.802271842956543, 0.8050455451011658, 0.8103289008140564, 0.8158763647079468, 0.8197067975997925, 0.817461371421814, 0.8255184292793274, 0.8273676037788391, 0.8333113193511963, 0.832650899887085, 0.8392550349235535, 0.8367455005645752, 0.8408400416374207, 0.8474441766738892, 0.8475762605667114, 0.8519350290298462, 0.8545766472816467, 0.8574824929237366, 0.8544445633888245, 0.8589354157447815, 0.8561616539955139, 0.8632941246032715, 0.8640866279602051, 0.869502067565918, 0.8702945709228516, 0.8702945709228516, 0.8689737319946289, 0.8772949576377869, 0.8754457831382751, 0.8767666220664978, 0.8809932470321655, 0.8776912093162537, 0.8853520154953003, 0.8811253309249878, 0.8886540532112122, 0.8885219693183899], "val_loss": [2.042604923248291, 1.5189800262451172, 1.0515391826629639, 0.8450219035148621, 0.7558016777038574, 0.7093545794487, 0.6593213081359863, 0.6230939030647278, 0.5998342037200928, 0.5830129981040955, 0.5592260956764221, 0.5484577417373657, 0.5345214009284973, 0.5245682597160339, 0.508945107460022, 0.5038147568702698, 0.4949795603752136, 0.4867953658103943, 0.47808560729026794, 0.4682127833366394, 0.46202969551086426, 0.4617370665073395, 0.4514632225036621, 0.4495610296726227, 0.4391477108001709, 0.43453720211982727, 0.42648962140083313, 0.42570948600769043, 0.4242604672908783, 0.4146496057510376, 0.41664713621139526, 0.4113439619541168, 0.41593310236930847, 0.4013250470161438, 0.40437138080596924, 0.39875122904777527, 0.3905998170375824, 0.3918660581111908, 0.38664665818214417, 0.3956036865711212, 0.38548287749290466, 0.3855803310871124, 0.3777529299259186, 0.3802799582481384, 0.3779101073741913, 0.371540904045105, 0.3776323199272156, 0.36875513195991516, 0.37442195415496826, 0.3655129075050354, 0.3628164827823639], "val_accuracy": [0.5523333549499512, 0.6656666398048401, 0.6830000281333923, 0.7059999704360962, 0.7336666584014893, 0.7506666779518127, 0.7580000162124634, 0.7689999938011169, 0.7736666798591614, 0.7846666574478149, 0.7950000166893005, 0.7963333129882812, 0.7993333339691162, 0.8100000023841858, 0.8173333406448364, 0.8190000057220459, 0.8213333487510681, 0.8209999799728394, 0.8286666870117188, 0.828000009059906, 0.8323333263397217, 0.8336666822433472, 0.8333333134651184, 0.8349999785423279, 0.8386666774749756, 0.8393333554267883, 0.8429999947547913, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8446666598320007, 0.8463333249092102, 0.8503333330154419, 0.8529999852180481, 0.8493333458900452, 0.8550000190734863, 0.8546666502952576, 0.856333315372467, 0.8613333106040955, 0.856333315372467, 0.859000027179718, 0.8550000190734863, 0.8586666584014893, 0.8633333444595337, 0.8619999885559082, 0.8659999966621399, 0.859666645526886, 0.862666666507721, 0.8603333234786987, 0.8610000014305115, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8745714426040649, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2231686115264893, 1.8649824857711792, 1.3993884325027466, 1.1030185222625732, 0.9598729014396667, 0.8596564531326294, 0.7939105033874512, 0.7428277134895325, 0.7115520238876343, 0.6797494888305664, 0.6391962170600891, 0.6291797757148743, 0.6071638464927673, 0.5892506837844849, 0.5699688792228699, 0.5636062622070312, 0.539218008518219, 0.527066707611084, 0.5157309174537659, 0.5056756138801575, 0.4989616572856903, 0.48164692521095276, 0.47671592235565186, 0.4684586524963379, 0.46032875776290894, 0.45250341296195984, 0.4523196220397949, 0.4376569092273712, 0.4341622292995453, 0.43009474873542786, 0.4237276315689087, 0.41711607575416565, 0.40938782691955566, 0.39546844363212585, 0.3954678475856781, 0.3895909786224365, 0.38619464635849, 0.38025975227355957, 0.37286630272865295, 0.367608904838562, 0.36577218770980835, 0.3568339943885803, 0.35110756754875183, 0.3500657081604004, 0.3465604782104492, 0.3351832926273346, 0.3418825566768646, 0.3324635624885559, 0.32469967007637024, 0.3244048058986664, 0.3151073455810547], "accuracy": [0.2690529525279999, 0.48064985871315, 0.5634658336639404, 0.6190727949142456, 0.6572447419166565, 0.6930392384529114, 0.7117950320243835, 0.7313432693481445, 0.7469290494918823, 0.7504953145980835, 0.7617223858833313, 0.7712323069572449, 0.7832518815994263, 0.7909126877784729, 0.7988376617431641, 0.7977809906005859, 0.8029322624206543, 0.8099326491355896, 0.81112140417099, 0.8170651197433472, 0.8168009519577026, 0.8284242749214172, 0.8293488025665283, 0.8325188159942627, 0.8366134166717529, 0.8367455005645752, 0.834632158279419, 0.8438779711723328, 0.8442742228507996, 0.8428213000297546, 0.8487650156021118, 0.8502179384231567, 0.8500858545303345, 0.8569541573524475, 0.8551049828529358, 0.8581429123878479, 0.8565579056739807, 0.8582749962806702, 0.8631620407104492, 0.8647470474243164, 0.8683133125305176, 0.8671245574951172, 0.8712190985679626, 0.8734645247459412, 0.8766345381736755, 0.8803328275680542, 0.872407853603363, 0.8802007436752319, 0.8805969953536987, 0.8819178342819214, 0.8856161832809448], "val_loss": [2.035486936569214, 1.5054290294647217, 1.0345039367675781, 0.8274362087249756, 0.7410980463027954, 0.6920605301856995, 0.6451215744018555, 0.6134656071662903, 0.5851303935050964, 0.5653886198997498, 0.5472683310508728, 0.531930685043335, 0.5158513784408569, 0.5067989230155945, 0.502210795879364, 0.4863050878047943, 0.4772290885448456, 0.4742817282676697, 0.46290430426597595, 0.4556516408920288, 0.4511314332485199, 0.4414195120334625, 0.43843114376068115, 0.4308493137359619, 0.4247997999191284, 0.4272248446941376, 0.4174351692199707, 0.4109717905521393, 0.40762510895729065, 0.4006468653678894, 0.39924952387809753, 0.39907941222190857, 0.3926195800304413, 0.3923303484916687, 0.38507917523384094, 0.38290178775787354, 0.38205525279045105, 0.384479820728302, 0.37404194474220276, 0.37816014885902405, 0.3680415153503418, 0.3634914457798004, 0.3690432906150818, 0.3660067021846771, 0.36001354455947876, 0.3609398305416107, 0.36652231216430664, 0.35429847240448, 0.35788390040397644, 0.3541150689125061, 0.34860554337501526], "val_accuracy": [0.5059999823570251, 0.6576666831970215, 0.6830000281333923, 0.7106666564941406, 0.7350000143051147, 0.7513333559036255, 0.7683333158493042, 0.7736666798591614, 0.7850000262260437, 0.7950000166893005, 0.800000011920929, 0.8059999942779541, 0.8153333067893982, 0.8183333277702332, 0.8240000009536743, 0.8256666660308838, 0.8293333053588867, 0.8273333311080933, 0.8363333344459534, 0.8353333473205566, 0.8376666903495789, 0.8429999947547913, 0.847000002861023, 0.8513333201408386, 0.8483333587646484, 0.8476666808128357, 0.8513333201408386, 0.8576666712760925, 0.8503333330154419, 0.8550000190734863, 0.8560000061988831, 0.8583333492279053, 0.8619999885559082, 0.8583333492279053, 0.8613333106040955, 0.8643333315849304, 0.8636666536331177, 0.8603333234786987, 0.8656666874885559, 0.8646666407585144, 0.8669999837875366, 0.8703333139419556, 0.8713333606719971, 0.8683333396911621, 0.8690000176429749, 0.8730000257492065, 0.8683333396911621, 0.8713333606719971, 0.8669999837875366, 0.8709999918937683, 0.8709999918937683]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 1], [0], [0], [0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 5, 1, 1, 8, 2], [0, 1, 2, 6], [0], [0, 1], [0], [1], [0]], "fitness": -0.8471428751945496, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.math.sqrt(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.293081521987915, 2.188427686691284, 1.7730156183242798, 1.3550225496292114, 1.0698498487472534, 0.9123245477676392, 0.8316032290458679, 0.8132184743881226, 0.7639191150665283, 0.7414242625236511, 0.7035269141197205, 0.6785106658935547, 0.6636121869087219, 0.6291274428367615, 0.6207675933837891, 0.5991145968437195, 0.5918506979942322, 0.5695726871490479, 0.5645301938056946, 0.5488871335983276, 0.5283801555633545, 0.5176132917404175, 0.5120951533317566, 0.5039485096931458, 0.49523529410362244, 0.4725690484046936, 0.47317570447921753, 0.47181352972984314, 0.4490438997745514, 0.4491696059703827, 0.43087977170944214, 0.4278477728366852, 0.4169470965862274, 0.4139209985733032, 0.40906932950019836, 0.39478740096092224, 0.38743436336517334, 0.38893604278564453], "accuracy": [0.12679962813854218, 0.33139610290527344, 0.4367983043193817, 0.5420684218406677, 0.6321489810943604, 0.6616035103797913, 0.6950204968452454, 0.7121912837028503, 0.7063795924186707, 0.7223616242408752, 0.7269845604896545, 0.7397965788841248, 0.7556465268135071, 0.7563069462776184, 0.7586844563484192, 0.7684586048126221, 0.7734777331352234, 0.7862898111343384, 0.7873464822769165, 0.7921014428138733, 0.7957997918128967, 0.7997622489929199, 0.800818920135498, 0.8047813773155212, 0.8099326491355896, 0.8175934553146362, 0.817461371421814, 0.8190463781356812, 0.8265751004219055, 0.8294808864593506, 0.8363492488861084, 0.832650899887085, 0.8359529972076416, 0.8428213000297546, 0.8474441766738892, 0.8495575189590454, 0.8485008478164673, 0.8494254350662231], "val_loss": [2.2450032234191895, 2.0145230293273926, 1.120247483253479, 0.8480045795440674, 0.7605612874031067, 0.6949064135551453, 0.6741727590560913, 0.6443893909454346, 0.6449347734451294, 0.5982058644294739, 0.5814117193222046, 0.5494507551193237, 0.5392426252365112, 0.5391672253608704, 0.5288755893707275, 0.5185518264770508, 0.5131868124008179, 0.5066930651664734, 0.49392202496528625, 0.48680248856544495, 0.4793679118156433, 0.472685307264328, 0.46118801832199097, 0.4551572799682617, 0.4543204605579376, 0.45039770007133484, 0.43975910544395447, 0.43948739767074585, 0.4209134876728058, 0.4278455376625061, 0.4313434362411499, 0.4208184480667114, 0.4165482521057129, 0.4310472905635834, 0.41318607330322266, 0.41290509700775146, 0.41732120513916016, 0.4261641800403595], "val_accuracy": [0.4230000078678131, 0.45366665720939636, 0.656000018119812, 0.6983333230018616, 0.7310000061988831, 0.7553333044052124, 0.7613333463668823, 0.7666666507720947, 0.7749999761581421, 0.7710000276565552, 0.7743333578109741, 0.7839999794960022, 0.7926666736602783, 0.7986666560173035, 0.7923333048820496, 0.8006666898727417, 0.8040000200271606, 0.8023333549499512, 0.8149999976158142, 0.8206666707992554, 0.8149999976158142, 0.82833331823349, 0.8363333344459534, 0.8259999752044678, 0.8326666951179504, 0.8389999866485596, 0.8483333587646484, 0.8460000157356262, 0.8546666502952576, 0.8513333201408386, 0.847000002861023, 0.8519999980926514, 0.8556666374206543, 0.8486666679382324, 0.8543333411216736, 0.8556666374206543, 0.8533333539962769, 0.8523333072662354]}, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 10, 6, 4, 1, 2, 1, 1, 0], "tree_depth": 15}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8377143144607544, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.6036256551742554, 0.8273647427558899, 0.662900447845459, 0.603986918926239, 0.5613923072814941, 0.5494067072868347, 0.5178312063217163, 0.5127124190330505, 0.4883231520652771, 0.46191921830177307, 0.488910973072052, 0.47589272260665894, 0.48509299755096436, 0.5126166939735413, 0.48338040709495544, 0.5220050811767578, 0.5131890773773193, 0.5030207633972168, 0.5060648322105408], "accuracy": [0.4733852744102478, 0.7148329019546509, 0.7576277852058411, 0.7730814814567566, 0.7959318161010742, 0.8039889335632324, 0.8148196935653687, 0.8189142942428589, 0.8230088353157043, 0.8372738361358643, 0.8329150676727295, 0.8256505131721497, 0.8284242749214172, 0.8170651197433472, 0.8337075710296631, 0.8157442808151245, 0.8181217908859253, 0.8341038227081299, 0.8271034359931946], "val_loss": [0.874116837978363, 0.6410548686981201, 0.5946884155273438, 0.5508797764778137, 0.5530927181243896, 0.5413204431533813, 0.5268437266349792, 0.5222634077072144, 0.5528207421302795, 0.545876145362854, 0.5455511212348938, 0.5301546454429626, 0.600301206111908, 0.6384413838386536, 0.5934976935386658, 0.5773798823356628, 0.6151648759841919, 0.6152169704437256, 0.577104389667511], "val_accuracy": [0.6913333535194397, 0.7766666412353516, 0.7960000038146973, 0.8076666593551636, 0.8053333163261414, 0.8199999928474426, 0.8113333582878113, 0.8216666579246521, 0.8220000267028809, 0.8199999928474426, 0.8230000138282776, 0.8243333101272583, 0.8180000185966492, 0.828000009059906, 0.8166666626930237, 0.8083333373069763, 0.8176666498184204, 0.8233333230018616, 0.8203333616256714]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 1, 3, 1, 3, 7, 3, 2, 2, 8, 0, 6, 6, 9, 5, 0, 9], [0, 1, 0, 2, 2, 3, 1, 3, 3], [39, 39, 35, 9], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [0, 2, 3, 0, 3, 5, 8, 3, 8, 9, 4], [0, 1, 4, 0, 2], [0, 11, 6], [0, 0, 1, 1, 0, 1], [0, 7, 0, 0], [6, 1], [0], [1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 7, 4, 7, 6, 3, 9], [7, 4, 0, 7], [16, 99, 96, 99, 61, 1]], "fitness": -0.10314285755157471, "mapping_values": [1, 26, 17, 9, 4, 16, 11, 5, 3, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), grad), tf.math.add(tf.math.add(grad, tf.math.sqrt(alpha)), tf.math.negative(tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(grad)))))))), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(alpha))), tf.math.sqrt(grad)), tf.math.multiply(tf.math.sqrt(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(grad, alpha)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.7758829593658447, 2.312283992767334, 2.32074236869812, 2.3423001766204834, 2.3086328506469727, 2.3039779663085938], "accuracy": [0.16629242897033691, 0.1310262829065323, 0.13261127471923828, 0.13881917297840118, 0.09959053993225098, 0.10011887550354004], "val_loss": [2.3074445724487305, 2.276341199874878, 2.3027279376983643, 2.312791585922241, 2.304624080657959, 2.303025484085083], "val_accuracy": [0.10533333569765091, 0.10166666656732559, 0.09933333098888397, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 6, 3, 0, 9, 4, 3, 7], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 4, 7, 0, 4], [16, 99, 96, 99, 61, 1, 12, 14]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 1, 2, 1, 1, 1, 32, 18, 14, 8], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma)), tf.math.sqrt(tf.math.divide_no_nan(alpha, beta)))), tf.math.multiply(tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.multiply(tf.math.add(grad, grad), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 1], [3], [4, 3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 3, 4, 2, 4, 6, 2, 8, 2, 3], [0, 0, 0, 3, 0, 4, 3, 1, 2, 2, 7, 3, 7, 3, 2], [39, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 10, 6, 4, 2, 3, 1, 2, 0, 31, 16, 15, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(grad, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma)))), alpha), tf.math.add(tf.math.pow(beta, beta), tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(tf.math.add(grad, tf.math.multiply(sigma, grad))), sigma), beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [5, 2, 3, 1, 4], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 2, 9, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 4, 4], [1, 1, 0, 4, 0, 0, 3, 4, 2, 0], [53, 99, 96, 98, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 5, 4, 1, 2, 2, 1, 1, 1, 16, 8, 8, 3], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(alpha, tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), sigma), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}]