[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222564220428467, 1.8654934167861938, 1.392636775970459, 1.0800100564956665, 0.9349965453147888, 0.83723384141922, 0.771166205406189, 0.7229189872741699, 0.6917352080345154, 0.6532851457595825, 0.6217012405395508, 0.6138775944709778, 0.5917757749557495, 0.5793368220329285, 0.5567960739135742, 0.5480981469154358, 0.5474538803100586, 0.5317270755767822, 0.5151227116584778, 0.5055264234542847, 0.5014929175376892, 0.4862228035926819, 0.4727080464363098, 0.47010233998298645, 0.46293196082115173, 0.4504174590110779, 0.447412371635437, 0.4438058137893677, 0.42948198318481445, 0.417126327753067, 0.4136964678764343, 0.40704113245010376, 0.4020131528377533, 0.39997783303260803, 0.39442774653434753, 0.3916949927806854, 0.38260385394096375, 0.3716582953929901, 0.3650337755680084, 0.3573426902294159, 0.36132100224494934, 0.3564379811286926, 0.3445151448249817, 0.33812835812568665, 0.3384065330028534, 0.3359524607658386, 0.33294373750686646, 0.3212839663028717, 0.3217304050922394, 0.3110441267490387, 0.31119072437286377], "accuracy": [0.2685246467590332, 0.4955752193927765, 0.5610883831977844, 0.6197332143783569, 0.6668868064880371, 0.6963412761688232, 0.7205125093460083, 0.7349095344543457, 0.7469290494918823, 0.7604015469551086, 0.7732135653495789, 0.7761194109916687, 0.7878747582435608, 0.7901201844215393, 0.8009510040283203, 0.802271842956543, 0.8050455451011658, 0.8103289008140564, 0.8158763647079468, 0.8197067975997925, 0.817461371421814, 0.8255184292793274, 0.8273676037788391, 0.8333113193511963, 0.832650899887085, 0.8392550349235535, 0.8367455005645752, 0.8408400416374207, 0.8474441766738892, 0.8475762605667114, 0.8519350290298462, 0.8545766472816467, 0.8574824929237366, 0.8544445633888245, 0.8589354157447815, 0.8561616539955139, 0.8632941246032715, 0.8640866279602051, 0.869502067565918, 0.8702945709228516, 0.8702945709228516, 0.8689737319946289, 0.8772949576377869, 0.8754457831382751, 0.8767666220664978, 0.8809932470321655, 0.8776912093162537, 0.8853520154953003, 0.8811253309249878, 0.8886540532112122, 0.8885219693183899], "val_loss": [2.042604923248291, 1.5189800262451172, 1.0515391826629639, 0.8450219035148621, 0.7558016777038574, 0.7093545794487, 0.6593213081359863, 0.6230939030647278, 0.5998342037200928, 0.5830129981040955, 0.5592260956764221, 0.5484577417373657, 0.5345214009284973, 0.5245682597160339, 0.508945107460022, 0.5038147568702698, 0.4949795603752136, 0.4867953658103943, 0.47808560729026794, 0.4682127833366394, 0.46202969551086426, 0.4617370665073395, 0.4514632225036621, 0.4495610296726227, 0.4391477108001709, 0.43453720211982727, 0.42648962140083313, 0.42570948600769043, 0.4242604672908783, 0.4146496057510376, 0.41664713621139526, 0.4113439619541168, 0.41593310236930847, 0.4013250470161438, 0.40437138080596924, 0.39875122904777527, 0.3905998170375824, 0.3918660581111908, 0.38664665818214417, 0.3956036865711212, 0.38548287749290466, 0.3855803310871124, 0.3777529299259186, 0.3802799582481384, 0.3779101073741913, 0.371540904045105, 0.3776323199272156, 0.36875513195991516, 0.37442195415496826, 0.3655129075050354, 0.3628164827823639], "val_accuracy": [0.5523333549499512, 0.6656666398048401, 0.6830000281333923, 0.7059999704360962, 0.7336666584014893, 0.7506666779518127, 0.7580000162124634, 0.7689999938011169, 0.7736666798591614, 0.7846666574478149, 0.7950000166893005, 0.7963333129882812, 0.7993333339691162, 0.8100000023841858, 0.8173333406448364, 0.8190000057220459, 0.8213333487510681, 0.8209999799728394, 0.8286666870117188, 0.828000009059906, 0.8323333263397217, 0.8336666822433472, 0.8333333134651184, 0.8349999785423279, 0.8386666774749756, 0.8393333554267883, 0.8429999947547913, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8446666598320007, 0.8463333249092102, 0.8503333330154419, 0.8529999852180481, 0.8493333458900452, 0.8550000190734863, 0.8546666502952576, 0.856333315372467, 0.8613333106040955, 0.856333315372467, 0.859000027179718, 0.8550000190734863, 0.8586666584014893, 0.8633333444595337, 0.8619999885559082, 0.8659999966621399, 0.859666645526886, 0.862666666507721, 0.8603333234786987, 0.8610000014305115, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8614285588264465, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224677801132202, 1.873626708984375, 1.3999145030975342, 1.1029068231582642, 0.9507243037223816, 0.8489166498184204, 0.7786827683448792, 0.7293401956558228, 0.6939021348953247, 0.6634538173675537, 0.6369567513465881, 0.617993175983429, 0.6024927496910095, 0.5697639584541321, 0.553445041179657, 0.5464751124382019, 0.5384992957115173, 0.5230017304420471, 0.5075207948684692, 0.5040644407272339, 0.4938734471797943, 0.47701552510261536, 0.4686127007007599, 0.46223390102386475, 0.4511442184448242, 0.43875083327293396, 0.424495667219162, 0.4320788085460663, 0.42488399147987366, 0.41317200660705566, 0.4106106162071228, 0.4083693027496338, 0.3945331871509552, 0.39767441153526306, 0.38545897603034973, 0.37854233384132385, 0.37090715765953064, 0.36053267121315, 0.35839173197746277], "accuracy": [0.2620525658130646, 0.488971084356308, 0.5626733303070068, 0.6107515692710876, 0.668339729309082, 0.6973979473114014, 0.7206445932388306, 0.733588695526123, 0.750231146812439, 0.7602694630622864, 0.769911527633667, 0.7763835787773132, 0.7845727205276489, 0.7950072884559631, 0.7917051911354065, 0.8033285140991211, 0.8063663840293884, 0.8088759779930115, 0.8166688680648804, 0.8152159452438354, 0.8252542614936829, 0.8271034359931946, 0.8310658931732178, 0.8363492488861084, 0.8384625315666199, 0.8455950617790222, 0.850350022315979, 0.8479725122451782, 0.8491612672805786, 0.8555012345314026, 0.8531237840652466, 0.8573504090309143, 0.8644828796386719, 0.8610487580299377, 0.8626337051391602, 0.8677849769592285, 0.8729361891746521, 0.8701624870300293, 0.8729361891746521], "val_loss": [2.0403072834014893, 1.5233190059661865, 1.0513983964920044, 0.8464092016220093, 0.7583998441696167, 0.7014761567115784, 0.6548718214035034, 0.6202029585838318, 0.5938645601272583, 0.5664068460464478, 0.5562403202056885, 0.5380526185035706, 0.521734356880188, 0.5115917921066284, 0.4971047341823578, 0.4994601905345917, 0.48047173023223877, 0.46918103098869324, 0.4675951600074768, 0.4647250175476074, 0.4494393765926361, 0.44362691044807434, 0.4424251616001129, 0.4362287223339081, 0.4280279576778412, 0.4255235195159912, 0.42315083742141724, 0.4152560234069824, 0.413761705160141, 0.4074392020702362, 0.408549964427948, 0.40706706047058105, 0.4045040011405945, 0.39725810289382935, 0.3981068432331085, 0.39599713683128357, 0.3940032422542572, 0.3974151313304901, 0.39013051986694336], "val_accuracy": [0.5363333225250244, 0.6486666798591614, 0.6776666641235352, 0.7046666741371155, 0.7306666374206543, 0.7480000257492065, 0.7590000033378601, 0.7723333239555359, 0.7836666703224182, 0.7883333563804626, 0.7956666946411133, 0.8026666641235352, 0.8136666417121887, 0.8143333196640015, 0.8146666884422302, 0.8149999976158142, 0.8286666870117188, 0.8299999833106995, 0.8289999961853027, 0.82833331823349, 0.8373333215713501, 0.8443333506584167, 0.8443333506584167, 0.843999981880188, 0.8493333458900452, 0.8453333377838135, 0.8493333458900452, 0.8489999771118164, 0.8519999980926514, 0.8560000061988831, 0.8586666584014893, 0.856333315372467, 0.8576666712760925, 0.8629999756813049, 0.8619999885559082, 0.862333357334137, 0.8619999885559082, 0.856333315372467, 0.8629999756813049]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0, 1], [0, 2, 9], [0], [0, 53], [0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 7, 7, 3, 9, 5], [0, 6, 3], [0, 67], [0, 1], [0], [1], [0]], "fitness": -0.8591428399085999, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2929272651672363, 2.1897711753845215, 1.7812609672546387, 1.3232911825180054, 1.1011635065078735, 0.9223264455795288, 0.8532276153564453, 0.8287649750709534, 0.7772496938705444, 0.7574090957641602, 0.7224186658859253, 0.7015766501426697, 0.6628898978233337, 0.648667573928833, 0.617254376411438, 0.6149603128433228, 0.5937643647193909, 0.5950401425361633, 0.5701293349266052, 0.5701923966407776, 0.5522793531417847, 0.5378096699714661, 0.5306598544120789, 0.5272713303565979, 0.5078709125518799, 0.49201223254203796, 0.4934404194355011, 0.47219064831733704, 0.46982553601264954, 0.4607876241207123, 0.45389094948768616, 0.45652779936790466, 0.44417399168014526, 0.4372400641441345, 0.4344898462295532, 0.42192068696022034, 0.4255317747592926, 0.4078429937362671, 0.416504442691803, 0.3937914967536926, 0.3948630094528198, 0.38776376843452454, 0.39747193455696106, 0.37928518652915955, 0.37747061252593994, 0.3742644786834717, 0.36162856221199036, 0.36388301849365234, 0.3692832291126251], "accuracy": [0.1270637959241867, 0.33522653579711914, 0.4290054142475128, 0.548540472984314, 0.6218464970588684, 0.6564522385597229, 0.6872276067733765, 0.6960771083831787, 0.7028133869171143, 0.71100252866745, 0.7223616242408752, 0.726192057132721, 0.7401928305625916, 0.7495707273483276, 0.7633073329925537, 0.7670056819915771, 0.7716285586357117, 0.7717606425285339, 0.7804781198501587, 0.7833839654922485, 0.7828556299209595, 0.7952714562416077, 0.7992339134216309, 0.7952714562416077, 0.8029322624206543, 0.8061022162437439, 0.8125742673873901, 0.8171972036361694, 0.8248580098152161, 0.8272355198860168, 0.8257825970649719, 0.8255184292793274, 0.8319904804229736, 0.8355567455291748, 0.8308017253875732, 0.8362171649932861, 0.8432175517082214, 0.8433496356010437, 0.8378021121025085, 0.8492933511734009, 0.8504821062088013, 0.8510104417800903, 0.8512746095657349, 0.8569541573524475, 0.8597279191017151, 0.8557654023170471, 0.8584070801734924, 0.8605204224586487, 0.8614450097084045], "val_loss": [2.245680570602417, 2.0185928344726562, 1.1308772563934326, 0.8226964473724365, 0.7369040250778198, 0.7106963992118835, 0.6351783275604248, 0.6243124008178711, 0.6204779148101807, 0.5948042869567871, 0.5652156472206116, 0.5491068363189697, 0.5386970043182373, 0.5249631404876709, 0.5095169544219971, 0.5044585466384888, 0.4913865625858307, 0.49090376496315, 0.483590304851532, 0.4786900281906128, 0.47870466113090515, 0.4737703502178192, 0.46650195121765137, 0.466866672039032, 0.44758468866348267, 0.4326612949371338, 0.42695125937461853, 0.42836815118789673, 0.429735392332077, 0.4242395758628845, 0.4150262475013733, 0.408013254404068, 0.4071161150932312, 0.3963218927383423, 0.3909314274787903, 0.38791215419769287, 0.39200493693351746, 0.3869117796421051, 0.39534440636634827, 0.3817005157470703, 0.3766578733921051, 0.38268375396728516, 0.3751756250858307, 0.383829265832901, 0.3876432776451111, 0.38063740730285645, 0.3754926323890686, 0.3803727626800537, 0.36960482597351074], "val_accuracy": [0.42933332920074463, 0.4860000014305115, 0.6573333144187927, 0.7133333086967468, 0.7369999885559082, 0.7086666822433472, 0.7566666603088379, 0.7630000114440918, 0.762333333492279, 0.7703333497047424, 0.7749999761581421, 0.784333348274231, 0.7876666784286499, 0.8006666898727417, 0.8040000200271606, 0.7979999780654907, 0.812666654586792, 0.8133333325386047, 0.8166666626930237, 0.8326666951179504, 0.8183333277702332, 0.8286666870117188, 0.8326666951179504, 0.8349999785423279, 0.843999981880188, 0.8523333072662354, 0.8546666502952576, 0.8533333539962769, 0.8523333072662354, 0.8539999723434448, 0.8560000061988831, 0.8550000190734863, 0.859666645526886, 0.859666645526886, 0.8560000061988831, 0.862666666507721, 0.8576666712760925, 0.8676666617393494, 0.8606666922569275, 0.8676666617393494, 0.8703333139419556, 0.8666666746139526, 0.8700000047683716, 0.875, 0.8659999966621399, 0.8679999709129333, 0.8693333268165588, 0.8723333477973938, 0.8713333606719971]}, "mapping_values": [1, 10, 5, 5, 3, 4, 3, 1, 2, 9, 6, 3, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 1, 1], [0, 2, 1], [0, 4, 1], [0], [1], [0], [2], [0]], "fitness": -0.836571455001831, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5463069677352905, 0.7901616096496582, 0.6705447435379028, 0.6300411820411682, 0.5786185264587402, 0.5402510762214661, 0.5261709094047546, 0.5262009501457214, 0.516737699508667, 0.49547696113586426, 0.5175530314445496, 0.5377922058105469, 0.5411244034767151, 0.5063698887825012], "accuracy": [0.47932901978492737, 0.7102100253105164, 0.7553823590278625, 0.7725531458854675, 0.7828556299209595, 0.802271842956543, 0.8101968169212341, 0.8165367841720581, 0.8210275769233704, 0.8251221776008606, 0.8098005652427673, 0.8212917447090149, 0.8247259259223938, 0.8236692547798157], "val_loss": [0.8214879035949707, 0.6286545395851135, 0.5763492584228516, 0.530256986618042, 0.5275066494941711, 0.508459210395813, 0.5427112579345703, 0.5165022611618042, 0.5182584524154663, 0.5006270408630371, 0.5585813522338867, 0.6109146475791931, 0.5852088332176208, 0.5537365674972534], "val_accuracy": [0.7089999914169312, 0.7723333239555359, 0.7823333144187927, 0.7973333597183228, 0.8119999766349792, 0.8140000104904175, 0.8163333535194397, 0.8286666870117188, 0.8293333053588867, 0.8163333535194397, 0.8140000104904175, 0.8266666531562805, 0.8193333148956299, 0.8259999752044678]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 6, 3, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 1, 0, 2, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1], [0, 3, 0, 1, 7, 2, 3, 1, 0, 1, 3, 0], [0, 2, 1, 4, 4, 5, 5, 0, 0], [0, 39, 94], [0, 1], [0], [0], [0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 8, 2, 6, 7, 3, 9], [1, 4, 0, 2], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 21, 12, 9, 3, 2, 1, 1, 1, 11, 7, 4, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), beta)), tf.math.add(alpha, tf.math.add(grad, tf.math.multiply(tf.math.subtract(grad, tf.math.negative(tf.math.subtract(grad, tf.math.multiply(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), tf.math.negative(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.multiply(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32)), beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 2, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [9, 2, 3, 0, 3, 2], [3, 2, 0, 3], [16, 16], [0, 1], [0], [3], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 3, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 1, 1, 0, 1, 2, 1, 1, 0, 16, 8, 8, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.subtract(sigma, alpha))))", "other_info": {"loss": [2.303497314453125, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 5, 0, 3, 1, 2, 4], [0, 1, 0, 2, 0, 2], [39, 15, 75], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [5, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 6, 2, 8], [0, 0, 0, 3, 0, 1, 3, 1, 2, 0], [16, 13, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 8, 6, 3, 10, 6, 4, 1, 2, 1, 1, 1, 14, 7, 7, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))))), tf.math.add(grad, tf.math.pow(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(alpha, sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 1, 0, 3, 5, 0], [2, 1, 0, 0], [39, 77], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [5, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [58], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 0, 6, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 4, 3, 0, 0, 3, 1, 2, 0], [79, 99, 96, 99, 70, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 7, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 4, 2, 2, 2], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(grad), alpha), tf.math.multiply(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1103502592.0, 21142562816.0, 98939387904.0, 271284469760.0, 581849513984.0, 1077008334848.0], "accuracy": [0.10328886657953262, 0.09734513610601425, 0.09826971590518951, 0.1002509593963623, 0.10328886657953262, 0.10038304328918457], "val_loss": [5313094144.0, 42499612672.0, 143430828032.0, 339976552448.0, 664007016448.0, 1147390263296.0], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}]