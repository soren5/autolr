[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222564220428467, 1.8654934167861938, 1.392636775970459, 1.0800100564956665, 0.9349965453147888, 0.83723384141922, 0.771166205406189, 0.7229189872741699, 0.6917352080345154, 0.6532851457595825, 0.6217012405395508, 0.6138775944709778, 0.5917757749557495, 0.5793368220329285, 0.5567960739135742, 0.5480981469154358, 0.5474538803100586, 0.5317270755767822, 0.5151227116584778, 0.5055264234542847, 0.5014929175376892, 0.4862228035926819, 0.4727080464363098, 0.47010233998298645, 0.46293196082115173, 0.4504174590110779, 0.447412371635437, 0.4438058137893677, 0.42948198318481445, 0.417126327753067, 0.4136964678764343, 0.40704113245010376, 0.4020131528377533, 0.39997783303260803, 0.39442774653434753, 0.3916949927806854, 0.38260385394096375, 0.3716582953929901, 0.3650337755680084, 0.3573426902294159, 0.36132100224494934, 0.3564379811286926, 0.3445151448249817, 0.33812835812568665, 0.3384065330028534, 0.3359524607658386, 0.33294373750686646, 0.3212839663028717, 0.3217304050922394, 0.3110441267490387, 0.31119072437286377], "accuracy": [0.2685246467590332, 0.4955752193927765, 0.5610883831977844, 0.6197332143783569, 0.6668868064880371, 0.6963412761688232, 0.7205125093460083, 0.7349095344543457, 0.7469290494918823, 0.7604015469551086, 0.7732135653495789, 0.7761194109916687, 0.7878747582435608, 0.7901201844215393, 0.8009510040283203, 0.802271842956543, 0.8050455451011658, 0.8103289008140564, 0.8158763647079468, 0.8197067975997925, 0.817461371421814, 0.8255184292793274, 0.8273676037788391, 0.8333113193511963, 0.832650899887085, 0.8392550349235535, 0.8367455005645752, 0.8408400416374207, 0.8474441766738892, 0.8475762605667114, 0.8519350290298462, 0.8545766472816467, 0.8574824929237366, 0.8544445633888245, 0.8589354157447815, 0.8561616539955139, 0.8632941246032715, 0.8640866279602051, 0.869502067565918, 0.8702945709228516, 0.8702945709228516, 0.8689737319946289, 0.8772949576377869, 0.8754457831382751, 0.8767666220664978, 0.8809932470321655, 0.8776912093162537, 0.8853520154953003, 0.8811253309249878, 0.8886540532112122, 0.8885219693183899], "val_loss": [2.042604923248291, 1.5189800262451172, 1.0515391826629639, 0.8450219035148621, 0.7558016777038574, 0.7093545794487, 0.6593213081359863, 0.6230939030647278, 0.5998342037200928, 0.5830129981040955, 0.5592260956764221, 0.5484577417373657, 0.5345214009284973, 0.5245682597160339, 0.508945107460022, 0.5038147568702698, 0.4949795603752136, 0.4867953658103943, 0.47808560729026794, 0.4682127833366394, 0.46202969551086426, 0.4617370665073395, 0.4514632225036621, 0.4495610296726227, 0.4391477108001709, 0.43453720211982727, 0.42648962140083313, 0.42570948600769043, 0.4242604672908783, 0.4146496057510376, 0.41664713621139526, 0.4113439619541168, 0.41593310236930847, 0.4013250470161438, 0.40437138080596924, 0.39875122904777527, 0.3905998170375824, 0.3918660581111908, 0.38664665818214417, 0.3956036865711212, 0.38548287749290466, 0.3855803310871124, 0.3777529299259186, 0.3802799582481384, 0.3779101073741913, 0.371540904045105, 0.3776323199272156, 0.36875513195991516, 0.37442195415496826, 0.3655129075050354, 0.3628164827823639], "val_accuracy": [0.5523333549499512, 0.6656666398048401, 0.6830000281333923, 0.7059999704360962, 0.7336666584014893, 0.7506666779518127, 0.7580000162124634, 0.7689999938011169, 0.7736666798591614, 0.7846666574478149, 0.7950000166893005, 0.7963333129882812, 0.7993333339691162, 0.8100000023841858, 0.8173333406448364, 0.8190000057220459, 0.8213333487510681, 0.8209999799728394, 0.8286666870117188, 0.828000009059906, 0.8323333263397217, 0.8336666822433472, 0.8333333134651184, 0.8349999785423279, 0.8386666774749756, 0.8393333554267883, 0.8429999947547913, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8446666598320007, 0.8463333249092102, 0.8503333330154419, 0.8529999852180481, 0.8493333458900452, 0.8550000190734863, 0.8546666502952576, 0.856333315372467, 0.8613333106040955, 0.856333315372467, 0.859000027179718, 0.8550000190734863, 0.8586666584014893, 0.8633333444595337, 0.8619999885559082, 0.8659999966621399, 0.859666645526886, 0.862666666507721, 0.8603333234786987, 0.8610000014305115, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8611428737640381, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224562883377075, 1.8723446130752563, 1.3898228406906128, 1.0887678861618042, 0.9191828966140747, 0.8352901935577393, 0.7646421790122986, 0.7185187339782715, 0.6864457726478577, 0.6545274257659912, 0.6349804997444153, 0.609677255153656, 0.5878900289535522, 0.5706149339675903, 0.5500622987747192, 0.5343979597091675, 0.5211297273635864, 0.5030456781387329, 0.4992462396621704, 0.48853543400764465, 0.47415316104888916, 0.4741191267967224, 0.46080365777015686, 0.4568241536617279, 0.4434583783149719, 0.44054701924324036, 0.4290490746498108, 0.4225926101207733, 0.4077237546443939, 0.40047135949134827, 0.4012235701084137, 0.3906947076320648, 0.3855751156806946, 0.38194000720977783, 0.3798353970050812, 0.3758912980556488, 0.37296628952026367, 0.35737913846969604, 0.3532874584197998, 0.3532145917415619, 0.3445194661617279, 0.3363818824291229, 0.338133841753006, 0.3235500156879425, 0.3305720388889313, 0.3248472511768341, 0.3178843557834625, 0.31064409017562866, 0.3069496750831604], "accuracy": [0.27222296595573425, 0.49465063214302063, 0.5679566860198975, 0.6184123754501343, 0.6707172393798828, 0.7018887996673584, 0.7199841737747192, 0.741909921169281, 0.7469290494918823, 0.7547219395637512, 0.7708360552787781, 0.7755910754203796, 0.7876105904579163, 0.7957997918128967, 0.8059701323509216, 0.8035926818847656, 0.8173292875289917, 0.8228767514228821, 0.8210275769233704, 0.8253863453865051, 0.8298771381378174, 0.8339717388153076, 0.8354246616363525, 0.8325188159942627, 0.8366134166717529, 0.8448025584220886, 0.8471800088882446, 0.8485008478164673, 0.856689989566803, 0.8541803956031799, 0.8552370667457581, 0.8639545440673828, 0.8647470474243164, 0.8684453964233398, 0.8648791313171387, 0.8627657890319824, 0.8696341514587402, 0.8708229064941406, 0.8772949576377869, 0.8746532797813416, 0.8765024542808533, 0.8842953443527222, 0.8772949576377869, 0.878879964351654, 0.8828424215316772, 0.8833707571029663, 0.8837670087814331, 0.8838990926742554, 0.8914278149604797], "val_loss": [2.0444109439849854, 1.5256686210632324, 1.0561755895614624, 0.8503873944282532, 0.7623368501663208, 0.705508291721344, 0.6625096201896667, 0.6329986453056335, 0.6095735430717468, 0.5816518664360046, 0.562146782875061, 0.5489051938056946, 0.5335608124732971, 0.5184363126754761, 0.5039055943489075, 0.49180150032043457, 0.4811217784881592, 0.4718242883682251, 0.4670887887477875, 0.45503246784210205, 0.45538654923439026, 0.44769519567489624, 0.4618843197822571, 0.4388732612133026, 0.43577489256858826, 0.42381229996681213, 0.4266907572746277, 0.4162727892398834, 0.4118894040584564, 0.41258692741394043, 0.40541592240333557, 0.3981439471244812, 0.3973172903060913, 0.4011639952659607, 0.3956622779369354, 0.3962561786174774, 0.3889304995536804, 0.38633641600608826, 0.38267114758491516, 0.3846173584461212, 0.3815250098705292, 0.37926653027534485, 0.3763597011566162, 0.37334638833999634, 0.37778931856155396, 0.37264594435691833, 0.36834821105003357, 0.3719625771045685, 0.36495858430862427], "val_accuracy": [0.5450000166893005, 0.6453333497047424, 0.6736666560173035, 0.6976666450500488, 0.7203333377838135, 0.7456666827201843, 0.7463333606719971, 0.7603333592414856, 0.7733333110809326, 0.7893333435058594, 0.8006666898727417, 0.7929999828338623, 0.8146666884422302, 0.8163333535194397, 0.8176666498184204, 0.8286666870117188, 0.8330000042915344, 0.8360000252723694, 0.8346666693687439, 0.8420000076293945, 0.8399999737739563, 0.8420000076293945, 0.828000009059906, 0.8416666388511658, 0.8453333377838135, 0.8553333282470703, 0.8513333201408386, 0.8556666374206543, 0.862333357334137, 0.8569999933242798, 0.8569999933242798, 0.862333357334137, 0.8636666536331177, 0.859000027179718, 0.859000027179718, 0.8616666793823242, 0.8636666536331177, 0.8656666874885559, 0.8703333139419556, 0.8676666617393494, 0.8676666617393494, 0.8700000047683716, 0.8686666488647461, 0.8733333349227905, 0.8669999837875366, 0.8696666955947876, 0.8723333477973938, 0.8723333477973938, 0.8723333477973938]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 1], [0, 1], [0, 5], [0], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8600000143051147, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2928755283355713, 2.1878366470336914, 1.7689310312271118, 1.3613152503967285, 1.0915080308914185, 0.9174274802207947, 0.817483127117157, 0.8120861053466797, 0.7571064829826355, 0.732806384563446, 0.7107308506965637, 0.6895540952682495, 0.6563860177993774, 0.6249393224716187, 0.6041378974914551, 0.5939334034919739, 0.5855586528778076, 0.5626676082611084, 0.5530515313148499, 0.5386835932731628, 0.5186819434165955, 0.5200728178024292, 0.5166088938713074, 0.5038857460021973, 0.48146116733551025, 0.4728861451148987, 0.46527329087257385, 0.45482978224754333, 0.45266085863113403, 0.44067803025245667, 0.4260281026363373, 0.4223182201385498, 0.422513872385025, 0.4112606346607208, 0.40467140078544617, 0.4038965404033661, 0.3978194296360016, 0.38762810826301575, 0.3834552466869354, 0.37878215312957764, 0.37572136521339417, 0.3596944510936737, 0.36140546202659607, 0.3577636778354645, 0.3578614294528961], "accuracy": [0.12970545887947083, 0.33839651942253113, 0.43930789828300476, 0.5344076156616211, 0.6318848133087158, 0.6660943031311035, 0.703209638595581, 0.7053229212760925, 0.707568347454071, 0.715889573097229, 0.7359662055969238, 0.7376832365989685, 0.7537974119186401, 0.7644960880279541, 0.7714964747428894, 0.7796856164932251, 0.7786290049552917, 0.7832518815994263, 0.7897239327430725, 0.7890635132789612, 0.800290584564209, 0.7975168228149414, 0.802800178527832, 0.8018755912780762, 0.8105930685997009, 0.8227446675300598, 0.8210275769233704, 0.8232730031013489, 0.8280280232429504, 0.8273676037788391, 0.8327829837799072, 0.8355567455291748, 0.8314621448516846, 0.839519202709198, 0.8421608805656433, 0.8441421389579773, 0.8477083444595337, 0.8508783578872681, 0.844010055065155, 0.8499537706375122, 0.8548408150672913, 0.8618412613868713, 0.857218325138092, 0.8570862412452698, 0.8564258217811584], "val_loss": [2.2468910217285156, 2.0204195976257324, 1.137251615524292, 0.8918777704238892, 0.7726449966430664, 0.6996358036994934, 0.6717686653137207, 0.6508128046989441, 0.6355806589126587, 0.6081699728965759, 0.565177321434021, 0.554273247718811, 0.555427074432373, 0.5335288047790527, 0.5236067175865173, 0.5013458132743835, 0.5080018043518066, 0.5032119750976562, 0.49066251516342163, 0.4768889248371124, 0.4818163216114044, 0.4670550227165222, 0.46549829840660095, 0.4587445855140686, 0.4492666721343994, 0.4393538534641266, 0.4361352026462555, 0.4427953362464905, 0.431160569190979, 0.4243227541446686, 0.41814395785331726, 0.4292422831058502, 0.4189918637275696, 0.4093623757362366, 0.4010230302810669, 0.40802669525146484, 0.4082537293434143, 0.40219613909721375, 0.41537150740623474, 0.41279247403144836, 0.4137294590473175, 0.40013113617897034, 0.40140560269355774, 0.41095760464668274, 0.41953787207603455], "val_accuracy": [0.4233333468437195, 0.4659999907016754, 0.6503333449363708, 0.6773333549499512, 0.7129999995231628, 0.7303333282470703, 0.7353333234786987, 0.7413333058357239, 0.753000020980835, 0.7643333077430725, 0.7739999890327454, 0.781333327293396, 0.784333348274231, 0.7950000166893005, 0.8006666898727417, 0.8040000200271606, 0.809333324432373, 0.8036666512489319, 0.8090000152587891, 0.8176666498184204, 0.8083333373069763, 0.8190000057220459, 0.8226666450500488, 0.82833331823349, 0.8326666951179504, 0.8393333554267883, 0.8423333168029785, 0.8429999947547913, 0.8463333249092102, 0.8429999947547913, 0.847000002861023, 0.8396666646003723, 0.843999981880188, 0.8463333249092102, 0.8506666421890259, 0.8510000109672546, 0.8550000190734863, 0.8539999723434448, 0.8450000286102295, 0.8576666712760925, 0.8546666502952576, 0.8500000238418579, 0.8500000238418579, 0.8526666760444641, 0.8529999852180481]}, "mapping_values": [1, 10, 5, 5, 3, 4, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1], [0, 5, 7, 6, 9, 7, 6, 3, 1, 5, 5, 2, 8, 0, 1, 2, 5, 8, 3], [0, 1, 4, 5, 6, 4, 5, 5, 0, 4], [0, 47, 84], [1], [0], [2], [0]], "fitness": -0.822857141494751, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.add(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.square(tf.math.add(alpha, grad)))), grad), tf.math.sqrt(tf.math.negative(tf.math.subtract(grad, grad)))), grad)), tf.math.add(tf.math.square(tf.math.sqrt(grad)), tf.math.multiply(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.6094460487365723, 0.8865095376968384, 0.7629668712615967, 0.6517812609672546, 0.5763557553291321, 0.562481164932251, 0.5077175498008728, 0.49287718534469604, 0.4749128520488739, 0.4665960669517517, 0.5104736089706421, 0.516656219959259, 0.49818384647369385, 0.5156064629554749], "accuracy": [0.4644036591053009, 0.6975300312042236, 0.7331924438476562, 0.7588165402412415, 0.7862898111343384, 0.791441023349762, 0.8173292875289917, 0.8227446675300598, 0.8305375576019287, 0.8256505131721497, 0.822348415851593, 0.8261788487434387, 0.8256505131721497, 0.8261788487434387], "val_loss": [0.8941360116004944, 0.6476353406906128, 0.5604469180107117, 0.5044652223587036, 0.4938719868659973, 0.48583313822746277, 0.48836153745651245, 0.48732998967170715, 0.5288112163543701, 0.5147524476051331, 0.5324404835700989, 0.5260488986968994, 0.5670660138130188, 0.5435003042221069], "val_accuracy": [0.6836666464805603, 0.7796666622161865, 0.7990000247955322, 0.8083333373069763, 0.8230000138282776, 0.8339999914169312, 0.8346666693687439, 0.8460000157356262, 0.846666693687439, 0.8360000252723694, 0.8429999947547913, 0.8370000123977661, 0.8433333039283752, 0.8360000252723694]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 29, 19, 10, 3, 1, 0, 1, 0], "tree_depth": 25}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 8], [1, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [1, 1], [0], [0], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 6, 1, 4, 1, 5, 2, 8], [0, 0, 0, 3, 0, 0, 3, 4, 2, 0], [16, 99, 70, 99, 61, 73]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 1, 6, 3, 3, 2, 1, 0, 1, 1, 1, 0, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303225517272949, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3, 1, 6, 3], [2, 1, 0, 2, 3, 2, 0], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1], [0, 2, 3, 0, 2, 5, 2], [0, 2, 0, 3, 1], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 1, 2, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [53, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 8, 7, 2, 12, 7, 5, 2, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), tf.math.multiply(tf.math.subtract(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, grad))), tf.math.multiply(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(grad, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 9, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [22], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [6, 3, 3, 6, 8, 2, 4, 1, 4, 2, 8, 2, 3, 5, 5], [4, 0, 2, 1, 0, 0, 3, 1, 2, 0, 6, 1], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 0, 1, 10, 6, 4, 2, 2, 1, 1, 1, 27, 15, 12, 4], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(beta, tf.math.subtract(tf.math.pow(alpha, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma)))), tf.math.sqrt(tf.math.add(alpha, beta)))), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(tf.math.square(grad)), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10276053100824356, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1], [0, 2, 3, 0, 8, 5], [0, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [35, 16], [0, 1, 0, 1, 1], [1, 4], [2, 4, 3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 3, 1, 4, 1, 4, 2, 8, 3, 1, 1, 6, 7, 0, 3, 0], [0, 0, 0, 2, 4, 0, 3, 2, 4, 0, 2, 6, 3, 0, 1, 7, 1], [16, 99, 96, 99, 18, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 6, 3, 2, 6, 3, 3, 2, 5, 2, 3, 0, 36, 19, 17, 6], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.sqrt(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, tf.math.pow(grad, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), beta)), tf.math.subtract(tf.math.pow(tf.math.add(grad, tf.constant(1.0, shape=shape, dtype=tf.float32)), sigma), tf.math.sqrt(tf.math.multiply(beta, grad)))), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.subtract(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(grad, tf.math.negative(sigma)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.negative(alpha), grad)))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503]}}]