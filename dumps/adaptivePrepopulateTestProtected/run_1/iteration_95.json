[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222564220428467, 1.8654934167861938, 1.392636775970459, 1.0800100564956665, 0.9349965453147888, 0.83723384141922, 0.771166205406189, 0.7229189872741699, 0.6917352080345154, 0.6532851457595825, 0.6217012405395508, 0.6138775944709778, 0.5917757749557495, 0.5793368220329285, 0.5567960739135742, 0.5480981469154358, 0.5474538803100586, 0.5317270755767822, 0.5151227116584778, 0.5055264234542847, 0.5014929175376892, 0.4862228035926819, 0.4727080464363098, 0.47010233998298645, 0.46293196082115173, 0.4504174590110779, 0.447412371635437, 0.4438058137893677, 0.42948198318481445, 0.417126327753067, 0.4136964678764343, 0.40704113245010376, 0.4020131528377533, 0.39997783303260803, 0.39442774653434753, 0.3916949927806854, 0.38260385394096375, 0.3716582953929901, 0.3650337755680084, 0.3573426902294159, 0.36132100224494934, 0.3564379811286926, 0.3445151448249817, 0.33812835812568665, 0.3384065330028534, 0.3359524607658386, 0.33294373750686646, 0.3212839663028717, 0.3217304050922394, 0.3110441267490387, 0.31119072437286377], "accuracy": [0.2685246467590332, 0.4955752193927765, 0.5610883831977844, 0.6197332143783569, 0.6668868064880371, 0.6963412761688232, 0.7205125093460083, 0.7349095344543457, 0.7469290494918823, 0.7604015469551086, 0.7732135653495789, 0.7761194109916687, 0.7878747582435608, 0.7901201844215393, 0.8009510040283203, 0.802271842956543, 0.8050455451011658, 0.8103289008140564, 0.8158763647079468, 0.8197067975997925, 0.817461371421814, 0.8255184292793274, 0.8273676037788391, 0.8333113193511963, 0.832650899887085, 0.8392550349235535, 0.8367455005645752, 0.8408400416374207, 0.8474441766738892, 0.8475762605667114, 0.8519350290298462, 0.8545766472816467, 0.8574824929237366, 0.8544445633888245, 0.8589354157447815, 0.8561616539955139, 0.8632941246032715, 0.8640866279602051, 0.869502067565918, 0.8702945709228516, 0.8702945709228516, 0.8689737319946289, 0.8772949576377869, 0.8754457831382751, 0.8767666220664978, 0.8809932470321655, 0.8776912093162537, 0.8853520154953003, 0.8811253309249878, 0.8886540532112122, 0.8885219693183899], "val_loss": [2.042604923248291, 1.5189800262451172, 1.0515391826629639, 0.8450219035148621, 0.7558016777038574, 0.7093545794487, 0.6593213081359863, 0.6230939030647278, 0.5998342037200928, 0.5830129981040955, 0.5592260956764221, 0.5484577417373657, 0.5345214009284973, 0.5245682597160339, 0.508945107460022, 0.5038147568702698, 0.4949795603752136, 0.4867953658103943, 0.47808560729026794, 0.4682127833366394, 0.46202969551086426, 0.4617370665073395, 0.4514632225036621, 0.4495610296726227, 0.4391477108001709, 0.43453720211982727, 0.42648962140083313, 0.42570948600769043, 0.4242604672908783, 0.4146496057510376, 0.41664713621139526, 0.4113439619541168, 0.41593310236930847, 0.4013250470161438, 0.40437138080596924, 0.39875122904777527, 0.3905998170375824, 0.3918660581111908, 0.38664665818214417, 0.3956036865711212, 0.38548287749290466, 0.3855803310871124, 0.3777529299259186, 0.3802799582481384, 0.3779101073741913, 0.371540904045105, 0.3776323199272156, 0.36875513195991516, 0.37442195415496826, 0.3655129075050354, 0.3628164827823639], "val_accuracy": [0.5523333549499512, 0.6656666398048401, 0.6830000281333923, 0.7059999704360962, 0.7336666584014893, 0.7506666779518127, 0.7580000162124634, 0.7689999938011169, 0.7736666798591614, 0.7846666574478149, 0.7950000166893005, 0.7963333129882812, 0.7993333339691162, 0.8100000023841858, 0.8173333406448364, 0.8190000057220459, 0.8213333487510681, 0.8209999799728394, 0.8286666870117188, 0.828000009059906, 0.8323333263397217, 0.8336666822433472, 0.8333333134651184, 0.8349999785423279, 0.8386666774749756, 0.8393333554267883, 0.8429999947547913, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8446666598320007, 0.8463333249092102, 0.8503333330154419, 0.8529999852180481, 0.8493333458900452, 0.8550000190734863, 0.8546666502952576, 0.856333315372467, 0.8613333106040955, 0.856333315372467, 0.859000027179718, 0.8550000190734863, 0.8586666584014893, 0.8633333444595337, 0.8619999885559082, 0.8659999966621399, 0.859666645526886, 0.862666666507721, 0.8603333234786987, 0.8610000014305115, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8700000047683716, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2247769832611084, 1.8662470579147339, 1.3884146213531494, 1.085309624671936, 0.935448944568634, 0.8281429409980774, 0.7764099836349487, 0.7257775068283081, 0.6820918321609497, 0.659401535987854, 0.6301031112670898, 0.6147534251213074, 0.599842369556427, 0.5754706859588623, 0.5649075508117676, 0.5517711043357849, 0.5343425273895264, 0.5286909341812134, 0.5076077580451965, 0.5089020729064941, 0.4921669363975525, 0.47543179988861084, 0.46845680475234985, 0.4678944945335388, 0.4522078037261963, 0.4384097158908844, 0.4309709966182709, 0.4390522837638855, 0.417490690946579, 0.425496906042099, 0.4171135425567627, 0.4057140052318573, 0.400526225566864, 0.39202630519866943, 0.38710275292396545, 0.381319135427475, 0.37161147594451904, 0.36413562297821045, 0.36670297384262085, 0.3562502861022949, 0.3452487587928772, 0.35013607144355774, 0.34267154335975647, 0.33860257267951965, 0.3274517059326172, 0.32262903451919556, 0.3223622441291809, 0.3079814016819, 0.32101136445999146, 0.31741562485694885, 0.3070794343948364, 0.3017174303531647, 0.2993164360523224, 0.2853282690048218, 0.29179298877716064], "accuracy": [0.25320300459861755, 0.4912164807319641, 0.5676925182342529, 0.6209219098091125, 0.6666226387023926, 0.7046625018119812, 0.7157574892044067, 0.7347774505615234, 0.7493065595626831, 0.7526086568832397, 0.767401933670044, 0.7692511081695557, 0.7814027070999146, 0.7972526550292969, 0.7960638999938965, 0.8005547523498535, 0.805177628993988, 0.8107251524925232, 0.817989706993103, 0.817461371421814, 0.8241975903511047, 0.8285563588142395, 0.8343679904937744, 0.8335754871368408, 0.8366134166717529, 0.8467837572097778, 0.847840428352356, 0.8461233377456665, 0.8512746095657349, 0.8477083444595337, 0.8525954484939575, 0.854708731174469, 0.8573504090309143, 0.8661999702453613, 0.86118084192276, 0.8676528930664062, 0.8720116019248962, 0.8712190985679626, 0.8701624870300293, 0.8755778670310974, 0.8786157965660095, 0.8735966086387634, 0.8780874609947205, 0.880729079246521, 0.8824461698532104, 0.8848236799240112, 0.8820499181747437, 0.8907673954963684, 0.8865407705307007, 0.8910315632820129, 0.8868049383163452, 0.8920882344245911, 0.8906353116035461, 0.8956544995307922, 0.893541157245636], "val_loss": [2.0415470600128174, 1.5197246074676514, 1.0427829027175903, 0.8361462354660034, 0.7520481944084167, 0.6917243599891663, 0.6445184946060181, 0.6142983436584473, 0.5814406871795654, 0.5619741082191467, 0.5470053553581238, 0.5259681940078735, 0.5117353796958923, 0.49622005224227905, 0.4945699870586395, 0.4738841652870178, 0.46373406052589417, 0.4628925919532776, 0.446149080991745, 0.4453151822090149, 0.4336811900138855, 0.42605966329574585, 0.42678502202033997, 0.4193645715713501, 0.41095423698425293, 0.4046124815940857, 0.39703091979026794, 0.3964712619781494, 0.394072026014328, 0.3957250118255615, 0.38836199045181274, 0.3852279484272003, 0.3816804885864258, 0.3785756826400757, 0.37001675367355347, 0.3673015236854553, 0.3652873635292053, 0.3722418248653412, 0.3628278076648712, 0.3607432544231415, 0.35776180028915405, 0.3543517291545868, 0.35406965017318726, 0.3515268862247467, 0.352372407913208, 0.34725505113601685, 0.344620943069458, 0.347512423992157, 0.3442411422729492, 0.346668541431427, 0.3447672426700592, 0.3425849974155426, 0.3431800603866577, 0.33727529644966125, 0.33871710300445557], "val_accuracy": [0.5386666655540466, 0.6463333368301392, 0.6726666688919067, 0.7023333311080933, 0.7286666631698608, 0.753000020980835, 0.7633333206176758, 0.7710000276565552, 0.7873333096504211, 0.7913333177566528, 0.7919999957084656, 0.8056666851043701, 0.8130000233650208, 0.8143333196640015, 0.812666654586792, 0.8276666402816772, 0.831333339214325, 0.8323333263397217, 0.8386666774749756, 0.8413333296775818, 0.8379999995231628, 0.8433333039283752, 0.8420000076293945, 0.8476666808128357, 0.8519999980926514, 0.8523333072662354, 0.8543333411216736, 0.8543333411216736, 0.8513333201408386, 0.8543333411216736, 0.8569999933242798, 0.8536666631698608, 0.856333315372467, 0.8629999756813049, 0.862666666507721, 0.8613333106040955, 0.8640000224113464, 0.862333357334137, 0.8619999885559082, 0.8650000095367432, 0.8643333315849304, 0.8673333525657654, 0.8676666617393494, 0.8659999966621399, 0.8643333315849304, 0.8703333139419556, 0.8693333268165588, 0.8700000047683716, 0.8686666488647461, 0.8730000257492065, 0.8669999837875366, 0.8669999837875366, 0.8730000257492065, 0.8686666488647461, 0.871999979019165]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0, 0, 1, 1], [0, 4, 4, 9], [0, 2], [0, 55], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8557142615318298, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2944142818450928, 2.192922830581665, 1.7789510488510132, 1.3676725625991821, 1.0786556005477905, 0.9262548089027405, 0.8472920060157776, 0.8271341323852539, 0.7564108967781067, 0.7517601251602173, 0.6885231137275696, 0.6797381639480591, 0.6575781106948853, 0.6366561651229858, 0.6008786559104919, 0.5956164002418518, 0.5907323360443115, 0.5717712044715881, 0.5541337132453918, 0.547920823097229, 0.5335974097251892, 0.5177076458930969, 0.5117685794830322, 0.5034595131874084, 0.47938916087150574, 0.4817083775997162, 0.48383376002311707, 0.4755468964576721, 0.46505051851272583, 0.4667569100856781, 0.44672220945358276, 0.4406473636627197, 0.43403172492980957, 0.43438002467155457, 0.41440531611442566, 0.40477240085601807, 0.41113951802253723, 0.3889094889163971, 0.3902265131473541, 0.37634533643722534, 0.3749102056026459, 0.3573031723499298, 0.36019259691238403, 0.34965428709983826, 0.3424046039581299, 0.3364574611186981, 0.3284030854701996], "accuracy": [0.1306300312280655, 0.32584863901138306, 0.4418174624443054, 0.5346717834472656, 0.6313564777374268, 0.666358470916748, 0.6885483860969543, 0.698190450668335, 0.7135120630264282, 0.7094175219535828, 0.7383436560630798, 0.7354378700256348, 0.7495707273483276, 0.7552502751350403, 0.7672698497772217, 0.774270236492157, 0.7733456492424011, 0.785101056098938, 0.7821952104568481, 0.7861577272415161, 0.7928939461708069, 0.7998943328857422, 0.8058380484580994, 0.8099326491355896, 0.8113855719566345, 0.8129705190658569, 0.8133667707443237, 0.8129705190658569, 0.8181217908859253, 0.8214238286018372, 0.8269713521003723, 0.8315942287445068, 0.8317263126373291, 0.8354246616363525, 0.8381983637809753, 0.845859169960022, 0.8413683772087097, 0.8475762605667114, 0.8477083444595337, 0.8516708612442017, 0.8531237840652466, 0.8576145768165588, 0.857218325138092, 0.8601241707801819, 0.8660678863525391, 0.8716153502464294, 0.8732003569602966], "val_loss": [2.24717116355896, 2.0288236141204834, 1.1588013172149658, 0.8625277280807495, 0.7697776556015015, 0.7414323091506958, 0.6732178926467896, 0.6650168895721436, 0.6367499232292175, 0.6126476526260376, 0.5754992365837097, 0.5545114278793335, 0.5364154577255249, 0.5287332534790039, 0.5230603218078613, 0.5171242952346802, 0.5094500184059143, 0.505983293056488, 0.4968798756599426, 0.4920055866241455, 0.4848371148109436, 0.47398096323013306, 0.47447431087493896, 0.48238199949264526, 0.46854540705680847, 0.4533528983592987, 0.45103132724761963, 0.4513322412967682, 0.4451271593570709, 0.4448672831058502, 0.43875983357429504, 0.43832454085350037, 0.439002126455307, 0.42876705527305603, 0.4208844304084778, 0.42843496799468994, 0.4247836172580719, 0.41933390498161316, 0.42343440651893616, 0.4263729155063629, 0.4285023510456085, 0.4235137403011322, 0.4258391857147217, 0.4244108200073242, 0.42191243171691895, 0.4210367798805237, 0.4246678948402405], "val_accuracy": [0.42800000309944153, 0.45100000500679016, 0.6446666717529297, 0.6899999976158142, 0.7333333492279053, 0.7193333506584167, 0.7570000290870667, 0.7606666684150696, 0.7573333382606506, 0.7716666460037231, 0.7666666507720947, 0.7833333611488342, 0.7893333435058594, 0.7896666526794434, 0.7960000038146973, 0.8003333210945129, 0.8133333325386047, 0.8080000281333923, 0.8113333582878113, 0.8186666369438171, 0.8206666707992554, 0.8183333277702332, 0.8183333277702332, 0.8169999718666077, 0.8273333311080933, 0.8360000252723694, 0.8363333344459534, 0.8383333086967468, 0.8393333554267883, 0.8383333086967468, 0.8486666679382324, 0.8453333377838135, 0.8413333296775818, 0.847000002861023, 0.8456666469573975, 0.8536666631698608, 0.8576666712760925, 0.859666645526886, 0.859333336353302, 0.8619999885559082, 0.8610000014305115, 0.8643333315849304, 0.856333315372467, 0.8619999885559082, 0.8603333234786987, 0.8600000143051147, 0.8616666793823242]}, "mapping_values": [1, 10, 5, 5, 3, 6, 4, 2, 2, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 5, 2, 7, 8, 1, 5, 1, 1, 7, 1, 1, 5, 3, 6, 7, 5, 8, 0], [0, 2, 0, 2, 0, 3, 1, 1, 0, 4, 2, 5], [0, 22, 8, 75], [1], [0], [2], [0]], "fitness": -0.8168571591377258, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.subtract(tf.math.square(tf.math.subtract(tf.math.subtract(beta, tf.math.add(tf.math.subtract(tf.math.subtract(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.multiply(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), sigma), tf.math.divide_no_nan(tf.math.add(tf.math.square(alpha), tf.math.sqrt(alpha)), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))), grad)), tf.math.negative(beta))), grad)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.4899487495422363, 0.8298435807228088, 0.6592290997505188, 0.602436900138855, 0.5687650442123413, 0.5598036050796509, 0.5242242217063904, 0.5364589095115662, 0.5190210938453674, 0.5299583077430725, 0.5318372845649719, 0.5566240549087524, 0.5634896159172058, 0.5530127882957458, 0.5598815083503723, 0.5525705814361572], "accuracy": [0.49570730328559875, 0.7144366502761841, 0.7578919529914856, 0.7724210619926453, 0.7866860628128052, 0.7989697456359863, 0.8014793395996094, 0.8029322624206543, 0.8124422430992126, 0.8025360107421875, 0.8082155585289001, 0.8096684813499451, 0.8029322624206543, 0.813498854637146, 0.8034605979919434, 0.8226125836372375], "val_loss": [0.8677002191543579, 0.6281115412712097, 0.5943737030029297, 0.5328691601753235, 0.5520387291908264, 0.542012631893158, 0.5095642805099487, 0.5122841596603394, 0.5200788378715515, 0.5952097773551941, 0.5466433763504028, 0.5997278094291687, 0.6088263392448425, 0.5724102258682251, 0.6234608292579651, 0.6326406002044678], "val_accuracy": [0.7099999785423279, 0.7703333497047424, 0.7833333611488342, 0.7960000038146973, 0.8006666898727417, 0.8086666464805603, 0.8149999976158142, 0.8183333277702332, 0.8193333148956299, 0.8103333115577698, 0.8199999928474426, 0.8009999990463257, 0.8116666674613953, 0.8186666369438171, 0.8019999861717224, 0.8130000233650208]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 31, 19, 12, 4, 1, 0, 1, 0], "tree_depth": 32}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [8, 8, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 6, 2, 1], [0, 2, 0, 3, 1, 0], [44, 16, 41], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 2, 2, 8, 2, 2, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4, 1], [54, 70, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 13, 7, 6, 3, 2, 1, 1, 1, 25, 14, 11, 6], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.sqrt(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.subtract(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma), tf.math.sqrt(tf.math.add(alpha, beta)))), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad)), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 1, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [55], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 2, 1, 4, 2, 6, 7, 7, 0, 1, 0, 9, 8, 6, 5, 2, 8, 7, 2, 2], [0, 0, 1, 1, 0, 0, 4, 1, 2, 0, 5, 2, 2, 6, 7, 5, 5, 7], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 0, 2, 1, 1, 1, 2, 1, 1, 1, 43, 25, 18, 6], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(alpha, tf.math.pow(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.subtract(grad, tf.math.negative(alpha))))), beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.square(tf.math.add(tf.math.sqrt(grad), tf.math.add(beta, beta))), grad))), grad), tf.math.add(tf.math.add(grad, grad), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 5, 0, 3, 4], [1, 2, 0, 3], [16, 16], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 4, 7, 0, 7, 0, 0, 5, 7, 3, 9], [1, 6, 6, 0, 2], [99, 84], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 9, 5, 8, 1, 4, 1, 4, 2, 0], [0, 1, 0, 3, 0, 0, 3, 1, 4, 0], [16, 99, 96, 99, 61, 97]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.negative(alpha)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(alpha, tf.math.add(tf.math.negative(grad), tf.math.add(tf.math.negative(tf.math.negative(tf.math.square(grad))), tf.math.add(tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.sqrt(tf.math.subtract(alpha, tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}, "mapping_values": [1, 9, 5, 4, 2, 6, 4, 2, 0, 16, 11, 5, 2, 11, 7, 4, 3], "tree_depth": 17}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 0], [0, 0, 9], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 5, 4], [0, 0, 0, 3, 0, 0, 3, 4, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 2, 3, 3, 0, 1, 19, 10, 9, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), grad), tf.math.square(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}]