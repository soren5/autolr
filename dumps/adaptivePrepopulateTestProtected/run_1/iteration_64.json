[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222564220428467, 1.8654934167861938, 1.392636775970459, 1.0800100564956665, 0.9349965453147888, 0.83723384141922, 0.771166205406189, 0.7229189872741699, 0.6917352080345154, 0.6532851457595825, 0.6217012405395508, 0.6138775944709778, 0.5917757749557495, 0.5793368220329285, 0.5567960739135742, 0.5480981469154358, 0.5474538803100586, 0.5317270755767822, 0.5151227116584778, 0.5055264234542847, 0.5014929175376892, 0.4862228035926819, 0.4727080464363098, 0.47010233998298645, 0.46293196082115173, 0.4504174590110779, 0.447412371635437, 0.4438058137893677, 0.42948198318481445, 0.417126327753067, 0.4136964678764343, 0.40704113245010376, 0.4020131528377533, 0.39997783303260803, 0.39442774653434753, 0.3916949927806854, 0.38260385394096375, 0.3716582953929901, 0.3650337755680084, 0.3573426902294159, 0.36132100224494934, 0.3564379811286926, 0.3445151448249817, 0.33812835812568665, 0.3384065330028534, 0.3359524607658386, 0.33294373750686646, 0.3212839663028717, 0.3217304050922394, 0.3110441267490387, 0.31119072437286377], "accuracy": [0.2685246467590332, 0.4955752193927765, 0.5610883831977844, 0.6197332143783569, 0.6668868064880371, 0.6963412761688232, 0.7205125093460083, 0.7349095344543457, 0.7469290494918823, 0.7604015469551086, 0.7732135653495789, 0.7761194109916687, 0.7878747582435608, 0.7901201844215393, 0.8009510040283203, 0.802271842956543, 0.8050455451011658, 0.8103289008140564, 0.8158763647079468, 0.8197067975997925, 0.817461371421814, 0.8255184292793274, 0.8273676037788391, 0.8333113193511963, 0.832650899887085, 0.8392550349235535, 0.8367455005645752, 0.8408400416374207, 0.8474441766738892, 0.8475762605667114, 0.8519350290298462, 0.8545766472816467, 0.8574824929237366, 0.8544445633888245, 0.8589354157447815, 0.8561616539955139, 0.8632941246032715, 0.8640866279602051, 0.869502067565918, 0.8702945709228516, 0.8702945709228516, 0.8689737319946289, 0.8772949576377869, 0.8754457831382751, 0.8767666220664978, 0.8809932470321655, 0.8776912093162537, 0.8853520154953003, 0.8811253309249878, 0.8886540532112122, 0.8885219693183899], "val_loss": [2.042604923248291, 1.5189800262451172, 1.0515391826629639, 0.8450219035148621, 0.7558016777038574, 0.7093545794487, 0.6593213081359863, 0.6230939030647278, 0.5998342037200928, 0.5830129981040955, 0.5592260956764221, 0.5484577417373657, 0.5345214009284973, 0.5245682597160339, 0.508945107460022, 0.5038147568702698, 0.4949795603752136, 0.4867953658103943, 0.47808560729026794, 0.4682127833366394, 0.46202969551086426, 0.4617370665073395, 0.4514632225036621, 0.4495610296726227, 0.4391477108001709, 0.43453720211982727, 0.42648962140083313, 0.42570948600769043, 0.4242604672908783, 0.4146496057510376, 0.41664713621139526, 0.4113439619541168, 0.41593310236930847, 0.4013250470161438, 0.40437138080596924, 0.39875122904777527, 0.3905998170375824, 0.3918660581111908, 0.38664665818214417, 0.3956036865711212, 0.38548287749290466, 0.3855803310871124, 0.3777529299259186, 0.3802799582481384, 0.3779101073741913, 0.371540904045105, 0.3776323199272156, 0.36875513195991516, 0.37442195415496826, 0.3655129075050354, 0.3628164827823639], "val_accuracy": [0.5523333549499512, 0.6656666398048401, 0.6830000281333923, 0.7059999704360962, 0.7336666584014893, 0.7506666779518127, 0.7580000162124634, 0.7689999938011169, 0.7736666798591614, 0.7846666574478149, 0.7950000166893005, 0.7963333129882812, 0.7993333339691162, 0.8100000023841858, 0.8173333406448364, 0.8190000057220459, 0.8213333487510681, 0.8209999799728394, 0.8286666870117188, 0.828000009059906, 0.8323333263397217, 0.8336666822433472, 0.8333333134651184, 0.8349999785423279, 0.8386666774749756, 0.8393333554267883, 0.8429999947547913, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8446666598320007, 0.8463333249092102, 0.8503333330154419, 0.8529999852180481, 0.8493333458900452, 0.8550000190734863, 0.8546666502952576, 0.856333315372467, 0.8613333106040955, 0.856333315372467, 0.859000027179718, 0.8550000190734863, 0.8586666584014893, 0.8633333444595337, 0.8619999885559082, 0.8659999966621399, 0.859666645526886, 0.862666666507721, 0.8603333234786987, 0.8610000014305115, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.87371426820755, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224191904067993, 1.870800256729126, 1.3979483842849731, 1.1111371517181396, 0.9502485990524292, 0.8432950973510742, 0.7741607427597046, 0.7298845648765564, 0.6891823410987854, 0.6580208539962769, 0.627014696598053, 0.6067541241645813, 0.586046576499939, 0.5686342716217041, 0.5561819672584534, 0.5407958030700684, 0.5282605886459351, 0.5139845609664917, 0.5032731294631958, 0.4925294816493988, 0.4856162369251251, 0.47488489747047424, 0.4625175893306732, 0.4504631757736206, 0.44614744186401367, 0.43585869669914246, 0.4280504584312439, 0.4079979658126831, 0.41232144832611084, 0.39954066276550293, 0.39109447598457336, 0.3995639383792877, 0.386846661567688, 0.3825794458389282, 0.37821680307388306, 0.3675737977027893, 0.36371368169784546, 0.3544125258922577, 0.3545825183391571, 0.3490418493747711, 0.3528420925140381, 0.3435502350330353, 0.33579516410827637, 0.33256131410598755, 0.31760674715042114, 0.31883949041366577, 0.3135702311992645, 0.31088295578956604, 0.30368906259536743, 0.3010624647140503, 0.2993878424167633, 0.29562997817993164, 0.288539856672287, 0.28690704703330994, 0.2879180312156677, 0.2726479172706604, 0.27077311277389526, 0.2674301266670227, 0.26065751910209656, 0.2578071653842926, 0.25763174891471863, 0.2514558732509613, 0.24678902328014374, 0.24395912885665894, 0.2390938103199005], "accuracy": [0.26865673065185547, 0.48606523871421814, 0.5686171054840088, 0.6127327680587769, 0.656980574131012, 0.6999075412750244, 0.7169462442398071, 0.7375511527061462, 0.7481178045272827, 0.7565711140632629, 0.7668735980987549, 0.7769119143486023, 0.7854973077774048, 0.7872143983840942, 0.7960638999938965, 0.7989697456359863, 0.8087438941001892, 0.8088759779930115, 0.8203672170639038, 0.817989706993103, 0.8204993009567261, 0.8294808864593506, 0.8362171649932861, 0.837537944316864, 0.837141752243042, 0.8432175517082214, 0.844010055065155, 0.8512746095657349, 0.8532558679580688, 0.8541803956031799, 0.8607845902442932, 0.8577466607093811, 0.8597279191017151, 0.8654074668884277, 0.8646149635314941, 0.870030403137207, 0.8712190985679626, 0.8693699836730957, 0.873860776424408, 0.8714832663536072, 0.8733324408531189, 0.8755778670310974, 0.878351628780365, 0.8747853636741638, 0.8868049383163452, 0.8865407705307007, 0.889050304889679, 0.8856161832809448, 0.8910315632820129, 0.8911636471748352, 0.8936732411384583, 0.8936732411384583, 0.8953903317451477, 0.8943336606025696, 0.8927486538887024, 0.9017302989959717, 0.9022586345672607, 0.9033153057098389, 0.9084665179252625, 0.9043719172477722, 0.9043719172477722, 0.9128252267837524, 0.9085986018180847, 0.9115044474601746, 0.9119006991386414], "val_loss": [2.040699005126953, 1.5156238079071045, 1.0380830764770508, 0.8314576745033264, 0.7390812039375305, 0.6782105565071106, 0.6320546865463257, 0.5990883708000183, 0.5670847296714783, 0.5477868914604187, 0.5261750221252441, 0.513235330581665, 0.5035799741744995, 0.49009251594543457, 0.4823750853538513, 0.4733150601387024, 0.464707612991333, 0.4591396450996399, 0.4489372968673706, 0.4458346366882324, 0.4343162477016449, 0.43236443400382996, 0.42575666308403015, 0.4214634895324707, 0.41452139616012573, 0.4124661386013031, 0.4032234847545624, 0.4009738266468048, 0.3995133340358734, 0.3961196839809418, 0.3921261429786682, 0.38912370800971985, 0.38946908712387085, 0.3952411413192749, 0.38458865880966187, 0.3817563056945801, 0.3778732120990753, 0.3791971802711487, 0.3750617802143097, 0.38118958473205566, 0.37703946232795715, 0.3704274892807007, 0.36912021040916443, 0.36606425046920776, 0.3678441047668457, 0.3634706139564514, 0.36482542753219604, 0.3595110774040222, 0.3584480285644531, 0.3626067042350769, 0.3624550402164459, 0.3577294945716858, 0.3615812659263611, 0.35487085580825806, 0.35242223739624023, 0.35812467336654663, 0.35263264179229736, 0.35294559597969055, 0.35257717967033386, 0.3512097895145416, 0.3526791036128998, 0.3524811863899231, 0.34987354278564453, 0.3486827313899994, 0.35448676347732544], "val_accuracy": [0.5429999828338623, 0.653333306312561, 0.6859999895095825, 0.7099999785423279, 0.7369999885559082, 0.7566666603088379, 0.7663333415985107, 0.7829999923706055, 0.7863333225250244, 0.796999990940094, 0.8063333630561829, 0.8130000233650208, 0.8236666917800903, 0.8213333487510681, 0.8360000252723694, 0.8370000123977661, 0.8353333473205566, 0.8450000286102295, 0.840666651725769, 0.8410000205039978, 0.8539999723434448, 0.8476666808128357, 0.8496666550636292, 0.8579999804496765, 0.8560000061988831, 0.8556666374206543, 0.8610000014305115, 0.8669999837875366, 0.8686666488647461, 0.8633333444595337, 0.8659999966621399, 0.8703333139419556, 0.8650000095367432, 0.8656666874885559, 0.8653333187103271, 0.8709999918937683, 0.874666690826416, 0.8703333139419556, 0.8726666569709778, 0.8636666536331177, 0.8736666440963745, 0.875, 0.875333309173584, 0.8740000128746033, 0.8723333477973938, 0.874666690826416, 0.871666669845581, 0.8766666650772095, 0.8786666393280029, 0.875333309173584, 0.8743333220481873, 0.8790000081062317, 0.8763333559036255, 0.8769999742507935, 0.8793333172798157, 0.8769999742507935, 0.8796666860580444, 0.8803333044052124, 0.8816666603088379, 0.8830000162124634, 0.8823333382606506, 0.8813333511352539, 0.8786666393280029, 0.8830000162124634, 0.8773333430290222]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 1], [0, 3], [0, 1], [0], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8628571629524231, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2942299842834473, 2.1888158321380615, 1.7742193937301636, 1.3623167276382446, 1.0756263732910156, 0.9120696187019348, 0.8425265550613403, 0.807655930519104, 0.7534815073013306, 0.7432689070701599, 0.6961724162101746, 0.6886786818504333, 0.6525027751922607, 0.627656102180481, 0.6076084971427917, 0.5949614644050598, 0.5784010291099548, 0.5713511109352112, 0.5599531531333923, 0.5516911745071411, 0.5398414134979248, 0.5247312188148499, 0.5166059136390686, 0.5001702904701233, 0.4830033779144287, 0.4742703139781952, 0.45892438292503357, 0.4549335837364197, 0.45095548033714294, 0.44628027081489563, 0.4283857047557831, 0.4242955446243286, 0.41460666060447693, 0.4234742224216461, 0.4109483063220978, 0.39652469754219055, 0.3916214406490326, 0.37898460030555725, 0.3718232810497284, 0.3589785397052765, 0.35391831398010254, 0.35025301575660706, 0.35487842559814453, 0.33941221237182617, 0.34285518527030945, 0.3359163701534271], "accuracy": [0.12996962666511536, 0.3365473449230194, 0.4345529079437256, 0.5394267439842224, 0.6365077495574951, 0.669792652130127, 0.6900013089179993, 0.700171709060669, 0.7083608508110046, 0.717870831489563, 0.7353057861328125, 0.7411174178123474, 0.7518161535263062, 0.7658169269561768, 0.7629110813140869, 0.7725531458854675, 0.7820631265640259, 0.7810064554214478, 0.7884030938148499, 0.7901201844215393, 0.7975168228149414, 0.7961959838867188, 0.8057059645652771, 0.8072909712791443, 0.8165367841720581, 0.8201030492782593, 0.8260467648506165, 0.8284242749214172, 0.8293488025665283, 0.8313300609588623, 0.835160493850708, 0.843481719493866, 0.8409721255302429, 0.8408400416374207, 0.8380662798881531, 0.8453308939933777, 0.8495575189590454, 0.8521991968154907, 0.8562937378883362, 0.8577466607093811, 0.8619733452796936, 0.8663320541381836, 0.86118084192276, 0.8689737319946289, 0.8656716346740723, 0.8730682730674744], "val_loss": [2.24761962890625, 2.0251104831695557, 1.1540238857269287, 0.889028012752533, 0.7856788039207458, 0.736168622970581, 0.7065589427947998, 0.6689950227737427, 0.6610358953475952, 0.636472225189209, 0.6225774884223938, 0.5956078171730042, 0.5708417892456055, 0.5649088025093079, 0.5587468147277832, 0.5430421829223633, 0.5395677089691162, 0.5303535461425781, 0.5183342695236206, 0.5123652815818787, 0.5011895895004272, 0.5010289549827576, 0.48248592019081116, 0.47352322936058044, 0.4710087776184082, 0.47218358516693115, 0.45990169048309326, 0.4490511119365692, 0.4498854875564575, 0.4432777464389801, 0.4433308243751526, 0.43906354904174805, 0.42937883734703064, 0.4349212944507599, 0.4326023459434509, 0.4322713613510132, 0.4350242614746094, 0.4303632080554962, 0.4198940396308899, 0.4138137996196747, 0.4129047989845276, 0.42253366112709045, 0.42893901467323303, 0.4303956627845764, 0.4343019127845764, 0.4332222640514374], "val_accuracy": [0.42366665601730347, 0.4736666679382324, 0.6453333497047424, 0.6973333358764648, 0.7260000109672546, 0.7229999899864197, 0.7409999966621399, 0.7513333559036255, 0.7523333430290222, 0.7666666507720947, 0.7673333287239075, 0.7820000052452087, 0.781000018119812, 0.7856666445732117, 0.781000018119812, 0.7910000085830688, 0.796999990940094, 0.8029999732971191, 0.8083333373069763, 0.8146666884422302, 0.8216666579246521, 0.8213333487510681, 0.8303333520889282, 0.8296666741371155, 0.8240000009536743, 0.8293333053588867, 0.8296666741371155, 0.8356666564941406, 0.8353333473205566, 0.8363333344459534, 0.8379999995231628, 0.8360000252723694, 0.8399999737739563, 0.8349999785423279, 0.8389999866485596, 0.8393333554267883, 0.8416666388511658, 0.8476666808128357, 0.8500000238418579, 0.8513333201408386, 0.8586666584014893, 0.8536666631698608, 0.8473333120346069, 0.8493333458900452, 0.8500000238418579, 0.8503333330154419]}, "mapping_values": [1, 10, 5, 5, 3, 4, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 3, 4, 7, 1, 1, 1, 5, 4, 9, 5, 9, 4, 1, 7, 0, 5, 6, 1, 1, 4, 2, 8, 5, 5, 9, 0, 0, 1, 5, 6, 1, 3, 0, 5, 0, 3, 0], [0, 0, 5, 7, 6, 3, 5, 1, 1, 0, 5, 2, 6, 2, 3, 2, 4, 3], [0, 0, 20, 11, 60, 80], [1], [0], [2], [0]], "fitness": -0.8362857103347778, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.pow(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.subtract(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), tf.math.square(grad))), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), grad), tf.math.pow(sigma, tf.math.subtract(tf.math.add(tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.math.subtract(tf.math.subtract(tf.math.pow(tf.math.add(tf.math.sqrt(grad), alpha), tf.math.square(tf.math.square(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(alpha)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.subtract(grad, tf.math.square(tf.math.divide_no_nan(tf.math.subtract(beta, grad), tf.math.multiply(tf.math.negative(beta), tf.math.square(tf.math.negative(sigma)))))))))), tf.math.multiply(beta, tf.math.negative(grad))), sigma)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5106532573699951, 0.7777696251869202, 0.6771279573440552, 0.6156386137008667, 0.5707221031188965, 0.5526947975158691, 0.542312741279602, 0.5142672657966614, 0.5496355295181274, 0.4921001195907593, 0.5327825546264648, 0.5383507013320923], "accuracy": [0.4737815260887146, 0.7185312509536743, 0.7642319202423096, 0.7777044177055359, 0.7977809906005859, 0.7936864495277405, 0.8041210174560547, 0.8152159452438354, 0.8026680946350098, 0.8208954930305481, 0.8178576231002808, 0.8166688680648804], "val_loss": [0.7966283559799194, 0.6199763417243958, 0.543786883354187, 0.5083897113800049, 0.5218836069107056, 0.5081023573875427, 0.489531010389328, 0.5054100155830383, 0.5151503086090088, 0.5201826691627502, 0.5680561065673828, 0.5651736855506897], "val_accuracy": [0.7283333539962769, 0.7746666669845581, 0.8026666641235352, 0.8143333196640015, 0.8163333535194397, 0.8263333439826965, 0.8373333215713501, 0.815666675567627, 0.8163333535194397, 0.8320000171661377, 0.8276666402816772, 0.8349999785423279]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 56, 38, 18, 6, 1, 0, 1, 0], "tree_depth": 33}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0], [0, 2, 9, 0, 3, 5], [2, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [3, 3, 4, 3, 0, 4, 3, 1, 4, 0], [16, 99, 4, 86, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 5, 4, 1, 1, 2, 1, 1, 1, 21, 11, 10, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(sigma, tf.math.pow(grad, sigma))), tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma)))), alpha), tf.math.add(tf.math.sqrt(grad), tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 0], [39, 39, 18], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 4, 0, 0, 5], [0, 2, 0, 3], [79, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 0, 4, 2, 8], [0, 0, 4, 3, 0, 4, 3, 4, 2, 0], [16, 99, 16, 90, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 6, 3, 3, 2, 2, 1, 1, 1, 17, 9, 8, 3], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.pow(grad, sigma)), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [2, 2, 3, 0, 3, 5], [0, 0, 0, 3, 1], [16, 16, 0], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 4, 1, 4, 0, 0, 3, 4, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(grad))), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(alpha, grad))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)))), grad), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}, "mapping_values": [1, 9, 5, 4, 2, 11, 6, 5, 3, 2, 1, 1, 1, 18, 9, 9, 3], "tree_depth": 17}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 4, 5, 0, 4, 1], [0, 1, 0, 0, 3, 1, 1], [62, 62, 79], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 3, 0, 3], [16, 74], [0, 0, 1, 1], [0, 7], [0, 5], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [6, 3, 3, 6, 4, 1, 4, 1, 4, 2, 8, 1, 5, 8, 8], [0, 0, 0, 4, 0, 0, 3, 4, 2, 0, 3, 3], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 10, 7, 3, 9, 5, 4, 2, 4, 2, 2, 1, 27, 15, 12, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.math.square(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(tf.math.subtract(grad, alpha), alpha)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), grad)), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.square(tf.math.sqrt(tf.math.sqrt(sigma))), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}]