[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222564220428467, 1.8654934167861938, 1.392636775970459, 1.0800100564956665, 0.9349965453147888, 0.83723384141922, 0.771166205406189, 0.7229189872741699, 0.6917352080345154, 0.6532851457595825, 0.6217012405395508, 0.6138775944709778, 0.5917757749557495, 0.5793368220329285, 0.5567960739135742, 0.5480981469154358, 0.5474538803100586, 0.5317270755767822, 0.5151227116584778, 0.5055264234542847, 0.5014929175376892, 0.4862228035926819, 0.4727080464363098, 0.47010233998298645, 0.46293196082115173, 0.4504174590110779, 0.447412371635437, 0.4438058137893677, 0.42948198318481445, 0.417126327753067, 0.4136964678764343, 0.40704113245010376, 0.4020131528377533, 0.39997783303260803, 0.39442774653434753, 0.3916949927806854, 0.38260385394096375, 0.3716582953929901, 0.3650337755680084, 0.3573426902294159, 0.36132100224494934, 0.3564379811286926, 0.3445151448249817, 0.33812835812568665, 0.3384065330028534, 0.3359524607658386, 0.33294373750686646, 0.3212839663028717, 0.3217304050922394, 0.3110441267490387, 0.31119072437286377], "accuracy": [0.2685246467590332, 0.4955752193927765, 0.5610883831977844, 0.6197332143783569, 0.6668868064880371, 0.6963412761688232, 0.7205125093460083, 0.7349095344543457, 0.7469290494918823, 0.7604015469551086, 0.7732135653495789, 0.7761194109916687, 0.7878747582435608, 0.7901201844215393, 0.8009510040283203, 0.802271842956543, 0.8050455451011658, 0.8103289008140564, 0.8158763647079468, 0.8197067975997925, 0.817461371421814, 0.8255184292793274, 0.8273676037788391, 0.8333113193511963, 0.832650899887085, 0.8392550349235535, 0.8367455005645752, 0.8408400416374207, 0.8474441766738892, 0.8475762605667114, 0.8519350290298462, 0.8545766472816467, 0.8574824929237366, 0.8544445633888245, 0.8589354157447815, 0.8561616539955139, 0.8632941246032715, 0.8640866279602051, 0.869502067565918, 0.8702945709228516, 0.8702945709228516, 0.8689737319946289, 0.8772949576377869, 0.8754457831382751, 0.8767666220664978, 0.8809932470321655, 0.8776912093162537, 0.8853520154953003, 0.8811253309249878, 0.8886540532112122, 0.8885219693183899], "val_loss": [2.042604923248291, 1.5189800262451172, 1.0515391826629639, 0.8450219035148621, 0.7558016777038574, 0.7093545794487, 0.6593213081359863, 0.6230939030647278, 0.5998342037200928, 0.5830129981040955, 0.5592260956764221, 0.5484577417373657, 0.5345214009284973, 0.5245682597160339, 0.508945107460022, 0.5038147568702698, 0.4949795603752136, 0.4867953658103943, 0.47808560729026794, 0.4682127833366394, 0.46202969551086426, 0.4617370665073395, 0.4514632225036621, 0.4495610296726227, 0.4391477108001709, 0.43453720211982727, 0.42648962140083313, 0.42570948600769043, 0.4242604672908783, 0.4146496057510376, 0.41664713621139526, 0.4113439619541168, 0.41593310236930847, 0.4013250470161438, 0.40437138080596924, 0.39875122904777527, 0.3905998170375824, 0.3918660581111908, 0.38664665818214417, 0.3956036865711212, 0.38548287749290466, 0.3855803310871124, 0.3777529299259186, 0.3802799582481384, 0.3779101073741913, 0.371540904045105, 0.3776323199272156, 0.36875513195991516, 0.37442195415496826, 0.3655129075050354, 0.3628164827823639], "val_accuracy": [0.5523333549499512, 0.6656666398048401, 0.6830000281333923, 0.7059999704360962, 0.7336666584014893, 0.7506666779518127, 0.7580000162124634, 0.7689999938011169, 0.7736666798591614, 0.7846666574478149, 0.7950000166893005, 0.7963333129882812, 0.7993333339691162, 0.8100000023841858, 0.8173333406448364, 0.8190000057220459, 0.8213333487510681, 0.8209999799728394, 0.8286666870117188, 0.828000009059906, 0.8323333263397217, 0.8336666822433472, 0.8333333134651184, 0.8349999785423279, 0.8386666774749756, 0.8393333554267883, 0.8429999947547913, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8446666598320007, 0.8463333249092102, 0.8503333330154419, 0.8529999852180481, 0.8493333458900452, 0.8550000190734863, 0.8546666502952576, 0.856333315372467, 0.8613333106040955, 0.856333315372467, 0.859000027179718, 0.8550000190734863, 0.8586666584014893, 0.8633333444595337, 0.8619999885559082, 0.8659999966621399, 0.859666645526886, 0.862666666507721, 0.8603333234786987, 0.8610000014305115, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8691428303718567, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222968101501465, 1.8600733280181885, 1.3827595710754395, 1.0951740741729736, 0.9432040452957153, 0.8424968123435974, 0.777826189994812, 0.733016312122345, 0.7028555870056152, 0.6673749685287476, 0.6373592615127563, 0.6171562671661377, 0.5898169279098511, 0.5765112638473511, 0.5627169609069824, 0.5509274005889893, 0.5338268280029297, 0.5204727649688721, 0.5147837996482849, 0.5018338561058044, 0.4958656430244446, 0.46921420097351074, 0.4805205464363098, 0.4671587347984314, 0.4504665434360504, 0.443614661693573, 0.43512293696403503, 0.4341185986995697, 0.41911622881889343, 0.4270874857902527, 0.4065651297569275, 0.40730413794517517, 0.4069545269012451, 0.39820876717567444, 0.3850809633731842, 0.37456411123275757, 0.37226635217666626, 0.3740013837814331, 0.3633027970790863, 0.3531113564968109, 0.3515848219394684, 0.34963876008987427, 0.342419296503067, 0.34174904227256775, 0.33129754662513733, 0.32749611139297485, 0.32155823707580566, 0.3190487325191498, 0.31612780690193176, 0.304473876953125, 0.3083364963531494, 0.30535075068473816, 0.29783010482788086, 0.29365742206573486, 0.29087111353874207, 0.2858097553253174, 0.2830825448036194, 0.28217613697052, 0.2772834599018097, 0.2686612010002136, 0.2658679485321045, 0.2681320607662201, 0.2612946629524231, 0.25590065121650696, 0.2558700740337372, 0.25162017345428467, 0.24532419443130493, 0.2494634985923767, 0.24294798076152802], "accuracy": [0.2751287817955017, 0.49451854825019836, 0.5674283504486084, 0.6145819425582886, 0.6627922058105469, 0.7021529674530029, 0.728701651096344, 0.7325320243835449, 0.7448157668113708, 0.759609043598175, 0.7712323069572449, 0.778761088848114, 0.7915731072425842, 0.7944789528846741, 0.800818920135498, 0.8006868362426758, 0.8099326491355896, 0.8095363974571228, 0.8125742673873901, 0.8212917447090149, 0.8231409192085266, 0.8297450542449951, 0.8274996876716614, 0.8337075710296631, 0.8399154543876648, 0.8441421389579773, 0.8426892161369324, 0.8482366800308228, 0.8549728989601135, 0.8470479249954224, 0.8558974862098694, 0.8540483713150024, 0.8569541573524475, 0.8584070801734924, 0.8598600029945374, 0.86553955078125, 0.8681812286376953, 0.8665962219238281, 0.8709549307823181, 0.8753136992454529, 0.8782195448875427, 0.8749174475669861, 0.8782195448875427, 0.8757099509239197, 0.882710337638855, 0.8799365758895874, 0.883238673210144, 0.885219931602478, 0.8877294659614563, 0.8938053250312805, 0.8903711438179016, 0.8908994793891907, 0.8920882344245911, 0.8918240666389465, 0.8949940800666809, 0.8993527889251709, 0.9006736278533936, 0.898428201675415, 0.9014661312103271, 0.9022586345672607, 0.9037115573883057, 0.9014661312103271, 0.9026548862457275, 0.906749427318573, 0.9080702662467957, 0.9088627696037292, 0.9120327830314636, 0.9058248400688171, 0.9146744012832642], "val_loss": [2.0334408283233643, 1.4930254220962524, 1.0098882913589478, 0.7996004223823547, 0.7149685025215149, 0.6679255366325378, 0.6215183734893799, 0.5913451313972473, 0.5674230456352234, 0.5454918742179871, 0.5260619521141052, 0.5112830996513367, 0.4976688623428345, 0.48621872067451477, 0.4783993661403656, 0.4670707881450653, 0.46025851368904114, 0.44599178433418274, 0.4442785680294037, 0.45112597942352295, 0.4254680871963501, 0.418742835521698, 0.4157838225364685, 0.4082657992839813, 0.40721189975738525, 0.3961557149887085, 0.39639559388160706, 0.3910285234451294, 0.38790184259414673, 0.38681429624557495, 0.3789885640144348, 0.3788268566131592, 0.37668538093566895, 0.371357798576355, 0.3636810779571533, 0.3640804886817932, 0.36305683851242065, 0.3626319169998169, 0.3569283187389374, 0.357831209897995, 0.35005486011505127, 0.3515443801879883, 0.34959688782691956, 0.3490735590457916, 0.3507139980792999, 0.34543004631996155, 0.34872671961784363, 0.3424641191959381, 0.33899807929992676, 0.3375413715839386, 0.3346456289291382, 0.34022843837738037, 0.33612364530563354, 0.3333297073841095, 0.3287094533443451, 0.3323657214641571, 0.32563316822052, 0.3303297758102417, 0.32731950283050537, 0.32780030369758606, 0.3285309970378876, 0.32766759395599365, 0.3213656544685364, 0.32205894589424133, 0.3232642412185669, 0.32197657227516174, 0.3216428756713867, 0.3222736120223999, 0.319486141204834], "val_accuracy": [0.5453333258628845, 0.6629999876022339, 0.6913333535194397, 0.7263333201408386, 0.7463333606719971, 0.7586666941642761, 0.7696666717529297, 0.7793333530426025, 0.7866666913032532, 0.793666660785675, 0.7986666560173035, 0.8053333163261414, 0.8106666803359985, 0.8140000104904175, 0.8193333148956299, 0.8199999928474426, 0.8289999961853027, 0.8339999914169312, 0.8320000171661377, 0.831333339214325, 0.8383333086967468, 0.8429999947547913, 0.8446666598320007, 0.846666693687439, 0.8420000076293945, 0.8496666550636292, 0.8510000109672546, 0.8603333234786987, 0.8573333621025085, 0.8539999723434448, 0.8573333621025085, 0.8603333234786987, 0.8646666407585144, 0.8606666922569275, 0.8643333315849304, 0.8650000095367432, 0.8653333187103271, 0.8696666955947876, 0.8650000095367432, 0.8650000095367432, 0.8683333396911621, 0.8669999837875366, 0.8700000047683716, 0.8700000047683716, 0.8706666827201843, 0.8686666488647461, 0.8676666617393494, 0.8706666827201843, 0.8740000128746033, 0.8726666569709778, 0.8756666779518127, 0.8726666569709778, 0.8709999918937683, 0.8766666650772095, 0.8776666522026062, 0.875333309173584, 0.8796666860580444, 0.8803333044052124, 0.8790000081062317, 0.8766666650772095, 0.8809999823570251, 0.8799999952316284, 0.8833333253860474, 0.8840000033378601, 0.8833333253860474, 0.8813333511352539, 0.8790000081062317, 0.8813333511352539, 0.8836666941642761]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 1], [0], [0], [0], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8551428318023682, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.292745351791382, 2.185457944869995, 1.7498081922531128, 1.3489733934402466, 1.0647706985473633, 0.9102901220321655, 0.8049063682556152, 0.7868044376373291, 0.7618127465248108, 0.7318835258483887, 0.680884838104248, 0.679198682308197, 0.6548207998275757, 0.6192570328712463, 0.6086498498916626, 0.5882760882377625, 0.5621381998062134, 0.5637203454971313, 0.5471339821815491, 0.540127694606781, 0.5197076797485352, 0.5090067982673645, 0.49679428339004517, 0.49112173914909363, 0.486706405878067, 0.46708449721336365, 0.445556104183197, 0.45090755820274353, 0.43354642391204834, 0.4393710494041443, 0.421906054019928, 0.4190037250518799, 0.4124428331851959, 0.4030454158782959, 0.39044189453125, 0.3894156813621521, 0.37820568680763245, 0.3724852204322815, 0.37197744846343994, 0.3674488365650177, 0.35496649146080017, 0.34873083233833313, 0.34407883882522583, 0.33697080612182617, 0.33818894624710083, 0.3257529139518738, 0.3176460564136505, 0.3191373646259308, 0.31863099336624146, 0.30816057324409485, 0.3122687041759491, 0.30485349893569946, 0.3121635317802429, 0.29927074909210205], "accuracy": [0.1344604343175888, 0.3343019485473633, 0.4443270266056061, 0.5498613119125366, 0.6342623233795166, 0.6748117804527283, 0.7025492191314697, 0.7189275026321411, 0.702681303024292, 0.7145687341690063, 0.7357020378112793, 0.7395324110984802, 0.7486461400985718, 0.767401933670044, 0.7623828053474426, 0.7794214487075806, 0.7786290049552917, 0.7827235460281372, 0.7910447716712952, 0.7911768555641174, 0.7996301651000977, 0.8034605979919434, 0.8090080618858337, 0.8121780753135681, 0.8086118102073669, 0.8198388814926147, 0.8274996876716614, 0.8244617581367493, 0.8356888294219971, 0.8321225643157959, 0.8358209133148193, 0.8374059200286865, 0.8417646288871765, 0.845859169960022, 0.8459912538528442, 0.847840428352356, 0.8527275323867798, 0.8555012345314026, 0.856689989566803, 0.8518029451370239, 0.8621054291725159, 0.8614450097084045, 0.8665962219238281, 0.8685774803161621, 0.868049144744873, 0.8726720213890076, 0.8755778670310974, 0.8753136992454529, 0.8776912093162537, 0.8796724081039429, 0.8790120482444763, 0.8811253309249878, 0.8762382864952087, 0.8848236799240112], "val_loss": [2.2455849647521973, 2.012394428253174, 1.1190720796585083, 0.8812453746795654, 0.7695401906967163, 0.7091314196586609, 0.6803475022315979, 0.6511674523353577, 0.6272039413452148, 0.6072434782981873, 0.5765918493270874, 0.5622157454490662, 0.5466042757034302, 0.53764808177948, 0.5356842279434204, 0.5214118957519531, 0.500756025314331, 0.5014223456382751, 0.4990217387676239, 0.48878589272499084, 0.47758862376213074, 0.4699579179286957, 0.45829784870147705, 0.4651029407978058, 0.4514150321483612, 0.440466970205307, 0.4311693608760834, 0.4268740117549896, 0.430613249540329, 0.4140132665634155, 0.41129833459854126, 0.4151105284690857, 0.428460031747818, 0.4172646403312683, 0.41319528222084045, 0.41319766640663147, 0.4134455919265747, 0.4005722999572754, 0.39221957325935364, 0.397796630859375, 0.40473005175590515, 0.39877456426620483, 0.38775330781936646, 0.3899352252483368, 0.39221417903900146, 0.3875017464160919, 0.3884229063987732, 0.3968367576599121, 0.41009825468063354, 0.3924107253551483, 0.41139039397239685, 0.4258264899253845, 0.4215187728404999, 0.4307629466056824], "val_accuracy": [0.4269999861717224, 0.4659999907016754, 0.6446666717529297, 0.6903333067893982, 0.7146666646003723, 0.734333336353302, 0.7446666955947876, 0.7543333172798157, 0.768666684627533, 0.7730000019073486, 0.7756666541099548, 0.7789999842643738, 0.7860000133514404, 0.7963333129882812, 0.7973333597183228, 0.7946666479110718, 0.8136666417121887, 0.8046666383743286, 0.8073333501815796, 0.8206666707992554, 0.828000009059906, 0.8256666660308838, 0.8346666693687439, 0.8349999785423279, 0.8416666388511658, 0.8429999947547913, 0.8453333377838135, 0.8486666679382324, 0.8443333506584167, 0.8510000109672546, 0.8566666841506958, 0.8583333492279053, 0.8516666889190674, 0.8526666760444641, 0.8526666760444641, 0.8610000014305115, 0.859666645526886, 0.8643333315849304, 0.8613333106040955, 0.8693333268165588, 0.8700000047683716, 0.8666666746139526, 0.8690000176429749, 0.8679999709129333, 0.8713333606719971, 0.8723333477973938, 0.8706666827201843, 0.8769999742507935, 0.8806666731834412, 0.8776666522026062, 0.8773333430290222, 0.8726666569709778, 0.8733333349227905, 0.874666690826416]}, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [0, 1, 8, 0, 1, 2], [0, 2, 2, 1], [0], [1], [0], [2], [0]], "fitness": -0.8137142658233643, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.negative(tf.math.subtract(beta, tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5384167432785034, 0.8445802927017212, 0.6859015822410583, 0.6121127009391785, 0.5600243210792542, 0.5466786623001099, 0.5238699913024902, 0.5090304017066956, 0.4894977807998657, 0.4862309992313385, 0.46278390288352966, 0.45484092831611633, 0.49595341086387634, 0.5229019522666931, 0.48072701692581177], "accuracy": [0.49451854825019836, 0.7098137736320496, 0.7503632307052612, 0.7709681391716003, 0.7940827012062073, 0.8059701323509216, 0.8125742673873901, 0.8195747137069702, 0.8207634687423706, 0.8265751004219055, 0.8449346423149109, 0.8409721255302429, 0.8401796221733093, 0.8278959393501282, 0.8301413059234619], "val_loss": [0.8420038819313049, 0.6511731147766113, 0.5584151148796082, 0.5170097947120667, 0.5103402733802795, 0.4975420832633972, 0.4856470227241516, 0.5247567296028137, 0.48885729908943176, 0.5012212991714478, 0.5054131150245667, 0.5459120869636536, 0.5951877236366272, 0.5357239842414856, 0.5295878052711487], "val_accuracy": [0.7013333439826965, 0.7616666555404663, 0.7876666784286499, 0.8083333373069763, 0.8103333115577698, 0.8130000233650208, 0.8323333263397217, 0.8233333230018616, 0.8360000252723694, 0.846666693687439, 0.840666651725769, 0.8360000252723694, 0.82833331823349, 0.8320000171661377, 0.8346666693687439]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 10, 6, 4, 1, 1, 0, 1, 0], "tree_depth": 15}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 3, 0, 3], [0, 1, 0, 1], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 2, 3, 6, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 5, 4, 0, 4, 4], [0, 5, 6, 6], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 13, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 6, 3, 3, 2, 10, 6, 4, 1, 21, 12, 9, 6], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.pow(tf.math.negative(tf.math.pow(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), grad)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma)), tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), alpha), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 9, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1], [5], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 4], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 2], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 1, 2, 1, 1, 1, 23, 12, 11, 6], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), sigma), tf.math.sqrt(tf.math.pow(alpha, beta))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [5, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [0], [10], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 3, 2, 8], [0, 0, 0, 3, 0, 0, 3, 4, 2, 3], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 1, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, grad)))", "other_info": {"loss": [2.3036742210388184, 2.3025853633880615, 2.3025851249694824, 2.3025853633880615, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025848865509033, 2.3025853633880615, 2.3025853633880615, 2.3025848865509033, 2.3025848865509033, 2.3025853633880615], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 5, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1], [0, 2, 8, 6, 3, 5, 7], [2, 2, 0, 3, 3], [16, 16], [0, 1], [0], [1], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 1, 1, 4, 1, 4, 2, 8, 3, 0, 8, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4, 5, 3], [16, 99, 96, 99, 4, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 12, 7, 5, 1, 2, 1, 1, 0, 27, 15, 12, 5], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(beta, beta)), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(grad, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.subtract(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.negative(sigma), alpha)))), beta), tf.math.sqrt(tf.math.sqrt(grad)))), grad), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}]