[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222564220428467, 1.8654934167861938, 1.392636775970459, 1.0800100564956665, 0.9349965453147888, 0.83723384141922, 0.771166205406189, 0.7229189872741699, 0.6917352080345154, 0.6532851457595825, 0.6217012405395508, 0.6138775944709778, 0.5917757749557495, 0.5793368220329285, 0.5567960739135742, 0.5480981469154358, 0.5474538803100586, 0.5317270755767822, 0.5151227116584778, 0.5055264234542847, 0.5014929175376892, 0.4862228035926819, 0.4727080464363098, 0.47010233998298645, 0.46293196082115173, 0.4504174590110779, 0.447412371635437, 0.4438058137893677, 0.42948198318481445, 0.417126327753067, 0.4136964678764343, 0.40704113245010376, 0.4020131528377533, 0.39997783303260803, 0.39442774653434753, 0.3916949927806854, 0.38260385394096375, 0.3716582953929901, 0.3650337755680084, 0.3573426902294159, 0.36132100224494934, 0.3564379811286926, 0.3445151448249817, 0.33812835812568665, 0.3384065330028534, 0.3359524607658386, 0.33294373750686646, 0.3212839663028717, 0.3217304050922394, 0.3110441267490387, 0.31119072437286377], "accuracy": [0.2685246467590332, 0.4955752193927765, 0.5610883831977844, 0.6197332143783569, 0.6668868064880371, 0.6963412761688232, 0.7205125093460083, 0.7349095344543457, 0.7469290494918823, 0.7604015469551086, 0.7732135653495789, 0.7761194109916687, 0.7878747582435608, 0.7901201844215393, 0.8009510040283203, 0.802271842956543, 0.8050455451011658, 0.8103289008140564, 0.8158763647079468, 0.8197067975997925, 0.817461371421814, 0.8255184292793274, 0.8273676037788391, 0.8333113193511963, 0.832650899887085, 0.8392550349235535, 0.8367455005645752, 0.8408400416374207, 0.8474441766738892, 0.8475762605667114, 0.8519350290298462, 0.8545766472816467, 0.8574824929237366, 0.8544445633888245, 0.8589354157447815, 0.8561616539955139, 0.8632941246032715, 0.8640866279602051, 0.869502067565918, 0.8702945709228516, 0.8702945709228516, 0.8689737319946289, 0.8772949576377869, 0.8754457831382751, 0.8767666220664978, 0.8809932470321655, 0.8776912093162537, 0.8853520154953003, 0.8811253309249878, 0.8886540532112122, 0.8885219693183899], "val_loss": [2.042604923248291, 1.5189800262451172, 1.0515391826629639, 0.8450219035148621, 0.7558016777038574, 0.7093545794487, 0.6593213081359863, 0.6230939030647278, 0.5998342037200928, 0.5830129981040955, 0.5592260956764221, 0.5484577417373657, 0.5345214009284973, 0.5245682597160339, 0.508945107460022, 0.5038147568702698, 0.4949795603752136, 0.4867953658103943, 0.47808560729026794, 0.4682127833366394, 0.46202969551086426, 0.4617370665073395, 0.4514632225036621, 0.4495610296726227, 0.4391477108001709, 0.43453720211982727, 0.42648962140083313, 0.42570948600769043, 0.4242604672908783, 0.4146496057510376, 0.41664713621139526, 0.4113439619541168, 0.41593310236930847, 0.4013250470161438, 0.40437138080596924, 0.39875122904777527, 0.3905998170375824, 0.3918660581111908, 0.38664665818214417, 0.3956036865711212, 0.38548287749290466, 0.3855803310871124, 0.3777529299259186, 0.3802799582481384, 0.3779101073741913, 0.371540904045105, 0.3776323199272156, 0.36875513195991516, 0.37442195415496826, 0.3655129075050354, 0.3628164827823639], "val_accuracy": [0.5523333549499512, 0.6656666398048401, 0.6830000281333923, 0.7059999704360962, 0.7336666584014893, 0.7506666779518127, 0.7580000162124634, 0.7689999938011169, 0.7736666798591614, 0.7846666574478149, 0.7950000166893005, 0.7963333129882812, 0.7993333339691162, 0.8100000023841858, 0.8173333406448364, 0.8190000057220459, 0.8213333487510681, 0.8209999799728394, 0.8286666870117188, 0.828000009059906, 0.8323333263397217, 0.8336666822433472, 0.8333333134651184, 0.8349999785423279, 0.8386666774749756, 0.8393333554267883, 0.8429999947547913, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8446666598320007, 0.8463333249092102, 0.8503333330154419, 0.8529999852180481, 0.8493333458900452, 0.8550000190734863, 0.8546666502952576, 0.856333315372467, 0.8613333106040955, 0.856333315372467, 0.859000027179718, 0.8550000190734863, 0.8586666584014893, 0.8633333444595337, 0.8619999885559082, 0.8659999966621399, 0.859666645526886, 0.862666666507721, 0.8603333234786987, 0.8610000014305115, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8562856912612915, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2196054458618164, 1.8606330156326294, 1.3818198442459106, 1.0812885761260986, 0.9417917728424072, 0.8533543348312378, 0.7795958518981934, 0.7333837151527405, 0.7007340788841248, 0.6686177849769592, 0.642134964466095, 0.6225551962852478, 0.5972180962562561, 0.5806825757026672, 0.569330632686615, 0.5491083264350891, 0.5358455181121826, 0.5195359587669373, 0.5095234513282776, 0.5011981129646301, 0.4906657636165619, 0.4857182204723358, 0.4707169234752655, 0.4625316858291626, 0.4552716612815857, 0.44455307722091675, 0.442989319562912, 0.4236000180244446, 0.4238799810409546, 0.4198497533798218, 0.4081038236618042, 0.4051741361618042, 0.39527907967567444, 0.3960595428943634, 0.3911841809749603, 0.3835722804069519, 0.37456247210502625], "accuracy": [0.27618545293807983, 0.48949941992759705, 0.563730001449585, 0.6211860775947571, 0.6709813475608826, 0.6936996579170227, 0.7160216569900513, 0.735569953918457, 0.7421740889549255, 0.7548540234565735, 0.7660810947418213, 0.7713643908500671, 0.7841764688491821, 0.7886672616004944, 0.7902522683143616, 0.804649293422699, 0.8070268034934998, 0.8113855719566345, 0.8153480291366577, 0.8252542614936829, 0.8257825970649719, 0.8230088353157043, 0.8297450542449951, 0.834632158279419, 0.8385946154594421, 0.8384625315666199, 0.839519202709198, 0.8475762605667114, 0.8473120927810669, 0.8494254350662231, 0.8504821062088013, 0.8561616539955139, 0.8618412613868713, 0.8551049828529358, 0.8590674996376038, 0.863558292388916, 0.8648791313171387], "val_loss": [2.035874128341675, 1.5089818239212036, 1.0462177991867065, 0.8495897054672241, 0.7643118500709534, 0.7067863941192627, 0.660831868648529, 0.6263874769210815, 0.6005875468254089, 0.5767198801040649, 0.5616478323936462, 0.5435929298400879, 0.5285155177116394, 0.5131083726882935, 0.5066718459129333, 0.49149012565612793, 0.4871947467327118, 0.4703064262866974, 0.4694805145263672, 0.4643847346305847, 0.45187678933143616, 0.44752755761146545, 0.43976330757141113, 0.43407315015792847, 0.43262913823127747, 0.42701634764671326, 0.42074164748191833, 0.41352319717407227, 0.4088454246520996, 0.40955716371536255, 0.4030371606349945, 0.3978312611579895, 0.40180203318595886, 0.3984045088291168, 0.39183682203292847, 0.38689184188842773, 0.387946218252182], "val_accuracy": [0.5506666898727417, 0.6553333401679993, 0.6800000071525574, 0.7009999752044678, 0.734000027179718, 0.7546666860580444, 0.7676666378974915, 0.7736666798591614, 0.7799999713897705, 0.7953333258628845, 0.7983333468437195, 0.8080000281333923, 0.8176666498184204, 0.8193333148956299, 0.8213333487510681, 0.8276666402816772, 0.8276666402816772, 0.8349999785423279, 0.8339999914169312, 0.8370000123977661, 0.8463333249092102, 0.8416666388511658, 0.847000002861023, 0.8510000109672546, 0.8489999771118164, 0.8479999899864197, 0.8536666631698608, 0.8533333539962769, 0.859666645526886, 0.8566666841506958, 0.859333336353302, 0.862333357334137, 0.8566666841506958, 0.8560000061988831, 0.8569999933242798, 0.8616666793823242, 0.8613333106040955]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0, 1, 1], [0, 5, 1], [0, 4], [0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 5, 2, 7, 9, 4], [0, 6, 7, 3], [0, 31], [0, 1], [0], [1], [0]], "fitness": -0.8379999995231628, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.square(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.pow(grad, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2934024333953857, 2.1906139850616455, 1.7662652730941772, 1.3487439155578613, 1.0333583354949951, 0.8837186098098755, 0.8310526609420776, 0.7859005331993103, 0.7660037875175476, 0.723390519618988, 0.700912594795227, 0.6724984049797058, 0.6477978229522705, 0.6325149536132812, 0.6161597371101379, 0.5924183130264282, 0.5907631516456604, 0.5607301592826843, 0.5541636943817139, 0.5512043833732605, 0.5437242388725281, 0.5299932956695557, 0.5219297409057617, 0.5138202905654907, 0.48761531710624695, 0.48208144307136536, 0.47426891326904297, 0.45212021470069885, 0.44907331466674805, 0.43310534954071045, 0.4273194968700409, 0.4265162944793701, 0.42435407638549805, 0.40747979283332825, 0.39217910170555115, 0.38552162051200867, 0.3876613974571228, 0.3871467113494873, 0.37787410616874695, 0.3764578700065613, 0.3605608344078064, 0.3540816009044647, 0.3607276678085327, 0.34159597754478455], "accuracy": [0.13115836679935455, 0.3353586196899414, 0.44828951358795166, 0.5484083890914917, 0.6457535624504089, 0.6819442510604858, 0.6983225345611572, 0.7030775547027588, 0.6989829540252686, 0.7185312509536743, 0.7304186820983887, 0.7360982894897461, 0.7500990629196167, 0.7563069462776184, 0.7648923397064209, 0.7741381525993347, 0.7788931727409363, 0.7874785661697388, 0.7844406366348267, 0.7857614755630493, 0.7931581139564514, 0.791969358921051, 0.7923656105995178, 0.7955356240272522, 0.8078193068504333, 0.8145555257797241, 0.8235371708869934, 0.8241975903511047, 0.8235371708869934, 0.8342359066009521, 0.8315942287445068, 0.8309338092803955, 0.8380662798881531, 0.8451988101005554, 0.8471800088882446, 0.8500858545303345, 0.852331280708313, 0.8457271456718445, 0.8486329317092896, 0.8595958352088928, 0.8613129258155823, 0.8594637513160706, 0.8650112152099609, 0.8634262084960938], "val_loss": [2.24762225151062, 2.0239179134368896, 1.1619582176208496, 0.8955000042915344, 0.745254635810852, 0.6755133867263794, 0.6537936329841614, 0.6380941271781921, 0.6166696548461914, 0.583221435546875, 0.5700330138206482, 0.5632457137107849, 0.5560241341590881, 0.5334082245826721, 0.5265588760375977, 0.5167475342750549, 0.5230294466018677, 0.5154077410697937, 0.507092297077179, 0.49519017338752747, 0.508192241191864, 0.4957881569862366, 0.48796916007995605, 0.47517240047454834, 0.46581709384918213, 0.4597529172897339, 0.4459729790687561, 0.43525275588035583, 0.43127137422561646, 0.4374566674232483, 0.44057804346084595, 0.432532399892807, 0.42345789074897766, 0.4252392649650574, 0.43338891863822937, 0.4312875270843506, 0.4214056432247162, 0.4154684245586395, 0.4175090789794922, 0.42073047161102295, 0.40588298439979553, 0.4084337651729584, 0.41702061891555786, 0.40484708547592163], "val_accuracy": [0.429666668176651, 0.4583333432674408, 0.6483333110809326, 0.6919999718666077, 0.7266666889190674, 0.7553333044052124, 0.7516666650772095, 0.746999979019165, 0.7506666779518127, 0.777999997138977, 0.7739999890327454, 0.7879999876022339, 0.7856666445732117, 0.7960000038146973, 0.7929999828338623, 0.7996666431427002, 0.7986666560173035, 0.8063333630561829, 0.8090000152587891, 0.8169999718666077, 0.8203333616256714, 0.8076666593551636, 0.8116666674613953, 0.8203333616256714, 0.8289999961853027, 0.8376666903495789, 0.8433333039283752, 0.8506666421890259, 0.8546666502952576, 0.8529999852180481, 0.8516666889190674, 0.8553333282470703, 0.8516666889190674, 0.8519999980926514, 0.8546666502952576, 0.8546666502952576, 0.8603333234786987, 0.8633333444595337, 0.8679999709129333, 0.8629999756813049, 0.8579999804496765, 0.859000027179718, 0.8583333492279053, 0.8616666793823242]}, "mapping_values": [1, 10, 5, 5, 3, 5, 3, 2, 1, 11, 7, 4, 2, 2, 1, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 1, 1], [0, 3], [0, 5], [0], [1], [0], [2], [0]], "fitness": -0.8274285793304443, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.4718058109283447, 0.7932088375091553, 0.6687846183776855, 0.6252182722091675, 0.5923994779586792, 0.5562073588371277, 0.5316431522369385, 0.5102408528327942, 0.5016084909439087, 0.48423662781715393, 0.46845459938049316, 0.47564223408699036, 0.4491483271121979, 0.43295884132385254, 0.412690669298172, 0.4030870795249939, 0.4163045883178711, 0.43515920639038086, 0.47516387701034546, 0.46978235244750977, 0.4987875521183014, 0.4906197488307953], "accuracy": [0.5017831325531006, 0.7235503792762756, 0.7589486241340637, 0.7687227725982666, 0.7828556299209595, 0.7943468689918518, 0.7972526550292969, 0.8244617581367493, 0.8206313848495483, 0.8197067975997925, 0.8317263126373291, 0.8315942287445068, 0.8337075710296631, 0.8421608805656433, 0.8558974862098694, 0.8519350290298462, 0.8545766472816467, 0.8467837572097778, 0.8496896028518677, 0.8500858545303345, 0.8399154543876648, 0.8356888294219971], "val_loss": [0.8242779970169067, 0.6061513423919678, 0.5485232472419739, 0.5513920783996582, 0.5309441089630127, 0.5269508361816406, 0.5079647898674011, 0.4699935019016266, 0.4704238772392273, 0.48685407638549805, 0.47245946526527405, 0.4847460389137268, 0.4690949618816376, 0.508111834526062, 0.5277594923973083, 0.4961049258708954, 0.5317164063453674, 0.5362279415130615, 0.5948327779769897, 0.73964923620224, 0.5682950019836426, 0.5135215520858765], "val_accuracy": [0.7266666889190674, 0.7776666879653931, 0.8029999732971191, 0.7993333339691162, 0.8059999942779541, 0.8050000071525574, 0.8240000009536743, 0.8270000219345093, 0.8333333134651184, 0.8446666598320007, 0.8443333506584167, 0.8343333601951599, 0.8413333296775818, 0.8503333330154419, 0.8443333506584167, 0.8356666564941406, 0.8519999980926514, 0.8366666436195374, 0.8443333506584167, 0.8323333263397217, 0.8379999995231628, 0.8443333506584167]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [1, 1, 0, 2], [84, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 46], [0, 0, 1, 1], [0, 7], [0, 7], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 9, 9, 1, 4, 9, 8], [0, 0, 0, 1, 2, 0, 3, 1, 2, 0], [79, 99, 96, 90, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 1, 7, 4, 3, 2, 4, 2, 2, 1, 10, 7, 3, 5], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), alpha), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3032374382019043, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 3, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 0], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 8, 6, 6, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [16, 99, 96, 7, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 2, 7, 4, 3, 2, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), tf.math.pow(grad, tf.math.subtract(tf.math.pow(sigma, alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 4, 8, 3, 9], [0, 2, 0, 3], [16, 16], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 8, 0, 1, 7, 5, 2, 1, 6, 7, 1, 5], [0, 2, 3, 7, 3, 4, 4, 5], [0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 1, 0, 8, 1, 4, 1, 4, 0, 3], [0, 0, 0, 4, 2, 0, 3, 1, 2, 1], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 7, 5, 2, 2, 20, 12, 8, 1, 1, 0, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.sqrt(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(beta), tf.math.add(sigma, tf.math.subtract(tf.math.divide_no_nan(grad, sigma), tf.math.add(tf.math.subtract(grad, tf.math.square(grad)), grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303112030029297, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09959053993225098, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 2, 8, 1, 0], [1, 0, 0, 2, 2, 3], [39, 39], [0, 1], [0, 2, 3, 0, 3, 5], [0], [0], [0, 1], [0], [0], [0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [1, 0, 3, 5, 8, 5], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [33, 4, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 9, 6, 2, 2, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 3], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.negative(grad), grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.math.multiply(tf.math.square(tf.math.sqrt(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [3.0702455043792725, 11.270452499389648, 31.81203842163086, 67.65557861328125, 123.16256713867188, 203.42010498046875], "accuracy": [0.09457138925790787, 0.10408136248588562, 0.09628847241401672, 0.10210011899471283, 0.09959053993225098, 0.09747721254825592], "val_loss": [4.867974758148193, 16.672775268554688, 39.133995056152344, 75.20340728759766, 128.42835998535156, 203.09580993652344], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}]