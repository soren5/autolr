[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.87628573179245, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223330497741699, 1.8670156002044678, 1.3935511112213135, 1.1012579202651978, 0.9477801322937012, 0.8379126191139221, 0.7764281630516052, 0.7235901951789856, 0.6839449405670166, 0.6511124968528748, 0.6340097188949585, 0.6069210171699524, 0.5817078948020935, 0.5635776519775391, 0.5524153113365173, 0.5367791652679443, 0.5212588906288147, 0.5178380608558655, 0.5019086003303528, 0.4879888892173767, 0.4858485460281372, 0.4747111201286316, 0.45951735973358154, 0.4532293975353241, 0.4492609202861786, 0.4330301284790039, 0.4310648441314697, 0.42051371932029724, 0.41327017545700073, 0.4060419201850891, 0.3997148871421814, 0.39729252457618713, 0.3869434893131256, 0.3869549036026001, 0.38186177611351013, 0.3692651391029358, 0.36346086859703064, 0.3634459972381592, 0.3600703179836273, 0.3489670753479004, 0.3429599404335022, 0.34309908747673035, 0.3401198089122772, 0.3303268253803253, 0.3301240801811218, 0.3276282846927643, 0.3180643618106842, 0.3136589229106903, 0.3090694546699524, 0.3071834146976471, 0.3011736273765564, 0.30332496762275696, 0.29351481795310974, 0.2937680780887604], "accuracy": [0.26680755615234375, 0.49451854825019836, 0.5679566860198975, 0.6209219098091125, 0.6646413803100586, 0.7078325152397156, 0.7234182953834534, 0.7387399077415466, 0.7541936039924622, 0.7672698497772217, 0.7677981853485107, 0.7820631265640259, 0.7897239327430725, 0.7977809906005859, 0.798309326171875, 0.8082155585289001, 0.8138951063156128, 0.8094043135643005, 0.822348415851593, 0.8269713521003723, 0.8208954930305481, 0.8310658931732178, 0.8350284099578857, 0.8367455005645752, 0.8368775844573975, 0.8444063067436218, 0.843481719493866, 0.850350022315979, 0.8502179384231567, 0.8570862412452698, 0.857218325138092, 0.8574824929237366, 0.8610487580299377, 0.8610487580299377, 0.8607845902442932, 0.8658037185668945, 0.8701624870300293, 0.8689737319946289, 0.8708229064941406, 0.8792761564254761, 0.8798044919967651, 0.8765024542808533, 0.8765024542808533, 0.8824461698532104, 0.880729079246521, 0.8844274282455444, 0.8838990926742554, 0.8887861371040344, 0.8878615498542786, 0.8903711438179016, 0.8924844861030579, 0.8912957310676575, 0.8976356983184814, 0.8960506916046143], "val_loss": [2.040694236755371, 1.5166728496551514, 1.045767068862915, 0.8421168327331543, 0.7569165229797363, 0.7011509537696838, 0.6573318839073181, 0.6179470419883728, 0.5908101201057434, 0.5737177133560181, 0.5541383624076843, 0.5365487933158875, 0.518412172794342, 0.5104728937149048, 0.49868762493133545, 0.485697478055954, 0.48461878299713135, 0.46694132685661316, 0.459992378950119, 0.44818419218063354, 0.45110249519348145, 0.4507465958595276, 0.4339507520198822, 0.4287099242210388, 0.42590731382369995, 0.4119842052459717, 0.4104468524456024, 0.4069807529449463, 0.40372517704963684, 0.3985708951950073, 0.3967111110687256, 0.39305025339126587, 0.39346253871917725, 0.3906964063644409, 0.3815464675426483, 0.3792845904827118, 0.37928369641304016, 0.3762374818325043, 0.37582898139953613, 0.37387406826019287, 0.3717586398124695, 0.36671704053878784, 0.363382488489151, 0.36401286721229553, 0.3619881868362427, 0.35666540265083313, 0.3588123917579651, 0.3541429042816162, 0.35232576727867126, 0.35342442989349365, 0.3524846136569977, 0.34847813844680786, 0.34814298152923584, 0.35015836358070374], "val_accuracy": [0.5323333144187927, 0.6446666717529297, 0.6756666898727417, 0.7043333053588867, 0.7239999771118164, 0.7493333220481873, 0.753000020980835, 0.7706666588783264, 0.7820000052452087, 0.7873333096504211, 0.7956666946411133, 0.800000011920929, 0.8136666417121887, 0.812666654586792, 0.8199999928474426, 0.824999988079071, 0.8246666789054871, 0.8326666951179504, 0.8303333520889282, 0.8376666903495789, 0.8333333134651184, 0.8343333601951599, 0.8446666598320007, 0.843666672706604, 0.846666693687439, 0.8513333201408386, 0.8546666502952576, 0.8500000238418579, 0.8523333072662354, 0.8546666502952576, 0.8529999852180481, 0.859333336353302, 0.8546666502952576, 0.8569999933242798, 0.8606666922569275, 0.8633333444595337, 0.8643333315849304, 0.8629999756813049, 0.8576666712760925, 0.8703333139419556, 0.8640000224113464, 0.8643333315849304, 0.8676666617393494, 0.8663333058357239, 0.8713333606719971, 0.871999979019165, 0.8693333268165588, 0.8693333268165588, 0.878000020980835, 0.8756666779518127, 0.8706666827201843, 0.8756666779518127, 0.8769999742507935, 0.8756666779518127]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8705714344978333, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223226308822632, 1.867703914642334, 1.3979169130325317, 1.097693920135498, 0.9506016969680786, 0.8473412394523621, 0.7836220264434814, 0.7285664677619934, 0.7020352482795715, 0.673151969909668, 0.6537116169929504, 0.6336221098899841, 0.6079898476600647, 0.586005449295044, 0.5808212757110596, 0.5590496063232422, 0.545581579208374, 0.5441274642944336, 0.5286175608634949, 0.514104962348938, 0.5098453760147095, 0.4917857050895691, 0.4832933843135834, 0.4737478792667389, 0.46668264269828796, 0.46034833788871765, 0.4488719701766968, 0.44729670882225037, 0.44234931468963623, 0.42786091566085815, 0.4196518659591675, 0.42388588190078735, 0.41697168350219727, 0.4111258089542389, 0.39976048469543457, 0.3984396457672119, 0.38981741666793823, 0.38605833053588867, 0.38480374217033386, 0.3792741298675537, 0.36549943685531616, 0.3641602396965027, 0.35379284620285034, 0.36207249760627747, 0.3516697883605957, 0.35176679491996765, 0.3357080817222595, 0.32903626561164856, 0.34157875180244446, 0.3262804448604584, 0.325957328081131, 0.32457977533340454, 0.31486135721206665, 0.31250545382499695, 0.30591800808906555, 0.3063277006149292, 0.294706791639328, 0.2881503701210022, 0.2895837128162384, 0.2945956289768219, 0.28820323944091797, 0.28607866168022156, 0.27611443400382996], "accuracy": [0.26601505279541016, 0.4900277256965637, 0.5630695819854736, 0.615770697593689, 0.6573768258094788, 0.6993792057037354, 0.7191916704177856, 0.7313432693481445, 0.7493065595626831, 0.7560427784919739, 0.761590301990509, 0.769911527633667, 0.7754589915275574, 0.7853652238845825, 0.7861577272415161, 0.7998943328857422, 0.802800178527832, 0.804649293422699, 0.8062343001365662, 0.816008448600769, 0.8197067975997925, 0.8239334225654602, 0.8238013386726379, 0.8285563588142395, 0.8329150676727295, 0.8308017253875732, 0.8416325449943542, 0.8404437899589539, 0.8384625315666199, 0.846387505531311, 0.8496896028518677, 0.8473120927810669, 0.8524633646011353, 0.8555012345314026, 0.8560295701026917, 0.8548408150672913, 0.8585391640663147, 0.8622375130653381, 0.8598600029945374, 0.8660678863525391, 0.8688416481018066, 0.8685774803161621, 0.8709549307823181, 0.8716153502464294, 0.8746532797813416, 0.8691058158874512, 0.8755778670310974, 0.8868049383163452, 0.8735966086387634, 0.8800686597824097, 0.8850878477096558, 0.8838990926742554, 0.8857482671737671, 0.887597382068634, 0.8907673954963684, 0.8902390599250793, 0.8919561505317688, 0.896446943283081, 0.8968431949615479, 0.8948619961738586, 0.8926165699958801, 0.8965790271759033, 0.9012019634246826], "val_loss": [2.0399909019470215, 1.5251555442810059, 1.0676544904708862, 0.8588533401489258, 0.7755922079086304, 0.7116458415985107, 0.663692057132721, 0.629660427570343, 0.6024261116981506, 0.5841566324234009, 0.5626380443572998, 0.552465558052063, 0.528258204460144, 0.5171092748641968, 0.5087933540344238, 0.49298208951950073, 0.49300920963287354, 0.47799813747406006, 0.4737568795681, 0.466105192899704, 0.45478856563568115, 0.44371655583381653, 0.44045916199684143, 0.43891358375549316, 0.42701074481010437, 0.425264447927475, 0.4219880700111389, 0.4132193922996521, 0.4107579290866852, 0.40802812576293945, 0.4028666317462921, 0.3983374834060669, 0.4013787806034088, 0.39674508571624756, 0.39126038551330566, 0.38767358660697937, 0.3865254819393158, 0.38263949751853943, 0.37926700711250305, 0.3773876130580902, 0.37374967336654663, 0.36995479464530945, 0.36887121200561523, 0.3753794729709625, 0.3666309416294098, 0.363404780626297, 0.36402180790901184, 0.3644130527973175, 0.35975968837738037, 0.35836148262023926, 0.3537342846393585, 0.3564697206020355, 0.3501151502132416, 0.3494795262813568, 0.34949150681495667, 0.34929975867271423, 0.34752413630485535, 0.3428165018558502, 0.34924837946891785, 0.34377238154411316, 0.34630832076072693, 0.34133535623550415, 0.3400469422340393], "val_accuracy": [0.5149999856948853, 0.643666684627533, 0.6713333129882812, 0.6930000185966492, 0.7126666903495789, 0.7390000224113464, 0.7566666603088379, 0.765999972820282, 0.7733333110809326, 0.7879999876022339, 0.7893333435058594, 0.7933333516120911, 0.8066666722297668, 0.8149999976158142, 0.8186666369438171, 0.8163333535194397, 0.8173333406448364, 0.8246666789054871, 0.8299999833106995, 0.8299999833106995, 0.8356666564941406, 0.843999981880188, 0.843666672706604, 0.8429999947547913, 0.8463333249092102, 0.847000002861023, 0.8500000238418579, 0.8523333072662354, 0.8510000109672546, 0.8513333201408386, 0.8543333411216736, 0.8560000061988831, 0.8566666841506958, 0.8543333411216736, 0.859666645526886, 0.8610000014305115, 0.859000027179718, 0.859333336353302, 0.8606666922569275, 0.8603333234786987, 0.862666666507721, 0.8633333444595337, 0.8653333187103271, 0.859666645526886, 0.8669999837875366, 0.8696666955947876, 0.8669999837875366, 0.8683333396911621, 0.8709999918937683, 0.8679999709129333, 0.8740000128746033, 0.8700000047683716, 0.8763333559036255, 0.8733333349227905, 0.8756666779518127, 0.8723333477973938, 0.8776666522026062, 0.878333330154419, 0.8726666569709778, 0.8769999742507935, 0.8709999918937683, 0.8776666522026062, 0.8769999742507935]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 1], [0], [0], [0], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8357142806053162, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2928640842437744, 2.1896073818206787, 1.7676680088043213, 1.3438847064971924, 1.059457540512085, 0.920157253742218, 0.854867696762085, 0.8223817944526672, 0.7729222178459167, 0.7355892658233643, 0.7061442732810974, 0.6834183931350708, 0.6558082699775696, 0.6304211020469666, 0.6218782067298889, 0.5970022082328796, 0.5848619937896729, 0.570117175579071, 0.559243381023407, 0.5484961867332458, 0.5359639525413513, 0.5222200751304626, 0.5179206728935242, 0.5037687420845032, 0.49642372131347656, 0.48133474588394165, 0.4712069630622864, 0.4731939733028412, 0.464368999004364, 0.4465724527835846, 0.4415811598300934, 0.42735472321510315, 0.4265330135822296, 0.41685542464256287, 0.40799763798713684, 0.40404269099235535, 0.3912416100502014, 0.3996317386627197, 0.38768330216407776, 0.3706822693347931, 0.36751317977905273, 0.36737531423568726, 0.3671467900276184, 0.35848021507263184, 0.355720579624176, 0.3479486405849457], "accuracy": [0.12930920720100403, 0.3263769745826721, 0.4309866726398468, 0.5423325896263123, 0.6427156329154968, 0.6602826714515686, 0.6869634389877319, 0.696209192276001, 0.705058753490448, 0.7271166443824768, 0.7375511527061462, 0.7411174178123474, 0.7504953145980835, 0.7592127919197083, 0.7600052952766418, 0.7708360552787781, 0.7765156626701355, 0.7840443849563599, 0.7882710099220276, 0.7874785661697388, 0.7926297783851624, 0.8024039268493652, 0.8043851256370544, 0.8165367841720581, 0.8146876096725464, 0.8112534880638123, 0.8170651197433472, 0.8178576231002808, 0.8207634687423706, 0.8261788487434387, 0.834632158279419, 0.8350284099578857, 0.8425571322441101, 0.837141752243042, 0.8416325449943542, 0.8445383906364441, 0.8479725122451782, 0.8477083444595337, 0.8508783578872681, 0.852859616279602, 0.8601241707801819, 0.8529917001724243, 0.8568220734596252, 0.859199583530426, 0.8615770936012268, 0.863558292388916], "val_loss": [2.246393918991089, 2.019202709197998, 1.134113073348999, 0.8850972652435303, 0.777063250541687, 0.7186632752418518, 0.6612269282341003, 0.6693009734153748, 0.6391931772232056, 0.6350800395011902, 0.5918528437614441, 0.5887629985809326, 0.5708540678024292, 0.5511474013328552, 0.5442768931388855, 0.532196581363678, 0.534047544002533, 0.5225703120231628, 0.5147473812103271, 0.5126229524612427, 0.50113844871521, 0.4973560869693756, 0.49099233746528625, 0.485178142786026, 0.4736504852771759, 0.4698885977268219, 0.4592685103416443, 0.45055273175239563, 0.44963014125823975, 0.44694337248802185, 0.4476505219936371, 0.44763651490211487, 0.4469709098339081, 0.4456632435321808, 0.44674792885780334, 0.44463101029396057, 0.44424328207969666, 0.43579399585723877, 0.4418925344944, 0.4439067244529724, 0.45207637548446655, 0.4547082781791687, 0.4531148374080658, 0.4430088698863983, 0.4431120753288269, 0.45014119148254395], "val_accuracy": [0.4326666593551636, 0.4483333230018616, 0.6489999890327454, 0.6903333067893982, 0.7246666550636292, 0.7386666536331177, 0.7573333382606506, 0.765333354473114, 0.7666666507720947, 0.7666666507720947, 0.7766666412353516, 0.7786666750907898, 0.793666660785675, 0.8006666898727417, 0.8003333210945129, 0.8023333549499512, 0.8063333630561829, 0.812333345413208, 0.8236666917800903, 0.82833331823349, 0.8206666707992554, 0.8253333568572998, 0.8256666660308838, 0.8286666870117188, 0.831333339214325, 0.8399999737739563, 0.8426666855812073, 0.8429999947547913, 0.8393333554267883, 0.8510000109672546, 0.8553333282470703, 0.8546666502952576, 0.8526666760444641, 0.8560000061988831, 0.8516666889190674, 0.8573333621025085, 0.8573333621025085, 0.8613333106040955, 0.8550000190734863, 0.859333336353302, 0.8633333444595337, 0.859333336353302, 0.8579999804496765, 0.862666666507721, 0.859666645526886, 0.862666666507721]}, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8222857117652893, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5548913478851318, 0.7772523164749146, 0.6573264598846436, 0.6422051787376404, 0.5890070199966431, 0.5438871383666992, 0.5224955677986145, 0.4828927516937256, 0.4819696545600891, 0.49249744415283203, 0.5084412693977356, 0.5376526117324829, 0.5296468138694763, 0.5133898258209229, 0.5237382650375366], "accuracy": [0.46466779708862305, 0.7219653725624084, 0.7580240368843079, 0.774798572063446, 0.7823272943496704, 0.8033285140991211, 0.8121780753135681, 0.8256505131721497, 0.8264430165290833, 0.8261788487434387, 0.821820080280304, 0.8234050869941711, 0.8171972036361694, 0.8187822103500366, 0.8219521641731262], "val_loss": [0.7300145030021667, 0.585355818271637, 0.5905778408050537, 0.5187124609947205, 0.5103877186775208, 0.517501711845398, 0.5014969110488892, 0.49490824341773987, 0.5162716507911682, 0.5613588690757751, 0.5408585071563721, 0.5900955200195312, 0.5689824223518372, 0.6200812458992004, 0.6530690789222717], "val_accuracy": [0.7423333525657654, 0.781333327293396, 0.7916666865348816, 0.8083333373069763, 0.8226666450500488, 0.8256666660308838, 0.8220000267028809, 0.8356666564941406, 0.8343333601951599, 0.8410000205039978, 0.8243333101272583, 0.82833331823349, 0.8316666483879089, 0.8316666483879089, 0.8403333425521851]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [6, 2, 3, 0, 4], [0, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 0, 5], [3, 2, 0, 3], [6, 16], [0, 1, 0, 1, 1], [6, 6], [0, 1, 2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 35, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 2, 6, 3, 3, 1, 5, 2, 3, 1, 16, 8, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(grad, tf.math.multiply(beta, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), sigma))), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 1], [39, 39], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 1, 0, 3], [71, 47], [0, 1, 0, 0, 1, 0, 1], [4, 3, 0, 8], [0, 3, 6], [8], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 2, 0, 8, 2, 0, 8, 5, 4, 8, 7, 5], [0, 1, 0, 3, 0, 0, 3, 1, 2, 0, 2, 5, 4, 4], [16, 99, 47, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 2, 7, 4, 3, 1, 36, 22, 14, 5], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(alpha), tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.square(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(sigma), tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(alpha, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.math.add(alpha, beta)))))), tf.math.negative(tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.square(beta))))), tf.math.pow(grad, tf.math.sqrt(tf.math.add(tf.math.square(grad), grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 9, 0, 3], [0, 1, 0, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 6, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0], [6, 3, 3, 2, 8, 1, 4, 1, 4, 2, 8, 6, 7, 4, 9, 1, 3, 0, 7, 3, 4, 0, 4, 9, 7, 4, 9], [0, 0, 0, 0, 0, 0, 3, 1, 2, 0, 3, 6, 3, 6, 6, 3, 7, 5], [16, 99, 81, 99, 61, 96, 87, 59, 85, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 4, 1, 2, 9, 5, 4, 2, 2, 1, 1, 1, 45, 27, 18, 10], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.math.pow(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.multiply(beta, tf.math.pow(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), sigma)), grad)), tf.math.negative(tf.math.pow(sigma, grad)))))), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), grad), sigma), tf.math.add(tf.math.pow(grad, grad), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 2, 3, 0, 2, 1, 7, 6, 2, 8, 0, 8], [0, 1, 0, 2, 3, 1, 2, 3], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [3, 6, 3, 0, 3, 5, 2, 7], [0, 2, 0, 3, 3, 1, 1], [42, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 4, 8, 1, 4, 1, 4, 2, 8], [1, 0, 0, 3, 0, 0, 3, 1, 2, 4], [16, 99, 96, 99, 55, 89]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 12, 8, 2, 15, 8, 7, 2, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(grad, alpha), tf.math.sqrt(tf.math.negative(tf.math.sqrt(grad)))))), grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), alpha)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(alpha, tf.math.pow(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}]