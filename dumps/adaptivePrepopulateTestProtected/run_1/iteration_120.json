[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222564220428467, 1.8654934167861938, 1.392636775970459, 1.0800100564956665, 0.9349965453147888, 0.83723384141922, 0.771166205406189, 0.7229189872741699, 0.6917352080345154, 0.6532851457595825, 0.6217012405395508, 0.6138775944709778, 0.5917757749557495, 0.5793368220329285, 0.5567960739135742, 0.5480981469154358, 0.5474538803100586, 0.5317270755767822, 0.5151227116584778, 0.5055264234542847, 0.5014929175376892, 0.4862228035926819, 0.4727080464363098, 0.47010233998298645, 0.46293196082115173, 0.4504174590110779, 0.447412371635437, 0.4438058137893677, 0.42948198318481445, 0.417126327753067, 0.4136964678764343, 0.40704113245010376, 0.4020131528377533, 0.39997783303260803, 0.39442774653434753, 0.3916949927806854, 0.38260385394096375, 0.3716582953929901, 0.3650337755680084, 0.3573426902294159, 0.36132100224494934, 0.3564379811286926, 0.3445151448249817, 0.33812835812568665, 0.3384065330028534, 0.3359524607658386, 0.33294373750686646, 0.3212839663028717, 0.3217304050922394, 0.3110441267490387, 0.31119072437286377], "accuracy": [0.2685246467590332, 0.4955752193927765, 0.5610883831977844, 0.6197332143783569, 0.6668868064880371, 0.6963412761688232, 0.7205125093460083, 0.7349095344543457, 0.7469290494918823, 0.7604015469551086, 0.7732135653495789, 0.7761194109916687, 0.7878747582435608, 0.7901201844215393, 0.8009510040283203, 0.802271842956543, 0.8050455451011658, 0.8103289008140564, 0.8158763647079468, 0.8197067975997925, 0.817461371421814, 0.8255184292793274, 0.8273676037788391, 0.8333113193511963, 0.832650899887085, 0.8392550349235535, 0.8367455005645752, 0.8408400416374207, 0.8474441766738892, 0.8475762605667114, 0.8519350290298462, 0.8545766472816467, 0.8574824929237366, 0.8544445633888245, 0.8589354157447815, 0.8561616539955139, 0.8632941246032715, 0.8640866279602051, 0.869502067565918, 0.8702945709228516, 0.8702945709228516, 0.8689737319946289, 0.8772949576377869, 0.8754457831382751, 0.8767666220664978, 0.8809932470321655, 0.8776912093162537, 0.8853520154953003, 0.8811253309249878, 0.8886540532112122, 0.8885219693183899], "val_loss": [2.042604923248291, 1.5189800262451172, 1.0515391826629639, 0.8450219035148621, 0.7558016777038574, 0.7093545794487, 0.6593213081359863, 0.6230939030647278, 0.5998342037200928, 0.5830129981040955, 0.5592260956764221, 0.5484577417373657, 0.5345214009284973, 0.5245682597160339, 0.508945107460022, 0.5038147568702698, 0.4949795603752136, 0.4867953658103943, 0.47808560729026794, 0.4682127833366394, 0.46202969551086426, 0.4617370665073395, 0.4514632225036621, 0.4495610296726227, 0.4391477108001709, 0.43453720211982727, 0.42648962140083313, 0.42570948600769043, 0.4242604672908783, 0.4146496057510376, 0.41664713621139526, 0.4113439619541168, 0.41593310236930847, 0.4013250470161438, 0.40437138080596924, 0.39875122904777527, 0.3905998170375824, 0.3918660581111908, 0.38664665818214417, 0.3956036865711212, 0.38548287749290466, 0.3855803310871124, 0.3777529299259186, 0.3802799582481384, 0.3779101073741913, 0.371540904045105, 0.3776323199272156, 0.36875513195991516, 0.37442195415496826, 0.3655129075050354, 0.3628164827823639], "val_accuracy": [0.5523333549499512, 0.6656666398048401, 0.6830000281333923, 0.7059999704360962, 0.7336666584014893, 0.7506666779518127, 0.7580000162124634, 0.7689999938011169, 0.7736666798591614, 0.7846666574478149, 0.7950000166893005, 0.7963333129882812, 0.7993333339691162, 0.8100000023841858, 0.8173333406448364, 0.8190000057220459, 0.8213333487510681, 0.8209999799728394, 0.8286666870117188, 0.828000009059906, 0.8323333263397217, 0.8336666822433472, 0.8333333134651184, 0.8349999785423279, 0.8386666774749756, 0.8393333554267883, 0.8429999947547913, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8446666598320007, 0.8463333249092102, 0.8503333330154419, 0.8529999852180481, 0.8493333458900452, 0.8550000190734863, 0.8546666502952576, 0.856333315372467, 0.8613333106040955, 0.856333315372467, 0.859000027179718, 0.8550000190734863, 0.8586666584014893, 0.8633333444595337, 0.8619999885559082, 0.8659999966621399, 0.859666645526886, 0.862666666507721, 0.8603333234786987, 0.8610000014305115, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8614285588264465, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2237820625305176, 1.8724297285079956, 1.3906656503677368, 1.09554922580719, 0.9375191330909729, 0.8330744504928589, 0.7754521369934082, 0.7155828475952148, 0.683300256729126, 0.6515241861343384, 0.6259967684745789, 0.5990371704101562, 0.5903746485710144, 0.5649830102920532, 0.5572943091392517, 0.5450278520584106, 0.5307681560516357, 0.5208154916763306, 0.5030003786087036, 0.49224936962127686, 0.49489787220954895, 0.4722188413143158, 0.4567704200744629, 0.46111419796943665, 0.4454748034477234, 0.43873199820518494, 0.4244442284107208, 0.42564865946769714, 0.4259387254714966, 0.405461847782135, 0.40485262870788574, 0.3942280411720276, 0.3844893276691437, 0.3828011751174927, 0.37544628977775574, 0.37896811962127686, 0.3782941997051239, 0.35907813906669617, 0.36018145084381104, 0.35190892219543457, 0.3479752540588379, 0.34458062052726746, 0.3383355140686035, 0.33494678139686584, 0.3267563581466675, 0.32718178629875183, 0.3202209770679474, 0.3226739764213562], "accuracy": [0.2805441915988922, 0.48408401012420654, 0.5633337497711182, 0.6128648519515991, 0.6590939164161682, 0.6991150379180908, 0.7141724824905396, 0.7371549606323242, 0.7481178045272827, 0.759609043598175, 0.7638356685638428, 0.7824593782424927, 0.7833839654922485, 0.7942147850990295, 0.798309326171875, 0.8018755912780762, 0.8068947196006775, 0.8136309385299683, 0.819442629814148, 0.8204993009567261, 0.8244617581367493, 0.8327829837799072, 0.8378021121025085, 0.8356888294219971, 0.8407079577445984, 0.847840428352356, 0.8514066934585571, 0.8512746095657349, 0.8499537706375122, 0.8562937378883362, 0.8595958352088928, 0.8638224601745605, 0.8661999702453613, 0.863029956817627, 0.8701624870300293, 0.8696341514587402, 0.8676528930664062, 0.8730682730674744, 0.8732003569602966, 0.878879964351654, 0.8768987059593201, 0.8787478804588318, 0.8796724081039429, 0.883238673210144, 0.8828424215316772, 0.8841632604598999, 0.8856161832809448, 0.8862766027450562], "val_loss": [2.0318446159362793, 1.4985706806182861, 1.0105432271957397, 0.8000566363334656, 0.7211746573448181, 0.666499137878418, 0.6287521719932556, 0.5952895283699036, 0.568552553653717, 0.5510862469673157, 0.5309942364692688, 0.5247887969017029, 0.5080761313438416, 0.4977903366088867, 0.48577871918678284, 0.4819472134113312, 0.4633673131465912, 0.4540219008922577, 0.45351073145866394, 0.44396349787712097, 0.43823617696762085, 0.43058910965919495, 0.4233343005180359, 0.4174906313419342, 0.41472262144088745, 0.411465585231781, 0.4064751863479614, 0.4052627682685852, 0.39225590229034424, 0.390729159116745, 0.39305827021598816, 0.3845888674259186, 0.3821442723274231, 0.3833244740962982, 0.3780505061149597, 0.378126859664917, 0.37253284454345703, 0.3748554289340973, 0.36809858679771423, 0.36620113253593445, 0.365370512008667, 0.36014291644096375, 0.35782939195632935, 0.35876017808914185, 0.3551505506038666, 0.3537648022174835, 0.35828402638435364, 0.35672277212142944], "val_accuracy": [0.5673333406448364, 0.6736666560173035, 0.699999988079071, 0.7229999899864197, 0.7413333058357239, 0.7570000290870667, 0.7613333463668823, 0.7799999713897705, 0.7910000085830688, 0.7993333339691162, 0.8076666593551636, 0.8069999814033508, 0.8143333196640015, 0.8263333439826965, 0.8223333358764648, 0.828000009059906, 0.8383333086967468, 0.8383333086967468, 0.8429999947547913, 0.8463333249092102, 0.8513333201408386, 0.8553333282470703, 0.8536666631698608, 0.862666666507721, 0.8650000095367432, 0.8619999885559082, 0.8636666536331177, 0.8666666746139526, 0.8636666536331177, 0.8703333139419556, 0.8709999918937683, 0.8653333187103271, 0.871666669845581, 0.8723333477973938, 0.8726666569709778, 0.8666666746139526, 0.8733333349227905, 0.875333309173584, 0.8703333139419556, 0.874666690826416, 0.875333309173584, 0.8790000081062317, 0.8820000290870667, 0.8803333044052124, 0.8803333044052124, 0.8790000081062317, 0.8743333220481873, 0.8776666522026062]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 1], [0], [0], [0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [0, 8, 2, 2, 8, 7, 5, 3], [0, 7, 3, 4, 7], [0], [0, 1], [0], [1], [0]], "fitness": -0.8342857360839844, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.math.add(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(tf.math.square(tf.math.multiply(sigma, grad)), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2942633628845215, 2.19075083732605, 1.7825480699539185, 1.3746294975280762, 1.0716387033462524, 0.9393436312675476, 0.8475622534751892, 0.8229081630706787, 0.7648224830627441, 0.735602080821991, 0.7054954767227173, 0.6950526833534241, 0.6670880317687988, 0.6307411789894104, 0.6197419166564941, 0.5871036648750305, 0.581950306892395, 0.576441764831543, 0.5705529451370239, 0.5409448742866516, 0.5394735336303711, 0.524500846862793, 0.5103116035461426, 0.515547513961792, 0.4971461594104767, 0.486541211605072, 0.4773993194103241, 0.47441959381103516, 0.46212366223335266], "accuracy": [0.12455421686172485, 0.3265090584754944, 0.4441949427127838, 0.5324263572692871, 0.6268656849861145, 0.6627922058105469, 0.6863030195236206, 0.7003037929534912, 0.6992471218109131, 0.7140403985977173, 0.7366266250610352, 0.7322678565979004, 0.7490423917770386, 0.7553823590278625, 0.7622507214546204, 0.7791573405265808, 0.7783648371696472, 0.7865539789199829, 0.7852331399917603, 0.7897239327430725, 0.7832518815994263, 0.7948752045631409, 0.8084797263145447, 0.8070268034934998, 0.811649739742279, 0.8090080618858337, 0.8115176558494568, 0.8165367841720581, 0.8238013386726379], "val_loss": [2.245717763900757, 2.0209543704986572, 1.1303480863571167, 0.8458316922187805, 0.7661124467849731, 0.7133277058601379, 0.6637657284736633, 0.645903468132019, 0.618310272693634, 0.6120452284812927, 0.5574064254760742, 0.5442215800285339, 0.5375461578369141, 0.5361350178718567, 0.5139694213867188, 0.504851758480072, 0.5096287727355957, 0.5007306337356567, 0.4942144453525543, 0.4915621876716614, 0.47404956817626953, 0.4752845764160156, 0.47288984060287476, 0.45700353384017944, 0.4687099754810333, 0.46638479828834534, 0.46519893407821655, 0.4457547962665558, 0.4472804367542267], "val_accuracy": [0.4386666715145111, 0.476666659116745, 0.6449999809265137, 0.6986666917800903, 0.7133333086967468, 0.7333333492279053, 0.7413333058357239, 0.749666690826416, 0.7586666941642761, 0.7706666588783264, 0.7743333578109741, 0.784333348274231, 0.7916666865348816, 0.7896666526794434, 0.7990000247955322, 0.8073333501815796, 0.8053333163261414, 0.8083333373069763, 0.8133333325386047, 0.8133333325386047, 0.8223333358764648, 0.8230000138282776, 0.828000009059906, 0.8443333506584167, 0.8299999833106995, 0.8366666436195374, 0.8373333215713501, 0.840666651725769, 0.8426666855812073]}, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 13, 8, 5, 1, 2, 1, 1, 0], "tree_depth": 17}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8305714130401611, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5438860654830933, 0.7871387600898743, 0.6774879097938538, 0.6321779489517212, 0.597381055355072, 0.5790947079658508, 0.5599977970123291, 0.5741500854492188, 0.5354376435279846, 0.5124737620353699, 0.5110378861427307, 0.5029441714286804, 0.4944441020488739, 0.4912407398223877, 0.5018180012702942, 0.5067511200904846, 0.5612956285476685], "accuracy": [0.46427157521247864, 0.7143045663833618, 0.7400607466697693, 0.7646281719207764, 0.7705719470977783, 0.7840443849563599, 0.7955356240272522, 0.791441023349762, 0.805177628993988, 0.807158887386322, 0.8175934553146362, 0.8191784620285034, 0.8210275769233704, 0.8227446675300598, 0.8285563588142395, 0.8187822103500366, 0.8133667707443237], "val_loss": [0.7736191153526306, 0.5725225210189819, 0.5566033124923706, 0.5291330218315125, 0.5251380205154419, 0.5165491700172424, 0.5028101801872253, 0.4473359286785126, 0.4458615779876709, 0.4680202305316925, 0.45220643281936646, 0.47394147515296936, 0.4852195680141449, 0.48909762501716614, 0.4881998598575592, 0.5298153758049011, 0.48163843154907227], "val_accuracy": [0.7353333234786987, 0.7883333563804626, 0.7816666960716248, 0.8073333501815796, 0.8053333163261414, 0.812666654586792, 0.8303333520889282, 0.8256666660308838, 0.8320000171661377, 0.8393333554267883, 0.8356666564941406, 0.8473333120346069, 0.8330000042915344, 0.8426666855812073, 0.8456666469573975, 0.8453333377838135, 0.8429999947547913]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 24], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 2, 1, 3, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(grad), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 3, 1, 3], [0, 1, 0, 2, 3], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 3, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 2, 3, 6, 8, 1, 9, 1, 4, 2, 8, 5], [0, 0, 0, 4, 0, 4, 3, 1, 2, 0], [16, 90, 96, 99, 61, 65]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 6, 3, 3, 2, 2, 1, 1, 1, 20, 12, 8, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32))), grad), tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.add(sigma, tf.math.sqrt(tf.math.square(alpha))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 1, 1], [0, 2, 3, 0, 3], [2, 2, 0, 2], [33, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [0, 2, 3, 1, 3, 5, 0, 7, 1, 9], [0, 2, 0, 3, 5, 5], [16, 16, 97], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 5, 8, 6, 4, 1, 4, 2, 4], [0, 0, 4, 4, 0, 0, 3, 1, 0, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 0, 16, 10, 6, 3, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), grad), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), tf.math.pow(grad, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), sigma)))), alpha), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0956280529499054, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 2, 3, 3, 0], [0, 1, 0, 2, 0, 1], [39, 85, 2], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 4, 9, 2], [0, 2, 0, 3, 0], [16, 16, 17, 75], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 1, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [69, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 7, 6, 3, 13, 8, 5, 4, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.negative(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.pow(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3104724884033203, 2.3370516300201416, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08849557489156723, 0.07911768555641174, 0.09391097724437714, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.310330390930176, 2.5355494022369385, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.08833333104848862, 0.0976666659116745, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}]