[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222564220428467, 1.8654934167861938, 1.392636775970459, 1.0800100564956665, 0.9349965453147888, 0.83723384141922, 0.771166205406189, 0.7229189872741699, 0.6917352080345154, 0.6532851457595825, 0.6217012405395508, 0.6138775944709778, 0.5917757749557495, 0.5793368220329285, 0.5567960739135742, 0.5480981469154358, 0.5474538803100586, 0.5317270755767822, 0.5151227116584778, 0.5055264234542847, 0.5014929175376892, 0.4862228035926819, 0.4727080464363098, 0.47010233998298645, 0.46293196082115173, 0.4504174590110779, 0.447412371635437, 0.4438058137893677, 0.42948198318481445, 0.417126327753067, 0.4136964678764343, 0.40704113245010376, 0.4020131528377533, 0.39997783303260803, 0.39442774653434753, 0.3916949927806854, 0.38260385394096375, 0.3716582953929901, 0.3650337755680084, 0.3573426902294159, 0.36132100224494934, 0.3564379811286926, 0.3445151448249817, 0.33812835812568665, 0.3384065330028534, 0.3359524607658386, 0.33294373750686646, 0.3212839663028717, 0.3217304050922394, 0.3110441267490387, 0.31119072437286377], "accuracy": [0.2685246467590332, 0.4955752193927765, 0.5610883831977844, 0.6197332143783569, 0.6668868064880371, 0.6963412761688232, 0.7205125093460083, 0.7349095344543457, 0.7469290494918823, 0.7604015469551086, 0.7732135653495789, 0.7761194109916687, 0.7878747582435608, 0.7901201844215393, 0.8009510040283203, 0.802271842956543, 0.8050455451011658, 0.8103289008140564, 0.8158763647079468, 0.8197067975997925, 0.817461371421814, 0.8255184292793274, 0.8273676037788391, 0.8333113193511963, 0.832650899887085, 0.8392550349235535, 0.8367455005645752, 0.8408400416374207, 0.8474441766738892, 0.8475762605667114, 0.8519350290298462, 0.8545766472816467, 0.8574824929237366, 0.8544445633888245, 0.8589354157447815, 0.8561616539955139, 0.8632941246032715, 0.8640866279602051, 0.869502067565918, 0.8702945709228516, 0.8702945709228516, 0.8689737319946289, 0.8772949576377869, 0.8754457831382751, 0.8767666220664978, 0.8809932470321655, 0.8776912093162537, 0.8853520154953003, 0.8811253309249878, 0.8886540532112122, 0.8885219693183899], "val_loss": [2.042604923248291, 1.5189800262451172, 1.0515391826629639, 0.8450219035148621, 0.7558016777038574, 0.7093545794487, 0.6593213081359863, 0.6230939030647278, 0.5998342037200928, 0.5830129981040955, 0.5592260956764221, 0.5484577417373657, 0.5345214009284973, 0.5245682597160339, 0.508945107460022, 0.5038147568702698, 0.4949795603752136, 0.4867953658103943, 0.47808560729026794, 0.4682127833366394, 0.46202969551086426, 0.4617370665073395, 0.4514632225036621, 0.4495610296726227, 0.4391477108001709, 0.43453720211982727, 0.42648962140083313, 0.42570948600769043, 0.4242604672908783, 0.4146496057510376, 0.41664713621139526, 0.4113439619541168, 0.41593310236930847, 0.4013250470161438, 0.40437138080596924, 0.39875122904777527, 0.3905998170375824, 0.3918660581111908, 0.38664665818214417, 0.3956036865711212, 0.38548287749290466, 0.3855803310871124, 0.3777529299259186, 0.3802799582481384, 0.3779101073741913, 0.371540904045105, 0.3776323199272156, 0.36875513195991516, 0.37442195415496826, 0.3655129075050354, 0.3628164827823639], "val_accuracy": [0.5523333549499512, 0.6656666398048401, 0.6830000281333923, 0.7059999704360962, 0.7336666584014893, 0.7506666779518127, 0.7580000162124634, 0.7689999938011169, 0.7736666798591614, 0.7846666574478149, 0.7950000166893005, 0.7963333129882812, 0.7993333339691162, 0.8100000023841858, 0.8173333406448364, 0.8190000057220459, 0.8213333487510681, 0.8209999799728394, 0.8286666870117188, 0.828000009059906, 0.8323333263397217, 0.8336666822433472, 0.8333333134651184, 0.8349999785423279, 0.8386666774749756, 0.8393333554267883, 0.8429999947547913, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8446666598320007, 0.8463333249092102, 0.8503333330154419, 0.8529999852180481, 0.8493333458900452, 0.8550000190734863, 0.8546666502952576, 0.856333315372467, 0.8613333106040955, 0.856333315372467, 0.859000027179718, 0.8550000190734863, 0.8586666584014893, 0.8633333444595337, 0.8619999885559082, 0.8659999966621399, 0.859666645526886, 0.862666666507721, 0.8603333234786987, 0.8610000014305115, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8651428818702698, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2242889404296875, 1.8660783767700195, 1.3963680267333984, 1.10135817527771, 0.9475609064102173, 0.8480321764945984, 0.7793704867362976, 0.7315582036972046, 0.7015075087547302, 0.6701711416244507, 0.6467891931533813, 0.6179876327514648, 0.601715624332428, 0.577643632888794, 0.5649125576019287, 0.5484309196472168, 0.5365621447563171, 0.5204318761825562, 0.5155314207077026, 0.49745437502861023, 0.4956391453742981, 0.48745226860046387, 0.4750051200389862, 0.46152135729789734, 0.45290607213974, 0.4427103102207184, 0.4385598599910736, 0.43970558047294617, 0.4268139898777008, 0.42169079184532166, 0.41295039653778076, 0.40268388390541077, 0.3914351463317871, 0.3868005871772766, 0.3821238875389099, 0.3860231935977936, 0.3762151300907135, 0.3729202449321747, 0.3693867027759552, 0.368780255317688, 0.3567970395088196, 0.3509187698364258, 0.3475894331932068, 0.3401198387145996, 0.33688876032829285, 0.3370453119277954, 0.33451738953590393, 0.32633811235427856, 0.3173730969429016, 0.30812206864356995, 0.3104100823402405, 0.30409136414527893, 0.3083091676235199, 0.29739460349082947, 0.2919154465198517, 0.29597386717796326], "accuracy": [0.2639017403125763, 0.4950468838214874, 0.5625412464141846, 0.6190727949142456, 0.6563201546669006, 0.6966054439544678, 0.7185312509536743, 0.7353057861328125, 0.7478536367416382, 0.7581561207771301, 0.7650244235992432, 0.7766477465629578, 0.7779685854911804, 0.7968564033508301, 0.7980451583862305, 0.8026680946350098, 0.8076872229576111, 0.8152159452438354, 0.8164047002792358, 0.8187822103500366, 0.8227446675300598, 0.8281601071357727, 0.8265751004219055, 0.8383304476737976, 0.837141752243042, 0.8486329317092896, 0.847840428352356, 0.8429533839225769, 0.8507462739944458, 0.8529917001724243, 0.8576145768165588, 0.856689989566803, 0.8603883385658264, 0.8654074668884277, 0.8664641380310059, 0.8646149635314941, 0.8669924736022949, 0.8679170608520508, 0.8709549307823181, 0.8701624870300293, 0.8737286925315857, 0.8732003569602966, 0.8745211958885193, 0.8794082403182983, 0.8767666220664978, 0.8784837126731873, 0.8831065893173218, 0.8791441321372986, 0.8885219693183899, 0.8920882344245911, 0.8932769894599915, 0.893541157245636, 0.887597382068634, 0.8891823887825012, 0.8947299122810364, 0.8971073627471924], "val_loss": [2.03684139251709, 1.5192571878433228, 1.0564202070236206, 0.8590995073318481, 0.7743316292762756, 0.7186891436576843, 0.6757791638374329, 0.6431290507316589, 0.6170282363891602, 0.5941663980484009, 0.5791231393814087, 0.5610666275024414, 0.5441023111343384, 0.5275861024856567, 0.5157219171524048, 0.5091472268104553, 0.49438145756721497, 0.49030590057373047, 0.4776829779148102, 0.4711143672466278, 0.4624101221561432, 0.4599767327308655, 0.44850292801856995, 0.45328596234321594, 0.440001904964447, 0.43363863229751587, 0.43588346242904663, 0.42730534076690674, 0.42165711522102356, 0.41478219628334045, 0.4134198725223541, 0.4092848598957062, 0.4050233066082001, 0.4048326909542084, 0.39908328652381897, 0.4063321053981781, 0.39134931564331055, 0.3927782475948334, 0.3913704752922058, 0.38347363471984863, 0.38730117678642273, 0.38527974486351013, 0.38025084137916565, 0.3755653500556946, 0.37319400906562805, 0.37080034613609314, 0.37328118085861206, 0.3737735450267792, 0.36863094568252563, 0.3642059862613678, 0.3670342266559601, 0.36662548780441284, 0.36227765679359436, 0.3643496632575989, 0.3609371483325958, 0.3568834662437439], "val_accuracy": [0.5263333320617676, 0.6493333578109741, 0.6790000200271606, 0.6943333148956299, 0.7266666889190674, 0.7463333606719971, 0.7570000290870667, 0.7676666378974915, 0.7730000019073486, 0.7836666703224182, 0.7913333177566528, 0.7983333468437195, 0.8056666851043701, 0.8130000233650208, 0.8216666579246521, 0.8243333101272583, 0.8303333520889282, 0.8233333230018616, 0.831333339214325, 0.8333333134651184, 0.840666651725769, 0.8379999995231628, 0.8399999737739563, 0.8429999947547913, 0.8510000109672546, 0.8410000205039978, 0.846666693687439, 0.8479999899864197, 0.8510000109672546, 0.8569999933242798, 0.8529999852180481, 0.8516666889190674, 0.8546666502952576, 0.8583333492279053, 0.859333336353302, 0.8513333201408386, 0.8619999885559082, 0.8606666922569275, 0.8600000143051147, 0.8606666922569275, 0.8606666922569275, 0.8633333444595337, 0.862333357334137, 0.8673333525657654, 0.8686666488647461, 0.8679999709129333, 0.8643333315849304, 0.8659999966621399, 0.8683333396911621, 0.8690000176429749, 0.871999979019165, 0.8686666488647461, 0.8703333139419556, 0.8700000047683716, 0.8709999918937683, 0.8703333139419556]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1], [0, 4, 8], [0, 5], [0], [0, 0, 1], [0, 8], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8562856912612915, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.29311203956604, 2.1874899864196777, 1.7610788345336914, 1.3270522356033325, 1.068992018699646, 0.9213542938232422, 0.8638148307800293, 0.822037398815155, 0.7706193923950195, 0.7400243282318115, 0.7054993510246277, 0.6960639953613281, 0.638580858707428, 0.6217426061630249, 0.600072979927063, 0.5906323194503784, 0.5705937147140503, 0.5693736672401428, 0.5515425205230713, 0.5595412254333496, 0.5441373586654663, 0.5236401557922363, 0.5065504312515259, 0.49842318892478943, 0.48870494961738586, 0.4739551246166229, 0.4689708352088928, 0.45710107684135437, 0.4481278657913208, 0.436959832906723, 0.4265446960926056, 0.42176321148872375, 0.41751042008399963, 0.4050828516483307, 0.4022117257118225, 0.38758930563926697, 0.3737082779407501, 0.3819371461868286, 0.38077184557914734, 0.37677231431007385, 0.3556789755821228, 0.3508548438549042, 0.3579235374927521, 0.3596550226211548, 0.33690881729125977, 0.33665817975997925], "accuracy": [0.12772421538829803, 0.33284902572631836, 0.44208163022994995, 0.5455026030540466, 0.6342623233795166, 0.6635847091674805, 0.6852463483810425, 0.6956809163093567, 0.7000396251678467, 0.7174745798110962, 0.739928662776947, 0.735569953918457, 0.7499669790267944, 0.7662131786346436, 0.7680623531341553, 0.7737419009208679, 0.7820631265640259, 0.7843085527420044, 0.7848368883132935, 0.7985734939575195, 0.7922335267066956, 0.7965922355651855, 0.8067626357078552, 0.8115176558494568, 0.8204993009567261, 0.8197067975997925, 0.8164047002792358, 0.8241975903511047, 0.824329674243927, 0.8327829837799072, 0.8348963260650635, 0.8412362933158875, 0.8444063067436218, 0.8416325449943542, 0.844010055065155, 0.8506141901016235, 0.8555012345314026, 0.8552370667457581, 0.8485008478164673, 0.8560295701026917, 0.8650112152099609, 0.8621054291725159, 0.8658037185668945, 0.8625016212463379, 0.8708229064941406, 0.8701624870300293], "val_loss": [2.245189666748047, 2.014073133468628, 1.1324596405029297, 0.8736883401870728, 0.7575882077217102, 0.6995275020599365, 0.6643933057785034, 0.6358068585395813, 0.6333661079406738, 0.5992531776428223, 0.5610246658325195, 0.5396989583969116, 0.5421304702758789, 0.5225746631622314, 0.5114322304725647, 0.4990444779396057, 0.5005204081535339, 0.49745669960975647, 0.49916553497314453, 0.49587589502334595, 0.48194319009780884, 0.478890061378479, 0.47425153851509094, 0.47877806425094604, 0.4610174894332886, 0.45063817501068115, 0.45537257194519043, 0.43830248713493347, 0.43860501050949097, 0.42906615138053894, 0.43181607127189636, 0.42466723918914795, 0.42152902483940125, 0.4244873821735382, 0.4223985970020294, 0.4293755292892456, 0.41792285442352295, 0.4173230826854706, 0.40645691752433777, 0.4172740578651428, 0.41957107186317444, 0.4103125035762787, 0.41832786798477173, 0.409747838973999, 0.408710241317749, 0.40927058458328247], "val_accuracy": [0.4233333468437195, 0.45533332228660583, 0.6486666798591614, 0.699999988079071, 0.722000002861023, 0.7423333525657654, 0.7480000257492065, 0.7566666603088379, 0.7613333463668823, 0.778333306312561, 0.7839999794960022, 0.7850000262260437, 0.7893333435058594, 0.8016666769981384, 0.8076666593551636, 0.8100000023841858, 0.8140000104904175, 0.8240000009536743, 0.8169999718666077, 0.8163333535194397, 0.82833331823349, 0.8293333053588867, 0.82833331823349, 0.8330000042915344, 0.8363333344459534, 0.8383333086967468, 0.8306666612625122, 0.8373333215713501, 0.8453333377838135, 0.8533333539962769, 0.8493333458900452, 0.8506666421890259, 0.8510000109672546, 0.8579999804496765, 0.8629999756813049, 0.8566666841506958, 0.859666645526886, 0.8579999804496765, 0.8666666746139526, 0.8669999837875366, 0.8686666488647461, 0.8636666536331177, 0.8646666407585144, 0.862666666507721, 0.8676666617393494, 0.8646666407585144]}, "mapping_values": [1, 10, 5, 5, 3, 5, 3, 2, 1, 3, 2, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8277142643928528, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.560415267944336, 0.8462654948234558, 0.7060630917549133, 0.6241574287414551, 0.5788974165916443, 0.562080979347229, 0.5301390290260315, 0.5404195189476013, 0.4976761043071747, 0.49854981899261475, 0.48045289516448975, 0.48552051186561584, 0.4722270965576172, 0.4885401129722595, 0.5095496773719788, 0.5088067054748535, 0.5753052830696106, 0.5377268195152283, 0.5489670634269714, 0.49648311734199524, 0.5260414481163025, 0.5285212397575378, 0.5280306339263916, 0.5554729104042053, 0.5925940871238708], "accuracy": [0.48144233226776123, 0.7086250185966492, 0.7386078238487244, 0.7703077793121338, 0.7844406366348267, 0.7994980812072754, 0.8128384351730347, 0.8136309385299683, 0.8267071843147278, 0.8265751004219055, 0.8238013386726379, 0.837141752243042, 0.8343679904937744, 0.8321225643157959, 0.839519202709198, 0.8271034359931946, 0.8103289008140564, 0.8193105459213257, 0.8175934553146362, 0.833179235458374, 0.8322546482086182, 0.8248580098152161, 0.8330471515655518, 0.8238013386726379, 0.8162726163864136], "val_loss": [0.8602368235588074, 0.6193762421607971, 0.5550190806388855, 0.5061933398246765, 0.4973381459712982, 0.5095453262329102, 0.5184521675109863, 0.5201936960220337, 0.4754733741283417, 0.4942314326763153, 0.5291411280632019, 0.5312553644180298, 0.5025121569633484, 0.5291856527328491, 0.6326096057891846, 0.5758925676345825, 0.6124086976051331, 0.5427378416061401, 0.5556172728538513, 0.6548644304275513, 0.6496496796607971, 0.5716840028762817, 0.617181658744812, 0.5684605836868286, 0.6224959492683411], "val_accuracy": [0.721666693687439, 0.7786666750907898, 0.796999990940094, 0.8213333487510681, 0.8146666884422302, 0.8386666774749756, 0.8223333358764648, 0.8389999866485596, 0.8379999995231628, 0.8376666903495789, 0.8360000252723694, 0.8379999995231628, 0.8396666646003723, 0.8453333377838135, 0.8410000205039978, 0.8333333134651184, 0.8273333311080933, 0.8393333554267883, 0.8486666679382324, 0.8533333539962769, 0.8416666388511658, 0.8433333039283752, 0.8503333330154419, 0.8326666951179504, 0.8526666760444641]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 67], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 0, 5], [0, 1, 0, 3], [16, 16], [0, 1], [0], [0], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 0, 2, 8], [0, 0, 0, 3, 0, 0, 3, 0, 2, 0], [16, 99, 96, 99, 59, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3037683963775635, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 6], [0, 2, 0, 3, 3], [16, 78], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [6, 3, 3, 6, 0, 1, 4, 5, 2, 2, 8, 0], [0, 0, 0, 3, 0, 0, 2, 4, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 12, 7, 5, 2, 2, 1, 1, 1, 21, 12, 9, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.divide_no_nan(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), grad)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), beta)), tf.math.add(tf.math.sqrt(tf.math.negative(grad)), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 2, 3, 0, 3, 2, 7, 0, 5], [0, 1, 0, 2, 2, 3], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [1, 3, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 9, 6, 2, 10, 6, 4, 1, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(tf.math.negative(tf.math.square(grad)), grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1], [6, 2, 3, 1, 3, 2, 8, 0, 0], [0, 1, 0, 2, 2, 0, 1], [39, 39, 8], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [0, 2, 3, 0, 3, 5, 7, 9], [0, 2, 0, 3], [16, 16, 10], [0, 1], [0], [3], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 1, 3, 4, 7, 4, 6, 7, 4, 1, 2, 4, 3, 1, 2, 5, 9, 0, 1, 4, 7, 4, 0, 9, 5, 5, 0, 5, 1], [0, 0, 0, 3, 3, 0, 1, 4, 2, 0, 3, 2, 0, 5, 4, 6, 6, 4, 6, 0, 7, 2, 5, 2, 0, 2, 2], [16, 99, 96, 99, 61, 1, 89, 0, 35, 58]], "fitness": -0.0917142853140831, "mapping_values": [1, 16, 9, 7, 3, 12, 8, 4, 3, 2, 1, 1, 0, 65, 38, 27, 10], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), grad), tf.math.add(tf.math.sqrt(tf.math.negative(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.math.negative(alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))))), alpha), tf.math.subtract(tf.math.multiply(grad, beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(tf.math.pow(tf.math.divide_no_nan(beta, tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.pow(grad, grad))), grad), tf.math.subtract(tf.math.add(tf.math.pow(tf.math.multiply(grad, tf.math.subtract(grad, tf.math.add(tf.math.square(grad), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.subtract(tf.math.pow(tf.math.add(tf.math.pow(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.square(tf.math.negative(grad)))), beta), grad))), tf.math.square(beta)), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(beta, beta))", "other_info": {"loss": [2.311652183532715, 2.3096797466278076, 2.309800148010254, 2.3122951984405518, 2.309899091720581, 2.310060739517212], "accuracy": [0.09047681838274002, 0.08902391046285629, 0.09615638852119446, 0.08545766770839691, 0.09391097724437714, 0.08836349099874496], "val_loss": [2.3082242012023926, 2.3082242012023926, 2.3082242012023926, 2.3082242012023926, 2.3082242012023926, 2.3082242012023926], "val_accuracy": [0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341]}}]