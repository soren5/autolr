[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8837142586708069, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2235751152038574, 1.863627314567566, 1.3881967067718506, 1.0971885919570923, 0.9431154727935791, 0.835616409778595, 0.7718875408172607, 0.7267177104949951, 0.6853072643280029, 0.6501961350440979, 0.6362801194190979, 0.6226356029510498, 0.5988889336585999, 0.5801778435707092, 0.5583580732345581, 0.5447906851768494, 0.5406832695007324, 0.5254860520362854, 0.5062505006790161, 0.5079479217529297, 0.49121394753456116, 0.48989003896713257, 0.47510769963264465, 0.46506667137145996, 0.4554359018802643, 0.45054957270622253, 0.44110772013664246, 0.430584579706192, 0.42144355177879333, 0.4155716598033905, 0.4158378839492798, 0.4039183557033539, 0.4085548520088196, 0.39546728134155273, 0.39515864849090576, 0.3871508538722992, 0.38307344913482666, 0.3732011318206787, 0.3693823516368866, 0.36437657475471497, 0.3559441566467285, 0.3469986915588379, 0.343269407749176, 0.3417010009288788, 0.33637532591819763, 0.32835736870765686, 0.3263590931892395, 0.31998395919799805], "accuracy": [0.2810725271701813, 0.4971602261066437, 0.5653150081634521, 0.6174877882003784, 0.6604147553443909, 0.6975300312042236, 0.7224937081336975, 0.7313432693481445, 0.7481178045272827, 0.7605336308479309, 0.7685906887054443, 0.7737419009208679, 0.7836481332778931, 0.7877426743507385, 0.8004226684570312, 0.7952714562416077, 0.8047813773155212, 0.8120459914207458, 0.8137630224227905, 0.8156121969223022, 0.8216879963874817, 0.8222163319587708, 0.828820526599884, 0.8327829837799072, 0.8348963260650635, 0.8391229510307312, 0.8408400416374207, 0.8436138033866882, 0.8473120927810669, 0.8507462739944458, 0.8518029451370239, 0.8524633646011353, 0.852331280708313, 0.8539162874221802, 0.8544445633888245, 0.8615770936012268, 0.859199583530426, 0.8668603897094727, 0.8696341514587402, 0.8679170608520508, 0.872407853603363, 0.8747853636741638, 0.8750495314598083, 0.8750495314598083, 0.8766345381736755, 0.882710337638855, 0.8792761564254761, 0.8848236799240112], "val_loss": [2.041090488433838, 1.5073738098144531, 1.0351890325546265, 0.8288497924804688, 0.7493756413459778, 0.6886183023452759, 0.646604061126709, 0.6087713837623596, 0.582353949546814, 0.5605174899101257, 0.5534560680389404, 0.5316277742385864, 0.514729917049408, 0.5010638236999512, 0.4920998513698578, 0.47585147619247437, 0.47390398383140564, 0.45993757247924805, 0.46219465136528015, 0.44748595356941223, 0.4464666247367859, 0.44296160340309143, 0.4343818426132202, 0.42551079392433167, 0.42283767461776733, 0.41507044434547424, 0.4149109423160553, 0.4069209098815918, 0.40459540486335754, 0.40145280957221985, 0.3985113203525543, 0.3906044065952301, 0.3908856511116028, 0.3974918723106384, 0.38081249594688416, 0.38753604888916016, 0.37521854043006897, 0.37901124358177185, 0.37925422191619873, 0.3736351728439331, 0.36485224962234497, 0.36611106991767883, 0.3618214428424835, 0.35893985629081726, 0.3620902895927429, 0.35414883494377136, 0.3574270009994507, 0.35906851291656494], "val_accuracy": [0.5236666798591614, 0.6586666703224182, 0.6903333067893982, 0.7173333168029785, 0.734000027179718, 0.7480000257492065, 0.7580000162124634, 0.7746666669845581, 0.7803333401679993, 0.7893333435058594, 0.7866666913032532, 0.8023333549499512, 0.8130000233650208, 0.8149999976158142, 0.8186666369438171, 0.8316666483879089, 0.8273333311080933, 0.8356666564941406, 0.8343333601951599, 0.8399999737739563, 0.8420000076293945, 0.840666651725769, 0.8446666598320007, 0.847000002861023, 0.8503333330154419, 0.8516666889190674, 0.8539999723434448, 0.856333315372467, 0.8583333492279053, 0.8579999804496765, 0.8613333106040955, 0.8573333621025085, 0.8636666536331177, 0.8523333072662354, 0.8656666874885559, 0.8583333492279053, 0.8690000176429749, 0.8683333396911621, 0.8696666955947876, 0.8666666746139526, 0.8700000047683716, 0.8726666569709778, 0.8773333430290222, 0.874666690826416, 0.8759999871253967, 0.8773333430290222, 0.8756666779518127, 0.8766666650772095]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8619999885559082, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222710132598877, 1.866591453552246, 1.3854564428329468, 1.0811609029769897, 0.9248599410057068, 0.8252281546592712, 0.7521750926971436, 0.7096253037452698, 0.6817978620529175, 0.6449474096298218, 0.6269692778587341, 0.6054320335388184, 0.5857558846473694, 0.5731155276298523, 0.5477936863899231, 0.5311726927757263, 0.5215052366256714, 0.5149482488632202, 0.5045784711837769, 0.49637192487716675, 0.48214271664619446, 0.4710155725479126, 0.4669453799724579, 0.45487189292907715, 0.4308817386627197, 0.43890875577926636, 0.43525078892707825, 0.41947680711746216, 0.41628143191337585, 0.40331098437309265, 0.394704133272171, 0.39870885014533997, 0.38799774646759033, 0.390559583902359, 0.3839036822319031, 0.37390637397766113, 0.37129849195480347, 0.36039242148399353, 0.35437095165252686, 0.3452812731266022, 0.35224977135658264, 0.3455081582069397, 0.34013283252716064, 0.3346591293811798, 0.3296356797218323, 0.3178708553314209, 0.3117471933364868, 0.3167017996311188, 0.30930188298225403, 0.305655300617218, 0.3054347038269043, 0.2982128858566284, 0.2928798794746399, 0.28521087765693665, 0.28279629349708557, 0.2899269163608551, 0.2819041907787323, 0.27552828192710876, 0.2694447934627533, 0.2644411325454712, 0.25937309861183167, 0.25347384810447693, 0.2531304657459259, 0.25923243165016174, 0.2536981701850891, 0.24216464161872864, 0.2426551729440689, 0.2388376146554947, 0.2327706515789032, 0.23264539241790771, 0.2299479991197586, 0.22540582716464996, 0.22107578814029694, 0.21858009696006775, 0.21407751739025116, 0.20986926555633545, 0.20674382150173187, 0.20840877294540405, 0.2002439945936203, 0.1965867429971695, 0.19786570966243744, 0.19429174065589905, 0.18550968170166016, 0.1861002892255783], "accuracy": [0.28001585602760315, 0.4791969358921051, 0.570202112197876, 0.6210539937019348, 0.6623960137367249, 0.705058753490448, 0.7312111854553223, 0.7407211661338806, 0.7494386434555054, 0.7684586048126221, 0.7734777331352234, 0.7827235460281372, 0.7903843522071838, 0.7951393723487854, 0.8059701323509216, 0.8117818236351013, 0.8125742673873901, 0.816008448600769, 0.8189142942428589, 0.8236692547798157, 0.8304054737091064, 0.8372738361358643, 0.8325188159942627, 0.8392550349235535, 0.8504821062088013, 0.8441421389579773, 0.8498216867446899, 0.8540483713150024, 0.8512746095657349, 0.8599920868873596, 0.8648791313171387, 0.8617091774940491, 0.8632941246032715, 0.8659358024597168, 0.8652753829956055, 0.8721436858177185, 0.8687095642089844, 0.8749174475669861, 0.8722757697105408, 0.8800686597824097, 0.8749174475669861, 0.8841632604598999, 0.8809932470321655, 0.8786157965660095, 0.8837670087814331, 0.887201189994812, 0.8886540532112122, 0.887201189994812, 0.8882578015327454, 0.8898428082466125, 0.893541157245636, 0.8930128216743469, 0.8938053250312805, 0.8965790271759033, 0.8996169567108154, 0.8960506916046143, 0.9017302989959717, 0.8994848728179932, 0.9022586345672607, 0.9045040011405945, 0.9071456789970398, 0.908730685710907, 0.9083344340324402, 0.9088627696037292, 0.9060890078544617, 0.9129573106765747, 0.9137498140335083, 0.9117686152458191, 0.9158631563186646, 0.915070652961731, 0.9178444147109985, 0.9186369180679321, 0.9173160791397095, 0.9240522980690002, 0.9237881302833557, 0.9276185631752014, 0.9274864792823792, 0.9245806336402893, 0.9315810203552246, 0.9322414398193359, 0.9269581437110901, 0.9306564331054688, 0.9325056076049805, 0.9329018592834473], "val_loss": [2.0387041568756104, 1.5173717737197876, 1.0462524890899658, 0.835747241973877, 0.7489233613014221, 0.6902884244918823, 0.6450675129890442, 0.6145113110542297, 0.5921104550361633, 0.5714799165725708, 0.548650324344635, 0.5379944443702698, 0.5231434106826782, 0.506668210029602, 0.5010952353477478, 0.4890085458755493, 0.4762653708457947, 0.4661079943180084, 0.4617846608161926, 0.4532798230648041, 0.4460696876049042, 0.4401632845401764, 0.4333721101284027, 0.4302956163883209, 0.4254588484764099, 0.4183522164821625, 0.4133737087249756, 0.4115180969238281, 0.40349018573760986, 0.39859920740127563, 0.3981318473815918, 0.3960775136947632, 0.38695311546325684, 0.38346269726753235, 0.3846147358417511, 0.37979695200920105, 0.37791332602500916, 0.37471991777420044, 0.37234997749328613, 0.3704850375652313, 0.36588117480278015, 0.3711038827896118, 0.3678591251373291, 0.3646436035633087, 0.36075496673583984, 0.3573576807975769, 0.35703814029693604, 0.35234540700912476, 0.3524302840232849, 0.347786009311676, 0.3628121614456177, 0.3520171642303467, 0.34443995356559753, 0.3449452221393585, 0.3391249179840088, 0.3419942557811737, 0.34728193283081055, 0.339204877614975, 0.33688434958457947, 0.3353162109851837, 0.3344997465610504, 0.338987797498703, 0.3410130739212036, 0.3383423388004303, 0.33234307169914246, 0.3309277892112732, 0.3326857388019562, 0.33006754517555237, 0.3291338384151459, 0.33188676834106445, 0.3299688994884491, 0.3275175094604492, 0.32785695791244507, 0.3262374997138977, 0.32550206780433655, 0.32935774326324463, 0.3272477090358734, 0.3282817304134369, 0.3266715705394745, 0.33205485343933105, 0.32296183705329895, 0.325525164604187, 0.32530930638313293, 0.32675057649612427], "val_accuracy": [0.5260000228881836, 0.6466666460037231, 0.6869999766349792, 0.7136666774749756, 0.7323333621025085, 0.753333330154419, 0.768666684627533, 0.778333306312561, 0.7896666526794434, 0.7950000166893005, 0.8076666593551636, 0.8106666803359985, 0.8133333325386047, 0.8186666369438171, 0.8236666917800903, 0.8270000219345093, 0.8320000171661377, 0.8336666822433472, 0.8366666436195374, 0.8383333086967468, 0.8403333425521851, 0.8453333377838135, 0.8450000286102295, 0.8473333120346069, 0.8523333072662354, 0.8513333201408386, 0.8533333539962769, 0.8569999933242798, 0.8556666374206543, 0.8586666584014893, 0.859666645526886, 0.8606666922569275, 0.8640000224113464, 0.8643333315849304, 0.8676666617393494, 0.8676666617393494, 0.8666666746139526, 0.8709999918937683, 0.8706666827201843, 0.8730000257492065, 0.8696666955947876, 0.8666666746139526, 0.871666669845581, 0.8730000257492065, 0.8759999871253967, 0.8723333477973938, 0.8773333430290222, 0.8730000257492065, 0.875, 0.8786666393280029, 0.8666666746139526, 0.8786666393280029, 0.8786666393280029, 0.8756666779518127, 0.8803333044052124, 0.8806666731834412, 0.8790000081062317, 0.8830000162124634, 0.8813333511352539, 0.8803333044052124, 0.8840000033378601, 0.8849999904632568, 0.8803333044052124, 0.8816666603088379, 0.8849999904632568, 0.8843333125114441, 0.8856666684150696, 0.8856666684150696, 0.8866666555404663, 0.8883333206176758, 0.8853333592414856, 0.8856666684150696, 0.890666663646698, 0.8856666684150696, 0.8846666812896729, 0.890999972820282, 0.8913333415985107, 0.8913333415985107, 0.8920000195503235, 0.8899999856948853, 0.8889999985694885, 0.890333354473114, 0.8920000195503235, 0.8863333463668823]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 1], [0], [0], [0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 7, 7, 1, 2, 0, 3, 7, 6, 7, 2, 7, 8, 8], [0, 4, 4, 5, 5, 5, 2, 5, 3, 1, 0], [0, 25], [0, 1], [0], [1], [0]], "fitness": -0.8497142791748047, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(grad, tf.math.add(tf.math.negative(tf.math.multiply(grad, tf.math.add(grad, grad))), tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.sqrt(grad)), sigma), tf.math.sqrt(alpha))))), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2925822734832764, 2.1902992725372314, 1.7711411714553833, 1.3583276271820068, 1.0755494832992554, 0.9077363014221191, 0.8432422876358032, 0.8152533173561096, 0.7414101958274841, 0.7143619656562805, 0.6852174997329712, 0.6643927097320557, 0.6499303579330444, 0.6352232098579407, 0.6064993739128113, 0.5823953747749329, 0.5880587697029114, 0.565681517124176, 0.5578818917274475, 0.543672502040863, 0.5248055458068848, 0.519389808177948, 0.4983818829059601, 0.5119994878768921, 0.4822021722793579, 0.4958554208278656, 0.47715863585472107, 0.4578325152397156, 0.46322542428970337, 0.44603800773620605, 0.44050872325897217, 0.42981964349746704, 0.42400097846984863, 0.41167497634887695, 0.4135419428348541, 0.4122644066810608, 0.39019685983657837, 0.3896261751651764, 0.38514429330825806, 0.3806813061237335], "accuracy": [0.13274335861206055, 0.3171311616897583, 0.43006208539009094, 0.5392946600914001, 0.637432336807251, 0.6600185036659241, 0.6975300312042236, 0.7013604640960693, 0.7172104120254517, 0.7199841737747192, 0.7387399077415466, 0.744419515132904, 0.7481178045272827, 0.7567031979560852, 0.7637035846710205, 0.7728173136711121, 0.7755910754203796, 0.7827235460281372, 0.7810064554214478, 0.7931581139564514, 0.8050455451011658, 0.8037247657775879, 0.8088759779930115, 0.8017435073852539, 0.8193105459213257, 0.8096684813499451, 0.8240655064582825, 0.8260467648506165, 0.8239334225654602, 0.8285563588142395, 0.8318583965301514, 0.8363492488861084, 0.837141752243042, 0.839519202709198, 0.8444063067436218, 0.8404437899589539, 0.8486329317092896, 0.845859169960022, 0.8441421389579773, 0.8487650156021118], "val_loss": [2.245563507080078, 2.016847610473633, 1.128313422203064, 0.8906204700469971, 0.7992410659790039, 0.7274777293205261, 0.7214943170547485, 0.6754894852638245, 0.6654773354530334, 0.6364575028419495, 0.6124926209449768, 0.6037248373031616, 0.5916390419006348, 0.5750938057899475, 0.5742152333259583, 0.5632554292678833, 0.5502671599388123, 0.5496184229850769, 0.5414426922798157, 0.5389569997787476, 0.5237849950790405, 0.5180512070655823, 0.5194312930107117, 0.5231330394744873, 0.5140530467033386, 0.5023786425590515, 0.5014327764511108, 0.5128904581069946, 0.49796831607818604, 0.47707831859588623, 0.47072911262512207, 0.4834757447242737, 0.47725558280944824, 0.47577619552612305, 0.4704183340072632, 0.4798334240913391, 0.4699656069278717, 0.47060343623161316, 0.4673886299133301, 0.46653950214385986], "val_accuracy": [0.40299999713897705, 0.4819999933242798, 0.6520000100135803, 0.6783333420753479, 0.6966666579246521, 0.7329999804496765, 0.7306666374206543, 0.7516666650772095, 0.7366666793823242, 0.7613333463668823, 0.7566666603088379, 0.7720000147819519, 0.7726666927337646, 0.7836666703224182, 0.7833333611488342, 0.7886666655540466, 0.8013333082199097, 0.8046666383743286, 0.8069999814033508, 0.8086666464805603, 0.8196666836738586, 0.824999988079071, 0.8220000267028809, 0.8266666531562805, 0.82833331823349, 0.8220000267028809, 0.8273333311080933, 0.8309999704360962, 0.831333339214325, 0.8379999995231628, 0.8343333601951599, 0.8366666436195374, 0.8460000157356262, 0.8410000205039978, 0.846666693687439, 0.8450000286102295, 0.8450000286102295, 0.840666651725769, 0.8460000157356262, 0.8420000076293945]}, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 25, 14, 11, 2, 2, 1, 1, 0], "tree_depth": 23}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8291428685188293, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5597317218780518, 0.8545897603034973, 0.6740157604217529, 0.5957395434379578, 0.5742117762565613, 0.5497569441795349, 0.5494507551193237, 0.5085828304290771, 0.48486170172691345, 0.4993390440940857, 0.5208473205566406, 0.5116010904312134, 0.5384806990623474, 0.5185070633888245, 0.48671653866767883, 0.5241477489471436, 0.5436215996742249, 0.5064477920532227, 0.5410007238388062], "accuracy": [0.4768194556236267, 0.7033417224884033, 0.7544577717781067, 0.7766477465629578, 0.7869502305984497, 0.7988376617431641, 0.81112140417099, 0.8128384351730347, 0.8300092220306396, 0.8216879963874817, 0.8259146809577942, 0.8175934553146362, 0.8201030492782593, 0.8235371708869934, 0.8304054737091064, 0.8277638554573059, 0.8251221776008606, 0.8294808864593506, 0.821820080280304], "val_loss": [0.7361403107643127, 0.5959291458129883, 0.5153123140335083, 0.507196307182312, 0.5065051317214966, 0.49218112230300903, 0.5112091302871704, 0.5201213955879211, 0.5069376230239868, 0.47325801849365234, 0.5331547260284424, 0.5205414295196533, 0.5463827848434448, 0.5670903325080872, 0.5349507927894592, 0.49657130241394043, 0.5189722776412964, 0.6084705591201782, 0.5625202059745789], "val_accuracy": [0.7509999871253967, 0.7706666588783264, 0.8109999895095825, 0.8103333115577698, 0.8130000233650208, 0.8306666612625122, 0.8286666870117188, 0.8339999914169312, 0.8326666951179504, 0.8423333168029785, 0.8383333086967468, 0.8296666741371155, 0.8333333134651184, 0.8546666502952576, 0.8546666502952576, 0.8339999914169312, 0.8446666598320007, 0.8403333425521851, 0.8379999995231628]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 6, 3, 0, 3], [0, 1, 0, 2], [39, 72], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 8, 8], [0, 4, 4, 3, 0, 0, 3, 4, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 20, 11, 9, 3], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(grad, sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)))), grad), tf.math.sqrt(tf.math.sqrt(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10196803510189056, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 3, 8], [4, 0, 0, 3, 0, 4, 3, 1, 2, 0], [71, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 1, 2, 1, 1, 0, 16, 8, 8, 3], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(grad, tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10236428678035736, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [4, 3, 3, 6, 8, 1, 4, 1, 5, 2, 8], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 96, 99, 61, 78]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 3, 3, 2, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), grad), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 2, 3, 0, 8], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 2, 2, 0, 3, 2, 3, 5, 5, 4, 9], [0, 2, 0, 3, 0, 3], [16, 16, 95, 62], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 6, 96, 99, 61, 5]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 17, 11, 6, 4, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(tf.math.square(tf.math.square(tf.math.pow(grad, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), grad), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09285431355237961, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}]