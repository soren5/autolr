[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222564220428467, 1.8654934167861938, 1.392636775970459, 1.0800100564956665, 0.9349965453147888, 0.83723384141922, 0.771166205406189, 0.7229189872741699, 0.6917352080345154, 0.6532851457595825, 0.6217012405395508, 0.6138775944709778, 0.5917757749557495, 0.5793368220329285, 0.5567960739135742, 0.5480981469154358, 0.5474538803100586, 0.5317270755767822, 0.5151227116584778, 0.5055264234542847, 0.5014929175376892, 0.4862228035926819, 0.4727080464363098, 0.47010233998298645, 0.46293196082115173, 0.4504174590110779, 0.447412371635437, 0.4438058137893677, 0.42948198318481445, 0.417126327753067, 0.4136964678764343, 0.40704113245010376, 0.4020131528377533, 0.39997783303260803, 0.39442774653434753, 0.3916949927806854, 0.38260385394096375, 0.3716582953929901, 0.3650337755680084, 0.3573426902294159, 0.36132100224494934, 0.3564379811286926, 0.3445151448249817, 0.33812835812568665, 0.3384065330028534, 0.3359524607658386, 0.33294373750686646, 0.3212839663028717, 0.3217304050922394, 0.3110441267490387, 0.31119072437286377], "accuracy": [0.2685246467590332, 0.4955752193927765, 0.5610883831977844, 0.6197332143783569, 0.6668868064880371, 0.6963412761688232, 0.7205125093460083, 0.7349095344543457, 0.7469290494918823, 0.7604015469551086, 0.7732135653495789, 0.7761194109916687, 0.7878747582435608, 0.7901201844215393, 0.8009510040283203, 0.802271842956543, 0.8050455451011658, 0.8103289008140564, 0.8158763647079468, 0.8197067975997925, 0.817461371421814, 0.8255184292793274, 0.8273676037788391, 0.8333113193511963, 0.832650899887085, 0.8392550349235535, 0.8367455005645752, 0.8408400416374207, 0.8474441766738892, 0.8475762605667114, 0.8519350290298462, 0.8545766472816467, 0.8574824929237366, 0.8544445633888245, 0.8589354157447815, 0.8561616539955139, 0.8632941246032715, 0.8640866279602051, 0.869502067565918, 0.8702945709228516, 0.8702945709228516, 0.8689737319946289, 0.8772949576377869, 0.8754457831382751, 0.8767666220664978, 0.8809932470321655, 0.8776912093162537, 0.8853520154953003, 0.8811253309249878, 0.8886540532112122, 0.8885219693183899], "val_loss": [2.042604923248291, 1.5189800262451172, 1.0515391826629639, 0.8450219035148621, 0.7558016777038574, 0.7093545794487, 0.6593213081359863, 0.6230939030647278, 0.5998342037200928, 0.5830129981040955, 0.5592260956764221, 0.5484577417373657, 0.5345214009284973, 0.5245682597160339, 0.508945107460022, 0.5038147568702698, 0.4949795603752136, 0.4867953658103943, 0.47808560729026794, 0.4682127833366394, 0.46202969551086426, 0.4617370665073395, 0.4514632225036621, 0.4495610296726227, 0.4391477108001709, 0.43453720211982727, 0.42648962140083313, 0.42570948600769043, 0.4242604672908783, 0.4146496057510376, 0.41664713621139526, 0.4113439619541168, 0.41593310236930847, 0.4013250470161438, 0.40437138080596924, 0.39875122904777527, 0.3905998170375824, 0.3918660581111908, 0.38664665818214417, 0.3956036865711212, 0.38548287749290466, 0.3855803310871124, 0.3777529299259186, 0.3802799582481384, 0.3779101073741913, 0.371540904045105, 0.3776323199272156, 0.36875513195991516, 0.37442195415496826, 0.3655129075050354, 0.3628164827823639], "val_accuracy": [0.5523333549499512, 0.6656666398048401, 0.6830000281333923, 0.7059999704360962, 0.7336666584014893, 0.7506666779518127, 0.7580000162124634, 0.7689999938011169, 0.7736666798591614, 0.7846666574478149, 0.7950000166893005, 0.7963333129882812, 0.7993333339691162, 0.8100000023841858, 0.8173333406448364, 0.8190000057220459, 0.8213333487510681, 0.8209999799728394, 0.8286666870117188, 0.828000009059906, 0.8323333263397217, 0.8336666822433472, 0.8333333134651184, 0.8349999785423279, 0.8386666774749756, 0.8393333554267883, 0.8429999947547913, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8446666598320007, 0.8463333249092102, 0.8503333330154419, 0.8529999852180481, 0.8493333458900452, 0.8550000190734863, 0.8546666502952576, 0.856333315372467, 0.8613333106040955, 0.856333315372467, 0.859000027179718, 0.8550000190734863, 0.8586666584014893, 0.8633333444595337, 0.8619999885559082, 0.8659999966621399, 0.859666645526886, 0.862666666507721, 0.8603333234786987, 0.8610000014305115, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8665714263916016, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2236459255218506, 1.8707760572433472, 1.401054859161377, 1.102406620979309, 0.9443227648735046, 0.8515253663063049, 0.7782543301582336, 0.7321615815162659, 0.6966517567634583, 0.6668543219566345, 0.6364893317222595, 0.6109533905982971, 0.6052628755569458, 0.5754207968711853, 0.5670931339263916, 0.5512476563453674, 0.5360701084136963, 0.526526689529419, 0.5170672535896301, 0.5118945240974426, 0.4987768828868866, 0.4842994213104248, 0.4770077168941498, 0.4651578962802887, 0.460297167301178, 0.452229380607605, 0.44192999601364136, 0.43785804510116577, 0.4390247166156769, 0.4235467314720154, 0.4213852286338806, 0.4203993082046509, 0.40997421741485596, 0.40023273229599, 0.39867883920669556, 0.396440714597702, 0.37892550230026245, 0.37997955083847046, 0.3665247857570648, 0.3670887053012848, 0.3618839979171753, 0.3559224605560303, 0.3566831946372986, 0.3464217483997345, 0.3463301360607147, 0.33759719133377075, 0.33305883407592773, 0.32411810755729675, 0.32811248302459717, 0.3294869065284729, 0.323582261800766, 0.3182874619960785, 0.3054926097393036, 0.30370834469795227, 0.301089346408844, 0.29392480850219727, 0.2922663390636444, 0.2934684157371521, 0.28164100646972656, 0.2872268259525299, 0.27623242139816284, 0.27075761556625366, 0.2732022702693939, 0.27622824907302856, 0.263923704624176], "accuracy": [0.26059964299201965, 0.476951539516449, 0.5630695819854736, 0.6140536069869995, 0.6655659675598145, 0.6925109028816223, 0.7165499925613403, 0.7312111854553223, 0.744419515132904, 0.7577598690986633, 0.7680623531341553, 0.7781006693840027, 0.7788931727409363, 0.787082314491272, 0.7984414100646973, 0.8017435073852539, 0.8043851256370544, 0.8072909712791443, 0.813498854637146, 0.8152159452438354, 0.819442629814148, 0.8276317715644836, 0.8286884427070618, 0.8333113193511963, 0.83119797706604, 0.8392550349235535, 0.8389908671379089, 0.8436138033866882, 0.8486329317092896, 0.845859169960022, 0.8466516733169556, 0.8466516733169556, 0.8499537706375122, 0.8574824929237366, 0.8564258217811584, 0.8577466607093811, 0.8631620407104492, 0.8636903762817383, 0.8650112152099609, 0.8673887252807617, 0.8729361891746521, 0.8728041052818298, 0.8728041052818298, 0.873860776424408, 0.8765024542808533, 0.8749174475669861, 0.8762382864952087, 0.8798044919967651, 0.8790120482444763, 0.8774270415306091, 0.882710337638855, 0.8848236799240112, 0.8905032277107239, 0.8887861371040344, 0.8926165699958801, 0.8923524022102356, 0.8936732411384583, 0.8951261639595032, 0.8994848728179932, 0.8961827754974365, 0.896446943283081, 0.901862382888794, 0.9005415439605713, 0.8965790271759033, 0.9027869701385498], "val_loss": [2.0385076999664307, 1.5205068588256836, 1.0530974864959717, 0.8481855392456055, 0.7595198750495911, 0.7049950957298279, 0.6618160605430603, 0.6301398277282715, 0.6071816682815552, 0.5853917002677917, 0.5640599131584167, 0.5524009466171265, 0.5384481549263, 0.524630069732666, 0.5142701268196106, 0.5065994262695312, 0.4936237037181854, 0.4846392273902893, 0.48317959904670715, 0.4774656295776367, 0.4672428369522095, 0.4596479535102844, 0.459860235452652, 0.4463212192058563, 0.44243481755256653, 0.4363340139389038, 0.4324548840522766, 0.4266183376312256, 0.4273758828639984, 0.4180186688899994, 0.4209320545196533, 0.4172895550727844, 0.4128320813179016, 0.4090709686279297, 0.4169713854789734, 0.4051724970340729, 0.4050029218196869, 0.39972302317619324, 0.3963596224784851, 0.39528772234916687, 0.3899317681789398, 0.39025598764419556, 0.3833898603916168, 0.381236732006073, 0.3861299753189087, 0.38394030928611755, 0.37955179810523987, 0.3754388391971588, 0.3791390061378479, 0.37544262409210205, 0.37632742524147034, 0.37360823154449463, 0.3697862923145294, 0.36976301670074463, 0.3680667281150818, 0.3710900545120239, 0.36548683047294617, 0.3719410002231598, 0.36628270149230957, 0.3640522360801697, 0.36320874094963074, 0.36492007970809937, 0.37064823508262634, 0.36072781682014465, 0.359739750623703], "val_accuracy": [0.5203333497047424, 0.6453333497047424, 0.6769999861717224, 0.7026666402816772, 0.7250000238418579, 0.7423333525657654, 0.7526666522026062, 0.7689999938011169, 0.7753333449363708, 0.7866666913032532, 0.793666660785675, 0.7960000038146973, 0.8063333630561829, 0.8026666641235352, 0.8113333582878113, 0.8166666626930237, 0.8206666707992554, 0.82833331823349, 0.8266666531562805, 0.8230000138282776, 0.8330000042915344, 0.8306666612625122, 0.8349999785423279, 0.8389999866485596, 0.8413333296775818, 0.8426666855812073, 0.8476666808128357, 0.8493333458900452, 0.846666693687439, 0.8526666760444641, 0.8473333120346069, 0.8513333201408386, 0.8523333072662354, 0.8586666584014893, 0.843999981880188, 0.8566666841506958, 0.8573333621025085, 0.859666645526886, 0.8619999885559082, 0.859333336353302, 0.8610000014305115, 0.862666666507721, 0.8643333315849304, 0.8650000095367432, 0.8663333058357239, 0.8610000014305115, 0.8633333444595337, 0.8676666617393494, 0.8640000224113464, 0.8653333187103271, 0.8683333396911621, 0.8693333268165588, 0.8683333396911621, 0.8659999966621399, 0.8709999918937683, 0.8659999966621399, 0.8693333268165588, 0.8656666874885559, 0.8733333349227905, 0.8773333430290222, 0.8723333477973938, 0.8730000257492065, 0.8686666488647461, 0.8743333220481873, 0.8730000257492065]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1], [0, 0], [0], [0], [0, 0], [0, 9], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8414285778999329, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.292696952819824, 2.1870405673980713, 1.7561311721801758, 1.3505905866622925, 1.075439691543579, 0.9357589483261108, 0.861756443977356, 0.8164268732070923, 0.7657690048217773, 0.7328494191169739, 0.6932848691940308, 0.6724832653999329, 0.6387143135070801, 0.6150000095367432, 0.6001597046852112, 0.5939753651618958, 0.5707764029502869, 0.560369074344635, 0.5536206364631653, 0.5358067750930786, 0.5150955319404602, 0.5202389359474182, 0.5052939653396606, 0.5058576464653015, 0.4916987121105194, 0.4834035634994507, 0.4763922691345215, 0.46784836053848267, 0.4620230495929718, 0.4548051655292511, 0.44807663559913635, 0.4431019425392151], "accuracy": [0.1332716941833496, 0.33403778076171875, 0.4493461847305298, 0.5481442213058472, 0.6412627100944519, 0.6571126580238342, 0.6886804699897766, 0.7036058902740479, 0.7030775547027588, 0.707040011882782, 0.7366266250610352, 0.7397965788841248, 0.7503632307052612, 0.7652885913848877, 0.7637035846710205, 0.7763835787773132, 0.7802139520645142, 0.7886672616004944, 0.7835160493850708, 0.7950072884559631, 0.7977809906005859, 0.8057059645652771, 0.8079513907432556, 0.8092722296714783, 0.8128384351730347, 0.8124422430992126, 0.8227446675300598, 0.8265751004219055, 0.8202351331710815, 0.8247259259223938, 0.8305375576019287, 0.8314621448516846], "val_loss": [2.247046947479248, 2.016016960144043, 1.1379154920578003, 0.9243665337562561, 0.7988056540489197, 0.7169089913368225, 0.6756559014320374, 0.6520987749099731, 0.62626713514328, 0.6038650870323181, 0.5792019963264465, 0.5538439154624939, 0.5416296720504761, 0.5285670757293701, 0.5173587203025818, 0.49367403984069824, 0.4900813400745392, 0.4797530174255371, 0.48753514885902405, 0.4760377109050751, 0.47564393281936646, 0.4737282991409302, 0.481366366147995, 0.4598211348056793, 0.45422956347465515, 0.44572582840919495, 0.43759676814079285, 0.4272545278072357, 0.4345754086971283, 0.43343350291252136, 0.4297683835029602, 0.42871803045272827], "val_accuracy": [0.3856666684150696, 0.46666666865348816, 0.637333333492279, 0.6766666769981384, 0.70333331823349, 0.7383333444595337, 0.7393333315849304, 0.737333357334137, 0.7493333220481873, 0.7636666893959045, 0.7556666731834412, 0.7873333096504211, 0.7853333353996277, 0.8009999990463257, 0.7929999828338623, 0.8069999814033508, 0.8113333582878113, 0.8100000023841858, 0.8163333535194397, 0.82833331823349, 0.8259999752044678, 0.8243333101272583, 0.8246666789054871, 0.8309999704360962, 0.8309999704360962, 0.8399999737739563, 0.8476666808128357, 0.8423333168029785, 0.8420000076293945, 0.840666651725769, 0.8426666855812073, 0.843666672706604]}, "mapping_values": [1, 10, 5, 5, 3, 3, 2, 1, 1, 2, 2, 0, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8214285969734192, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5605576038360596, 0.8395037651062012, 0.6831011772155762, 0.6248897910118103, 0.5925499796867371, 0.5608257055282593, 0.5299222469329834, 0.5276198387145996, 0.5992816090583801, 0.5515514612197876, 0.5019954442977905], "accuracy": [0.46770572662353516, 0.7123233675956726, 0.7573636174201965, 0.7705719470977783, 0.7854973077774048, 0.7979130744934082, 0.811649739742279, 0.8074230551719666, 0.8042530417442322, 0.816008448600769, 0.8256505131721497], "val_loss": [0.7403193116188049, 0.5849190354347229, 0.5226621627807617, 0.5043209195137024, 0.4758348762989044, 0.45602139830589294, 0.5104940533638, 0.6517186760902405, 0.5222498178482056, 0.5071959495544434, 0.5126162767410278], "val_accuracy": [0.7316666841506958, 0.7710000276565552, 0.7973333597183228, 0.8106666803359985, 0.8236666917800903, 0.8323333263397217, 0.824999988079071, 0.8206666707992554, 0.8106666803359985, 0.8323333263397217, 0.8236666917800903]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 2, 3, 9, 3, 5, 7, 6, 5], [0, 2, 0, 3, 4], [16, 94, 16], [0, 1], [9], [0], [20], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 0, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 4, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.15371428430080414, "mapping_values": [1, 6, 3, 3, 2, 14, 9, 5, 3, 1, 1, 0, 1, 17, 9, 8, 5], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.square(grad), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.negative(sigma), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), grad)", "other_info": {"loss": [168020080.0, 196273904.0, 190986640.0, 7396556288.0, 9902000128.0, 9229915136.0, 9232508928.0, 8558901760.0, 7883238912.0], "accuracy": [0.11227050423622131, 0.11279883980751038, 0.11108175665140152, 0.12495046854019165, 0.12059172987937927, 0.12191256135702133, 0.12217672914266586, 0.11702549457550049, 0.12336547672748566], "val_loss": [116950104.0, 116947328.0, 10409851904.0, 10410329088.0, 10410320896.0, 10410315776.0, 10410314752.0, 10410343424.0, 10410345472.0], "val_accuracy": [0.14433333277702332, 0.14399999380111694, 0.15933333337306976, 0.16500000655651093, 0.16500000655651093, 0.16500000655651093, 0.16500000655651093, 0.16500000655651093, 0.16500000655651093]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [5, 2, 3, 0, 6, 8], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 0, 0, 1, 0, 1, 1], [0, 8, 4, 7, 8], [0, 5, 6], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [4, 0, 2, 3, 4, 0, 4, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 2, 10, 6, 4, 2, 8, 5, 3, 1, 21, 11, 10, 3], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(beta, sigma))), tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0956280529499054, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 2, 0, 2], [94, 85], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 6, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [2.3038387298583984, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}, "mapping_values": [1, 9, 5, 4, 2, 6, 3, 3, 2, 2, 1, 1, 0, 16, 8, 8, 5], "tree_depth": 16}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 6, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [8, 2, 3, 0, 3, 5], [0, 2, 0, 3], [95, 97], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 4, 2, 8, 4, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 64, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}]