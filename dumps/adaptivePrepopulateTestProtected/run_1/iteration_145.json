[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222564220428467, 1.8654934167861938, 1.392636775970459, 1.0800100564956665, 0.9349965453147888, 0.83723384141922, 0.771166205406189, 0.7229189872741699, 0.6917352080345154, 0.6532851457595825, 0.6217012405395508, 0.6138775944709778, 0.5917757749557495, 0.5793368220329285, 0.5567960739135742, 0.5480981469154358, 0.5474538803100586, 0.5317270755767822, 0.5151227116584778, 0.5055264234542847, 0.5014929175376892, 0.4862228035926819, 0.4727080464363098, 0.47010233998298645, 0.46293196082115173, 0.4504174590110779, 0.447412371635437, 0.4438058137893677, 0.42948198318481445, 0.417126327753067, 0.4136964678764343, 0.40704113245010376, 0.4020131528377533, 0.39997783303260803, 0.39442774653434753, 0.3916949927806854, 0.38260385394096375, 0.3716582953929901, 0.3650337755680084, 0.3573426902294159, 0.36132100224494934, 0.3564379811286926, 0.3445151448249817, 0.33812835812568665, 0.3384065330028534, 0.3359524607658386, 0.33294373750686646, 0.3212839663028717, 0.3217304050922394, 0.3110441267490387, 0.31119072437286377], "accuracy": [0.2685246467590332, 0.4955752193927765, 0.5610883831977844, 0.6197332143783569, 0.6668868064880371, 0.6963412761688232, 0.7205125093460083, 0.7349095344543457, 0.7469290494918823, 0.7604015469551086, 0.7732135653495789, 0.7761194109916687, 0.7878747582435608, 0.7901201844215393, 0.8009510040283203, 0.802271842956543, 0.8050455451011658, 0.8103289008140564, 0.8158763647079468, 0.8197067975997925, 0.817461371421814, 0.8255184292793274, 0.8273676037788391, 0.8333113193511963, 0.832650899887085, 0.8392550349235535, 0.8367455005645752, 0.8408400416374207, 0.8474441766738892, 0.8475762605667114, 0.8519350290298462, 0.8545766472816467, 0.8574824929237366, 0.8544445633888245, 0.8589354157447815, 0.8561616539955139, 0.8632941246032715, 0.8640866279602051, 0.869502067565918, 0.8702945709228516, 0.8702945709228516, 0.8689737319946289, 0.8772949576377869, 0.8754457831382751, 0.8767666220664978, 0.8809932470321655, 0.8776912093162537, 0.8853520154953003, 0.8811253309249878, 0.8886540532112122, 0.8885219693183899], "val_loss": [2.042604923248291, 1.5189800262451172, 1.0515391826629639, 0.8450219035148621, 0.7558016777038574, 0.7093545794487, 0.6593213081359863, 0.6230939030647278, 0.5998342037200928, 0.5830129981040955, 0.5592260956764221, 0.5484577417373657, 0.5345214009284973, 0.5245682597160339, 0.508945107460022, 0.5038147568702698, 0.4949795603752136, 0.4867953658103943, 0.47808560729026794, 0.4682127833366394, 0.46202969551086426, 0.4617370665073395, 0.4514632225036621, 0.4495610296726227, 0.4391477108001709, 0.43453720211982727, 0.42648962140083313, 0.42570948600769043, 0.4242604672908783, 0.4146496057510376, 0.41664713621139526, 0.4113439619541168, 0.41593310236930847, 0.4013250470161438, 0.40437138080596924, 0.39875122904777527, 0.3905998170375824, 0.3918660581111908, 0.38664665818214417, 0.3956036865711212, 0.38548287749290466, 0.3855803310871124, 0.3777529299259186, 0.3802799582481384, 0.3779101073741913, 0.371540904045105, 0.3776323199272156, 0.36875513195991516, 0.37442195415496826, 0.3655129075050354, 0.3628164827823639], "val_accuracy": [0.5523333549499512, 0.6656666398048401, 0.6830000281333923, 0.7059999704360962, 0.7336666584014893, 0.7506666779518127, 0.7580000162124634, 0.7689999938011169, 0.7736666798591614, 0.7846666574478149, 0.7950000166893005, 0.7963333129882812, 0.7993333339691162, 0.8100000023841858, 0.8173333406448364, 0.8190000057220459, 0.8213333487510681, 0.8209999799728394, 0.8286666870117188, 0.828000009059906, 0.8323333263397217, 0.8336666822433472, 0.8333333134651184, 0.8349999785423279, 0.8386666774749756, 0.8393333554267883, 0.8429999947547913, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8446666598320007, 0.8463333249092102, 0.8503333330154419, 0.8529999852180481, 0.8493333458900452, 0.8550000190734863, 0.8546666502952576, 0.856333315372467, 0.8613333106040955, 0.856333315372467, 0.859000027179718, 0.8550000190734863, 0.8586666584014893, 0.8633333444595337, 0.8619999885559082, 0.8659999966621399, 0.859666645526886, 0.862666666507721, 0.8603333234786987, 0.8610000014305115, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8625714182853699, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2251811027526855, 1.864003300666809, 1.3900179862976074, 1.0821365118026733, 0.9305703639984131, 0.8453497886657715, 0.7687017917633057, 0.7341703176498413, 0.692101776599884, 0.6632528305053711, 0.6369801163673401, 0.607042670249939, 0.5990590453147888, 0.5743085145950317, 0.5557577013969421, 0.547457754611969, 0.536386251449585, 0.5252952575683594, 0.5182572603225708, 0.5015166997909546, 0.4884546995162964, 0.4717273712158203, 0.46344608068466187, 0.45844966173171997, 0.45285090804100037, 0.44676893949508667, 0.4314334988594055, 0.4261888265609741, 0.42339932918548584, 0.4193609058856964, 0.4180508553981781, 0.4089188873767853, 0.39280903339385986, 0.3937171399593353, 0.38633233308792114, 0.3855931758880615, 0.37372294068336487, 0.372285395860672, 0.36875444650650024, 0.35950568318367004, 0.3559844195842743, 0.3494096100330353, 0.3446667790412903, 0.3493349552154541, 0.3369566798210144, 0.3311247229576111, 0.3292430341243744, 0.32469642162323, 0.3238586485385895, 0.31331878900527954, 0.31200456619262695, 0.3111077845096588, 0.30764421820640564, 0.30719441175460815, 0.29952502250671387, 0.2874927818775177, 0.28994783759117126, 0.27838966250419617, 0.2828947901725769, 0.2819916903972626, 0.2734043300151825, 0.26842236518859863, 0.26187366247177124, 0.253190815448761, 0.2577784061431885, 0.24706441164016724, 0.2478237897157669, 0.24256227910518646], "accuracy": [0.28080835938453674, 0.49227315187454224, 0.5728437304496765, 0.6293752193450928, 0.6701889038085938, 0.69673752784729, 0.7238145470619202, 0.735569953918457, 0.7413815855979919, 0.7598732113838196, 0.7638356685638428, 0.7763835787773132, 0.7808743715286255, 0.7893276810646057, 0.7954035401344299, 0.8021397590637207, 0.7987055778503418, 0.8082155585289001, 0.8112534880638123, 0.8202351331710815, 0.8249900937080383, 0.8310658931732178, 0.8294808864593506, 0.835160493850708, 0.8368775844573975, 0.8448025584220886, 0.8459912538528442, 0.845859169960022, 0.845859169960022, 0.8504821062088013, 0.8507462739944458, 0.8532558679580688, 0.859199583530426, 0.8595958352088928, 0.8614450097084045, 0.860652506351471, 0.8713511824607849, 0.8685774803161621, 0.8688416481018066, 0.8714832663536072, 0.8735966086387634, 0.8717474341392517, 0.878351628780365, 0.8758420348167419, 0.8816536664962769, 0.8796724081039429, 0.8860124349594116, 0.8874653577804565, 0.8828424215316772, 0.8886540532112122, 0.8905032277107239, 0.8907673954963684, 0.8877294659614563, 0.8903711438179016, 0.8923524022102356, 0.9009377956390381, 0.8973715305328369, 0.9006736278533936, 0.8994848728179932, 0.8977677822113037, 0.8981640338897705, 0.9022586345672607, 0.9064852595329285, 0.9108440279960632, 0.9074098467826843, 0.9126931428909302, 0.9091269373893738, 0.9121648669242859], "val_loss": [2.041456460952759, 1.5256317853927612, 1.0629132986068726, 0.8644721508026123, 0.772305965423584, 0.7197428345680237, 0.6703137755393982, 0.6387519240379333, 0.6106359958648682, 0.5833603143692017, 0.5623788833618164, 0.5431857705116272, 0.5262551307678223, 0.5189862251281738, 0.5048879981040955, 0.49606743454933167, 0.4875776469707489, 0.47579053044319153, 0.4658818244934082, 0.4589615762233734, 0.4476929008960724, 0.4410078227519989, 0.4331088066101074, 0.42974066734313965, 0.4269392788410187, 0.4196832776069641, 0.421347439289093, 0.41022738814353943, 0.40555664896965027, 0.41106975078582764, 0.40092870593070984, 0.40033864974975586, 0.3935014605522156, 0.3875516653060913, 0.3858060836791992, 0.38301578164100647, 0.3837088346481323, 0.3810214698314667, 0.38239404559135437, 0.3775048553943634, 0.3786528706550598, 0.3689819872379303, 0.3659367263317108, 0.3643755614757538, 0.35774895548820496, 0.3665786683559418, 0.35869914293289185, 0.360034704208374, 0.35801106691360474, 0.3554266095161438, 0.3583284914493561, 0.3496626019477844, 0.3540016710758209, 0.34916821122169495, 0.3446924090385437, 0.3465138375759125, 0.3443700671195984, 0.34649354219436646, 0.34256690740585327, 0.3425101637840271, 0.3473803699016571, 0.3402388095855713, 0.33886662125587463, 0.34002411365509033, 0.33730193972587585, 0.34801343083381653, 0.34035027027130127, 0.33484986424446106], "val_accuracy": [0.5243333578109741, 0.640333354473114, 0.6696666479110718, 0.6923333406448364, 0.7196666598320007, 0.7363333106040955, 0.7476666569709778, 0.7596666812896729, 0.7683333158493042, 0.7883333563804626, 0.7979999780654907, 0.8046666383743286, 0.812666654586792, 0.8086666464805603, 0.8183333277702332, 0.8299999833106995, 0.8289999961853027, 0.8326666951179504, 0.8386666774749756, 0.8426666855812073, 0.8446666598320007, 0.8453333377838135, 0.8523333072662354, 0.843999981880188, 0.8496666550636292, 0.8513333201408386, 0.8486666679382324, 0.8539999723434448, 0.856333315372467, 0.8556666374206543, 0.862666666507721, 0.8650000095367432, 0.859666645526886, 0.8653333187103271, 0.8656666874885559, 0.8666666746139526, 0.8713333606719971, 0.8633333444595337, 0.8696666955947876, 0.8683333396911621, 0.8673333525657654, 0.8730000257492065, 0.8723333477973938, 0.875, 0.8756666779518127, 0.8733333349227905, 0.8759999871253967, 0.8736666440963745, 0.878000020980835, 0.8766666650772095, 0.871999979019165, 0.8809999823570251, 0.8809999823570251, 0.8806666731834412, 0.8799999952316284, 0.8803333044052124, 0.8813333511352539, 0.8840000033378601, 0.8796666860580444, 0.8809999823570251, 0.8766666650772095, 0.8816666603088379, 0.8856666684150696, 0.8830000162124634, 0.8823333382606506, 0.8776666522026062, 0.8840000033378601, 0.8833333253860474]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 1], [0], [0], [0], [0, 0, 1, 0, 1, 1], [0, 1, 3], [0, 7, 1], [0], [0, 1], [0], [1], [0]], "fitness": -0.8571428656578064, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2944748401641846, 2.1903367042541504, 1.7744299173355103, 1.3153433799743652, 1.1027737855911255, 0.9216256141662598, 0.8336927890777588, 0.8072590827941895, 0.7439732551574707, 0.736327588558197, 0.7049705982208252, 0.6700122356414795, 0.6401153802871704, 0.6078884601593018, 0.5931887626647949, 0.5848436951637268, 0.5786375999450684, 0.5766406655311584, 0.5563627481460571, 0.5382995009422302, 0.5250817537307739, 0.5100630521774292, 0.5089560151100159, 0.47835594415664673, 0.4797268807888031, 0.476019024848938, 0.46616867184638977, 0.46697384119033813, 0.45216843485832214, 0.4408893585205078, 0.4359409213066101, 0.42679712176322937, 0.4207174479961395, 0.4134453535079956, 0.4035724699497223, 0.4074037969112396, 0.38695773482322693, 0.38731634616851807, 0.3819218873977661, 0.3804827928543091], "accuracy": [0.12613920867443085, 0.3275656998157501, 0.4431383013725281, 0.5535596609115601, 0.6341302394866943, 0.6608110070228577, 0.6959450244903564, 0.7078325152397156, 0.7153612375259399, 0.7166820764541626, 0.7387399077415466, 0.7415136694908142, 0.7630431652069092, 0.7754589915275574, 0.7623828053474426, 0.7745344042778015, 0.7833839654922485, 0.7804781198501587, 0.7893276810646057, 0.7936864495277405, 0.7950072884559631, 0.8020076751708984, 0.8067626357078552, 0.81548011302948, 0.8131026029586792, 0.8168009519577026, 0.8227446675300598, 0.826310932636261, 0.8232730031013489, 0.8278959393501282, 0.8341038227081299, 0.8397833704948425, 0.8433496356010437, 0.8433496356010437, 0.8466516733169556, 0.8496896028518677, 0.8552370667457581, 0.8537842035293579, 0.8576145768165588, 0.8540483713150024], "val_loss": [2.247314929962158, 2.0268285274505615, 1.1620292663574219, 0.9198810458183289, 0.7723774313926697, 0.714894711971283, 0.6820346713066101, 0.6461164951324463, 0.6462579965591431, 0.6225971579551697, 0.5832090377807617, 0.5672229528427124, 0.5545845627784729, 0.5428207516670227, 0.5468620657920837, 0.5356576442718506, 0.533499002456665, 0.5174349546432495, 0.510286808013916, 0.4994579255580902, 0.49103787541389465, 0.4883345663547516, 0.4856557548046112, 0.46431392431259155, 0.4587128162384033, 0.4681229591369629, 0.4603351950645447, 0.43950513005256653, 0.43249768018722534, 0.4326658546924591, 0.4396075904369354, 0.4285335838794708, 0.4263059198856354, 0.43086668848991394, 0.418710321187973, 0.41775089502334595, 0.42245736718177795, 0.42090848088264465, 0.4120326042175293, 0.4162750244140625], "val_accuracy": [0.42500001192092896, 0.45266667008399963, 0.6439999938011169, 0.6823333501815796, 0.7160000205039978, 0.7296666502952576, 0.7383333444595337, 0.7570000290870667, 0.7279999852180481, 0.7649999856948853, 0.7716666460037231, 0.7866666913032532, 0.784333348274231, 0.7916666865348816, 0.7933333516120911, 0.7929999828338623, 0.7963333129882812, 0.8106666803359985, 0.7996666431427002, 0.8063333630561829, 0.8166666626930237, 0.8146666884422302, 0.8199999928474426, 0.8306666612625122, 0.82833331823349, 0.8273333311080933, 0.8370000123977661, 0.8433333039283752, 0.8420000076293945, 0.8426666855812073, 0.8433333039283752, 0.8543333411216736, 0.8546666502952576, 0.8550000190734863, 0.8610000014305115, 0.8573333621025085, 0.8543333411216736, 0.8543333411216736, 0.8569999933242798, 0.8583333492279053]}, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 6, 3, 3, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 7, 5, 4, 8, 6, 2, 9, 6, 5, 9], [0, 2, 7, 1], [0, 4, 40], [1], [0], [2], [0]], "fitness": -0.836571455001831, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.pow(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.square(beta), grad))), alpha)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.571393370628357, 0.8481627702713013, 0.7043562531471252, 0.6182443499565125, 0.5816230773925781, 0.5537149310112, 0.5149144530296326, 0.5019212365150452, 0.49380719661712646, 0.4792957007884979, 0.4910917580127716, 0.5037495493888855, 0.5361955165863037, 0.5274953842163086, 0.5204159617424011, 0.5417839884757996, 0.5282355546951294], "accuracy": [0.4753665328025818, 0.7088891863822937, 0.748249888420105, 0.7725531458854675, 0.7852331399917603, 0.802271842956543, 0.8166688680648804, 0.817461371421814, 0.8197067975997925, 0.8305375576019287, 0.8234050869941711, 0.822348415851593, 0.8364813327789307, 0.817989706993103, 0.8228767514228821, 0.8206313848495483, 0.82683926820755], "val_loss": [0.9150931239128113, 0.6727100610733032, 0.5834292769432068, 0.5405418276786804, 0.5145592093467712, 0.5119408965110779, 0.5147210955619812, 0.5133664011955261, 0.5326115489006042, 0.49916017055511475, 0.5369877815246582, 0.5633143782615662, 0.6280232071876526, 0.6140845417976379, 0.6718229055404663, 0.5910845994949341, 0.5959804058074951], "val_accuracy": [0.6913333535194397, 0.765333354473114, 0.796999990940094, 0.8023333549499512, 0.8159999847412109, 0.828000009059906, 0.8196666836738586, 0.8353333473205566, 0.8203333616256714, 0.8323333263397217, 0.8309999704360962, 0.8373333215713501, 0.8293333053588867, 0.8233333230018616, 0.8106666803359985, 0.8333333134651184, 0.8289999961853027]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 15, 11, 4, 3, 1, 0, 1, 0], "tree_depth": 19}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [5, 4, 3, 0, 3, 4], [0, 2, 3, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 6, 9], [0, 0, 0, 1, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 11, 6, 5, 1, 2, 1, 1, 1, 23, 13, 10, 7], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.pow(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.pow(beta, grad), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), alpha))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1], [0, 2, 5, 0, 3], [0, 1, 0, 0], [39, 39], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 0, 0, 3], [16, 16, 69], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 2, 2, 8, 0, 3, 4, 1, 3, 6, 0, 4, 9, 9], [0, 0, 4, 3, 4, 0, 4, 1, 2, 0, 2, 4, 2, 6], [16, 99, 96, 73, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 6, 3, 3, 3, 2, 1, 1, 1, 35, 21, 14, 6], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), grad)), tf.math.subtract(sigma, grad)), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.negative(beta)), tf.math.multiply(tf.math.pow(tf.math.subtract(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.negative(beta), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), grad)), beta)), grad), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 6, 0, 9, 6], [0, 4, 0, 2, 0, 4, 3, 1, 2, 0, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 10, 6, 4, 1, 2, 1, 1, 1, 26, 15, 11, 5], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(beta, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))), sigma), tf.math.sqrt(tf.math.divide_no_nan(alpha, beta)))), tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [1, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 0, 1, 1], [2, 7], [0, 5, 6], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 9, 8, 1, 4, 5, 4, 2, 8], [0, 0, 4, 3, 0, 0, 0, 1, 3, 1], [16, 99, 96, 84, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 7, 4, 3, 2, 5, 2, 3, 1, 12, 7, 5, 4], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma)))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}]