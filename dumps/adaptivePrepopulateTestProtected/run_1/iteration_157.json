[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222564220428467, 1.8654934167861938, 1.392636775970459, 1.0800100564956665, 0.9349965453147888, 0.83723384141922, 0.771166205406189, 0.7229189872741699, 0.6917352080345154, 0.6532851457595825, 0.6217012405395508, 0.6138775944709778, 0.5917757749557495, 0.5793368220329285, 0.5567960739135742, 0.5480981469154358, 0.5474538803100586, 0.5317270755767822, 0.5151227116584778, 0.5055264234542847, 0.5014929175376892, 0.4862228035926819, 0.4727080464363098, 0.47010233998298645, 0.46293196082115173, 0.4504174590110779, 0.447412371635437, 0.4438058137893677, 0.42948198318481445, 0.417126327753067, 0.4136964678764343, 0.40704113245010376, 0.4020131528377533, 0.39997783303260803, 0.39442774653434753, 0.3916949927806854, 0.38260385394096375, 0.3716582953929901, 0.3650337755680084, 0.3573426902294159, 0.36132100224494934, 0.3564379811286926, 0.3445151448249817, 0.33812835812568665, 0.3384065330028534, 0.3359524607658386, 0.33294373750686646, 0.3212839663028717, 0.3217304050922394, 0.3110441267490387, 0.31119072437286377], "accuracy": [0.2685246467590332, 0.4955752193927765, 0.5610883831977844, 0.6197332143783569, 0.6668868064880371, 0.6963412761688232, 0.7205125093460083, 0.7349095344543457, 0.7469290494918823, 0.7604015469551086, 0.7732135653495789, 0.7761194109916687, 0.7878747582435608, 0.7901201844215393, 0.8009510040283203, 0.802271842956543, 0.8050455451011658, 0.8103289008140564, 0.8158763647079468, 0.8197067975997925, 0.817461371421814, 0.8255184292793274, 0.8273676037788391, 0.8333113193511963, 0.832650899887085, 0.8392550349235535, 0.8367455005645752, 0.8408400416374207, 0.8474441766738892, 0.8475762605667114, 0.8519350290298462, 0.8545766472816467, 0.8574824929237366, 0.8544445633888245, 0.8589354157447815, 0.8561616539955139, 0.8632941246032715, 0.8640866279602051, 0.869502067565918, 0.8702945709228516, 0.8702945709228516, 0.8689737319946289, 0.8772949576377869, 0.8754457831382751, 0.8767666220664978, 0.8809932470321655, 0.8776912093162537, 0.8853520154953003, 0.8811253309249878, 0.8886540532112122, 0.8885219693183899], "val_loss": [2.042604923248291, 1.5189800262451172, 1.0515391826629639, 0.8450219035148621, 0.7558016777038574, 0.7093545794487, 0.6593213081359863, 0.6230939030647278, 0.5998342037200928, 0.5830129981040955, 0.5592260956764221, 0.5484577417373657, 0.5345214009284973, 0.5245682597160339, 0.508945107460022, 0.5038147568702698, 0.4949795603752136, 0.4867953658103943, 0.47808560729026794, 0.4682127833366394, 0.46202969551086426, 0.4617370665073395, 0.4514632225036621, 0.4495610296726227, 0.4391477108001709, 0.43453720211982727, 0.42648962140083313, 0.42570948600769043, 0.4242604672908783, 0.4146496057510376, 0.41664713621139526, 0.4113439619541168, 0.41593310236930847, 0.4013250470161438, 0.40437138080596924, 0.39875122904777527, 0.3905998170375824, 0.3918660581111908, 0.38664665818214417, 0.3956036865711212, 0.38548287749290466, 0.3855803310871124, 0.3777529299259186, 0.3802799582481384, 0.3779101073741913, 0.371540904045105, 0.3776323199272156, 0.36875513195991516, 0.37442195415496826, 0.3655129075050354, 0.3628164827823639], "val_accuracy": [0.5523333549499512, 0.6656666398048401, 0.6830000281333923, 0.7059999704360962, 0.7336666584014893, 0.7506666779518127, 0.7580000162124634, 0.7689999938011169, 0.7736666798591614, 0.7846666574478149, 0.7950000166893005, 0.7963333129882812, 0.7993333339691162, 0.8100000023841858, 0.8173333406448364, 0.8190000057220459, 0.8213333487510681, 0.8209999799728394, 0.8286666870117188, 0.828000009059906, 0.8323333263397217, 0.8336666822433472, 0.8333333134651184, 0.8349999785423279, 0.8386666774749756, 0.8393333554267883, 0.8429999947547913, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8446666598320007, 0.8463333249092102, 0.8503333330154419, 0.8529999852180481, 0.8493333458900452, 0.8550000190734863, 0.8546666502952576, 0.856333315372467, 0.8613333106040955, 0.856333315372467, 0.859000027179718, 0.8550000190734863, 0.8586666584014893, 0.8633333444595337, 0.8619999885559082, 0.8659999966621399, 0.859666645526886, 0.862666666507721, 0.8603333234786987, 0.8610000014305115, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8545714020729065, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2220029830932617, 1.8657149076461792, 1.39168381690979, 1.0799250602722168, 0.9369184970855713, 0.8289158940315247, 0.7803835868835449, 0.7298890352249146, 0.6860470175743103, 0.6633334159851074, 0.6376634240150452, 0.613982081413269, 0.5923544764518738, 0.5745129585266113, 0.5567280650138855, 0.5418616533279419, 0.5350077748298645, 0.5188280344009399, 0.5067854523658752, 0.4896147549152374, 0.4966440200805664, 0.4685053825378418, 0.4708492159843445, 0.4561770260334015, 0.45210039615631104, 0.442128986120224, 0.4327077865600586, 0.427725225687027, 0.42280542850494385, 0.4072035253047943, 0.40787163376808167, 0.40474316477775574, 0.39046013355255127, 0.3949071168899536], "accuracy": [0.2755250334739685, 0.4920089840888977, 0.5612204670906067, 0.6201294660568237, 0.6705851554870605, 0.6985867023468018, 0.7172104120254517, 0.7349095344543457, 0.7515519857406616, 0.755118191242218, 0.767930269241333, 0.7773081660270691, 0.7784969210624695, 0.7893276810646057, 0.800818920135498, 0.8050455451011658, 0.8074230551719666, 0.8202351331710815, 0.8182538747787476, 0.8273676037788391, 0.821820080280304, 0.8352925777435303, 0.8347642421722412, 0.8413683772087097, 0.8417646288871765, 0.8465195894241333, 0.8425571322441101, 0.8451988101005554, 0.8514066934585571, 0.8558974862098694, 0.8541803956031799, 0.8553691506385803, 0.8631620407104492, 0.8613129258155823], "val_loss": [2.036966562271118, 1.5102845430374146, 1.0412042140960693, 0.8331268429756165, 0.7481986284255981, 0.6970266699790955, 0.6511867046356201, 0.6156322956085205, 0.590279757976532, 0.5661139488220215, 0.5506336092948914, 0.5303598046302795, 0.517968475818634, 0.5088621973991394, 0.49340298771858215, 0.48220115900039673, 0.48343905806541443, 0.46436792612075806, 0.4540810286998749, 0.45187970995903015, 0.4414730668067932, 0.4342069625854492, 0.4337996542453766, 0.4235163927078247, 0.4192878305912018, 0.4236927032470703, 0.4168054461479187, 0.4046786427497864, 0.4028594195842743, 0.40271928906440735, 0.39843234419822693, 0.39254623651504517, 0.3903677463531494, 0.39057257771492004], "val_accuracy": [0.5443333387374878, 0.6673333048820496, 0.684333324432373, 0.7106666564941406, 0.7273333072662354, 0.7383333444595337, 0.7570000290870667, 0.7710000276565552, 0.781000018119812, 0.7906666398048401, 0.7963333129882812, 0.8036666512489319, 0.8106666803359985, 0.8086666464805603, 0.8149999976158142, 0.8236666917800903, 0.8223333358764648, 0.831333339214325, 0.8360000252723694, 0.8336666822433472, 0.8389999866485596, 0.8443333506584167, 0.8453333377838135, 0.8446666598320007, 0.8479999899864197, 0.8423333168029785, 0.8493333458900452, 0.8546666502952576, 0.8569999933242798, 0.8486666679382324, 0.8560000061988831, 0.8569999933242798, 0.8556666374206543, 0.8569999933242798]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 6, 1, 6, 5, 0, 3, 5, 6], [0, 2, 1, 5, 1, 2], [0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 6, 0, 5, 1, 4, 4, 6, 1, 3, 4, 9, 3, 2, 1, 7, 0, 4, 8], [0, 3, 1, 0, 7, 4, 2, 1, 0, 4, 2, 5, 3], [0, 40, 13, 22], [0, 1], [0], [1], [0]], "fitness": -0.8451428413391113, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.subtract(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(beta)), tf.math.negative(alpha)), tf.math.multiply(tf.math.square(tf.math.divide_no_nan(grad, alpha)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.subtract(tf.math.pow(tf.math.pow(tf.math.divide_no_nan(tf.math.subtract(sigma, tf.math.multiply(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.subtract(tf.math.add(tf.math.negative(grad), grad), beta), tf.math.pow(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), grad))), tf.math.sqrt(beta)), grad), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2936859130859375, 2.1909685134887695, 1.7777653932571411, 1.321069359779358, 1.092786431312561, 0.9108498096466064, 0.8603107929229736, 0.8343843221664429, 0.7803777456283569, 0.7455085515975952, 0.7117006182670593, 0.6867024302482605, 0.6550600528717041, 0.6191287040710449, 0.603558361530304, 0.5950118899345398, 0.5762680768966675, 0.564542293548584, 0.5608917474746704, 0.5353789329528809, 0.5211493968963623, 0.5232178568840027, 0.505563497543335, 0.506301999092102, 0.49268606305122375, 0.4789072275161743, 0.4570474922657013, 0.4585903286933899, 0.4320622384548187, 0.4317912459373474, 0.41680625081062317], "accuracy": [0.12376172095537186, 0.3195086419582367, 0.4410249590873718, 0.5419363379478455, 0.6336019039154053, 0.6672830581665039, 0.6870955228805542, 0.7004358768463135, 0.7008321285247803, 0.7162858247756958, 0.7302865982055664, 0.7375511527061462, 0.7440232634544373, 0.7637035846710205, 0.7716285586357117, 0.776251494884491, 0.7770439982414246, 0.7832518815994263, 0.7852331399917603, 0.796328067779541, 0.8009510040283203, 0.8033285140991211, 0.8101968169212341, 0.8076872229576111, 0.8128384351730347, 0.819970965385437, 0.82683926820755, 0.821820080280304, 0.8352925777435303, 0.8362171649932861, 0.8354246616363525], "val_loss": [2.2465178966522217, 2.020603895187378, 1.1476664543151855, 0.9004044532775879, 0.755509614944458, 0.6965759992599487, 0.6566320061683655, 0.6524370312690735, 0.6275187730789185, 0.601854145526886, 0.5667302012443542, 0.5400219559669495, 0.5256615877151489, 0.5081964731216431, 0.5004847645759583, 0.4915017783641815, 0.4863766133785248, 0.48210811614990234, 0.4758797287940979, 0.46077409386634827, 0.457865834236145, 0.45306864380836487, 0.46082568168640137, 0.45144355297088623, 0.4397329092025757, 0.42659229040145874, 0.42598673701286316, 0.423336386680603, 0.4123525023460388, 0.4083629548549652, 0.4069005846977234], "val_accuracy": [0.4113333225250244, 0.44966667890548706, 0.6446666717529297, 0.687666654586792, 0.7226666808128357, 0.7446666955947876, 0.7559999823570251, 0.7440000176429749, 0.7639999985694885, 0.7580000162124634, 0.7773333191871643, 0.7856666445732117, 0.8033333420753479, 0.7919999957084656, 0.8109999895095825, 0.8059999942779541, 0.8053333163261414, 0.8100000023841858, 0.8183333277702332, 0.828000009059906, 0.8320000171661377, 0.8373333215713501, 0.8383333086967468, 0.8330000042915344, 0.8460000157356262, 0.8510000109672546, 0.8443333506584167, 0.8420000076293945, 0.8473333120346069, 0.8510000109672546, 0.8479999899864197]}, "mapping_values": [1, 10, 5, 5, 3, 15, 9, 6, 1, 32, 19, 13, 4, 2, 1, 1, 0], "tree_depth": 29}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 1, 3, 2, 3, 0, 0], [0, 0, 7, 2, 1], [0, 14], [1], [0], [2], [0]], "fitness": -0.8374285697937012, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), grad), tf.math.negative(beta))), tf.math.negative(alpha))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5271682739257812, 0.8298484683036804, 0.6944345235824585, 0.6371847987174988, 0.5889543294906616, 0.5710170269012451, 0.5316060781478882, 0.545093834400177, 0.5210390686988831, 0.49760133028030396, 0.4664041996002197, 0.4828760623931885, 0.4917442798614502, 0.48894914984703064, 0.46334049105644226, 0.49096444249153137], "accuracy": [0.47549861669540405, 0.7029454708099365, 0.7420420050621033, 0.7671377658843994, 0.7802139520645142, 0.7931581139564514, 0.8035926818847656, 0.8021397590637207, 0.8161405324935913, 0.8224804997444153, 0.8315942287445068, 0.8239334225654602, 0.830669641494751, 0.8341038227081299, 0.8339717388153076, 0.8280280232429504], "val_loss": [0.8645401000976562, 0.6815396547317505, 0.5989705324172974, 0.5179715752601624, 0.5287284255027771, 0.5292860269546509, 0.5280043482780457, 0.5196253061294556, 0.5219037532806396, 0.4855188727378845, 0.5392926335334778, 0.5158565044403076, 0.5217025876045227, 0.5346879363059998, 0.5307233333587646, 0.5125220417976379], "val_accuracy": [0.6959999799728394, 0.7616666555404663, 0.7866666913032532, 0.8100000023841858, 0.8169999718666077, 0.8180000185966492, 0.8253333568572998, 0.8193333148956299, 0.8259999752044678, 0.8303333520889282, 0.8456666469573975, 0.8306666612625122, 0.843999981880188, 0.8363333344459534, 0.8303333520889282, 0.8379999995231628]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 2, 3, 0, 3, 5, 8], [0, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 0, 1], [1, 8], [4, 3], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 4, 4, 1, 4, 2, 8], [1, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 19, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 7, 4, 2, 8, 4, 4, 2, 4, 2, 2, 0, 16, 8, 8, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(grad))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(grad, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(alpha, tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [6, 2, 3, 0, 2, 5, 3, 3, 2, 1, 2, 8, 7, 6, 2, 3, 8, 8, 2, 1, 3, 4, 7, 6, 8, 6, 4, 4, 7, 0, 8, 0, 9, 7], [0, 2, 3, 3, 3, 3, 1, 4, 0, 4, 0, 3, 3, 3, 2, 0, 2, 5, 4, 4, 1, 2, 0, 5], [16, 16, 24, 58, 53, 30], [0, 0, 1, 1], [0, 6], [0, 6], [39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 0], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [25, 99, 96, 99, 33, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 58, 34, 24, 6, 4, 2, 2, 1, 20, 10, 10, 5], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.add(tf.math.square(tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(tf.math.add(grad, tf.math.multiply(grad, grad)), tf.math.sqrt(tf.math.sqrt(grad))), tf.math.add(alpha, tf.math.subtract(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.pow(grad, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), grad)), tf.math.add(grad, tf.math.divide_no_nan(grad, beta))), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), beta), tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.pow(grad, tf.math.pow(tf.math.add(tf.math.negative(tf.math.sqrt(grad)), tf.math.negative(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))), alpha)))))), beta)), tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma), grad))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), alpha), tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 2, 1, 3], [0, 0, 1, 2, 0], [39, 39, 63], [0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1], [0], [0], [0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 3, 6, 6, 7, 3, 3, 5, 5], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0, 4, 3, 2, 7, 3, 7], [0, 54, 77, 56, 76, 60]], "fitness": -0.09514285624027252, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 0, 2, 1, 1, 1, 34, 18, 16, 5], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.add(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, grad)), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(grad, tf.math.pow(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), sigma)))), tf.math.add(tf.math.multiply(tf.math.divide_no_nan(alpha, beta), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.add(sigma, tf.math.multiply(tf.math.multiply(tf.math.square(beta), grad), tf.math.square(sigma)))))), grad)", "other_info": {"loss": [2.3110196590423584, 2.3114402294158936, 2.3090505599975586, 2.3094828128814697, 2.309919595718384, 2.3108115196228027], "accuracy": [0.08757099509239197, 0.09192973375320435, 0.09642054885625839, 0.09655263274908066, 0.09060890227556229, 0.0936468094587326], "val_loss": [2.308762788772583, 2.308762788772583, 2.308762788772583, 2.308762788772583, 2.308762788772583, 2.308762788772583], "val_accuracy": [0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 3, 0, 3], [16, 16], [0, 1, 1], [6], [0, 4], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [5, 3, 3, 8, 8, 1, 4, 8, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 20, 99, 61, 1]], "fitness": -0.09000000357627869, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 3, 1, 2, 1, 2, 1, 1, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3103296756744385, 2.3096210956573486, 2.3089797496795654, 2.3093552589416504, 2.3086066246032715, 2.3085336685180664], "accuracy": [0.08875974267721176, 0.08915598690509796, 0.09470347315073013, 0.09457138925790787, 0.09681680053472519, 0.09034473448991776], "val_loss": [2.308445692062378, 2.3083412647247314, 2.308234453201294, 2.308117628097534, 2.3079941272735596, 2.307875394821167], "val_accuracy": [0.09266666322946548, 0.09099999815225601, 0.08833333104848862, 0.08733333647251129, 0.08733333647251129, 0.08733333647251129]}}]