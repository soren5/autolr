[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222564220428467, 1.8654934167861938, 1.392636775970459, 1.0800100564956665, 0.9349965453147888, 0.83723384141922, 0.771166205406189, 0.7229189872741699, 0.6917352080345154, 0.6532851457595825, 0.6217012405395508, 0.6138775944709778, 0.5917757749557495, 0.5793368220329285, 0.5567960739135742, 0.5480981469154358, 0.5474538803100586, 0.5317270755767822, 0.5151227116584778, 0.5055264234542847, 0.5014929175376892, 0.4862228035926819, 0.4727080464363098, 0.47010233998298645, 0.46293196082115173, 0.4504174590110779, 0.447412371635437, 0.4438058137893677, 0.42948198318481445, 0.417126327753067, 0.4136964678764343, 0.40704113245010376, 0.4020131528377533, 0.39997783303260803, 0.39442774653434753, 0.3916949927806854, 0.38260385394096375, 0.3716582953929901, 0.3650337755680084, 0.3573426902294159, 0.36132100224494934, 0.3564379811286926, 0.3445151448249817, 0.33812835812568665, 0.3384065330028534, 0.3359524607658386, 0.33294373750686646, 0.3212839663028717, 0.3217304050922394, 0.3110441267490387, 0.31119072437286377], "accuracy": [0.2685246467590332, 0.4955752193927765, 0.5610883831977844, 0.6197332143783569, 0.6668868064880371, 0.6963412761688232, 0.7205125093460083, 0.7349095344543457, 0.7469290494918823, 0.7604015469551086, 0.7732135653495789, 0.7761194109916687, 0.7878747582435608, 0.7901201844215393, 0.8009510040283203, 0.802271842956543, 0.8050455451011658, 0.8103289008140564, 0.8158763647079468, 0.8197067975997925, 0.817461371421814, 0.8255184292793274, 0.8273676037788391, 0.8333113193511963, 0.832650899887085, 0.8392550349235535, 0.8367455005645752, 0.8408400416374207, 0.8474441766738892, 0.8475762605667114, 0.8519350290298462, 0.8545766472816467, 0.8574824929237366, 0.8544445633888245, 0.8589354157447815, 0.8561616539955139, 0.8632941246032715, 0.8640866279602051, 0.869502067565918, 0.8702945709228516, 0.8702945709228516, 0.8689737319946289, 0.8772949576377869, 0.8754457831382751, 0.8767666220664978, 0.8809932470321655, 0.8776912093162537, 0.8853520154953003, 0.8811253309249878, 0.8886540532112122, 0.8885219693183899], "val_loss": [2.042604923248291, 1.5189800262451172, 1.0515391826629639, 0.8450219035148621, 0.7558016777038574, 0.7093545794487, 0.6593213081359863, 0.6230939030647278, 0.5998342037200928, 0.5830129981040955, 0.5592260956764221, 0.5484577417373657, 0.5345214009284973, 0.5245682597160339, 0.508945107460022, 0.5038147568702698, 0.4949795603752136, 0.4867953658103943, 0.47808560729026794, 0.4682127833366394, 0.46202969551086426, 0.4617370665073395, 0.4514632225036621, 0.4495610296726227, 0.4391477108001709, 0.43453720211982727, 0.42648962140083313, 0.42570948600769043, 0.4242604672908783, 0.4146496057510376, 0.41664713621139526, 0.4113439619541168, 0.41593310236930847, 0.4013250470161438, 0.40437138080596924, 0.39875122904777527, 0.3905998170375824, 0.3918660581111908, 0.38664665818214417, 0.3956036865711212, 0.38548287749290466, 0.3855803310871124, 0.3777529299259186, 0.3802799582481384, 0.3779101073741913, 0.371540904045105, 0.3776323199272156, 0.36875513195991516, 0.37442195415496826, 0.3655129075050354, 0.3628164827823639], "val_accuracy": [0.5523333549499512, 0.6656666398048401, 0.6830000281333923, 0.7059999704360962, 0.7336666584014893, 0.7506666779518127, 0.7580000162124634, 0.7689999938011169, 0.7736666798591614, 0.7846666574478149, 0.7950000166893005, 0.7963333129882812, 0.7993333339691162, 0.8100000023841858, 0.8173333406448364, 0.8190000057220459, 0.8213333487510681, 0.8209999799728394, 0.8286666870117188, 0.828000009059906, 0.8323333263397217, 0.8336666822433472, 0.8333333134651184, 0.8349999785423279, 0.8386666774749756, 0.8393333554267883, 0.8429999947547913, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8446666598320007, 0.8463333249092102, 0.8503333330154419, 0.8529999852180481, 0.8493333458900452, 0.8550000190734863, 0.8546666502952576, 0.856333315372467, 0.8613333106040955, 0.856333315372467, 0.859000027179718, 0.8550000190734863, 0.8586666584014893, 0.8633333444595337, 0.8619999885559082, 0.8659999966621399, 0.859666645526886, 0.862666666507721, 0.8603333234786987, 0.8610000014305115, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8600000143051147, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2241570949554443, 1.871618390083313, 1.3951869010925293, 1.0966203212738037, 0.9428426623344421, 0.8365831971168518, 0.7694376111030579, 0.7372694611549377, 0.6910146474838257, 0.6688374876976013, 0.6435026526451111, 0.6170223951339722, 0.5964235067367554, 0.5797622799873352, 0.571500837802887, 0.5608423352241516, 0.5369787812232971, 0.5291292667388916, 0.5202306509017944, 0.5039151310920715, 0.4938216209411621, 0.4933209717273712, 0.4748915731906891, 0.46756511926651, 0.4629290699958801, 0.4566405713558197, 0.44634807109832764, 0.43226659297943115, 0.43009698390960693, 0.42687249183654785, 0.40788915753364563, 0.40560320019721985, 0.40720489621162415, 0.3955661654472351, 0.39438027143478394, 0.38534441590309143, 0.3758346140384674, 0.37774690985679626, 0.36485448479652405, 0.3672550916671753, 0.354957640171051, 0.3523372411727905, 0.3511184751987457, 0.3418771028518677, 0.3337624669075012, 0.3319694995880127, 0.32815465331077576, 0.3146470785140991, 0.31779924035072327, 0.310757040977478], "accuracy": [0.2755250334739685, 0.48514068126678467, 0.5736362338066101, 0.6166952848434448, 0.6647734642028809, 0.7000396251678467, 0.724210798740387, 0.7304186820983887, 0.748778223991394, 0.7560427784919739, 0.7680623531341553, 0.7744023203849792, 0.7773081660270691, 0.7885351777076721, 0.7911768555641174, 0.802800178527832, 0.8033285140991211, 0.8109893202781677, 0.8195747137069702, 0.8165367841720581, 0.8236692547798157, 0.821820080280304, 0.8269713521003723, 0.835160493850708, 0.8327829837799072, 0.8405758738517761, 0.8445383906364441, 0.8498216867446899, 0.8508783578872681, 0.8525954484939575, 0.8568220734596252, 0.8555012345314026, 0.8603883385658264, 0.8602562546730042, 0.8642187118530273, 0.8661999702453613, 0.8676528930664062, 0.8681812286376953, 0.8728041052818298, 0.8691058158874512, 0.8759741187095642, 0.8749174475669861, 0.8747853636741638, 0.8774270415306091, 0.8803328275680542, 0.882710337638855, 0.883238673210144, 0.8858803510665894, 0.8885219693183899, 0.8891823887825012], "val_loss": [2.0364582538604736, 1.5036821365356445, 1.0224334001541138, 0.8182308077812195, 0.7379322052001953, 0.6797643899917603, 0.6371678709983826, 0.6092968583106995, 0.5787163376808167, 0.5634924173355103, 0.5403029322624207, 0.5216807723045349, 0.5079750418663025, 0.4970546066761017, 0.48342692852020264, 0.4771074950695038, 0.467847615480423, 0.4538567364215851, 0.44657132029533386, 0.4397989511489868, 0.43367698788642883, 0.4280117452144623, 0.4210640788078308, 0.415373295545578, 0.4077600836753845, 0.4055681824684143, 0.40084853768348694, 0.393981397151947, 0.3929184675216675, 0.38846495747566223, 0.38367959856987, 0.3879174292087555, 0.3765431046485901, 0.38095954060554504, 0.37102457880973816, 0.37748751044273376, 0.36268073320388794, 0.36302584409713745, 0.3653334677219391, 0.35548925399780273, 0.3616549074649811, 0.35177552700042725, 0.35153457522392273, 0.34942683577537537, 0.3480232059955597, 0.34395140409469604, 0.3431665301322937, 0.34142130613327026, 0.34022462368011475, 0.3424500823020935], "val_accuracy": [0.5389999747276306, 0.6693333387374878, 0.6940000057220459, 0.7213333249092102, 0.7360000014305115, 0.7486666440963745, 0.7646666765213013, 0.7683333158493042, 0.7820000052452087, 0.7893333435058594, 0.8006666898727417, 0.8116666674613953, 0.8143333196640015, 0.8163333535194397, 0.8306666612625122, 0.8306666612625122, 0.8256666660308838, 0.8426666855812073, 0.8379999995231628, 0.843999981880188, 0.8453333377838135, 0.8429999947547913, 0.8513333201408386, 0.8510000109672546, 0.8566666841506958, 0.8566666841506958, 0.8579999804496765, 0.859333336353302, 0.8613333106040955, 0.8619999885559082, 0.8603333234786987, 0.8633333444595337, 0.8686666488647461, 0.8619999885559082, 0.8666666746139526, 0.8669999837875366, 0.8690000176429749, 0.8763333559036255, 0.8686666488647461, 0.8776666522026062, 0.8730000257492065, 0.8773333430290222, 0.8763333559036255, 0.8743333220481873, 0.8809999823570251, 0.8759999871253967, 0.8809999823570251, 0.8796666860580444, 0.8809999823570251, 0.8790000081062317]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 1], [0], [0], [0], [0, 0, 1], [0, 0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8594285845756531, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.292649030685425, 2.1875901222229004, 1.7669364213943481, 1.3572291135787964, 1.0674525499343872, 0.9365149736404419, 0.8495038747787476, 0.8244202136993408, 0.7570825815200806, 0.7395973801612854, 0.6978155374526978, 0.6806842088699341, 0.6506797671318054, 0.6421157121658325, 0.6019511818885803, 0.6018533110618591, 0.5788019299507141, 0.5788431763648987, 0.5534968376159668, 0.5615749955177307, 0.5453242659568787, 0.5254096388816833, 0.523160457611084, 0.5094962120056152, 0.5001761317253113, 0.5027525424957275, 0.4909132122993469, 0.47007057070732117, 0.4722149968147278, 0.4479760229587555, 0.4475417733192444, 0.4347590506076813, 0.4307890236377716, 0.4204626977443695, 0.409984290599823, 0.40264877676963806, 0.4052776098251343, 0.3856293261051178, 0.38403886556625366, 0.38177290558815, 0.3642212748527527, 0.369631826877594, 0.3643559217453003, 0.36068499088287354, 0.34199538826942444], "accuracy": [0.1306300312280655, 0.3337736129760742, 0.43891164660453796, 0.5369172096252441, 0.628582775592804, 0.6567164063453674, 0.6806234121322632, 0.6917183995246887, 0.7153612375259399, 0.7160216569900513, 0.735569953918457, 0.7384757399559021, 0.7486461400985718, 0.7515519857406616, 0.7730814814567566, 0.7680623531341553, 0.7790252566337585, 0.7795535326004028, 0.7820631265640259, 0.7821952104568481, 0.7861577272415161, 0.798309326171875, 0.8024039268493652, 0.8049134612083435, 0.8039889335632324, 0.8112534880638123, 0.8092722296714783, 0.8195747137069702, 0.8197067975997925, 0.8294808864593506, 0.8251221776008606, 0.8309338092803955, 0.8360850811004639, 0.8380662798881531, 0.8449346423149109, 0.8455950617790222, 0.8424250483512878, 0.8510104417800903, 0.852331280708313, 0.8494254350662231, 0.8552370667457581, 0.856689989566803, 0.854708731174469, 0.8588033318519592, 0.8615770936012268], "val_loss": [2.245049476623535, 2.015599012374878, 1.1214231252670288, 0.8495290279388428, 0.7792115211486816, 0.7384204864501953, 0.6699337363243103, 0.6492912769317627, 0.6383804678916931, 0.620943009853363, 0.5923296809196472, 0.5623670220375061, 0.5557230114936829, 0.5427888631820679, 0.5508548021316528, 0.5323775410652161, 0.5049183964729309, 0.49962541460990906, 0.4998458921909332, 0.4993912875652313, 0.486853688955307, 0.49026253819465637, 0.4830702245235443, 0.47304195165634155, 0.4783321022987366, 0.4752877950668335, 0.4607374966144562, 0.45578405261039734, 0.44526657462120056, 0.44491592049598694, 0.4420856833457947, 0.43775999546051025, 0.42787492275238037, 0.42504069209098816, 0.4230280816555023, 0.41854768991470337, 0.41803327202796936, 0.4147336483001709, 0.4157285988330841, 0.40555936098098755, 0.4052380919456482, 0.4138110876083374, 0.40746399760246277, 0.4020988643169403, 0.40750056505203247], "val_accuracy": [0.41866666078567505, 0.484333336353302, 0.6620000004768372, 0.7036666870117188, 0.7303333282470703, 0.721666693687439, 0.7436666488647461, 0.7459999918937683, 0.7696666717529297, 0.7633333206176758, 0.7749999761581421, 0.784333348274231, 0.7886666655540466, 0.7953333258628845, 0.7853333353996277, 0.796999990940094, 0.8023333549499512, 0.8119999766349792, 0.8146666884422302, 0.8153333067893982, 0.8196666836738586, 0.8116666674613953, 0.8186666369438171, 0.8299999833106995, 0.8356666564941406, 0.8416666388511658, 0.840666651725769, 0.8353333473205566, 0.8443333506584167, 0.8399999737739563, 0.8456666469573975, 0.846666693687439, 0.8443333506584167, 0.8450000286102295, 0.8533333539962769, 0.8533333539962769, 0.856333315372467, 0.862666666507721, 0.8650000095367432, 0.8690000176429749, 0.862333357334137, 0.8633333444595337, 0.8646666407585144, 0.859000027179718, 0.8676666617393494]}, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 3, 2, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8288571238517761, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.47681725025177, 0.7988765239715576, 0.6504332423210144, 0.6265201568603516, 0.6151782870292664, 0.6026521325111389, 0.5641180872917175, 0.5196599364280701, 0.5197308659553528, 0.5181370973587036, 0.5329257845878601, 0.5393508672714233, 0.5172011852264404, 0.5207533240318298, 0.5432606339454651], "accuracy": [0.4967639744281769, 0.720380425453186, 0.7601373791694641, 0.7725531458854675, 0.7803460359573364, 0.7854973077774048, 0.7897239327430725, 0.8099326491355896, 0.8133667707443237, 0.8108572363853455, 0.809140145778656, 0.8088759779930115, 0.8260467648506165, 0.8108572363853455, 0.8247259259223938], "val_loss": [0.8048406839370728, 0.6221213340759277, 0.5371091961860657, 0.543225884437561, 0.5388241410255432, 0.5531173348426819, 0.5322359800338745, 0.5091639757156372, 0.4880567193031311, 0.5192099809646606, 0.5659093856811523, 0.5770678520202637, 0.5129265785217285, 0.5718780159950256, 0.5923581123352051], "val_accuracy": [0.7066666483879089, 0.7789999842643738, 0.7889999747276306, 0.8116666674613953, 0.8073333501815796, 0.8096666932106018, 0.8133333325386047, 0.8356666564941406, 0.8370000123977661, 0.8413333296775818, 0.8246666789054871, 0.8373333215713501, 0.8286666870117188, 0.8256666660308838, 0.8346666693687439]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1], [0, 2, 3, 0, 0, 0], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1], [2, 2, 3, 0, 3, 5, 5], [0, 2, 0, 3, 0], [16, 16, 41], [0, 0, 1], [0, 8], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [4, 0, 0, 3, 0, 0, 3, 1, 2, 3], [16, 99, 96, 99, 61, 1]], "fitness": -0.5394285917282104, "mapping_values": [1, 9, 6, 3, 2, 12, 7, 5, 3, 3, 2, 1, 1, 18, 9, 9, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.negative(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.square(grad)))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.subtract(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), alpha), beta))", "other_info": {"loss": [2.2839038372039795, 2.1656031608581543, 2.1262526512145996, 2.1216518878936768, 2.120634078979492, 2.122293472290039, 2.1216073036193848, 2.122403860092163], "accuracy": [0.1472724825143814, 0.3531897962093353, 0.36586976051330566, 0.3755118250846863, 0.37670058012008667, 0.37670058012008667, 0.3800026476383209, 0.37670058012008667], "val_loss": [2.208599328994751, 2.110053777694702, 2.1054880619049072, 2.105473518371582, 2.105473518371582, 2.105473518371582, 2.105473518371582, 2.105473518371582], "val_accuracy": [0.503333330154419, 0.5376666784286499, 0.5383333563804626, 0.5383333563804626, 0.5383333563804626, 0.5383333563804626, 0.5383333563804626, 0.5383333563804626]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 4, 3], [0, 0, 0, 2], [7, 39, 51], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0], [0, 4, 3, 0, 3, 5, 0, 8, 9], [2, 0, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1], [6, 3, 2, 6, 8, 1, 4, 1, 4, 2, 8], [3, 0, 0, 3, 0, 1, 3, 1, 0, 0], [87, 99, 96, 24, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 3, 12, 9, 3, 2, 2, 1, 1, 1, 14, 7, 7, 3], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.pow(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(beta), tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.negative(grad))), tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(alpha, sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 44], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 2], [0, 2, 0, 3], [16, 29], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 0, 4, 2, 8, 6, 0, 6, 5, 6, 4, 5, 4, 0, 9, 7, 4, 6, 5], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0, 7, 5, 1, 6, 4, 5], [80, 99, 96, 22, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 41, 25, 16, 6], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(grad, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.divide_no_nan(tf.math.negative(sigma), alpha)))), tf.math.divide_no_nan(tf.math.square(tf.math.divide_no_nan(beta, tf.math.pow(tf.math.square(tf.math.pow(tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.math.pow(tf.math.divide_no_nan(grad, alpha), grad))))), grad)), tf.math.square(grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 0, 2], [93, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [6, 2, 3, 0, 3, 5], [0, 2, 2, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 4, 3, 6, 8, 1, 4, 1, 4, 2, 8], [3, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 11, 6, 5, 1, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(beta, tf.math.square(grad))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [2.3035290241241455, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}]