[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222564220428467, 1.8654934167861938, 1.392636775970459, 1.0800100564956665, 0.9349965453147888, 0.83723384141922, 0.771166205406189, 0.7229189872741699, 0.6917352080345154, 0.6532851457595825, 0.6217012405395508, 0.6138775944709778, 0.5917757749557495, 0.5793368220329285, 0.5567960739135742, 0.5480981469154358, 0.5474538803100586, 0.5317270755767822, 0.5151227116584778, 0.5055264234542847, 0.5014929175376892, 0.4862228035926819, 0.4727080464363098, 0.47010233998298645, 0.46293196082115173, 0.4504174590110779, 0.447412371635437, 0.4438058137893677, 0.42948198318481445, 0.417126327753067, 0.4136964678764343, 0.40704113245010376, 0.4020131528377533, 0.39997783303260803, 0.39442774653434753, 0.3916949927806854, 0.38260385394096375, 0.3716582953929901, 0.3650337755680084, 0.3573426902294159, 0.36132100224494934, 0.3564379811286926, 0.3445151448249817, 0.33812835812568665, 0.3384065330028534, 0.3359524607658386, 0.33294373750686646, 0.3212839663028717, 0.3217304050922394, 0.3110441267490387, 0.31119072437286377], "accuracy": [0.2685246467590332, 0.4955752193927765, 0.5610883831977844, 0.6197332143783569, 0.6668868064880371, 0.6963412761688232, 0.7205125093460083, 0.7349095344543457, 0.7469290494918823, 0.7604015469551086, 0.7732135653495789, 0.7761194109916687, 0.7878747582435608, 0.7901201844215393, 0.8009510040283203, 0.802271842956543, 0.8050455451011658, 0.8103289008140564, 0.8158763647079468, 0.8197067975997925, 0.817461371421814, 0.8255184292793274, 0.8273676037788391, 0.8333113193511963, 0.832650899887085, 0.8392550349235535, 0.8367455005645752, 0.8408400416374207, 0.8474441766738892, 0.8475762605667114, 0.8519350290298462, 0.8545766472816467, 0.8574824929237366, 0.8544445633888245, 0.8589354157447815, 0.8561616539955139, 0.8632941246032715, 0.8640866279602051, 0.869502067565918, 0.8702945709228516, 0.8702945709228516, 0.8689737319946289, 0.8772949576377869, 0.8754457831382751, 0.8767666220664978, 0.8809932470321655, 0.8776912093162537, 0.8853520154953003, 0.8811253309249878, 0.8886540532112122, 0.8885219693183899], "val_loss": [2.042604923248291, 1.5189800262451172, 1.0515391826629639, 0.8450219035148621, 0.7558016777038574, 0.7093545794487, 0.6593213081359863, 0.6230939030647278, 0.5998342037200928, 0.5830129981040955, 0.5592260956764221, 0.5484577417373657, 0.5345214009284973, 0.5245682597160339, 0.508945107460022, 0.5038147568702698, 0.4949795603752136, 0.4867953658103943, 0.47808560729026794, 0.4682127833366394, 0.46202969551086426, 0.4617370665073395, 0.4514632225036621, 0.4495610296726227, 0.4391477108001709, 0.43453720211982727, 0.42648962140083313, 0.42570948600769043, 0.4242604672908783, 0.4146496057510376, 0.41664713621139526, 0.4113439619541168, 0.41593310236930847, 0.4013250470161438, 0.40437138080596924, 0.39875122904777527, 0.3905998170375824, 0.3918660581111908, 0.38664665818214417, 0.3956036865711212, 0.38548287749290466, 0.3855803310871124, 0.3777529299259186, 0.3802799582481384, 0.3779101073741913, 0.371540904045105, 0.3776323199272156, 0.36875513195991516, 0.37442195415496826, 0.3655129075050354, 0.3628164827823639], "val_accuracy": [0.5523333549499512, 0.6656666398048401, 0.6830000281333923, 0.7059999704360962, 0.7336666584014893, 0.7506666779518127, 0.7580000162124634, 0.7689999938011169, 0.7736666798591614, 0.7846666574478149, 0.7950000166893005, 0.7963333129882812, 0.7993333339691162, 0.8100000023841858, 0.8173333406448364, 0.8190000057220459, 0.8213333487510681, 0.8209999799728394, 0.8286666870117188, 0.828000009059906, 0.8323333263397217, 0.8336666822433472, 0.8333333134651184, 0.8349999785423279, 0.8386666774749756, 0.8393333554267883, 0.8429999947547913, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8446666598320007, 0.8463333249092102, 0.8503333330154419, 0.8529999852180481, 0.8493333458900452, 0.8550000190734863, 0.8546666502952576, 0.856333315372467, 0.8613333106040955, 0.856333315372467, 0.859000027179718, 0.8550000190734863, 0.8586666584014893, 0.8633333444595337, 0.8619999885559082, 0.8659999966621399, 0.859666645526886, 0.862666666507721, 0.8603333234786987, 0.8610000014305115, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8600000143051147, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223306894302368, 1.8702584505081177, 1.39059579372406, 1.0880104303359985, 0.9354177713394165, 0.8467509150505066, 0.774067759513855, 0.7271456718444824, 0.6940765380859375, 0.6598054766654968, 0.6352192759513855, 0.6143691539764404, 0.5904092192649841, 0.5705423355102539, 0.5602413415908813, 0.5393405556678772, 0.5355690717697144, 0.5188600420951843, 0.5067128539085388, 0.5020017623901367, 0.4916025400161743, 0.4806438386440277, 0.47176918387413025, 0.4683911204338074, 0.45305195450782776, 0.4485023617744446, 0.43686455488204956, 0.42536216974258423, 0.43028590083122253, 0.4171309769153595, 0.41401565074920654, 0.3997354805469513, 0.3995967209339142, 0.3915201723575592, 0.3919471502304077, 0.3784220218658447, 0.3844273090362549], "accuracy": [0.2833179235458374, 0.49385812878608704, 0.5778629183769226, 0.6193369626998901, 0.6659622192382812, 0.698190450668335, 0.7193237543106079, 0.7338528633117676, 0.7469290494918823, 0.7559106945991516, 0.7697794437408447, 0.7754589915275574, 0.7837802171707153, 0.7880068421363831, 0.7973847389221191, 0.806630551815033, 0.8063663840293884, 0.8136309385299683, 0.8219521641731262, 0.8198388814926147, 0.8265751004219055, 0.8273676037788391, 0.8305375576019287, 0.8348963260650635, 0.8392550349235535, 0.8416325449943542, 0.8428213000297546, 0.8481045961380005, 0.8498216867446899, 0.8565579056739807, 0.8558974862098694, 0.858671247959137, 0.8598600029945374, 0.8621054291725159, 0.8609166741371155, 0.8677849769592285, 0.8639545440673828], "val_loss": [2.037541389465332, 1.5131264925003052, 1.0411239862442017, 0.8370993733406067, 0.7579120993614197, 0.6946155428886414, 0.650177538394928, 0.6180994510650635, 0.5915930271148682, 0.5690511465072632, 0.5547797679901123, 0.5324724316596985, 0.5275724530220032, 0.5043073892593384, 0.49774694442749023, 0.48631033301353455, 0.47680240869522095, 0.471800297498703, 0.4612407684326172, 0.45790353417396545, 0.45033395290374756, 0.4392508864402771, 0.44215133786201477, 0.4304519593715668, 0.4377047121524811, 0.4293591380119324, 0.41922223567962646, 0.412650465965271, 0.4151662290096283, 0.4106299579143524, 0.4063619375228882, 0.40209025144577026, 0.4006684124469757, 0.4012705981731415, 0.39633479714393616, 0.3927300274372101, 0.38789623975753784], "val_accuracy": [0.5696666836738586, 0.6610000133514404, 0.6806666851043701, 0.6990000009536743, 0.7306666374206543, 0.746666669845581, 0.7609999775886536, 0.7689999938011169, 0.7816666960716248, 0.7913333177566528, 0.79666668176651, 0.8073333501815796, 0.8050000071525574, 0.8186666369438171, 0.8253333568572998, 0.8259999752044678, 0.8309999704360962, 0.8343333601951599, 0.8360000252723694, 0.8423333168029785, 0.8473333120346069, 0.8446666598320007, 0.8420000076293945, 0.8523333072662354, 0.8429999947547913, 0.8463333249092102, 0.856333315372467, 0.859333336353302, 0.8600000143051147, 0.8579999804496765, 0.859333336353302, 0.8640000224113464, 0.8603333234786987, 0.8610000014305115, 0.862666666507721, 0.8636666536331177, 0.8633333444595337]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 1], [0], [0], [0], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8551428318023682, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2920427322387695, 2.1864752769470215, 1.7565537691116333, 1.3193943500518799, 1.0612947940826416, 0.9200049042701721, 0.8313403725624084, 0.7998348474502563, 0.7448747754096985, 0.7438625693321228, 0.703133225440979, 0.6816193461418152, 0.6396694183349609, 0.627500057220459, 0.6112968921661377, 0.5967598557472229, 0.5915545225143433, 0.5713745951652527, 0.5534668564796448, 0.5407938361167908, 0.5365584492683411, 0.529915452003479, 0.5113823413848877, 0.5036709904670715, 0.49196600914001465, 0.4853420853614807, 0.4709850549697876, 0.4633308947086334, 0.4625767767429352, 0.4520309865474701, 0.45089298486709595, 0.44019395112991333, 0.43980273604393005, 0.42086830735206604, 0.41683244705200195, 0.41087606549263, 0.40309756994247437, 0.39644595980644226, 0.3896937668323517, 0.3809358775615692, 0.37146618962287903, 0.3611888289451599, 0.36189234256744385, 0.35706573724746704, 0.34042322635650635, 0.338625431060791, 0.3377324640750885, 0.34759485721588135, 0.3322167694568634, 0.3316150903701782, 0.32709604501724243, 0.3208332359790802, 0.3133661150932312, 0.3216853737831116, 0.3037385642528534, 0.29199790954589844, 0.30295753479003906, 0.2930183410644531], "accuracy": [0.13247919082641602, 0.33047154545783997, 0.44749704003334045, 0.5547483563423157, 0.6386210322380066, 0.6713775992393494, 0.6979262828826904, 0.7087571024894714, 0.7141724824905396, 0.7106062769889832, 0.7280412316322327, 0.739400327205658, 0.7568352818489075, 0.7607977986335754, 0.770439863204956, 0.7732135653495789, 0.7796856164932251, 0.780610203742981, 0.789459764957428, 0.8005547523498535, 0.7964601516723633, 0.7907806038856506, 0.8039889335632324, 0.8115176558494568, 0.8165367841720581, 0.8148196935653687, 0.8193105459213257, 0.8265751004219055, 0.8248580098152161, 0.8284242749214172, 0.8284242749214172, 0.8334434032440186, 0.8368775844573975, 0.8403117060661316, 0.8376700282096863, 0.8438779711723328, 0.844010055065155, 0.8449346423149109, 0.8500858545303345, 0.857218325138092, 0.8601241707801819, 0.8647470474243164, 0.8623695969581604, 0.8664641380310059, 0.8767666220664978, 0.8754457831382751, 0.8712190985679626, 0.8689737319946289, 0.8702945709228516, 0.8712190985679626, 0.8747853636741638, 0.8771628737449646, 0.8808611631393433, 0.8780874609947205, 0.8787478804588318, 0.8831065893173218, 0.8868049383163452, 0.8840311765670776], "val_loss": [2.2463932037353516, 2.012504816055298, 1.1181097030639648, 0.9111106991767883, 0.7811464667320251, 0.705727756023407, 0.6886035799980164, 0.6494821906089783, 0.649656355381012, 0.6172442436218262, 0.5903916954994202, 0.5795759558677673, 0.5582983493804932, 0.5349452495574951, 0.5372443199157715, 0.5177795886993408, 0.5080800652503967, 0.504311203956604, 0.5060854554176331, 0.4974221885204315, 0.4899407923221588, 0.48369938135147095, 0.4821438491344452, 0.473609060049057, 0.4675833284854889, 0.45292919874191284, 0.4473976194858551, 0.4441823661327362, 0.43686050176620483, 0.434699147939682, 0.43116113543510437, 0.42274197936058044, 0.42595189809799194, 0.4185710549354553, 0.42978137731552124, 0.4300541281700134, 0.4297846555709839, 0.4198095202445984, 0.4073551297187805, 0.4276680648326874, 0.41097497940063477, 0.407820463180542, 0.41866153478622437, 0.42755070328712463, 0.4218568503856659, 0.40662670135498047, 0.40526294708251953, 0.4158703684806824, 0.4270797669887543, 0.4220101833343506, 0.4228883981704712, 0.4229523539543152, 0.41003307700157166, 0.41457706689834595, 0.4313986301422119, 0.4223679304122925, 0.42191487550735474, 0.4549844264984131], "val_accuracy": [0.4246666729450226, 0.4933333396911621, 0.6486666798591614, 0.6909999847412109, 0.7146666646003723, 0.7326666712760925, 0.734333336353302, 0.7453333139419556, 0.7540000081062317, 0.7609999775886536, 0.7590000033378601, 0.7760000228881836, 0.7773333191871643, 0.7903333306312561, 0.7879999876022339, 0.7903333306312561, 0.7979999780654907, 0.8033333420753479, 0.8013333082199097, 0.8083333373069763, 0.8069999814033508, 0.8136666417121887, 0.8146666884422302, 0.8233333230018616, 0.8263333439826965, 0.8336666822433472, 0.8373333215713501, 0.8360000252723694, 0.8423333168029785, 0.8426666855812073, 0.8420000076293945, 0.8456666469573975, 0.8496666550636292, 0.846666693687439, 0.8460000157356262, 0.8536666631698608, 0.8463333249092102, 0.8453333377838135, 0.8513333201408386, 0.8523333072662354, 0.8560000061988831, 0.8533333539962769, 0.8553333282470703, 0.8556666374206543, 0.8600000143051147, 0.8603333234786987, 0.8600000143051147, 0.859333336353302, 0.8523333072662354, 0.8656666874885559, 0.8693333268165588, 0.8646666407585144, 0.8709999918937683, 0.8666666746139526, 0.8610000014305115, 0.8673333525657654, 0.8686666488647461, 0.8656666874885559]}, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8142856955528259, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5165510177612305, 0.8051950931549072, 0.670086145401001, 0.6096652746200562, 0.5865629315376282, 0.5527844429016113, 0.4999932646751404, 0.4889447093009949, 0.48013266921043396, 0.5017897486686707, 0.5162699222564697, 0.47578221559524536, 0.46558457612991333], "accuracy": [0.4876502454280853, 0.7098137736320496, 0.7561748623847961, 0.7783648371696472, 0.776251494884491, 0.8000264167785645, 0.8133667707443237, 0.8260467648506165, 0.8222163319587708, 0.8099326491355896, 0.8191784620285034, 0.8301413059234619, 0.8359529972076416], "val_loss": [0.8468533754348755, 0.6073837876319885, 0.5405756831169128, 0.5312731266021729, 0.49328744411468506, 0.5016385316848755, 0.47985637187957764, 0.4972888231277466, 0.46328258514404297, 0.4979071319103241, 0.5125414729118347, 0.5711210370063782, 0.5066999793052673], "val_accuracy": [0.7149999737739563, 0.7773333191871643, 0.8076666593551636, 0.8016666769981384, 0.824999988079071, 0.8276666402816772, 0.8379999995231628, 0.8443333506584167, 0.8356666564941406, 0.8309999704360962, 0.8266666531562805, 0.8433333039283752, 0.8399999737739563]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 3, 5], [0, 3, 2, 0, 2], [83, 13, 27], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [1, 2, 4, 3, 9, 4], [0, 2, 4, 0, 0], [0, 94, 32, 92], [0, 1], [0], [0], [0], [0, 1], [0], [6], [0]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.subtract(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), grad), grad), tf.math.multiply(tf.math.square(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(grad, tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09100515395402908, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}, "mapping_values": [1, 11, 6, 5, 2, 11, 6, 5, 4, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 5, 5], [0, 1, 0, 1], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 3, 6, 4], [0, 0, 0, 3, 1, 3, 4, 1, 2, 0, 5, 0, 4], [16, 99, 96, 99, 69, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 8, 5, 3, 2, 1, 0, 1, 1, 27, 14, 13, 5], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, alpha), sigma)))), grad)), alpha), tf.math.add(tf.math.sqrt(beta), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.pow(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), grad)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 41], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [9, 3, 8, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [0], [1, 1], [0], [1], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303394079208374, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0], [0, 2, 3, 0, 3, 8, 6, 9], [0, 1, 0, 2], [66, 39, 99], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 3, 0, 3], [16, 29], [0, 1], [0], [4], [42], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [4, 3, 3, 6, 8, 1, 4, 1, 4, 4, 8, 3], [0, 0, 0, 3, 0, 0, 3, 1, 2, 2, 7], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 8, 4, 3, 6, 3, 3, 2, 2, 1, 1, 0, 23, 12, 11, 5], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.divide_no_nan(grad, tf.constant(1.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.math.pow(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), sigma))), tf.math.sqrt(tf.math.multiply(alpha, beta)))))), beta), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}]