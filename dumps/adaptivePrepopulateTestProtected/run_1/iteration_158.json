[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222564220428467, 1.8654934167861938, 1.392636775970459, 1.0800100564956665, 0.9349965453147888, 0.83723384141922, 0.771166205406189, 0.7229189872741699, 0.6917352080345154, 0.6532851457595825, 0.6217012405395508, 0.6138775944709778, 0.5917757749557495, 0.5793368220329285, 0.5567960739135742, 0.5480981469154358, 0.5474538803100586, 0.5317270755767822, 0.5151227116584778, 0.5055264234542847, 0.5014929175376892, 0.4862228035926819, 0.4727080464363098, 0.47010233998298645, 0.46293196082115173, 0.4504174590110779, 0.447412371635437, 0.4438058137893677, 0.42948198318481445, 0.417126327753067, 0.4136964678764343, 0.40704113245010376, 0.4020131528377533, 0.39997783303260803, 0.39442774653434753, 0.3916949927806854, 0.38260385394096375, 0.3716582953929901, 0.3650337755680084, 0.3573426902294159, 0.36132100224494934, 0.3564379811286926, 0.3445151448249817, 0.33812835812568665, 0.3384065330028534, 0.3359524607658386, 0.33294373750686646, 0.3212839663028717, 0.3217304050922394, 0.3110441267490387, 0.31119072437286377], "accuracy": [0.2685246467590332, 0.4955752193927765, 0.5610883831977844, 0.6197332143783569, 0.6668868064880371, 0.6963412761688232, 0.7205125093460083, 0.7349095344543457, 0.7469290494918823, 0.7604015469551086, 0.7732135653495789, 0.7761194109916687, 0.7878747582435608, 0.7901201844215393, 0.8009510040283203, 0.802271842956543, 0.8050455451011658, 0.8103289008140564, 0.8158763647079468, 0.8197067975997925, 0.817461371421814, 0.8255184292793274, 0.8273676037788391, 0.8333113193511963, 0.832650899887085, 0.8392550349235535, 0.8367455005645752, 0.8408400416374207, 0.8474441766738892, 0.8475762605667114, 0.8519350290298462, 0.8545766472816467, 0.8574824929237366, 0.8544445633888245, 0.8589354157447815, 0.8561616539955139, 0.8632941246032715, 0.8640866279602051, 0.869502067565918, 0.8702945709228516, 0.8702945709228516, 0.8689737319946289, 0.8772949576377869, 0.8754457831382751, 0.8767666220664978, 0.8809932470321655, 0.8776912093162537, 0.8853520154953003, 0.8811253309249878, 0.8886540532112122, 0.8885219693183899], "val_loss": [2.042604923248291, 1.5189800262451172, 1.0515391826629639, 0.8450219035148621, 0.7558016777038574, 0.7093545794487, 0.6593213081359863, 0.6230939030647278, 0.5998342037200928, 0.5830129981040955, 0.5592260956764221, 0.5484577417373657, 0.5345214009284973, 0.5245682597160339, 0.508945107460022, 0.5038147568702698, 0.4949795603752136, 0.4867953658103943, 0.47808560729026794, 0.4682127833366394, 0.46202969551086426, 0.4617370665073395, 0.4514632225036621, 0.4495610296726227, 0.4391477108001709, 0.43453720211982727, 0.42648962140083313, 0.42570948600769043, 0.4242604672908783, 0.4146496057510376, 0.41664713621139526, 0.4113439619541168, 0.41593310236930847, 0.4013250470161438, 0.40437138080596924, 0.39875122904777527, 0.3905998170375824, 0.3918660581111908, 0.38664665818214417, 0.3956036865711212, 0.38548287749290466, 0.3855803310871124, 0.3777529299259186, 0.3802799582481384, 0.3779101073741913, 0.371540904045105, 0.3776323199272156, 0.36875513195991516, 0.37442195415496826, 0.3655129075050354, 0.3628164827823639], "val_accuracy": [0.5523333549499512, 0.6656666398048401, 0.6830000281333923, 0.7059999704360962, 0.7336666584014893, 0.7506666779518127, 0.7580000162124634, 0.7689999938011169, 0.7736666798591614, 0.7846666574478149, 0.7950000166893005, 0.7963333129882812, 0.7993333339691162, 0.8100000023841858, 0.8173333406448364, 0.8190000057220459, 0.8213333487510681, 0.8209999799728394, 0.8286666870117188, 0.828000009059906, 0.8323333263397217, 0.8336666822433472, 0.8333333134651184, 0.8349999785423279, 0.8386666774749756, 0.8393333554267883, 0.8429999947547913, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8446666598320007, 0.8463333249092102, 0.8503333330154419, 0.8529999852180481, 0.8493333458900452, 0.8550000190734863, 0.8546666502952576, 0.856333315372467, 0.8613333106040955, 0.856333315372467, 0.859000027179718, 0.8550000190734863, 0.8586666584014893, 0.8633333444595337, 0.8619999885559082, 0.8659999966621399, 0.859666645526886, 0.862666666507721, 0.8603333234786987, 0.8610000014305115, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8645714521408081, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223815441131592, 1.8699674606323242, 1.3847765922546387, 1.088233232498169, 0.9267066717147827, 0.8264827132225037, 0.7673808336257935, 0.7298254370689392, 0.6907024383544922, 0.6672354936599731, 0.6381385922431946, 0.619394838809967, 0.5879086256027222, 0.5725790858268738, 0.5560809969902039, 0.5424614548683167, 0.5327898859977722, 0.5261552333831787, 0.506419837474823, 0.4975978434085846, 0.4781092405319214, 0.47030457854270935, 0.46435028314590454, 0.4612545371055603, 0.44518086314201355, 0.44617578387260437, 0.43621113896369934, 0.42814385890960693, 0.42124927043914795, 0.4071098566055298, 0.4071768522262573, 0.40249040722846985, 0.386428564786911, 0.3824039399623871, 0.37945446372032166, 0.37208500504493713, 0.36108750104904175, 0.362888365983963, 0.3650597035884857, 0.35479870438575745, 0.35307544469833374, 0.34456419944763184, 0.33694618940353394], "accuracy": [0.2782987654209137, 0.49187690019607544, 0.5765420794487, 0.6222427487373352, 0.6700568199157715, 0.7046625018119812, 0.7257958054542542, 0.7378153204917908, 0.7494386434555054, 0.7588165402412415, 0.7672698497772217, 0.7750627398490906, 0.7935543656349182, 0.7898560166358948, 0.7959318161010742, 0.8084797263145447, 0.8064984679222107, 0.8094043135643005, 0.8152159452438354, 0.8191784620285034, 0.8277638554573059, 0.8265751004219055, 0.8319904804229736, 0.8358209133148193, 0.8413683772087097, 0.8432175517082214, 0.8457271456718445, 0.8512746095657349, 0.8535200357437134, 0.8570862412452698, 0.8521991968154907, 0.852331280708313, 0.8613129258155823, 0.8668603897094727, 0.8665962219238281, 0.8667283058166504, 0.8712190985679626, 0.8697662353515625, 0.8663320541381836, 0.8753136992454529, 0.8713511824607849, 0.8741249442100525, 0.8825782537460327], "val_loss": [2.0415656566619873, 1.5132900476455688, 1.0400320291519165, 0.8359794020652771, 0.7575128674507141, 0.7050760388374329, 0.6630420088768005, 0.6352242231369019, 0.6066160202026367, 0.5864739418029785, 0.5656399130821228, 0.550706684589386, 0.5398051738739014, 0.5213261842727661, 0.511110246181488, 0.50090491771698, 0.49063101410865784, 0.48241129517555237, 0.47420740127563477, 0.4645715057849884, 0.4583223760128021, 0.4584086537361145, 0.4465991258621216, 0.44225364923477173, 0.4363434314727783, 0.4328334927558899, 0.4243907034397125, 0.4208177924156189, 0.41774681210517883, 0.4108400344848633, 0.4120347797870636, 0.408298134803772, 0.40374091267585754, 0.4029614329338074, 0.3968738317489624, 0.3977271318435669, 0.40324243903160095, 0.39918097853660583, 0.39068612456321716, 0.3880476951599121, 0.3956363797187805, 0.38437187671661377, 0.38237208127975464], "val_accuracy": [0.512333333492279, 0.6499999761581421, 0.67166668176651, 0.6980000138282776, 0.7253333330154419, 0.7383333444595337, 0.7459999918937683, 0.765333354473114, 0.7689999938011169, 0.7866666913032532, 0.7910000085830688, 0.7929999828338623, 0.8003333210945129, 0.8076666593551636, 0.8133333325386047, 0.8153333067893982, 0.8216666579246521, 0.8233333230018616, 0.828000009059906, 0.831333339214325, 0.8343333601951599, 0.8323333263397217, 0.8373333215713501, 0.8389999866485596, 0.8399999737739563, 0.8456666469573975, 0.8446666598320007, 0.8479999899864197, 0.8476666808128357, 0.8493333458900452, 0.8516666889190674, 0.8543333411216736, 0.8579999804496765, 0.8543333411216736, 0.8519999980926514, 0.8566666841506958, 0.8513333201408386, 0.8616666793823242, 0.8610000014305115, 0.8613333106040955, 0.8526666760444641, 0.8579999804496765, 0.8606666922569275]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 1], [0, 8], [0], [0], [1], [0], [2], [0]], "fitness": -0.8302857279777527, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5756548643112183, 0.8656131029129028, 0.6938433647155762, 0.6288890838623047, 0.592697262763977, 0.5826271772384644, 0.5301860570907593, 0.5163691639900208, 0.5253350734710693, 0.49120479822158813, 0.4972863793373108, 0.5377055406570435, 0.5263386964797974, 0.5311550498008728, 0.5688806176185608], "accuracy": [0.46625280380249023, 0.7036058902740479, 0.7425703406333923, 0.7701756954193115, 0.7755910754203796, 0.7952714562416077, 0.8038568496704102, 0.8042530417442322, 0.8131026029586792, 0.8144234418869019, 0.8197067975997925, 0.816008448600769, 0.8075551390647888, 0.8208954930305481, 0.8123101592063904], "val_loss": [0.9623954892158508, 0.6363982558250427, 0.5947360992431641, 0.5346032381057739, 0.5142053961753845, 0.535386323928833, 0.49040889739990234, 0.49658334255218506, 0.4810333251953125, 0.5287047028541565, 0.5334523320198059, 0.5483980178833008, 0.5976845622062683, 0.5636866688728333, 0.5424209237098694], "val_accuracy": [0.6946666836738586, 0.7590000033378601, 0.7820000052452087, 0.8029999732971191, 0.815666675567627, 0.8140000104904175, 0.831333339214325, 0.8303333520889282, 0.8196666836738586, 0.8339999914169312, 0.8223333358764648, 0.8236666917800903, 0.8193333148956299, 0.8336666822433472, 0.8256666660308838]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 3, 2, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 1], [0], [0], [0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 5, 7, 7, 6, 5, 9], [0, 5, 2], [0, 83], [0, 1], [0], [1], [0]], "fitness": -0.806857168674469, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.add(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2945199012756348, 2.19016170501709, 1.7673224210739136, 1.3443862199783325, 1.0788438320159912, 0.9113649129867554, 0.83676677942276, 0.8212072849273682, 0.759167492389679, 0.736911416053772, 0.7156106233596802, 0.6989920139312744, 0.661535382270813, 0.6425296068191528, 0.6147685647010803, 0.5992252230644226, 0.5919849276542664, 0.5745930671691895, 0.563088059425354, 0.5545118451118469, 0.5324792861938477, 0.5298566818237305, 0.51888507604599, 0.5092027187347412, 0.49723049998283386, 0.4872022569179535, 0.477386474609375, 0.46702542901039124, 0.4537543058395386, 0.4504031836986542, 0.4328892230987549, 0.42792460322380066, 0.42541560530662537, 0.42268893122673035, 0.4031931757926941, 0.3996688425540924, 0.38792887330055237, 0.38516122102737427, 0.37302887439727783, 0.3694053590297699, 0.36610373854637146, 0.352046936750412, 0.3494974374771118, 0.3534353971481323, 0.35519200563430786, 0.33496180176734924, 0.3344719111919403, 0.3212180733680725, 0.32764023542404175, 0.3153432011604309, 0.32467591762542725, 0.3118554651737213], "accuracy": [0.1212521493434906, 0.33205652236938477, 0.4447232782840729, 0.5425967574119568, 0.6308281421661377, 0.6729626059532166, 0.7000396251678467, 0.707040011882782, 0.7057191729545593, 0.7230220437049866, 0.7351737022399902, 0.7349095344543457, 0.7466648817062378, 0.7619865536689758, 0.765949010848999, 0.772288978099823, 0.7798177003860474, 0.7746664881706238, 0.7810064554214478, 0.7905164361000061, 0.7984414100646973, 0.7906485199928284, 0.7989697456359863, 0.8095363974571228, 0.8132346868515015, 0.8115176558494568, 0.8201030492782593, 0.8181217908859253, 0.8253863453865051, 0.8301413059234619, 0.833179235458374, 0.8358209133148193, 0.8338396549224854, 0.8378021121025085, 0.8474441766738892, 0.8457271456718445, 0.8518029451370239, 0.852331280708313, 0.8589354157447815, 0.8590674996376038, 0.8601241707801819, 0.863029956817627, 0.8667283058166504, 0.8659358024597168, 0.8622375130653381, 0.8704266548156738, 0.8701624870300293, 0.8765024542808533, 0.8758420348167419, 0.8784837126731873, 0.872407853603363, 0.876370370388031], "val_loss": [2.2461018562316895, 2.020603895187378, 1.134861707687378, 0.8611068725585938, 0.7501236796379089, 0.7061183452606201, 0.6457428932189941, 0.6251522898674011, 0.6333944201469421, 0.6008237600326538, 0.5739206075668335, 0.548105001449585, 0.5439184308052063, 0.5322616696357727, 0.5197814702987671, 0.518015444278717, 0.5029347538948059, 0.4974534213542938, 0.494761198759079, 0.4926625192165375, 0.4783051609992981, 0.470195472240448, 0.46900269389152527, 0.4636170566082001, 0.45311304926872253, 0.45149075984954834, 0.47512662410736084, 0.44245895743370056, 0.43107107281684875, 0.45389458537101746, 0.43537938594818115, 0.43293559551239014, 0.4160163700580597, 0.4238690733909607, 0.4260282516479492, 0.4096333384513855, 0.4102853238582611, 0.42969751358032227, 0.4111124277114868, 0.40753284096717834, 0.41882699728012085, 0.4233224391937256, 0.4188278019428253, 0.41728121042251587, 0.4136500656604767, 0.4065391421318054, 0.40235865116119385, 0.4162268042564392, 0.3969497084617615, 0.39278095960617065, 0.3992139399051666, 0.40643230080604553], "val_accuracy": [0.4076666533946991, 0.4623333215713501, 0.6576666831970215, 0.6976666450500488, 0.7263333201408386, 0.7383333444595337, 0.7513333559036255, 0.7583333253860474, 0.7606666684150696, 0.7726666927337646, 0.7766666412353516, 0.7926666736602783, 0.7886666655540466, 0.7903333306312561, 0.8053333163261414, 0.8019999861717224, 0.8026666641235352, 0.800000011920929, 0.8086666464805603, 0.8103333115577698, 0.8159999847412109, 0.8253333568572998, 0.8193333148956299, 0.8199999928474426, 0.8339999914169312, 0.8389999866485596, 0.8286666870117188, 0.8396666646003723, 0.8416666388511658, 0.8433333039283752, 0.8453333377838135, 0.8410000205039978, 0.8500000238418579, 0.8493333458900452, 0.8479999899864197, 0.8539999723434448, 0.8526666760444641, 0.8513333201408386, 0.8543333411216736, 0.8616666793823242, 0.8610000014305115, 0.8556666374206543, 0.862666666507721, 0.8603333234786987, 0.8636666536331177, 0.8646666407585144, 0.871666669845581, 0.8686666488647461, 0.8673333525657654, 0.8650000095367432, 0.8666666746139526, 0.8663333058357239]}, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 10, 7, 3, 2, 2, 1, 1, 0], "tree_depth": 16}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [93, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 1, 3], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.11714285612106323, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), grad)), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [4503775721029632.0, 5170726160039936.0, 5269419676663808.0, 5171094990356480.0, 5035766476439552.0, 5088640208207872.0], "accuracy": [0.11187426000833511, 0.1212521493434906, 0.11610091477632523, 0.11345925182104111, 0.12138422578573227, 0.1254788041114807], "val_loss": [4360794380697600.0, 4360794380697600.0, 4360794380697600.0, 4360794380697600.0, 4360794380697600.0, 4360794380697600.0], "val_accuracy": [0.11933333426713943, 0.11933333426713943, 0.11933333426713943, 0.11933333426713943, 0.11933333426713943, 0.11933333426713943]}, "mapping_values": [1, 9, 5, 4, 2, 2, 1, 1, 1, 1, 0, 1, 1, 21, 11, 10, 5], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 9], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [91, 40, 96, 99, 1, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 1, 0, 1, 1, 2, 1, 1, 1, 21, 12, 9, 5], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(grad, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.sqrt(sigma))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), alpha), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 0], [0, 1, 0, 2], [39, 27], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5, 0, 6, 3, 5, 2, 7, 2, 8, 4, 2, 5, 0], [0, 2, 0, 3, 0, 0, 2, 5, 0, 0, 4, 1], [16, 16, 81, 23, 47, 49], [1, 1], [2], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 5, 4, 2, 8, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 5, 3, 2, 30, 18, 12, 6, 1, 0, 1, 1, 20, 12, 8, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.negative(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta)), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(grad, tf.math.multiply(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))))), tf.math.add(tf.math.add(grad, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(tf.math.add(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.math.negative(alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.square(tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), sigma)))), tf.math.sqrt(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 1, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 8], [0, 2, 0, 3], [16, 37], [0, 1, 0, 0, 1, 1, 1], [3, 4, 6], [0, 6, 5, 1], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [6, 3, 3, 6, 8, 1, 0, 1, 4, 2, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [16, 9, 87, 99, 7, 1]], "fitness": -0.09028571099042892, "mapping_values": [1, 9, 5, 4, 1, 6, 3, 3, 2, 7, 3, 4, 1, 17, 9, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.divide_no_nan(grad, grad), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), sigma)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), alpha)", "other_info": {"loss": [2.309724807739258, 2.309079885482788, 2.3094773292541504, 2.3086862564086914, 2.310391426086426, 2.3091938495635986], "accuracy": [0.08928807079792023, 0.09153348207473755, 0.09549596905708313, 0.08928807079792023, 0.09377889335155487, 0.09245806187391281], "val_loss": [2.309256076812744, 2.309256076812744, 2.309256076812744, 2.309256076812744, 2.309256076812744, 2.309256076812744], "val_accuracy": [0.08766666799783707, 0.08766666799783707, 0.08766666799783707, 0.08766666799783707, 0.08766666799783707, 0.08766666799783707]}}]