[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.87628573179245, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223330497741699, 1.8670156002044678, 1.3935511112213135, 1.1012579202651978, 0.9477801322937012, 0.8379126191139221, 0.7764281630516052, 0.7235901951789856, 0.6839449405670166, 0.6511124968528748, 0.6340097188949585, 0.6069210171699524, 0.5817078948020935, 0.5635776519775391, 0.5524153113365173, 0.5367791652679443, 0.5212588906288147, 0.5178380608558655, 0.5019086003303528, 0.4879888892173767, 0.4858485460281372, 0.4747111201286316, 0.45951735973358154, 0.4532293975353241, 0.4492609202861786, 0.4330301284790039, 0.4310648441314697, 0.42051371932029724, 0.41327017545700073, 0.4060419201850891, 0.3997148871421814, 0.39729252457618713, 0.3869434893131256, 0.3869549036026001, 0.38186177611351013, 0.3692651391029358, 0.36346086859703064, 0.3634459972381592, 0.3600703179836273, 0.3489670753479004, 0.3429599404335022, 0.34309908747673035, 0.3401198089122772, 0.3303268253803253, 0.3301240801811218, 0.3276282846927643, 0.3180643618106842, 0.3136589229106903, 0.3090694546699524, 0.3071834146976471, 0.3011736273765564, 0.30332496762275696, 0.29351481795310974, 0.2937680780887604], "accuracy": [0.26680755615234375, 0.49451854825019836, 0.5679566860198975, 0.6209219098091125, 0.6646413803100586, 0.7078325152397156, 0.7234182953834534, 0.7387399077415466, 0.7541936039924622, 0.7672698497772217, 0.7677981853485107, 0.7820631265640259, 0.7897239327430725, 0.7977809906005859, 0.798309326171875, 0.8082155585289001, 0.8138951063156128, 0.8094043135643005, 0.822348415851593, 0.8269713521003723, 0.8208954930305481, 0.8310658931732178, 0.8350284099578857, 0.8367455005645752, 0.8368775844573975, 0.8444063067436218, 0.843481719493866, 0.850350022315979, 0.8502179384231567, 0.8570862412452698, 0.857218325138092, 0.8574824929237366, 0.8610487580299377, 0.8610487580299377, 0.8607845902442932, 0.8658037185668945, 0.8701624870300293, 0.8689737319946289, 0.8708229064941406, 0.8792761564254761, 0.8798044919967651, 0.8765024542808533, 0.8765024542808533, 0.8824461698532104, 0.880729079246521, 0.8844274282455444, 0.8838990926742554, 0.8887861371040344, 0.8878615498542786, 0.8903711438179016, 0.8924844861030579, 0.8912957310676575, 0.8976356983184814, 0.8960506916046143], "val_loss": [2.040694236755371, 1.5166728496551514, 1.045767068862915, 0.8421168327331543, 0.7569165229797363, 0.7011509537696838, 0.6573318839073181, 0.6179470419883728, 0.5908101201057434, 0.5737177133560181, 0.5541383624076843, 0.5365487933158875, 0.518412172794342, 0.5104728937149048, 0.49868762493133545, 0.485697478055954, 0.48461878299713135, 0.46694132685661316, 0.459992378950119, 0.44818419218063354, 0.45110249519348145, 0.4507465958595276, 0.4339507520198822, 0.4287099242210388, 0.42590731382369995, 0.4119842052459717, 0.4104468524456024, 0.4069807529449463, 0.40372517704963684, 0.3985708951950073, 0.3967111110687256, 0.39305025339126587, 0.39346253871917725, 0.3906964063644409, 0.3815464675426483, 0.3792845904827118, 0.37928369641304016, 0.3762374818325043, 0.37582898139953613, 0.37387406826019287, 0.3717586398124695, 0.36671704053878784, 0.363382488489151, 0.36401286721229553, 0.3619881868362427, 0.35666540265083313, 0.3588123917579651, 0.3541429042816162, 0.35232576727867126, 0.35342442989349365, 0.3524846136569977, 0.34847813844680786, 0.34814298152923584, 0.35015836358070374], "val_accuracy": [0.5323333144187927, 0.6446666717529297, 0.6756666898727417, 0.7043333053588867, 0.7239999771118164, 0.7493333220481873, 0.753000020980835, 0.7706666588783264, 0.7820000052452087, 0.7873333096504211, 0.7956666946411133, 0.800000011920929, 0.8136666417121887, 0.812666654586792, 0.8199999928474426, 0.824999988079071, 0.8246666789054871, 0.8326666951179504, 0.8303333520889282, 0.8376666903495789, 0.8333333134651184, 0.8343333601951599, 0.8446666598320007, 0.843666672706604, 0.846666693687439, 0.8513333201408386, 0.8546666502952576, 0.8500000238418579, 0.8523333072662354, 0.8546666502952576, 0.8529999852180481, 0.859333336353302, 0.8546666502952576, 0.8569999933242798, 0.8606666922569275, 0.8633333444595337, 0.8643333315849304, 0.8629999756813049, 0.8576666712760925, 0.8703333139419556, 0.8640000224113464, 0.8643333315849304, 0.8676666617393494, 0.8663333058357239, 0.8713333606719971, 0.871999979019165, 0.8693333268165588, 0.8693333268165588, 0.878000020980835, 0.8756666779518127, 0.8706666827201843, 0.8756666779518127, 0.8769999742507935, 0.8756666779518127]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8665714263916016, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223999261856079, 1.8693526983261108, 1.389826774597168, 1.0868470668792725, 0.9290354251861572, 0.8291439414024353, 0.7590478658676147, 0.7181060314178467, 0.6810195446014404, 0.6393488645553589, 0.6254346966743469, 0.6012364029884338, 0.5822330117225647, 0.5688381791114807, 0.5423702001571655, 0.5257261991500854, 0.5099573731422424, 0.5035810470581055, 0.4884685277938843, 0.4900262951850891, 0.4731306731700897, 0.462342232465744, 0.4616812467575073, 0.4499706029891968, 0.44776004552841187, 0.43564870953559875, 0.42974114418029785, 0.42477595806121826, 0.4218730330467224, 0.4086291790008545, 0.39735329151153564, 0.3922617435455322, 0.3896729648113251, 0.38873133063316345, 0.37380242347717285, 0.37582576274871826, 0.36267539858818054, 0.36064791679382324, 0.3548869490623474, 0.3518676459789276, 0.3532457649707794, 0.3513251841068268, 0.337397962808609, 0.32959720492362976, 0.32887518405914307, 0.32550153136253357, 0.3197338581085205], "accuracy": [0.266939640045166, 0.4810461103916168, 0.5712587237358093, 0.6184123754501343, 0.6667547225952148, 0.7008321285247803, 0.7268524765968323, 0.7358341217041016, 0.7473253011703491, 0.7729493975639343, 0.7635715007781982, 0.7786290049552917, 0.7866860628128052, 0.7889314293861389, 0.8016114234924316, 0.8119139075279236, 0.8129705190658569, 0.8182538747787476, 0.8187822103500366, 0.8272355198860168, 0.8276317715644836, 0.8352925777435303, 0.8334434032440186, 0.8327829837799072, 0.8383304476737976, 0.8438779711723328, 0.8437458872795105, 0.8455950617790222, 0.8461233377456665, 0.8568220734596252, 0.8555012345314026, 0.8560295701026917, 0.8622375130653381, 0.8607845902442932, 0.8658037185668945, 0.8628978729248047, 0.8704266548156738, 0.8698983192443848, 0.8702945709228516, 0.8733324408531189, 0.8758420348167419, 0.8722757697105408, 0.8755778670310974, 0.8812574148178101, 0.8794082403182983, 0.8831065893173218, 0.8860124349594116], "val_loss": [2.037794351577759, 1.517405390739441, 1.0482044219970703, 0.8431467413902283, 0.754902184009552, 0.7016454935073853, 0.6583020687103271, 0.624032199382782, 0.5989308953285217, 0.5824813842773438, 0.555984377861023, 0.5459331274032593, 0.5295982956886292, 0.5199353098869324, 0.5062349438667297, 0.49540629982948303, 0.4864345192909241, 0.4783520996570587, 0.47206559777259827, 0.464243620634079, 0.4596603512763977, 0.4544806182384491, 0.4474652409553528, 0.4368710219860077, 0.4327804744243622, 0.43528348207473755, 0.4304722547531128, 0.4256800413131714, 0.4226861894130707, 0.4181804656982422, 0.41091403365135193, 0.41004183888435364, 0.4063570499420166, 0.4002164602279663, 0.40276920795440674, 0.3944654166698456, 0.39226841926574707, 0.3909633755683899, 0.3894589841365814, 0.3886832594871521, 0.3855046331882477, 0.3813745975494385, 0.37770235538482666, 0.3773849606513977, 0.3771672248840332, 0.37744420766830444, 0.38010409474372864], "val_accuracy": [0.5703333616256714, 0.6543333530426025, 0.6803333163261414, 0.7066666483879089, 0.7289999723434448, 0.746999979019165, 0.7636666893959045, 0.7696666717529297, 0.7789999842643738, 0.7846666574478149, 0.7943333387374878, 0.7960000038146973, 0.8109999895095825, 0.8133333325386047, 0.8163333535194397, 0.8289999961853027, 0.8253333568572998, 0.8326666951179504, 0.8309999704360962, 0.8316666483879089, 0.8343333601951599, 0.8303333520889282, 0.8363333344459534, 0.8413333296775818, 0.8450000286102295, 0.8410000205039978, 0.8410000205039978, 0.8456666469573975, 0.847000002861023, 0.8473333120346069, 0.8536666631698608, 0.8500000238418579, 0.8506666421890259, 0.859333336353302, 0.8569999933242798, 0.8610000014305115, 0.8613333106040955, 0.8636666536331177, 0.8636666536331177, 0.8610000014305115, 0.8610000014305115, 0.8676666617393494, 0.8636666536331177, 0.862666666507721, 0.8656666874885559, 0.8656666874885559, 0.862333357334137]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 4, 3, 4, 4, 3, 9, 7, 6, 4, 7, 3, 0, 0, 3, 8, 1, 7, 8], [0, 0, 1, 3, 2, 0, 7, 2, 5, 3, 7, 2, 3], [0, 44, 5, 1], [1], [0], [2], [0]], "fitness": -0.8322857022285461, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))), tf.math.add(sigma, tf.math.divide_no_nan(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.pow(grad, tf.math.add(tf.math.multiply(tf.math.negative(beta), tf.math.negative(grad)), tf.math.multiply(tf.math.sqrt(tf.math.subtract(sigma, grad)), tf.math.add(tf.math.sqrt(beta), sigma)))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.6550464630126953, 0.9366913437843323, 0.7350176572799683, 0.6348150372505188, 0.5709956288337708, 0.5472720265388489, 0.5287930369377136, 0.5319233536720276, 0.48937588930130005, 0.5048236846923828, 0.5079748630523682, 0.4475400149822235, 0.4495808184146881, 0.42638587951660156, 0.46565207839012146, 0.4632927179336548, 0.47422122955322266], "accuracy": [0.4567428231239319, 0.6847180128097534, 0.7327961921691895, 0.7644960880279541, 0.7923656105995178, 0.8012151718139648, 0.7991018295288086, 0.8107251524925232, 0.8144234418869019, 0.817989706993103, 0.8168009519577026, 0.8354246616363525, 0.8364813327789307, 0.8387266993522644, 0.8350284099578857, 0.8392550349235535, 0.8267071843147278], "val_loss": [0.9508011341094971, 0.6436653733253479, 0.5816042423248291, 0.5328977108001709, 0.5167583227157593, 0.4958689510822296, 0.5153325200080872, 0.5037730932235718, 0.4892178475856781, 0.48573213815689087, 0.53493332862854, 0.4912792444229126, 0.5109900832176208, 0.47856494784355164, 0.5355729460716248, 0.5271251797676086, 0.5136394500732422], "val_accuracy": [0.6626666784286499, 0.7636666893959045, 0.7863333225250244, 0.800000011920929, 0.8140000104904175, 0.8266666531562805, 0.8240000009536743, 0.8240000009536743, 0.8256666660308838, 0.8309999704360962, 0.8423333168029785, 0.8473333120346069, 0.8443333506584167, 0.8379999995231628, 0.8410000205039978, 0.8420000076293945, 0.8393333554267883]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 32, 19, 13, 4, 1, 0, 1, 0], "tree_depth": 17}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 1], [0, 4], [0, 3], [0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 3, 0, 5, 4, 0, 0, 8, 5], [0, 3, 3], [0], [0, 1], [0], [1], [0]], "fitness": -0.8040000200271606, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(tf.math.square(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.negative(sigma))))), tf.math.sqrt(tf.math.square(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.293311357498169, 2.188861608505249, 1.7555612325668335, 1.383782982826233, 1.0679155588150024, 0.9179596304893494, 0.84433913230896, 0.822098970413208, 0.76035076379776, 0.7308272123336792, 0.6808065176010132, 0.673786461353302, 0.6518736481666565, 0.6145830154418945, 0.60527503490448, 0.5837945342063904, 0.5812947750091553, 0.5677094459533691, 0.5616011023521423, 0.5369382500648499, 0.528611958026886, 0.5234066843986511, 0.524932861328125, 0.5119906067848206, 0.49677199125289917, 0.47860556840896606, 0.47729286551475525, 0.46249502897262573, 0.4625869393348694, 0.4389650225639343, 0.445598304271698, 0.4364083707332611, 0.4382951557636261, 0.41866931319236755, 0.4134902060031891, 0.40298667550086975, 0.38666579127311707, 0.3932062089443207, 0.38510197401046753, 0.3583550453186035, 0.37363171577453613, 0.3749193847179413, 0.3710629343986511, 0.3584927022457123, 0.35849452018737793, 0.34553974866867065, 0.34761402010917664, 0.339129775762558], "accuracy": [0.1270637959241867, 0.3295469582080841, 0.4451195299625397, 0.5424646735191345, 0.6402060389518738, 0.6597543358802795, 0.6942279934883118, 0.6889446377754211, 0.7094175219535828, 0.7182670831680298, 0.7386078238487244, 0.7392682433128357, 0.7460044622421265, 0.7589486241340637, 0.7640998363494873, 0.7740060687065125, 0.7795535326004028, 0.780610203742981, 0.7766477465629578, 0.7849689722061157, 0.7969884872436523, 0.7936864495277405, 0.7964601516723633, 0.804649293422699, 0.8059701323509216, 0.8140271902084351, 0.8161405324935913, 0.8195747137069702, 0.8222163319587708, 0.8253863453865051, 0.8271034359931946, 0.8309338092803955, 0.830669641494751, 0.837141752243042, 0.8400475382804871, 0.8506141901016235, 0.8555012345314026, 0.8539162874221802, 0.8515387773513794, 0.8545766472816467, 0.8568220734596252, 0.8593316674232483, 0.8558974862098694, 0.8610487580299377, 0.8589354157447815, 0.8613129258155823, 0.8640866279602051, 0.8664641380310059], "val_loss": [2.2463040351867676, 2.0160090923309326, 1.1331688165664673, 0.8571959733963013, 0.7630205154418945, 0.7096185088157654, 0.6674298644065857, 0.6537335515022278, 0.6349533796310425, 0.6146262884140015, 0.5698116421699524, 0.5530939698219299, 0.5378327369689941, 0.5232642292976379, 0.5127135515213013, 0.5122986435890198, 0.500758707523346, 0.4997110962867737, 0.49352800846099854, 0.48900118470191956, 0.48984789848327637, 0.47877800464630127, 0.4660901427268982, 0.45768529176712036, 0.4642374813556671, 0.45481112599372864, 0.4493786096572876, 0.4434758722782135, 0.43576106429100037, 0.4358195662498474, 0.44187113642692566, 0.4495604336261749, 0.44273585081100464, 0.43439018726348877, 0.42920881509780884, 0.42974650859832764, 0.42633676528930664, 0.42301830649375916, 0.4165993928909302, 0.41791674494743347, 0.4196958541870117, 0.4164871275424957, 0.3992841839790344, 0.40156713128089905, 0.4118780195713043, 0.4130716621875763, 0.40475499629974365, 0.3983705937862396], "val_accuracy": [0.4390000104904175, 0.43833333253860474, 0.656333327293396, 0.6970000267028809, 0.7073333263397217, 0.7393333315849304, 0.7409999966621399, 0.749666690826416, 0.7570000290870667, 0.7696666717529297, 0.7739999890327454, 0.7883333563804626, 0.7993333339691162, 0.79666668176651, 0.8076666593551636, 0.7996666431427002, 0.8080000281333923, 0.8113333582878113, 0.8050000071525574, 0.8043333292007446, 0.8176666498184204, 0.8213333487510681, 0.8270000219345093, 0.8306666612625122, 0.8343333601951599, 0.8389999866485596, 0.8403333425521851, 0.8386666774749756, 0.8489999771118164, 0.8463333249092102, 0.8443333506584167, 0.846666693687439, 0.8479999899864197, 0.8553333282470703, 0.8553333282470703, 0.8560000061988831, 0.8636666536331177, 0.8536666631698608, 0.8603333234786987, 0.8619999885559082, 0.8643333315849304, 0.8679999709129333, 0.8690000176429749, 0.8633333444595337, 0.8629999756813049, 0.8629999756813049, 0.8676666617393494, 0.8679999709129333]}, "mapping_values": [1, 10, 5, 5, 3, 4, 2, 2, 1, 12, 9, 3, 1, 2, 1, 1, 0], "tree_depth": 17}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [2, 2, 3, 0, 3, 1, 5], [0, 1, 0, 2, 3, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 5, 0, 3, 5], [2, 2, 0, 3], [95, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 1, 7, 6, 8, 5, 6, 6, 6, 0, 7, 4, 2, 8, 8, 4, 9], [4, 0, 0, 3, 0, 0, 3, 4, 1, 0, 6, 7, 1, 5, 1, 5, 4, 3, 1], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 7, 6, 2, 6, 4, 2, 0, 2, 1, 1, 1, 46, 27, 19, 6], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(tf.math.square(grad), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.negative(beta)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma)), tf.math.sqrt(tf.math.subtract(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, grad), tf.math.divide_no_nan(alpha, tf.math.negative(tf.math.add(grad, tf.math.pow(tf.math.add(tf.math.sqrt(tf.math.sqrt(tf.math.pow(alpha, grad))), grad), sigma))))))))))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 9, 3], [0, 1, 0, 2], [39, 39], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 1, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [72], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 4, 4, 2, 8, 8], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 2, 1, 0, 1, 1, 2, 1, 1, 1, 22, 12, 10, 6], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.math.sqrt(alpha)))))), beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 0], [39, 39, 45], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 5, 9, 8], [3], [0], [0, 1], [0], [0], [0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0], [6, 3, 3, 6, 8, 2, 5, 1, 4, 2, 8, 6, 2, 8, 2, 5, 4, 0, 9, 6, 3, 3, 6, 4, 9, 4, 5, 1, 1, 7, 7, 8, 1, 7, 4, 5, 0, 5, 9, 6, 6, 5, 9], [1, 2, 5, 4, 6, 0, 7, 0, 5, 4, 0, 0, 5, 3, 6, 7, 1, 5, 6, 3, 2, 4, 1, 7], [42, 17, 16, 48, 61, 16, 27, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 1, 0, 1, 0, 2, 1, 1, 1, 67, 43, 24, 8], "tree_depth": 42, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.math.square(alpha), tf.math.subtract(beta, grad))), tf.math.pow(grad, tf.math.add(grad, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.square(tf.math.pow(tf.math.negative(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.divide_no_nan(grad, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.square(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(tf.math.add(sigma, tf.math.add(tf.math.sqrt(tf.math.subtract(grad, grad)), tf.math.add(alpha, tf.math.pow(tf.math.square(grad), tf.math.negative(tf.math.square(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))))), grad))))), sigma))))), tf.math.divide_no_nan(beta, grad)), alpha), tf.math.divide_no_nan(grad, tf.math.square(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 5, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 5, 5], [3, 2, 2, 3], [16, 16], [0, 1], [0], [0], [54], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [6, 3, 3, 6, 3, 1, 4, 1, 4, 5, 8, 9], [0, 0, 0, 4, 0, 2, 3, 1, 4, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.09000000357627869, "mapping_values": [1, 6, 4, 2, 1, 7, 4, 3, 0, 2, 1, 1, 1, 21, 12, 9, 5], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.constant(1.0, shape=shape, dtype=tf.float32))), beta)), sigma), tf.math.square(tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), alpha), grad)", "other_info": {"loss": [2.310544490814209, 2.31066632270813, 2.309291362762451, 2.309868335723877, 2.3113319873809814, 2.3111400604248047], "accuracy": [0.08994849026203156, 0.09325055778026581, 0.09060890227556229, 0.08757099509239197, 0.09034473448991776, 0.08545766770839691], "val_loss": [2.308461904525757, 2.308461904525757, 2.308461904525757, 2.308461904525757, 2.308461904525757, 2.308461904525757], "val_accuracy": [0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393]}}]