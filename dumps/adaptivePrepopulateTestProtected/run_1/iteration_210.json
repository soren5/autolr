[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8837142586708069, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2235751152038574, 1.863627314567566, 1.3881967067718506, 1.0971885919570923, 0.9431154727935791, 0.835616409778595, 0.7718875408172607, 0.7267177104949951, 0.6853072643280029, 0.6501961350440979, 0.6362801194190979, 0.6226356029510498, 0.5988889336585999, 0.5801778435707092, 0.5583580732345581, 0.5447906851768494, 0.5406832695007324, 0.5254860520362854, 0.5062505006790161, 0.5079479217529297, 0.49121394753456116, 0.48989003896713257, 0.47510769963264465, 0.46506667137145996, 0.4554359018802643, 0.45054957270622253, 0.44110772013664246, 0.430584579706192, 0.42144355177879333, 0.4155716598033905, 0.4158378839492798, 0.4039183557033539, 0.4085548520088196, 0.39546728134155273, 0.39515864849090576, 0.3871508538722992, 0.38307344913482666, 0.3732011318206787, 0.3693823516368866, 0.36437657475471497, 0.3559441566467285, 0.3469986915588379, 0.343269407749176, 0.3417010009288788, 0.33637532591819763, 0.32835736870765686, 0.3263590931892395, 0.31998395919799805], "accuracy": [0.2810725271701813, 0.4971602261066437, 0.5653150081634521, 0.6174877882003784, 0.6604147553443909, 0.6975300312042236, 0.7224937081336975, 0.7313432693481445, 0.7481178045272827, 0.7605336308479309, 0.7685906887054443, 0.7737419009208679, 0.7836481332778931, 0.7877426743507385, 0.8004226684570312, 0.7952714562416077, 0.8047813773155212, 0.8120459914207458, 0.8137630224227905, 0.8156121969223022, 0.8216879963874817, 0.8222163319587708, 0.828820526599884, 0.8327829837799072, 0.8348963260650635, 0.8391229510307312, 0.8408400416374207, 0.8436138033866882, 0.8473120927810669, 0.8507462739944458, 0.8518029451370239, 0.8524633646011353, 0.852331280708313, 0.8539162874221802, 0.8544445633888245, 0.8615770936012268, 0.859199583530426, 0.8668603897094727, 0.8696341514587402, 0.8679170608520508, 0.872407853603363, 0.8747853636741638, 0.8750495314598083, 0.8750495314598083, 0.8766345381736755, 0.882710337638855, 0.8792761564254761, 0.8848236799240112], "val_loss": [2.041090488433838, 1.5073738098144531, 1.0351890325546265, 0.8288497924804688, 0.7493756413459778, 0.6886183023452759, 0.646604061126709, 0.6087713837623596, 0.582353949546814, 0.5605174899101257, 0.5534560680389404, 0.5316277742385864, 0.514729917049408, 0.5010638236999512, 0.4920998513698578, 0.47585147619247437, 0.47390398383140564, 0.45993757247924805, 0.46219465136528015, 0.44748595356941223, 0.4464666247367859, 0.44296160340309143, 0.4343818426132202, 0.42551079392433167, 0.42283767461776733, 0.41507044434547424, 0.4149109423160553, 0.4069209098815918, 0.40459540486335754, 0.40145280957221985, 0.3985113203525543, 0.3906044065952301, 0.3908856511116028, 0.3974918723106384, 0.38081249594688416, 0.38753604888916016, 0.37521854043006897, 0.37901124358177185, 0.37925422191619873, 0.3736351728439331, 0.36485224962234497, 0.36611106991767883, 0.3618214428424835, 0.35893985629081726, 0.3620902895927429, 0.35414883494377136, 0.3574270009994507, 0.35906851291656494], "val_accuracy": [0.5236666798591614, 0.6586666703224182, 0.6903333067893982, 0.7173333168029785, 0.734000027179718, 0.7480000257492065, 0.7580000162124634, 0.7746666669845581, 0.7803333401679993, 0.7893333435058594, 0.7866666913032532, 0.8023333549499512, 0.8130000233650208, 0.8149999976158142, 0.8186666369438171, 0.8316666483879089, 0.8273333311080933, 0.8356666564941406, 0.8343333601951599, 0.8399999737739563, 0.8420000076293945, 0.840666651725769, 0.8446666598320007, 0.847000002861023, 0.8503333330154419, 0.8516666889190674, 0.8539999723434448, 0.856333315372467, 0.8583333492279053, 0.8579999804496765, 0.8613333106040955, 0.8573333621025085, 0.8636666536331177, 0.8523333072662354, 0.8656666874885559, 0.8583333492279053, 0.8690000176429749, 0.8683333396911621, 0.8696666955947876, 0.8666666746139526, 0.8700000047683716, 0.8726666569709778, 0.8773333430290222, 0.874666690826416, 0.8759999871253967, 0.8773333430290222, 0.8756666779518127, 0.8766666650772095]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8657143115997314, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224439859390259, 1.8664143085479736, 1.3927960395812988, 1.105170488357544, 0.9439767003059387, 0.8551092147827148, 0.7841465473175049, 0.739862322807312, 0.6994786858558655, 0.668272852897644, 0.6455791592597961, 0.6239590048789978, 0.5968348979949951, 0.5812645554542542, 0.5631627440452576, 0.5602065920829773, 0.5300841927528381, 0.5302196741104126, 0.5137227177619934, 0.5051360726356506, 0.48840153217315674, 0.48677054047584534, 0.4725878834724426, 0.47206228971481323, 0.45535701513290405, 0.4480501115322113, 0.4417271018028259, 0.43593829870224, 0.43410319089889526, 0.4214077293872833, 0.4155488908290863, 0.4108976721763611, 0.3973575234413147, 0.40332573652267456, 0.38605356216430664], "accuracy": [0.2641659080982208, 0.497820645570755, 0.564258337020874, 0.6174877882003784, 0.661471426486969, 0.7008321285247803, 0.7232862114906311, 0.7375511527061462, 0.7477215528488159, 0.7589486241340637, 0.7676661014556885, 0.7740060687065125, 0.7866860628128052, 0.7881389260292053, 0.7987055778503418, 0.8014793395996094, 0.8099326491355896, 0.8098005652427673, 0.81548011302948, 0.8201030492782593, 0.8285563588142395, 0.8238013386726379, 0.8339717388153076, 0.833179235458374, 0.8363492488861084, 0.8389908671379089, 0.8426892161369324, 0.844010055065155, 0.8432175517082214, 0.8500858545303345, 0.8487650156021118, 0.8525954484939575, 0.8569541573524475, 0.856689989566803, 0.8646149635314941], "val_loss": [2.0372204780578613, 1.5063027143478394, 1.0412887334823608, 0.8369510173797607, 0.7497326731681824, 0.6957981586456299, 0.6472606062889099, 0.6116883754730225, 0.5823767781257629, 0.5663166642189026, 0.5433638095855713, 0.5355677604675293, 0.5142492055892944, 0.5041447877883911, 0.4977872371673584, 0.48238787055015564, 0.4766303598880768, 0.46985116600990295, 0.45622968673706055, 0.45581287145614624, 0.4447553753852844, 0.43462488055229187, 0.4410113990306854, 0.4294353425502777, 0.42695051431655884, 0.41877642273902893, 0.41414037346839905, 0.4113742411136627, 0.41517457365989685, 0.40025731921195984, 0.3993854522705078, 0.39451301097869873, 0.39514583349227905, 0.39045247435569763, 0.38624271750450134], "val_accuracy": [0.5703333616256714, 0.6583333611488342, 0.6813333630561829, 0.7016666531562805, 0.7266666889190674, 0.7426666617393494, 0.7563333511352539, 0.7710000276565552, 0.7850000262260437, 0.7900000214576721, 0.8016666769981384, 0.7983333468437195, 0.8133333325386047, 0.8166666626930237, 0.8183333277702332, 0.8209999799728394, 0.8199999928474426, 0.8266666531562805, 0.831333339214325, 0.8333333134651184, 0.8349999785423279, 0.8399999737739563, 0.8433333039283752, 0.8423333168029785, 0.8389999866485596, 0.8446666598320007, 0.8526666760444641, 0.8503333330154419, 0.8476666808128357, 0.8586666584014893, 0.8576666712760925, 0.8583333492279053, 0.8550000190734863, 0.8583333492279053, 0.8556666374206543]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 1], [0], [0], [0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0], [0, 7, 2, 1, 5, 5, 6, 2, 2, 4, 9, 5, 3, 8, 5, 8, 9], [0, 3, 4, 5, 3, 5, 4], [0, 83, 42], [0, 1], [0], [1], [0]], "fitness": -0.8545714020729065, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(tf.math.square(tf.math.divide_no_nan(tf.math.add(tf.math.add(sigma, grad), tf.math.pow(grad, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.multiply(tf.math.sqrt(sigma), tf.math.square(grad))))))), grad), tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2937331199645996, 2.189868450164795, 1.7643588781356812, 1.3439626693725586, 1.0515187978744507, 0.9288101196289062, 0.8250110745429993, 0.8209814429283142, 0.7649811506271362, 0.7241933345794678, 0.6839848756790161, 0.6641514301300049, 0.637753427028656, 0.620634913444519, 0.594192624092102, 0.5852607488632202, 0.5878401398658752, 0.572113037109375, 0.5481839776039124, 0.5225076675415039, 0.5271213054656982, 0.49841177463531494, 0.5010085105895996, 0.4767085909843445, 0.4839811623096466, 0.47055572271347046, 0.45866894721984863, 0.46021056175231934, 0.43581631779670715, 0.4362978935241699, 0.4280824363231659, 0.4220103621482849, 0.41220229864120483, 0.3998698890209198, 0.3965737819671631, 0.3834984600543976, 0.3779316544532776, 0.3752904236316681, 0.3702278733253479, 0.36508384346961975, 0.3625503182411194, 0.36192232370376587, 0.34871309995651245, 0.35563206672668457, 0.3437667489051819, 0.33807533979415894, 0.34068137407302856, 0.3222765326499939, 0.326846182346344, 0.30127596855163574, 0.29581037163734436, 0.3112652003765106, 0.30199068784713745, 0.28732404112815857, 0.2817728817462921, 0.2895527482032776, 0.27992117404937744, 0.27613094449043274, 0.28134989738464355, 0.2796590328216553], "accuracy": [0.1348566859960556, 0.3295469582080841, 0.4356095492839813, 0.5489367246627808, 0.6476026773452759, 0.6629242897033691, 0.6993792057037354, 0.703209638595581, 0.7100779414176941, 0.7292299270629883, 0.7466648817062378, 0.7454761862754822, 0.7573636174201965, 0.7631752490997314, 0.7783648371696472, 0.7810064554214478, 0.7799497842788696, 0.7848368883132935, 0.7964601516723633, 0.8009510040283203, 0.7975168228149414, 0.8088759779930115, 0.8098005652427673, 0.8197067975997925, 0.8125742673873901, 0.8238013386726379, 0.8267071843147278, 0.8273676037788391, 0.8323867321014404, 0.8342359066009521, 0.8391229510307312, 0.8368775844573975, 0.8411042094230652, 0.8428213000297546, 0.8495575189590454, 0.8494254350662231, 0.8548408150672913, 0.8536521196365356, 0.8551049828529358, 0.8569541573524475, 0.8585391640663147, 0.8580108284950256, 0.8648791313171387, 0.8602562546730042, 0.8658037185668945, 0.8688416481018066, 0.86553955078125, 0.874389111995697, 0.8728041052818298, 0.8800686597824097, 0.8821820020675659, 0.8784837126731873, 0.8808611631393433, 0.8836349248886108, 0.8878615498542786, 0.8831065893173218, 0.8865407705307007, 0.8882578015327454, 0.8927486538887024, 0.8893144726753235], "val_loss": [2.2463126182556152, 2.0184879302978516, 1.1354186534881592, 0.88187175989151, 0.7871213555335999, 0.7292484641075134, 0.6873632669448853, 0.6399368643760681, 0.6357346773147583, 0.622038722038269, 0.5797392725944519, 0.5666424036026001, 0.5467003583908081, 0.5435539484024048, 0.5374161601066589, 0.5219534635543823, 0.5108703970909119, 0.5083213448524475, 0.5112189650535583, 0.48410865664482117, 0.4793926179409027, 0.5056604146957397, 0.4846378564834595, 0.46620264649391174, 0.460976243019104, 0.4738398492336273, 0.47160106897354126, 0.4557833671569824, 0.4570987820625305, 0.45561209321022034, 0.4605816602706909, 0.4428936839103699, 0.44439607858657837, 0.44114476442337036, 0.4344392418861389, 0.4386981129646301, 0.4488772451877594, 0.44032958149909973, 0.435295969247818, 0.44308942556381226, 0.4500819444656372, 0.43562185764312744, 0.4273653030395508, 0.4296577274799347, 0.44274064898490906, 0.43603500723838806, 0.4474128484725952, 0.45876437425613403, 0.4541354477405548, 0.45542725920677185, 0.46693408489227295, 0.47667887806892395, 0.4639696478843689, 0.44439026713371277, 0.4371623396873474, 0.4356318414211273, 0.4595454931259155, 0.48544007539749146, 0.5004660487174988, 0.4887215197086334], "val_accuracy": [0.4203333258628845, 0.4490000009536743, 0.6386666893959045, 0.6830000281333923, 0.6986666917800903, 0.7360000014305115, 0.7423333525657654, 0.7546666860580444, 0.7689999938011169, 0.7756666541099548, 0.7793333530426025, 0.7823333144187927, 0.7860000133514404, 0.7993333339691162, 0.79666668176651, 0.7996666431427002, 0.8053333163261414, 0.8013333082199097, 0.8016666769981384, 0.8186666369438171, 0.8193333148956299, 0.8106666803359985, 0.8176666498184204, 0.82833331823349, 0.8276666402816772, 0.824999988079071, 0.8306666612625122, 0.8343333601951599, 0.8309999704360962, 0.82833331823349, 0.824999988079071, 0.8386666774749756, 0.8373333215713501, 0.8393333554267883, 0.8383333086967468, 0.8389999866485596, 0.8416666388511658, 0.8416666388511658, 0.8433333039283752, 0.8500000238418579, 0.8516666889190674, 0.8519999980926514, 0.8523333072662354, 0.8550000190734863, 0.8506666421890259, 0.8503333330154419, 0.8486666679382324, 0.8503333330154419, 0.8556666374206543, 0.8539999723434448, 0.8569999933242798, 0.8496666550636292, 0.8560000061988831, 0.8613333106040955, 0.8636666536331177, 0.862666666507721, 0.8606666922569275, 0.8633333444595337, 0.8606666922569275, 0.859333336353302]}, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 24, 17, 7, 3, 2, 1, 1, 0], "tree_depth": 23}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8325714468955994, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5142171382904053, 0.9077646136283875, 0.6890257000923157, 0.6393857598304749, 0.5978946089744568, 0.5758079886436462, 0.5522695183753967, 0.5075315833091736, 0.5296834707260132, 0.5498949289321899, 0.5273522138595581, 0.5383007526397705, 0.5426172614097595, 0.532184362411499, 0.6082400679588318, 0.6178305149078369, 0.6162339448928833], "accuracy": [0.4877823293209076, 0.6925109028816223, 0.7470611333847046, 0.7607977986335754, 0.7833839654922485, 0.7864218950271606, 0.7968564033508301, 0.8124422430992126, 0.8087438941001892, 0.8087438941001892, 0.8087438941001892, 0.8055738806724548, 0.8150838613510132, 0.7992339134216309, 0.8113855719566345, 0.8014793395996094, 0.7971205711364746], "val_loss": [0.9570237398147583, 0.6371679306030273, 0.567928671836853, 0.5314367413520813, 0.5338132381439209, 0.5155789256095886, 0.4920438528060913, 0.49079838395118713, 0.5424938797950745, 0.4808337092399597, 0.49859654903411865, 0.4941464066505432, 0.5495596528053284, 0.6172114014625549, 0.5934934020042419, 0.6135683059692383, 0.5372045636177063], "val_accuracy": [0.6646666526794434, 0.7689999938011169, 0.7796666622161865, 0.8006666898727417, 0.8006666898727417, 0.8169999718666077, 0.8270000219345093, 0.824999988079071, 0.82833331823349, 0.8286666870117188, 0.8360000252723694, 0.840666651725769, 0.8266666531562805, 0.8360000252723694, 0.8080000281333923, 0.8183333277702332, 0.8246666789054871]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0], [9, 2, 3, 5, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 8, 4, 6, 0], [4, 3, 6, 2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 9], [0, 0, 0, 3, 0, 0, 3, 0, 2, 0], [16, 99, 96, 99, 61, 1, 89]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 1, 1, 0, 1, 9, 5, 4, 0, 21, 12, 9, 7], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(grad, tf.math.sqrt(tf.math.pow(tf.math.divide_no_nan(tf.math.negative(sigma), grad), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), sigma)))), tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [232939799445504.0, 898984168128512.0, 1453948703604736.0, 1892915567656960.0, 2285632344817664.0, 2638868171980800.0], "accuracy": [0.10355303436517715, 0.09919429570436478, 0.09642054885625839, 0.09826971590518951, 0.09628847241401672, 0.09734513610601425], "val_loss": [508673377959936.0, 978998469328896.0, 1364129394720768.0, 1693747867811840.0, 1984472861900800.0, 2246035967574016.0], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5, 1, 8, 2, 8, 5], [0, 2, 0, 3, 4, 5], [16, 16], [0, 1, 1], [4], [0, 6], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0], [6, 3, 3, 3, 8, 1, 4, 2, 5, 5, 8], [4, 0, 0, 3, 0, 0, 3, 1, 3, 0], [16, 99, 34, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 17, 11, 6, 2, 3, 1, 2, 1, 17, 9, 8, 4], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.subtract(tf.math.sqrt(tf.math.add(grad, tf.math.sqrt(grad))), tf.math.square(grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.multiply(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma)), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.square(alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 8, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 1, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 3, 4, 2, 3], [0, 0, 4, 3, 0, 0, 3, 1, 2, 0, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.09342857450246811, "mapping_values": [1, 6, 4, 2, 1, 10, 6, 4, 1, 2, 1, 1, 1, 22, 11, 11, 5], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(alpha, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.multiply(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), grad))", "other_info": {"loss": [2.3093461990356445, 2.307408332824707, 2.3081729412078857, 2.3097753524780273, 2.3098864555358887, 2.308722972869873], "accuracy": [0.0940430611371994, 0.09721305221319199, 0.09192973375320435, 0.09338264167308807, 0.09153348207473755, 0.10091137140989304], "val_loss": [2.3085858821868896, 2.3085858821868896, 2.3085858821868896, 2.3085858821868896, 2.3085858821868896, 2.3085858821868896], "val_accuracy": [0.08799999952316284, 0.08799999952316284, 0.08799999952316284, 0.08799999952316284, 0.08799999952316284, 0.08799999952316284]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [3, 2, 2, 0, 3], [2, 1, 0, 2, 2], [39, 39], [0, 0, 1, 0, 1, 1], [0, 5, 4, 8], [0, 2, 0, 3], [0], [1, 1], [0], [4], [0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 8, 2, 8, 8], [0, 0, 0, 3, 0, 0, 0, 1, 2, 0], [0, 61, 12, 92, 51, 43]], "fitness": -0.09285714477300644, "mapping_values": [1, 10, 5, 5, 1, 3, 2, 1, 1, 1, 0, 1, 0, 21, 12, 9, 6], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.math.pow(tf.math.subtract(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.sqrt(alpha))))), beta)))", "other_info": {"loss": [2.309802293777466, 2.3098220825195312, 2.3099231719970703, 2.3100945949554443, 2.3100719451904297, 2.3095808029174805], "accuracy": [0.09496764093637466, 0.09166556596755981, 0.09219389408826828, 0.09325055778026581, 0.09179764986038208, 0.08981640636920929], "val_loss": [2.3092200756073, 2.3092200756073, 2.3092200756073, 2.3092200756073, 2.3092200756073, 2.3092200756073], "val_accuracy": [0.08633333444595337, 0.08633333444595337, 0.08633333444595337, 0.08633333444595337, 0.08633333444595337, 0.08633333444595337]}}]