[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222564220428467, 1.8654934167861938, 1.392636775970459, 1.0800100564956665, 0.9349965453147888, 0.83723384141922, 0.771166205406189, 0.7229189872741699, 0.6917352080345154, 0.6532851457595825, 0.6217012405395508, 0.6138775944709778, 0.5917757749557495, 0.5793368220329285, 0.5567960739135742, 0.5480981469154358, 0.5474538803100586, 0.5317270755767822, 0.5151227116584778, 0.5055264234542847, 0.5014929175376892, 0.4862228035926819, 0.4727080464363098, 0.47010233998298645, 0.46293196082115173, 0.4504174590110779, 0.447412371635437, 0.4438058137893677, 0.42948198318481445, 0.417126327753067, 0.4136964678764343, 0.40704113245010376, 0.4020131528377533, 0.39997783303260803, 0.39442774653434753, 0.3916949927806854, 0.38260385394096375, 0.3716582953929901, 0.3650337755680084, 0.3573426902294159, 0.36132100224494934, 0.3564379811286926, 0.3445151448249817, 0.33812835812568665, 0.3384065330028534, 0.3359524607658386, 0.33294373750686646, 0.3212839663028717, 0.3217304050922394, 0.3110441267490387, 0.31119072437286377], "accuracy": [0.2685246467590332, 0.4955752193927765, 0.5610883831977844, 0.6197332143783569, 0.6668868064880371, 0.6963412761688232, 0.7205125093460083, 0.7349095344543457, 0.7469290494918823, 0.7604015469551086, 0.7732135653495789, 0.7761194109916687, 0.7878747582435608, 0.7901201844215393, 0.8009510040283203, 0.802271842956543, 0.8050455451011658, 0.8103289008140564, 0.8158763647079468, 0.8197067975997925, 0.817461371421814, 0.8255184292793274, 0.8273676037788391, 0.8333113193511963, 0.832650899887085, 0.8392550349235535, 0.8367455005645752, 0.8408400416374207, 0.8474441766738892, 0.8475762605667114, 0.8519350290298462, 0.8545766472816467, 0.8574824929237366, 0.8544445633888245, 0.8589354157447815, 0.8561616539955139, 0.8632941246032715, 0.8640866279602051, 0.869502067565918, 0.8702945709228516, 0.8702945709228516, 0.8689737319946289, 0.8772949576377869, 0.8754457831382751, 0.8767666220664978, 0.8809932470321655, 0.8776912093162537, 0.8853520154953003, 0.8811253309249878, 0.8886540532112122, 0.8885219693183899], "val_loss": [2.042604923248291, 1.5189800262451172, 1.0515391826629639, 0.8450219035148621, 0.7558016777038574, 0.7093545794487, 0.6593213081359863, 0.6230939030647278, 0.5998342037200928, 0.5830129981040955, 0.5592260956764221, 0.5484577417373657, 0.5345214009284973, 0.5245682597160339, 0.508945107460022, 0.5038147568702698, 0.4949795603752136, 0.4867953658103943, 0.47808560729026794, 0.4682127833366394, 0.46202969551086426, 0.4617370665073395, 0.4514632225036621, 0.4495610296726227, 0.4391477108001709, 0.43453720211982727, 0.42648962140083313, 0.42570948600769043, 0.4242604672908783, 0.4146496057510376, 0.41664713621139526, 0.4113439619541168, 0.41593310236930847, 0.4013250470161438, 0.40437138080596924, 0.39875122904777527, 0.3905998170375824, 0.3918660581111908, 0.38664665818214417, 0.3956036865711212, 0.38548287749290466, 0.3855803310871124, 0.3777529299259186, 0.3802799582481384, 0.3779101073741913, 0.371540904045105, 0.3776323199272156, 0.36875513195991516, 0.37442195415496826, 0.3655129075050354, 0.3628164827823639], "val_accuracy": [0.5523333549499512, 0.6656666398048401, 0.6830000281333923, 0.7059999704360962, 0.7336666584014893, 0.7506666779518127, 0.7580000162124634, 0.7689999938011169, 0.7736666798591614, 0.7846666574478149, 0.7950000166893005, 0.7963333129882812, 0.7993333339691162, 0.8100000023841858, 0.8173333406448364, 0.8190000057220459, 0.8213333487510681, 0.8209999799728394, 0.8286666870117188, 0.828000009059906, 0.8323333263397217, 0.8336666822433472, 0.8333333134651184, 0.8349999785423279, 0.8386666774749756, 0.8393333554267883, 0.8429999947547913, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8446666598320007, 0.8463333249092102, 0.8503333330154419, 0.8529999852180481, 0.8493333458900452, 0.8550000190734863, 0.8546666502952576, 0.856333315372467, 0.8613333106040955, 0.856333315372467, 0.859000027179718, 0.8550000190734863, 0.8586666584014893, 0.8633333444595337, 0.8619999885559082, 0.8659999966621399, 0.859666645526886, 0.862666666507721, 0.8603333234786987, 0.8610000014305115, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8591428399085999, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2252161502838135, 1.8833900690078735, 1.4115464687347412, 1.110316276550293, 0.9538745880126953, 0.8417739272117615, 0.77333003282547, 0.7272683382034302, 0.6861180067062378, 0.6423537135124207, 0.6295186877250671, 0.6131816506385803, 0.5911189317703247, 0.5712535381317139, 0.5536803603172302, 0.5405673980712891, 0.5325123071670532, 0.5163966417312622, 0.5027898550033569, 0.49266040325164795, 0.4840655028820038, 0.4751409888267517, 0.4585876762866974, 0.4533325135707855, 0.44617336988449097, 0.4470368027687073, 0.43490004539489746, 0.4229927361011505, 0.4264843463897705, 0.41288214921951294, 0.4081002175807953, 0.40525078773498535, 0.39907363057136536, 0.39269569516181946, 0.3816388249397278, 0.37392520904541016, 0.3652341365814209, 0.3695170283317566, 0.3693702816963196], "accuracy": [0.26641130447387695, 0.47972527146339417, 0.5633337497711182, 0.6172236204147339, 0.6586976647377014, 0.6975300312042236, 0.722229540348053, 0.7342491149902344, 0.7491744756698608, 0.7663452625274658, 0.7705719470977783, 0.7775723338127136, 0.7836481332778931, 0.7928939461708069, 0.8030643463134766, 0.8004226684570312, 0.8058380484580994, 0.816008448600769, 0.8173292875289917, 0.821820080280304, 0.8260467648506165, 0.8285563588142395, 0.8374059200286865, 0.8409721255302429, 0.8383304476737976, 0.8417646288871765, 0.8471800088882446, 0.8424250483512878, 0.8465195894241333, 0.8531237840652466, 0.8590674996376038, 0.8541803956031799, 0.8599920868873596, 0.8617091774940491, 0.8673887252807617, 0.8656716346740723, 0.8704266548156738, 0.8665962219238281, 0.8688416481018066], "val_loss": [2.0453202724456787, 1.5309391021728516, 1.0493489503860474, 0.830160915851593, 0.7370339632034302, 0.679634690284729, 0.6363614201545715, 0.600824773311615, 0.5737375617027283, 0.5583875179290771, 0.5397347807884216, 0.5210474729537964, 0.5061687231063843, 0.4996088147163391, 0.4807155430316925, 0.4704502820968628, 0.46281230449676514, 0.4547218382358551, 0.4466819763183594, 0.4361300468444824, 0.4375738501548767, 0.4251146912574768, 0.4252026081085205, 0.4187828004360199, 0.4073391556739807, 0.4084833264350891, 0.4043366611003876, 0.40076565742492676, 0.39446431398391724, 0.3882330060005188, 0.38723722100257874, 0.3834347426891327, 0.38325244188308716, 0.3747628629207611, 0.37404701113700867, 0.38117244839668274, 0.3693063259124756, 0.3644867241382599, 0.35919058322906494], "val_accuracy": [0.5133333206176758, 0.6503333449363708, 0.6809999942779541, 0.7059999704360962, 0.7289999723434448, 0.75, 0.7553333044052124, 0.7743333578109741, 0.7886666655540466, 0.7886666655540466, 0.7956666946411133, 0.8026666641235352, 0.8103333115577698, 0.812333345413208, 0.8193333148956299, 0.82833331823349, 0.8253333568572998, 0.82833331823349, 0.8366666436195374, 0.8429999947547913, 0.8393333554267883, 0.8420000076293945, 0.8456666469573975, 0.8463333249092102, 0.8523333072662354, 0.8516666889190674, 0.8516666889190674, 0.8526666760444641, 0.859000027179718, 0.8576666712760925, 0.8600000143051147, 0.8613333106040955, 0.8603333234786987, 0.8693333268165588, 0.8629999756813049, 0.859333336353302, 0.8666666746139526, 0.8683333396911621, 0.8690000176429749]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 1], [0, 7], [0, 5], [0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 8, 4, 5, 8, 7, 8], [0, 1, 2], [0], [0, 1], [0], [1], [0]], "fitness": -0.8574285507202148, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.math.pow(tf.math.square(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.sqrt(alpha), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2940492630004883, 2.195200204849243, 1.7971560955047607, 1.3384100198745728, 1.0869770050048828, 0.9145085215568542, 0.8426644206047058, 0.8105970621109009, 0.7552750706672668, 0.7277251482009888, 0.7061010599136353, 0.6838920712471008, 0.6500188708305359, 0.6193937063217163, 0.59658282995224, 0.5944075584411621, 0.5637853741645813, 0.5655185580253601, 0.5517582893371582, 0.545378565788269, 0.5328033566474915, 0.5168631672859192, 0.5101600289344788, 0.4921913146972656, 0.4921983480453491, 0.4761134386062622, 0.4711901545524597, 0.45828497409820557, 0.4565183222293854, 0.4397319257259369, 0.4394625425338745, 0.42180460691452026, 0.4176957607269287, 0.4105699062347412, 0.3985539972782135, 0.3843170702457428, 0.3848888576030731, 0.38635003566741943, 0.3718097507953644, 0.37556251883506775, 0.3592551052570343, 0.3602065443992615, 0.35220372676849365, 0.3433998227119446, 0.3434486985206604, 0.3411736786365509, 0.33717262744903564, 0.31922677159309387, 0.32824820280075073, 0.31072720885276794, 0.3366535007953644, 0.30753806233406067, 0.31864669919013977, 0.3087950646877289, 0.3033866584300995, 0.31818073987960815, 0.31266871094703674, 0.30891621112823486, 0.2970612049102783, 0.30055487155914307, 0.28574618697166443], "accuracy": [0.1220446452498436, 0.3163386583328247, 0.4333641529083252, 0.5392946600914001, 0.6308281421661377, 0.6626601219177246, 0.6861709356307983, 0.7018887996673584, 0.7194558382034302, 0.7169462442398071, 0.728701651096344, 0.7397965788841248, 0.7524765729904175, 0.7712323069572449, 0.7660810947418213, 0.7681944370269775, 0.783119797706604, 0.7799497842788696, 0.7872143983840942, 0.7951393723487854, 0.7964601516723633, 0.800818920135498, 0.8031964302062988, 0.8059701323509216, 0.8088759779930115, 0.81548011302948, 0.8185180425643921, 0.8251221776008606, 0.8271034359931946, 0.8315942287445068, 0.8333113193511963, 0.8412362933158875, 0.8330471515655518, 0.8381983637809753, 0.8498216867446899, 0.8508783578872681, 0.8540483713150024, 0.8465195894241333, 0.8573504090309143, 0.8533879518508911, 0.8582749962806702, 0.8625016212463379, 0.8634262084960938, 0.8737286925315857, 0.8644828796386719, 0.8713511824607849, 0.8697662353515625, 0.8775591254234314, 0.8729361891746521, 0.8824461698532104, 0.8734645247459412, 0.8819178342819214, 0.8730682730674744, 0.8809932470321655, 0.8803328275680542, 0.8828424215316772, 0.8802007436752319, 0.8791441321372986, 0.8811253309249878, 0.8857482671737671, 0.8889182209968567], "val_loss": [2.2469286918640137, 2.0317986011505127, 1.1676907539367676, 0.9063661098480225, 0.7732082605361938, 0.7181912660598755, 0.6981915831565857, 0.6715987920761108, 0.635948896408081, 0.6272099018096924, 0.5893679857254028, 0.5884577631950378, 0.5683755874633789, 0.5586019158363342, 0.5582005381584167, 0.5472584366798401, 0.5353248715400696, 0.5286784172058105, 0.5135959386825562, 0.5171777606010437, 0.5011729598045349, 0.5031100511550903, 0.49371305108070374, 0.4891405701637268, 0.4795728325843811, 0.4738290309906006, 0.48782971501350403, 0.45739492774009705, 0.456402987241745, 0.44604840874671936, 0.4470391571521759, 0.43815746903419495, 0.4328868091106415, 0.43161043524742126, 0.43339425325393677, 0.4204447865486145, 0.41850435733795166, 0.42279675602912903, 0.42468249797821045, 0.4183875620365143, 0.41360247135162354, 0.4202250838279724, 0.4185677766799927, 0.41572046279907227, 0.4069443345069885, 0.4120626151561737, 0.4348604679107666, 0.422156423330307, 0.4204777777194977, 0.4337257444858551, 0.4433905780315399, 0.42489147186279297, 0.43283137679100037, 0.4422663152217865, 0.4832281172275543, 0.46180036664009094, 0.44055843353271484, 0.43951183557510376, 0.4687390923500061, 0.4642261266708374, 0.45298388600349426], "val_accuracy": [0.4183333218097687, 0.4466666579246521, 0.6499999761581421, 0.6813333630561829, 0.7089999914169312, 0.7433333396911621, 0.7463333606719971, 0.750333309173584, 0.7663333415985107, 0.7673333287239075, 0.7739999890327454, 0.7666666507720947, 0.7886666655540466, 0.7889999747276306, 0.7856666445732117, 0.7896666526794434, 0.7956666946411133, 0.8043333292007446, 0.809333324432373, 0.8029999732971191, 0.8140000104904175, 0.8103333115577698, 0.812333345413208, 0.8196666836738586, 0.8263333439826965, 0.8320000171661377, 0.8326666951179504, 0.8433333039283752, 0.8339999914169312, 0.8416666388511658, 0.8433333039283752, 0.8463333249092102, 0.8493333458900452, 0.8513333201408386, 0.8503333330154419, 0.8513333201408386, 0.8526666760444641, 0.8519999980926514, 0.8510000109672546, 0.8560000061988831, 0.8616666793823242, 0.8566666841506958, 0.8629999756813049, 0.862333357334137, 0.8636666536331177, 0.8616666793823242, 0.8613333106040955, 0.8629999756813049, 0.862333357334137, 0.8659999966621399, 0.8636666536331177, 0.8666666746139526, 0.8656666874885559, 0.8679999709129333, 0.8679999709129333, 0.8723333477973938, 0.8673333525657654, 0.8666666746139526, 0.8669999837875366, 0.8693333268165588, 0.8686666488647461]}, "mapping_values": [1, 10, 5, 5, 3, 4, 2, 2, 1, 10, 7, 3, 1, 2, 1, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8322857022285461, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.4883480072021484, 0.8152900338172913, 0.6510345935821533, 0.5865237712860107, 0.53920978307724, 0.5283266305923462, 0.5511083006858826, 0.5659146904945374, 0.5843075513839722, 0.5659759044647217, 0.5819476842880249, 0.5594937801361084, 0.6490869522094727, 0.6107035279273987, 0.6399640440940857, 0.667535662651062, 0.6003713607788086, 0.6253058910369873, 0.6339780688285828, 0.6331484913825989], "accuracy": [0.4777440130710602, 0.7161537408828735, 0.763439416885376, 0.7761194109916687, 0.7944789528846741, 0.8035926818847656, 0.8020076751708984, 0.8010830879211426, 0.7979130744934082, 0.7922335267066956, 0.7976489067077637, 0.8092722296714783, 0.7907806038856506, 0.7864218950271606, 0.7853652238845825, 0.7955356240272522, 0.7964601516723633, 0.785101056098938, 0.7775723338127136, 0.8026680946350098], "val_loss": [0.7723386883735657, 0.5689750909805298, 0.5018901824951172, 0.47239187359809875, 0.4613792300224304, 0.5072428584098816, 0.5420295596122742, 0.530462384223938, 0.531218945980072, 0.5550329089164734, 0.5473418831825256, 0.5636138916015625, 0.532426118850708, 0.5547852516174316, 0.6090928316116333, 0.5620988011360168, 0.5924113988876343, 0.5575826168060303, 0.5230178833007812, 0.6488480567932129], "val_accuracy": [0.7213333249092102, 0.7850000262260437, 0.8083333373069763, 0.828000009059906, 0.8296666741371155, 0.828000009059906, 0.8236666917800903, 0.8106666803359985, 0.8240000009536743, 0.831333339214325, 0.8203333616256714, 0.8213333487510681, 0.8356666564941406, 0.8136666417121887, 0.8443333506584167, 0.8293333053588867, 0.8166666626930237, 0.8270000219345093, 0.8263333439826965, 0.8420000076293945]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [5, 3, 3, 6, 8, 1, 4, 1, 4, 8, 2, 5], [0, 0, 0, 3, 0, 0, 3, 4, 2, 0], [16, 99, 96, 2, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 10, 6, 4, 2, 2, 1, 1, 1, 21, 12, 9, 5], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.sqrt(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma)), tf.math.add(tf.math.square(grad), beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [2, 2, 3, 0, 3, 3], [0, 1, 0, 2, 2, 0], [39, 39, 55], [1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 1, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 6, 4, 6, 8, 1, 4, 1, 4, 2, 8], [3, 2, 0, 3, 0, 0, 3, 1, 1, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 6, 6, 3, 1, 0, 1, 1, 2, 1, 1, 1, 16, 8, 8, 3], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.multiply(grad, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(sigma, beta), tf.math.pow(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha))))", "other_info": {"loss": [1.542958538964158e+25, 1.5349203702340391e+26, 4.953491273392374e+26, 1.156652911998077e+27, 2.2833996673559508e+27, 4.05857766352966e+27], "accuracy": [0.1006472036242485, 0.09694888442754745, 0.09800554811954498, 0.09708096832036972, 0.10236428678035736, 0.09959053993225098], "val_loss": [7.144279172806731e+25, 3.136390321193037e+26, 8.234786672242504e+26, 1.737876023325522e+27, 3.221143886839696e+27, 5.464992259162087e+27], "val_accuracy": [0.10366666316986084, 0.10300000011920929, 0.10266666859388351, 0.10066666454076767, 0.10199999809265137, 0.10266666859388351]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1], [0, 2, 3, 0, 3, 5, 3, 5], [0, 2, 0, 3, 0], [16, 16, 83], [0, 1, 1], [1], [0, 2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [1, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 3, 3, 1, 2, 0], [26, 99, 56, 99, 61, 47]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 13, 8, 5, 3, 3, 1, 2, 1, 21, 11, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.multiply(tf.math.square(grad), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(sigma, sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [5, 5, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1], [0, 2, 3, 2, 3, 5, 4, 2, 6, 3, 3, 7, 7, 5, 1, 3, 2, 3, 8], [0, 2, 0, 3, 1, 2, 2, 2, 4, 5, 5, 1, 4, 1, 5, 2], [11, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [9, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 2], [16, 99, 13, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 35, 19, 16, 2, 2, 1, 1, 1, 1, 1, 0, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.square(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.pow(tf.math.add(alpha, beta), tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.subtract(beta, grad))), tf.math.multiply(grad, grad)), tf.math.add(alpha, tf.math.multiply(grad, alpha))), grad), tf.math.sqrt(beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303380012512207, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}]