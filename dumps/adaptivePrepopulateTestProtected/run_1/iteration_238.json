[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8837142586708069, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2235751152038574, 1.863627314567566, 1.3881967067718506, 1.0971885919570923, 0.9431154727935791, 0.835616409778595, 0.7718875408172607, 0.7267177104949951, 0.6853072643280029, 0.6501961350440979, 0.6362801194190979, 0.6226356029510498, 0.5988889336585999, 0.5801778435707092, 0.5583580732345581, 0.5447906851768494, 0.5406832695007324, 0.5254860520362854, 0.5062505006790161, 0.5079479217529297, 0.49121394753456116, 0.48989003896713257, 0.47510769963264465, 0.46506667137145996, 0.4554359018802643, 0.45054957270622253, 0.44110772013664246, 0.430584579706192, 0.42144355177879333, 0.4155716598033905, 0.4158378839492798, 0.4039183557033539, 0.4085548520088196, 0.39546728134155273, 0.39515864849090576, 0.3871508538722992, 0.38307344913482666, 0.3732011318206787, 0.3693823516368866, 0.36437657475471497, 0.3559441566467285, 0.3469986915588379, 0.343269407749176, 0.3417010009288788, 0.33637532591819763, 0.32835736870765686, 0.3263590931892395, 0.31998395919799805], "accuracy": [0.2810725271701813, 0.4971602261066437, 0.5653150081634521, 0.6174877882003784, 0.6604147553443909, 0.6975300312042236, 0.7224937081336975, 0.7313432693481445, 0.7481178045272827, 0.7605336308479309, 0.7685906887054443, 0.7737419009208679, 0.7836481332778931, 0.7877426743507385, 0.8004226684570312, 0.7952714562416077, 0.8047813773155212, 0.8120459914207458, 0.8137630224227905, 0.8156121969223022, 0.8216879963874817, 0.8222163319587708, 0.828820526599884, 0.8327829837799072, 0.8348963260650635, 0.8391229510307312, 0.8408400416374207, 0.8436138033866882, 0.8473120927810669, 0.8507462739944458, 0.8518029451370239, 0.8524633646011353, 0.852331280708313, 0.8539162874221802, 0.8544445633888245, 0.8615770936012268, 0.859199583530426, 0.8668603897094727, 0.8696341514587402, 0.8679170608520508, 0.872407853603363, 0.8747853636741638, 0.8750495314598083, 0.8750495314598083, 0.8766345381736755, 0.882710337638855, 0.8792761564254761, 0.8848236799240112], "val_loss": [2.041090488433838, 1.5073738098144531, 1.0351890325546265, 0.8288497924804688, 0.7493756413459778, 0.6886183023452759, 0.646604061126709, 0.6087713837623596, 0.582353949546814, 0.5605174899101257, 0.5534560680389404, 0.5316277742385864, 0.514729917049408, 0.5010638236999512, 0.4920998513698578, 0.47585147619247437, 0.47390398383140564, 0.45993757247924805, 0.46219465136528015, 0.44748595356941223, 0.4464666247367859, 0.44296160340309143, 0.4343818426132202, 0.42551079392433167, 0.42283767461776733, 0.41507044434547424, 0.4149109423160553, 0.4069209098815918, 0.40459540486335754, 0.40145280957221985, 0.3985113203525543, 0.3906044065952301, 0.3908856511116028, 0.3974918723106384, 0.38081249594688416, 0.38753604888916016, 0.37521854043006897, 0.37901124358177185, 0.37925422191619873, 0.3736351728439331, 0.36485224962234497, 0.36611106991767883, 0.3618214428424835, 0.35893985629081726, 0.3620902895927429, 0.35414883494377136, 0.3574270009994507, 0.35906851291656494], "val_accuracy": [0.5236666798591614, 0.6586666703224182, 0.6903333067893982, 0.7173333168029785, 0.734000027179718, 0.7480000257492065, 0.7580000162124634, 0.7746666669845581, 0.7803333401679993, 0.7893333435058594, 0.7866666913032532, 0.8023333549499512, 0.8130000233650208, 0.8149999976158142, 0.8186666369438171, 0.8316666483879089, 0.8273333311080933, 0.8356666564941406, 0.8343333601951599, 0.8399999737739563, 0.8420000076293945, 0.840666651725769, 0.8446666598320007, 0.847000002861023, 0.8503333330154419, 0.8516666889190674, 0.8539999723434448, 0.856333315372467, 0.8583333492279053, 0.8579999804496765, 0.8613333106040955, 0.8573333621025085, 0.8636666536331177, 0.8523333072662354, 0.8656666874885559, 0.8583333492279053, 0.8690000176429749, 0.8683333396911621, 0.8696666955947876, 0.8666666746139526, 0.8700000047683716, 0.8726666569709778, 0.8773333430290222, 0.874666690826416, 0.8759999871253967, 0.8773333430290222, 0.8756666779518127, 0.8766666650772095]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8539999723434448, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.22390079498291, 1.864039421081543, 1.3851912021636963, 1.090246319770813, 0.9428106546401978, 0.8419522643089294, 0.7733689546585083, 0.7274316549301147, 0.6875086426734924, 0.6506921052932739, 0.6196707487106323, 0.6131026744842529, 0.5853970646858215, 0.5655297040939331, 0.5571531057357788, 0.5413382649421692, 0.5239562392234802, 0.5122162103652954, 0.5087580680847168, 0.49470722675323486, 0.4860779941082001, 0.471483051776886, 0.4634975790977478, 0.44797179102897644, 0.44378018379211426, 0.44694989919662476, 0.4261989891529083, 0.431922972202301, 0.41917911171913147, 0.41183143854141235, 0.40947914123535156, 0.39885377883911133, 0.3970249891281128, 0.3928442597389221, 0.38271084427833557, 0.37958937883377075, 0.37564942240715027, 0.362924188375473, 0.35957810282707214, 0.3539770543575287, 0.34674251079559326], "accuracy": [0.2817329168319702, 0.48685774207115173, 0.5721833109855652, 0.6256769299507141, 0.6600185036659241, 0.703209638595581, 0.7209087014198303, 0.7331924438476562, 0.7491744756698608, 0.765949010848999, 0.7730814814567566, 0.7792893648147583, 0.7849689722061157, 0.7869502305984497, 0.7984414100646973, 0.8050455451011658, 0.8133667707443237, 0.8153480291366577, 0.8149517774581909, 0.8212917447090149, 0.8271034359931946, 0.8318583965301514, 0.837141752243042, 0.8376700282096863, 0.837537944316864, 0.8385946154594421, 0.8479725122451782, 0.8428213000297546, 0.8477083444595337, 0.8496896028518677, 0.8499537706375122, 0.859199583530426, 0.8539162874221802, 0.8593316674232483, 0.8664641380310059, 0.8602562546730042, 0.8631620407104492, 0.8687095642089844, 0.8687095642089844, 0.873860776424408, 0.8766345381736755], "val_loss": [2.032770872116089, 1.5036475658416748, 1.029794454574585, 0.8239483833312988, 0.7359254360198975, 0.6904278993606567, 0.643492579460144, 0.603477954864502, 0.5796189904212952, 0.5611874461174011, 0.5363016128540039, 0.527334451675415, 0.5051166415214539, 0.49342358112335205, 0.48590826988220215, 0.4726005792617798, 0.46278002858161926, 0.4581824839115143, 0.4519079923629761, 0.45002031326293945, 0.4353356957435608, 0.4267806112766266, 0.4231315553188324, 0.420254647731781, 0.41985344886779785, 0.415559321641922, 0.4126843810081482, 0.410857230424881, 0.4017948806285858, 0.4019305109977722, 0.39608097076416016, 0.3949911296367645, 0.39424264430999756, 0.38808372616767883, 0.3896022140979767, 0.3826923370361328, 0.3811572194099426, 0.3796200454235077, 0.3763536810874939, 0.3742819130420685, 0.37510356307029724], "val_accuracy": [0.546999990940094, 0.656333327293396, 0.6823333501815796, 0.7126666903495789, 0.7326666712760925, 0.7433333396911621, 0.7543333172798157, 0.7696666717529297, 0.778333306312561, 0.7816666960716248, 0.7950000166893005, 0.7990000247955322, 0.8086666464805603, 0.8130000233650208, 0.8159999847412109, 0.8233333230018616, 0.824999988079071, 0.8266666531562805, 0.8343333601951599, 0.8309999704360962, 0.8403333425521851, 0.840666651725769, 0.8476666808128357, 0.8456666469573975, 0.8460000157356262, 0.8486666679382324, 0.8519999980926514, 0.8516666889190674, 0.8576666712760925, 0.8553333282470703, 0.856333315372467, 0.8600000143051147, 0.859333336353302, 0.862333357334137, 0.862666666507721, 0.8656666874885559, 0.8629999756813049, 0.8640000224113464, 0.8650000095367432, 0.8656666874885559, 0.862666666507721]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 3, 4, 5, 1, 4, 9], [0, 4, 4, 2], [0, 29], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [0, 6, 6, 5, 6, 0, 6, 4, 9, 0, 2, 4, 3, 2, 1, 0, 7], [0, 0, 6, 6, 2, 4, 3, 6, 3, 1, 4], [0, 83, 45], [0, 1], [0], [1], [0]], "fitness": -0.8402857184410095, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.math.pow(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, grad)), tf.math.pow(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(tf.math.negative(tf.math.divide_no_nan(tf.math.pow(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.negative(grad)), tf.math.add(grad, tf.math.pow(tf.math.multiply(tf.math.add(beta, grad), tf.math.subtract(tf.math.negative(tf.math.add(sigma, grad)), sigma)), alpha)))), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2929413318634033, 2.1890995502471924, 1.7798058986663818, 1.345805048942566, 1.1135904788970947, 0.9473878145217896, 0.8800071477890015, 0.83116215467453, 0.7869836091995239, 0.7562006711959839, 0.7154189944267273, 0.7133898138999939, 0.6594213247299194, 0.637237012386322, 0.6050599217414856, 0.618610680103302, 0.5918065309524536, 0.5835661888122559, 0.5728234052658081, 0.5471373796463013, 0.5351760387420654, 0.5221647024154663, 0.5248842239379883, 0.5188729166984558, 0.49842503666877747, 0.4830065369606018, 0.47171667218208313, 0.4664228856563568, 0.4502447247505188, 0.4540559649467468, 0.4384330213069916, 0.43443620204925537, 0.433421790599823, 0.4220331311225891, 0.42200011014938354, 0.4243597686290741, 0.4032924771308899, 0.3989071846008301, 0.3966195583343506, 0.3769148886203766, 0.37711596488952637, 0.3807559609413147, 0.3643243610858917, 0.3578103184700012, 0.36608389019966125, 0.34951135516166687, 0.35757482051849365, 0.34214919805526733, 0.33404725790023804, 0.32901790738105774, 0.31795254349708557, 0.32430312037467957, 0.3136632442474365, 0.3185812830924988], "accuracy": [0.13089419901371002, 0.33205652236938477, 0.4301941692829132, 0.5365209579467773, 0.6221106648445129, 0.6583014130592346, 0.6782459616661072, 0.698190450668335, 0.6960771083831787, 0.7137762308120728, 0.7305507659912109, 0.7306828498840332, 0.7477215528488159, 0.7543256878852844, 0.7638356685638428, 0.7630431652069092, 0.769911527633667, 0.7746664881706238, 0.7885351777076721, 0.7922335267066956, 0.7957997918128967, 0.7989697456359863, 0.8064984679222107, 0.8055738806724548, 0.8064984679222107, 0.8124422430992126, 0.8193105459213257, 0.8198388814926147, 0.828820526599884, 0.8244617581367493, 0.8355567455291748, 0.8380662798881531, 0.835160493850708, 0.8457271456718445, 0.8424250483512878, 0.8413683772087097, 0.8482366800308228, 0.8470479249954224, 0.8450667262077332, 0.8552370667457581, 0.857218325138092, 0.8535200357437134, 0.8610487580299377, 0.863558292388916, 0.8628978729248047, 0.8660678863525391, 0.863029956817627, 0.8667283058166504, 0.8720116019248962, 0.8767666220664978, 0.8828424215316772, 0.8755778670310974, 0.8790120482444763, 0.8787478804588318], "val_loss": [2.2472336292266846, 2.0176079273223877, 1.1529347896575928, 0.8939808011054993, 0.7783844470977783, 0.7196788191795349, 0.7039868235588074, 0.6762967109680176, 0.6532825231552124, 0.6359386444091797, 0.5861502289772034, 0.5625652074813843, 0.5613101124763489, 0.5462666153907776, 0.5389965772628784, 0.5204869508743286, 0.5224425196647644, 0.5156094431877136, 0.5031014680862427, 0.49908751249313354, 0.4914049804210663, 0.5003727078437805, 0.48079243302345276, 0.47506436705589294, 0.4723980724811554, 0.4740328788757324, 0.4569030702114105, 0.4443432092666626, 0.43195807933807373, 0.42934805154800415, 0.42122477293014526, 0.42679309844970703, 0.42895662784576416, 0.4203829765319824, 0.4094100892543793, 0.40810754895210266, 0.4009878635406494, 0.41246435046195984, 0.41728633642196655, 0.41558223962783813, 0.4099600911140442, 0.4080093502998352, 0.4115125238895416, 0.42265674471855164, 0.41684186458587646, 0.41461291909217834, 0.4101138412952423, 0.4104749262332916, 0.416444331407547, 0.43560904264450073, 0.41733044385910034, 0.4122287631034851, 0.42405667901039124, 0.4111100137233734], "val_accuracy": [0.4203333258628845, 0.4606666564941406, 0.6523333191871643, 0.6826666593551636, 0.7226666808128357, 0.7450000047683716, 0.7326666712760925, 0.7306666374206543, 0.7613333463668823, 0.7536666393280029, 0.7713333368301392, 0.7879999876022339, 0.7923333048820496, 0.7906666398048401, 0.796999990940094, 0.8006666898727417, 0.8019999861717224, 0.8096666932106018, 0.8143333196640015, 0.828000009059906, 0.828000009059906, 0.8253333568572998, 0.8286666870117188, 0.8316666483879089, 0.8330000042915344, 0.8379999995231628, 0.843666672706604, 0.8429999947547913, 0.8529999852180481, 0.8536666631698608, 0.859333336353302, 0.8566666841506958, 0.8569999933242798, 0.8583333492279053, 0.8579999804496765, 0.8643333315849304, 0.8636666536331177, 0.8643333315849304, 0.8679999709129333, 0.871999979019165, 0.8676666617393494, 0.8696666955947876, 0.8703333139419556, 0.8709999918937683, 0.8759999871253967, 0.8723333477973938, 0.8790000081062317, 0.8776666522026062, 0.8793333172798157, 0.8733333349227905, 0.8730000257492065, 0.8740000128746033, 0.8773333430290222, 0.8723333477973938]}, "mapping_values": [1, 10, 5, 5, 3, 11, 7, 4, 2, 28, 17, 11, 3, 2, 1, 1, 0], "tree_depth": 29}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8145714402198792, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5579180717468262, 0.8440940380096436, 0.6937322616577148, 0.6077932119369507, 0.545296847820282, 0.5474969744682312, 0.5114233493804932, 0.5005186200141907, 0.4905224144458771, 0.4580135643482208, 0.46252745389938354, 0.4581833779811859, 0.4903309941291809, 0.4968290627002716, 0.505241334438324, 0.5115208029747009, 0.5247126221656799, 0.5059683918952942, 0.5134050846099854, 0.544219970703125, 0.5181713104248047, 0.4993855953216553, 0.4724479913711548, 0.48282647132873535, 0.49585646390914917, 0.5134853720664978, 0.4817976951599121], "accuracy": [0.4721965491771698, 0.7143045663833618, 0.7433628439903259, 0.7737419009208679, 0.7959318161010742, 0.7940827012062073, 0.8124422430992126, 0.8171972036361694, 0.8137630224227905, 0.8296129703521729, 0.8280280232429504, 0.8388587832450867, 0.8189142942428589, 0.8228767514228821, 0.8345000743865967, 0.821820080280304, 0.8260467648506165, 0.828820526599884, 0.819970965385437, 0.8244617581367493, 0.8141592741012573, 0.830669641494751, 0.8396512866020203, 0.8317263126373291, 0.8333113193511963, 0.8278959393501282, 0.843481719493866], "val_loss": [0.8994060754776001, 0.6073257923126221, 0.5339794754981995, 0.517058789730072, 0.49051162600517273, 0.4929768145084381, 0.4649771451950073, 0.4758621156215668, 0.4616072475910187, 0.4742620885372162, 0.48794978857040405, 0.4609439969062805, 0.5247187614440918, 0.4789975583553314, 0.5420407056808472, 0.5153656601905823, 0.4782320261001587, 0.4995253086090088, 0.5815978050231934, 0.4709379971027374, 0.46864745020866394, 0.46235185861587524, 0.5423699021339417, 0.5202975273132324, 0.47239840030670166, 0.6144834160804749, 0.5281796455383301], "val_accuracy": [0.7046666741371155, 0.7743333578109741, 0.8009999990463257, 0.8149999976158142, 0.8256666660308838, 0.8213333487510681, 0.8339999914169312, 0.8270000219345093, 0.8320000171661377, 0.8433333039283752, 0.8416666388511658, 0.8363333344459534, 0.843999981880188, 0.8399999737739563, 0.828000009059906, 0.8476666808128357, 0.8399999737739563, 0.8496666550636292, 0.8403333425521851, 0.8370000123977661, 0.8500000238418579, 0.8566666841506958, 0.8403333425521851, 0.8429999947547913, 0.840666651725769, 0.8463333249092102, 0.8360000252723694]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 2, 3, 0, 3, 2, 9, 2, 4], [0, 2, 0, 2, 0, 1, 3], [39, 39, 48, 56], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 1, 8, 1, 4, 1, 4, 5, 8], [2, 0, 0, 3, 0, 0, 3, 1, 2, 0], [76, 99, 96, 99, 87, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), grad))), tf.math.add(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.pow(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(beta, tf.math.subtract(tf.math.sqrt(tf.math.subtract(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.square(tf.math.sqrt(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}, "mapping_values": [1, 16, 9, 7, 4, 10, 6, 4, 2, 2, 1, 1, 1, 20, 11, 9, 4], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 2, 3, 0, 3, 1, 7, 6, 6, 7, 0, 9, 4, 3, 0], [0, 1, 0, 2, 0, 2, 0, 1, 2, 2], [39, 39, 60, 85, 48], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 0, 3, 0, 3, 5], [0, 2, 0, 2], [16, 44], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0], [6, 3, 3, 4, 8, 1, 4, 1, 4, 2, 8, 0, 1, 4, 9], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0, 3], [16, 99, 96, 5, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 15, 10, 5, 6, 4, 2, 1, 2, 1, 1, 1, 26, 15, 11, 6], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(tf.math.negative(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.multiply(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), alpha), grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(grad, tf.math.pow(tf.math.add(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.math.negative(alpha)))))), beta), tf.math.subtract(tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 1, 0, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10566666722297668, 0.10566666722297668, 0.10566666722297668, 0.10566666722297668, 0.10566666722297668, 0.10566666722297668]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3, 6, 9], [0, 1, 0, 2, 2, 1], [39, 39, 72], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 8, 1, 9], [0, 1], [0, 2], [0, 1], [0], [0], [21], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 6, 9, 6, 1, 6, 3, 2, 1, 7, 4, 3], [0, 0, 3, 6, 7, 5, 4, 2, 2, 3, 4, 4], [0, 93]], "fitness": -0.09371428936719894, "mapping_values": [1, 12, 7, 5, 3, 5, 4, 1, 2, 2, 1, 1, 1, 4, 3, 1, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), grad), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.309415578842163, 2.310657262802124, 2.3089723587036133, 2.3094868659973145, 2.310420036315918, 2.3098256587982178], "accuracy": [0.09311848133802414, 0.08915598690509796, 0.09642054885625839, 0.0948355570435524, 0.09047681838274002, 0.0944393053650856], "val_loss": [2.3080928325653076, 2.3080928325653076, 2.3080928325653076, 2.3080928325653076, 2.3080928325653076, 2.3080928325653076], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}]