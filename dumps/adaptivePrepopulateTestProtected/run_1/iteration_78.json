[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222564220428467, 1.8654934167861938, 1.392636775970459, 1.0800100564956665, 0.9349965453147888, 0.83723384141922, 0.771166205406189, 0.7229189872741699, 0.6917352080345154, 0.6532851457595825, 0.6217012405395508, 0.6138775944709778, 0.5917757749557495, 0.5793368220329285, 0.5567960739135742, 0.5480981469154358, 0.5474538803100586, 0.5317270755767822, 0.5151227116584778, 0.5055264234542847, 0.5014929175376892, 0.4862228035926819, 0.4727080464363098, 0.47010233998298645, 0.46293196082115173, 0.4504174590110779, 0.447412371635437, 0.4438058137893677, 0.42948198318481445, 0.417126327753067, 0.4136964678764343, 0.40704113245010376, 0.4020131528377533, 0.39997783303260803, 0.39442774653434753, 0.3916949927806854, 0.38260385394096375, 0.3716582953929901, 0.3650337755680084, 0.3573426902294159, 0.36132100224494934, 0.3564379811286926, 0.3445151448249817, 0.33812835812568665, 0.3384065330028534, 0.3359524607658386, 0.33294373750686646, 0.3212839663028717, 0.3217304050922394, 0.3110441267490387, 0.31119072437286377], "accuracy": [0.2685246467590332, 0.4955752193927765, 0.5610883831977844, 0.6197332143783569, 0.6668868064880371, 0.6963412761688232, 0.7205125093460083, 0.7349095344543457, 0.7469290494918823, 0.7604015469551086, 0.7732135653495789, 0.7761194109916687, 0.7878747582435608, 0.7901201844215393, 0.8009510040283203, 0.802271842956543, 0.8050455451011658, 0.8103289008140564, 0.8158763647079468, 0.8197067975997925, 0.817461371421814, 0.8255184292793274, 0.8273676037788391, 0.8333113193511963, 0.832650899887085, 0.8392550349235535, 0.8367455005645752, 0.8408400416374207, 0.8474441766738892, 0.8475762605667114, 0.8519350290298462, 0.8545766472816467, 0.8574824929237366, 0.8544445633888245, 0.8589354157447815, 0.8561616539955139, 0.8632941246032715, 0.8640866279602051, 0.869502067565918, 0.8702945709228516, 0.8702945709228516, 0.8689737319946289, 0.8772949576377869, 0.8754457831382751, 0.8767666220664978, 0.8809932470321655, 0.8776912093162537, 0.8853520154953003, 0.8811253309249878, 0.8886540532112122, 0.8885219693183899], "val_loss": [2.042604923248291, 1.5189800262451172, 1.0515391826629639, 0.8450219035148621, 0.7558016777038574, 0.7093545794487, 0.6593213081359863, 0.6230939030647278, 0.5998342037200928, 0.5830129981040955, 0.5592260956764221, 0.5484577417373657, 0.5345214009284973, 0.5245682597160339, 0.508945107460022, 0.5038147568702698, 0.4949795603752136, 0.4867953658103943, 0.47808560729026794, 0.4682127833366394, 0.46202969551086426, 0.4617370665073395, 0.4514632225036621, 0.4495610296726227, 0.4391477108001709, 0.43453720211982727, 0.42648962140083313, 0.42570948600769043, 0.4242604672908783, 0.4146496057510376, 0.41664713621139526, 0.4113439619541168, 0.41593310236930847, 0.4013250470161438, 0.40437138080596924, 0.39875122904777527, 0.3905998170375824, 0.3918660581111908, 0.38664665818214417, 0.3956036865711212, 0.38548287749290466, 0.3855803310871124, 0.3777529299259186, 0.3802799582481384, 0.3779101073741913, 0.371540904045105, 0.3776323199272156, 0.36875513195991516, 0.37442195415496826, 0.3655129075050354, 0.3628164827823639], "val_accuracy": [0.5523333549499512, 0.6656666398048401, 0.6830000281333923, 0.7059999704360962, 0.7336666584014893, 0.7506666779518127, 0.7580000162124634, 0.7689999938011169, 0.7736666798591614, 0.7846666574478149, 0.7950000166893005, 0.7963333129882812, 0.7993333339691162, 0.8100000023841858, 0.8173333406448364, 0.8190000057220459, 0.8213333487510681, 0.8209999799728394, 0.8286666870117188, 0.828000009059906, 0.8323333263397217, 0.8336666822433472, 0.8333333134651184, 0.8349999785423279, 0.8386666774749756, 0.8393333554267883, 0.8429999947547913, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8446666598320007, 0.8463333249092102, 0.8503333330154419, 0.8529999852180481, 0.8493333458900452, 0.8550000190734863, 0.8546666502952576, 0.856333315372467, 0.8613333106040955, 0.856333315372467, 0.859000027179718, 0.8550000190734863, 0.8586666584014893, 0.8633333444595337, 0.8619999885559082, 0.8659999966621399, 0.859666645526886, 0.862666666507721, 0.8603333234786987, 0.8610000014305115, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8665714263916016, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2238569259643555, 1.868006706237793, 1.3968132734298706, 1.1078895330429077, 0.9329771995544434, 0.8380563259124756, 0.7679013609886169, 0.7278556823730469, 0.6870998740196228, 0.6649996042251587, 0.6339134573936462, 0.6068981885910034, 0.5891090631484985, 0.5770187973976135, 0.5552709102630615, 0.5447158217430115, 0.5202484130859375, 0.5124338269233704, 0.5037122964859009, 0.4961390495300293, 0.4866905212402344, 0.47859323024749756, 0.46771565079689026, 0.45940110087394714, 0.4483664333820343, 0.4420945942401886, 0.4380999505519867, 0.42566239833831787, 0.422341525554657, 0.4125867784023285, 0.40269535779953003, 0.4043046236038208, 0.3902978301048279, 0.3821902573108673, 0.3838908076286316, 0.37581107020378113, 0.3721882700920105, 0.3620101809501648, 0.3609517812728882, 0.35650256276130676, 0.3496520519256592, 0.3440929055213928, 0.34384626150131226, 0.3333814740180969, 0.33492350578308105, 0.32568860054016113, 0.31755298376083374, 0.32036834955215454, 0.31817230582237244, 0.3078771233558655], "accuracy": [0.27565711736679077, 0.49332982301712036, 0.5632016658782959, 0.6132611036300659, 0.6728305220603943, 0.7043983340263367, 0.7246070504188538, 0.7367587089538574, 0.7504953145980835, 0.7594769597053528, 0.7696473598480225, 0.7825914621353149, 0.7792893648147583, 0.7943468689918518, 0.7993659973144531, 0.8029322624206543, 0.8169330358505249, 0.8125742673873901, 0.8228767514228821, 0.8234050869941711, 0.8236692547798157, 0.8315942287445068, 0.8325188159942627, 0.8378021121025085, 0.8437458872795105, 0.8438779711723328, 0.8446704745292664, 0.8511425256729126, 0.8496896028518677, 0.8532558679580688, 0.8557654023170471, 0.8560295701026917, 0.8599920868873596, 0.8619733452796936, 0.8610487580299377, 0.86553955078125, 0.8687095642089844, 0.8749174475669861, 0.8701624870300293, 0.8687095642089844, 0.8739928603172302, 0.8784837126731873, 0.8804649114608765, 0.882710337638855, 0.880729079246521, 0.8845595121383667, 0.8838990926742554, 0.8838990926742554, 0.8886540532112122, 0.8864086866378784], "val_loss": [2.0404045581817627, 1.517621397972107, 1.0462380647659302, 0.8447731137275696, 0.7514586448669434, 0.6976575255393982, 0.6552455425262451, 0.6224139928817749, 0.5942155718803406, 0.5738937854766846, 0.554847002029419, 0.542417049407959, 0.5293450355529785, 0.515834629535675, 0.5035472512245178, 0.4937673807144165, 0.48427364230155945, 0.4785783290863037, 0.46580371260643005, 0.4663311243057251, 0.45620250701904297, 0.45271405577659607, 0.44524288177490234, 0.44079169631004333, 0.43203237652778625, 0.42874884605407715, 0.4269038140773773, 0.4228346347808838, 0.41799110174179077, 0.4145337641239166, 0.4078561067581177, 0.4060254693031311, 0.40288281440734863, 0.40010201930999756, 0.39591994881629944, 0.39403313398361206, 0.3892095983028412, 0.3876280188560486, 0.38533324003219604, 0.3842307925224304, 0.3813529312610626, 0.3787573277950287, 0.3758140504360199, 0.382245808839798, 0.3705492317676544, 0.3742494285106659, 0.37174656987190247, 0.3640550971031189, 0.36369943618774414, 0.36240819096565247], "val_accuracy": [0.5293333530426025, 0.6493333578109741, 0.6826666593551636, 0.7070000171661377, 0.7323333621025085, 0.7433333396911621, 0.7536666393280029, 0.7673333287239075, 0.7776666879653931, 0.7866666913032532, 0.7929999828338623, 0.7986666560173035, 0.8076666593551636, 0.8113333582878113, 0.8146666884422302, 0.8193333148956299, 0.8196666836738586, 0.831333339214325, 0.8256666660308838, 0.8286666870117188, 0.8356666564941406, 0.8366666436195374, 0.8433333039283752, 0.8403333425521851, 0.8453333377838135, 0.8433333039283752, 0.8473333120346069, 0.8463333249092102, 0.8476666808128357, 0.8496666550636292, 0.8566666841506958, 0.8519999980926514, 0.8560000061988831, 0.856333315372467, 0.8529999852180481, 0.859000027179718, 0.8583333492279053, 0.8560000061988831, 0.859333336353302, 0.859000027179718, 0.8606666922569275, 0.8650000095367432, 0.8646666407585144, 0.859333336353302, 0.8676666617393494, 0.8659999966621399, 0.8633333444595337, 0.8669999837875366, 0.8676666617393494, 0.8666666746139526]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 1], [0, 7], [0, 1], [0], [0, 0, 1], [0, 8], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8502857089042664, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.292362928390503, 2.1859049797058105, 1.758670449256897, 1.3586418628692627, 1.0346628427505493, 0.9258583784103394, 0.8504740595817566, 0.8125872611999512, 0.7486562728881836, 0.7389606833457947, 0.7064276337623596, 0.6847102642059326, 0.6459754705429077, 0.6226981282234192, 0.598362386226654, 0.5865607261657715, 0.564551591873169, 0.5652956962585449, 0.5592092275619507, 0.5482696294784546, 0.5371614098548889, 0.5354549884796143, 0.5084319710731506, 0.4995747208595276, 0.4841044843196869, 0.47954168915748596, 0.4695798456668854, 0.4602814018726349, 0.4510074257850647, 0.44233405590057373, 0.4508615732192993, 0.444735586643219, 0.4244360327720642, 0.42390331625938416, 0.4160849452018738, 0.4179770052433014, 0.3985499143600464, 0.38340291380882263, 0.37281614542007446, 0.3710048496723175, 0.375458687543869, 0.37169554829597473, 0.3567711412906647, 0.3573714792728424, 0.34575846791267395, 0.3575015664100647, 0.35095733404159546, 0.3440665304660797, 0.33733370900154114, 0.3467530608177185, 0.3284611403942108], "accuracy": [0.1372341811656952, 0.33905693888664246, 0.4411570429801941, 0.5392946600914001, 0.635979413986206, 0.6546030640602112, 0.6765288710594177, 0.6988508701324463, 0.7077004313468933, 0.7169462442398071, 0.7277770638465881, 0.7366266250610352, 0.750231146812439, 0.7565711140632629, 0.7693831920623779, 0.7755910754203796, 0.7835160493850708, 0.783119797706604, 0.7843085527420044, 0.791969358921051, 0.7994980812072754, 0.7857614755630493, 0.8010830879211426, 0.8090080618858337, 0.8133667707443237, 0.813498854637146, 0.8214238286018372, 0.8215559124946594, 0.8255184292793274, 0.8260467648506165, 0.8257825970649719, 0.8350284099578857, 0.8333113193511963, 0.8400475382804871, 0.8380662798881531, 0.8405758738517761, 0.8492933511734009, 0.8519350290298462, 0.8553691506385803, 0.8543124794960022, 0.858671247959137, 0.8580108284950256, 0.8617091774940491, 0.8593316674232483, 0.8663320541381836, 0.8721436858177185, 0.8651432991027832, 0.8693699836730957, 0.8669924736022949, 0.8642187118530273, 0.8710870146751404], "val_loss": [2.2456204891204834, 2.013136386871338, 1.118588924407959, 0.8521267771720886, 0.778296709060669, 0.6954242587089539, 0.659919023513794, 0.6483100652694702, 0.6216951608657837, 0.6002936363220215, 0.5775929093360901, 0.5502985715866089, 0.5307772755622864, 0.5281609892845154, 0.5099779367446899, 0.5064325332641602, 0.5014677047729492, 0.4867817461490631, 0.48655790090560913, 0.48040568828582764, 0.47867557406425476, 0.4825134575366974, 0.47802236676216125, 0.4707019031047821, 0.46507683396339417, 0.4626440703868866, 0.455537348985672, 0.4508315324783325, 0.4512071907520294, 0.44128450751304626, 0.440988689661026, 0.4324292540550232, 0.43988826870918274, 0.4407675266265869, 0.4192623794078827, 0.4172978401184082, 0.41613566875457764, 0.42467424273490906, 0.42144864797592163, 0.41638070344924927, 0.43508607149124146, 0.4308062195777893, 0.41673535108566284, 0.42107686400413513, 0.4378501772880554, 0.4396803379058838, 0.42537206411361694, 0.4159347712993622, 0.43317723274230957, 0.4299963414669037, 0.4367198944091797], "val_accuracy": [0.4103333353996277, 0.48133334517478943, 0.6553333401679993, 0.6926666498184204, 0.7113333344459534, 0.746666669845581, 0.7456666827201843, 0.7509999871253967, 0.7696666717529297, 0.7829999923706055, 0.7776666879653931, 0.7893333435058594, 0.7996666431427002, 0.7940000295639038, 0.8053333163261414, 0.8066666722297668, 0.8066666722297668, 0.8096666932106018, 0.8096666932106018, 0.8236666917800903, 0.8299999833106995, 0.8203333616256714, 0.8270000219345093, 0.8320000171661377, 0.8339999914169312, 0.8379999995231628, 0.840666651725769, 0.8393333554267883, 0.8370000123977661, 0.8433333039283752, 0.8486666679382324, 0.8500000238418579, 0.8503333330154419, 0.8553333282470703, 0.8566666841506958, 0.8556666374206543, 0.8560000061988831, 0.8583333492279053, 0.8606666922569275, 0.859666645526886, 0.8616666793823242, 0.859000027179718, 0.8576666712760925, 0.8566666841506958, 0.859000027179718, 0.862666666507721, 0.8610000014305115, 0.8619999885559082, 0.8579999804496765, 0.8603333234786987, 0.859000027179718]}, "mapping_values": [1, 10, 5, 5, 3, 4, 2, 2, 1, 3, 2, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8391428589820862, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.6068174839019775, 0.838611364364624, 0.6829402446746826, 0.6250729560852051, 0.5743861794471741, 0.5454007387161255, 0.5047996044158936, 0.4906010329723358, 0.49304091930389404, 0.4685364365577698, 0.4919302463531494, 0.46042123436927795, 0.4423482120037079, 0.4564706087112427, 0.4523252844810486, 0.47504469752311707, 0.49816665053367615], "accuracy": [0.4515916109085083, 0.6988508701324463, 0.7490423917770386, 0.7746664881706238, 0.793422281742096, 0.7987055778503418, 0.8181217908859253, 0.8226125836372375, 0.8211596608161926, 0.8290846943855286, 0.8259146809577942, 0.8356888294219971, 0.8392550349235535, 0.8359529972076416, 0.8376700282096863, 0.8393871188163757, 0.8411042094230652], "val_loss": [0.8461149334907532, 0.616197943687439, 0.5381669402122498, 0.520526647567749, 0.4764457046985626, 0.4601207971572876, 0.49158909916877747, 0.44910773634910583, 0.4647955000400543, 0.4751861095428467, 0.5112931728363037, 0.4952652156352997, 0.4792235493659973, 0.48730215430259705, 0.5251847505569458, 0.49359798431396484, 0.6158268451690674], "val_accuracy": [0.706333339214325, 0.7776666879653931, 0.8113333582878113, 0.8173333406448364, 0.8336666822433472, 0.8386666774749756, 0.8423333168029785, 0.8513333201408386, 0.8526666760444641, 0.847000002861023, 0.8546666502952576, 0.8616666793823242, 0.8493333458900452, 0.8529999852180481, 0.8479999899864197, 0.8556666374206543, 0.8606666922569275]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 2], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 2, 1], [0, 2, 2, 3, 1], [16, 16], [0, 1], [9], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 0, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 80, 96, 41, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.add(beta, tf.math.subtract(grad, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))))), tf.math.add(alpha, tf.math.sqrt(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}, "mapping_values": [1, 4, 2, 2, 1, 11, 6, 5, 1, 1, 1, 0, 1, 20, 11, 9, 5], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 3], [0, 2, 0, 3, 3], [41, 16], [0, 1], [8], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 3, 5, 6, 8, 1, 0, 1, 4, 2, 8, 0], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 1, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 11, 6, 5, 2, 2, 1, 1, 1, 20, 12, 8, 5], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))))), tf.math.sqrt(sigma))), tf.math.negative(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 3], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 9, 9], [4, 0, 0, 3, 3, 0, 3, 3, 2, 0], [16, 99, 90, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(sigma, tf.math.pow(tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))))), sigma), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}, "mapping_values": [1, 7, 4, 3, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 13, 8, 5], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 2, 3, 0, 3], [0, 2, 0, 2], [89, 39, 39], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 0, 2, 5, 3, 1, 0], [0, 27, 16, 0], [0, 1], [5], [0, 5], [0, 95], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1], [0, 4, 1, 8, 3, 0, 7, 7, 9, 1, 9, 4, 3, 4, 0, 6, 9, 3, 4, 8, 3, 7, 6, 3, 5, 3, 4, 5, 3, 6, 3, 9, 8, 0], [2, 6, 3, 0, 6, 4, 6, 3, 3, 1, 3, 3, 7, 1, 3, 5, 7, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 1, 0, 1, 1, 2, 1, 1, 1, 52, 34, 18, 6], "tree_depth": 33, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.subtract(beta, tf.math.sqrt(grad)), tf.math.multiply(tf.math.negative(sigma), tf.math.add(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.multiply(tf.math.pow(tf.math.negative(tf.math.divide_no_nan(grad, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.pow(tf.math.sqrt(tf.math.multiply(grad, tf.math.add(tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.square(sigma)), tf.math.multiply(tf.math.pow(sigma, alpha), tf.math.square(sigma))), sigma))), grad), alpha)), tf.math.multiply(sigma, grad)), tf.math.divide_no_nan(tf.math.multiply(grad, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}]