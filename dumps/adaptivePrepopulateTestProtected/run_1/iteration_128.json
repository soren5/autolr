[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222564220428467, 1.8654934167861938, 1.392636775970459, 1.0800100564956665, 0.9349965453147888, 0.83723384141922, 0.771166205406189, 0.7229189872741699, 0.6917352080345154, 0.6532851457595825, 0.6217012405395508, 0.6138775944709778, 0.5917757749557495, 0.5793368220329285, 0.5567960739135742, 0.5480981469154358, 0.5474538803100586, 0.5317270755767822, 0.5151227116584778, 0.5055264234542847, 0.5014929175376892, 0.4862228035926819, 0.4727080464363098, 0.47010233998298645, 0.46293196082115173, 0.4504174590110779, 0.447412371635437, 0.4438058137893677, 0.42948198318481445, 0.417126327753067, 0.4136964678764343, 0.40704113245010376, 0.4020131528377533, 0.39997783303260803, 0.39442774653434753, 0.3916949927806854, 0.38260385394096375, 0.3716582953929901, 0.3650337755680084, 0.3573426902294159, 0.36132100224494934, 0.3564379811286926, 0.3445151448249817, 0.33812835812568665, 0.3384065330028534, 0.3359524607658386, 0.33294373750686646, 0.3212839663028717, 0.3217304050922394, 0.3110441267490387, 0.31119072437286377], "accuracy": [0.2685246467590332, 0.4955752193927765, 0.5610883831977844, 0.6197332143783569, 0.6668868064880371, 0.6963412761688232, 0.7205125093460083, 0.7349095344543457, 0.7469290494918823, 0.7604015469551086, 0.7732135653495789, 0.7761194109916687, 0.7878747582435608, 0.7901201844215393, 0.8009510040283203, 0.802271842956543, 0.8050455451011658, 0.8103289008140564, 0.8158763647079468, 0.8197067975997925, 0.817461371421814, 0.8255184292793274, 0.8273676037788391, 0.8333113193511963, 0.832650899887085, 0.8392550349235535, 0.8367455005645752, 0.8408400416374207, 0.8474441766738892, 0.8475762605667114, 0.8519350290298462, 0.8545766472816467, 0.8574824929237366, 0.8544445633888245, 0.8589354157447815, 0.8561616539955139, 0.8632941246032715, 0.8640866279602051, 0.869502067565918, 0.8702945709228516, 0.8702945709228516, 0.8689737319946289, 0.8772949576377869, 0.8754457831382751, 0.8767666220664978, 0.8809932470321655, 0.8776912093162537, 0.8853520154953003, 0.8811253309249878, 0.8886540532112122, 0.8885219693183899], "val_loss": [2.042604923248291, 1.5189800262451172, 1.0515391826629639, 0.8450219035148621, 0.7558016777038574, 0.7093545794487, 0.6593213081359863, 0.6230939030647278, 0.5998342037200928, 0.5830129981040955, 0.5592260956764221, 0.5484577417373657, 0.5345214009284973, 0.5245682597160339, 0.508945107460022, 0.5038147568702698, 0.4949795603752136, 0.4867953658103943, 0.47808560729026794, 0.4682127833366394, 0.46202969551086426, 0.4617370665073395, 0.4514632225036621, 0.4495610296726227, 0.4391477108001709, 0.43453720211982727, 0.42648962140083313, 0.42570948600769043, 0.4242604672908783, 0.4146496057510376, 0.41664713621139526, 0.4113439619541168, 0.41593310236930847, 0.4013250470161438, 0.40437138080596924, 0.39875122904777527, 0.3905998170375824, 0.3918660581111908, 0.38664665818214417, 0.3956036865711212, 0.38548287749290466, 0.3855803310871124, 0.3777529299259186, 0.3802799582481384, 0.3779101073741913, 0.371540904045105, 0.3776323199272156, 0.36875513195991516, 0.37442195415496826, 0.3655129075050354, 0.3628164827823639], "val_accuracy": [0.5523333549499512, 0.6656666398048401, 0.6830000281333923, 0.7059999704360962, 0.7336666584014893, 0.7506666779518127, 0.7580000162124634, 0.7689999938011169, 0.7736666798591614, 0.7846666574478149, 0.7950000166893005, 0.7963333129882812, 0.7993333339691162, 0.8100000023841858, 0.8173333406448364, 0.8190000057220459, 0.8213333487510681, 0.8209999799728394, 0.8286666870117188, 0.828000009059906, 0.8323333263397217, 0.8336666822433472, 0.8333333134651184, 0.8349999785423279, 0.8386666774749756, 0.8393333554267883, 0.8429999947547913, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8446666598320007, 0.8463333249092102, 0.8503333330154419, 0.8529999852180481, 0.8493333458900452, 0.8550000190734863, 0.8546666502952576, 0.856333315372467, 0.8613333106040955, 0.856333315372467, 0.859000027179718, 0.8550000190734863, 0.8586666584014893, 0.8633333444595337, 0.8619999885559082, 0.8659999966621399, 0.859666645526886, 0.862666666507721, 0.8603333234786987, 0.8610000014305115, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8585714101791382, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2207112312316895, 1.8565973043441772, 1.3857203722000122, 1.099811315536499, 0.9308968782424927, 0.8435608148574829, 0.7790183424949646, 0.7332257628440857, 0.7089753746986389, 0.6611790060997009, 0.6345892548561096, 0.6172891855239868, 0.6021072864532471, 0.5940265655517578, 0.5747681260108948, 0.5598976612091064, 0.541268527507782, 0.5248479247093201, 0.5146897435188293, 0.506057620048523, 0.48540112376213074, 0.48169955611228943, 0.47370845079421997, 0.46624240279197693, 0.45529428124427795, 0.449207067489624, 0.4439038634300232, 0.4371257424354553, 0.42787298560142517, 0.42984282970428467, 0.41295596957206726, 0.40609171986579895, 0.39972174167633057, 0.3890324532985687, 0.39149120450019836, 0.3847815692424774, 0.3843437135219574, 0.371195912361145, 0.3711051642894745, 0.35477930307388306, 0.3585608899593353, 0.3454371392726898, 0.3482488691806793, 0.34408485889434814, 0.33678552508354187, 0.3298746347427368, 0.3239579200744629, 0.3234040141105652, 0.31515762209892273, 0.3217531144618988, 0.30908817052841187, 0.306332528591156, 0.29719799757003784, 0.297037810087204, 0.2898305356502533, 0.2890801727771759, 0.28603649139404297], "accuracy": [0.29243165254592896, 0.4823669195175171, 0.5632016658782959, 0.6174877882003784, 0.6676793098449707, 0.6985867023468018, 0.7202483415603638, 0.7362303733825684, 0.7436270117759705, 0.7556465268135071, 0.7693831920623779, 0.7728173136711121, 0.7804781198501587, 0.7835160493850708, 0.7891955971717834, 0.7961959838867188, 0.8031964302062988, 0.8113855719566345, 0.8156121969223022, 0.8169330358505249, 0.8293488025665283, 0.8265751004219055, 0.8280280232429504, 0.8309338092803955, 0.8342359066009521, 0.8372738361358643, 0.8383304476737976, 0.8407079577445984, 0.8441421389579773, 0.8461233377456665, 0.8516708612442017, 0.8555012345314026, 0.8568220734596252, 0.8615770936012268, 0.8597279191017151, 0.8602562546730042, 0.8627657890319824, 0.86553955078125, 0.8671245574951172, 0.8725399374961853, 0.8697662353515625, 0.8784837126731873, 0.873860776424408, 0.8757099509239197, 0.880729079246521, 0.8849557638168335, 0.8803328275680542, 0.8829745054244995, 0.8857482671737671, 0.8841632604598999, 0.8893144726753235, 0.8860124349594116, 0.898428201675415, 0.8957865834236145, 0.8943336606025696, 0.8948619961738586, 0.8897107243537903], "val_loss": [2.0358340740203857, 1.5055238008499146, 1.039394736289978, 0.8383520245552063, 0.7533112168312073, 0.7016607522964478, 0.6614550948143005, 0.6292083859443665, 0.601746678352356, 0.5774980783462524, 0.5612725615501404, 0.5447091460227966, 0.5304563641548157, 0.5197401642799377, 0.5066867470741272, 0.4976569712162018, 0.486275315284729, 0.477623850107193, 0.46955227851867676, 0.4668124318122864, 0.46004635095596313, 0.4518778920173645, 0.4471702575683594, 0.4406263530254364, 0.43732020258903503, 0.4306093454360962, 0.430685818195343, 0.4270602762699127, 0.4210233688354492, 0.417614221572876, 0.4172012507915497, 0.40898647904396057, 0.4092535078525543, 0.4076503813266754, 0.40175244212150574, 0.40105268359184265, 0.40008631348609924, 0.39578238129615784, 0.39222559332847595, 0.3897113502025604, 0.3892538547515869, 0.3873854875564575, 0.38612109422683716, 0.38010942935943604, 0.38562947511672974, 0.3843660354614258, 0.3786766827106476, 0.3759734630584717, 0.3786923289299011, 0.37650904059410095, 0.3756539821624756, 0.3747635781764984, 0.3724932074546814, 0.3728739321231842, 0.37009748816490173, 0.3755107522010803, 0.36535701155662537], "val_accuracy": [0.5413333177566528, 0.6503333449363708, 0.6769999861717224, 0.7039999961853027, 0.7200000286102295, 0.7396666407585144, 0.753333330154419, 0.7576666474342346, 0.7766666412353516, 0.7786666750907898, 0.7839999794960022, 0.7926666736602783, 0.7990000247955322, 0.8103333115577698, 0.8146666884422302, 0.815666675567627, 0.8230000138282776, 0.8256666660308838, 0.8276666402816772, 0.8303333520889282, 0.8360000252723694, 0.8360000252723694, 0.8366666436195374, 0.8416666388511658, 0.8410000205039978, 0.8429999947547913, 0.8433333039283752, 0.8446666598320007, 0.8486666679382324, 0.8536666631698608, 0.847000002861023, 0.8510000109672546, 0.8516666889190674, 0.8533333539962769, 0.8546666502952576, 0.8539999723434448, 0.8510000109672546, 0.8529999852180481, 0.8553333282470703, 0.8553333282470703, 0.8576666712760925, 0.8576666712760925, 0.859333336353302, 0.8560000061988831, 0.8579999804496765, 0.8576666712760925, 0.8569999933242798, 0.8643333315849304, 0.8613333106040955, 0.8579999804496765, 0.859333336353302, 0.8679999709129333, 0.8600000143051147, 0.8656666874885559, 0.8643333315849304, 0.8656666874885559, 0.8676666617393494]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8237142562866211, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5354238748550415, 0.8355029225349426, 0.6819844841957092, 0.6026168465614319, 0.5645396113395691, 0.6092053651809692, 0.5574805736541748, 0.5415911078453064, 0.5239809155464172, 0.5092162489891052, 0.4978775978088379, 0.502783477306366, 0.4710577726364136, 0.49772799015045166, 0.4904806613922119, 0.5318481922149658, 0.505041778087616, 0.5307135581970215, 0.5880898833274841, 0.5449797511100769, 0.5243855714797974], "accuracy": [0.4830273389816284, 0.7080966830253601, 0.7401928305625916, 0.7692511081695557, 0.7865539789199829, 0.7833839654922485, 0.7964601516723633, 0.8035926818847656, 0.8067626357078552, 0.8120459914207458, 0.819442629814148, 0.819442629814148, 0.8296129703521729, 0.8286884427070618, 0.8219521641731262, 0.824329674243927, 0.8236692547798157, 0.8400475382804871, 0.8103289008140564, 0.8108572363853455, 0.8274996876716614], "val_loss": [0.790273904800415, 0.6106019020080566, 0.5335774421691895, 0.5090755820274353, 0.5287287831306458, 0.5154947638511658, 0.5497283339500427, 0.5102444887161255, 0.516667902469635, 0.5021654367446899, 0.5283938646316528, 0.5194774866104126, 0.5656118392944336, 0.5741128325462341, 0.5198702216148376, 0.5316146612167358, 0.5968225002288818, 0.6463069915771484, 0.5810774564743042, 0.5622183084487915, 0.5537943243980408], "val_accuracy": [0.7286666631698608, 0.7649999856948853, 0.7926666736602783, 0.8113333582878113, 0.8130000233650208, 0.8223333358764648, 0.8169999718666077, 0.8246666789054871, 0.8299999833106995, 0.8266666531562805, 0.8393333554267883, 0.8363333344459534, 0.846666693687439, 0.8416666388511658, 0.840666651725769, 0.8503333330154419, 0.843999981880188, 0.8393333554267883, 0.843666672706604, 0.8373333215713501, 0.8346666693687439]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 1], [0], [0], [0], [0, 0], [0, 9], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.7951428294181824, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2936220169067383, 2.187868356704712, 1.7723724842071533, 1.338694453239441, 1.0695589780807495, 0.9283836483955383, 0.8321576118469238, 0.8016664385795593, 0.7513788342475891, 0.7330591082572937, 0.6986652612686157, 0.6961476802825928, 0.6617255806922913, 0.6374508738517761, 0.6232625246047974, 0.6011738181114197, 0.5766950249671936, 0.5627806782722473, 0.548670768737793, 0.5541885495185852], "accuracy": [0.12891295552253723, 0.3337736129760742, 0.43323206901550293, 0.5489367246627808, 0.6347906589508057, 0.6561880707740784, 0.6889446377754211, 0.7014925479888916, 0.7106062769889832, 0.7136441469192505, 0.7366266250610352, 0.7334566116333008, 0.7498348951339722, 0.7572315335273743, 0.7607977986335754, 0.7675340175628662, 0.7835160493850708, 0.7817989587783813, 0.791969358921051, 0.7921014428138733], "val_loss": [2.2453794479370117, 2.019517660140991, 1.1411259174346924, 0.8688167333602905, 0.7620201706886292, 0.7162192463874817, 0.6568468809127808, 0.6379331350326538, 0.6252357363700867, 0.6042810082435608, 0.5753340125083923, 0.5500031113624573, 0.533135175704956, 0.5236328840255737, 0.50844407081604, 0.505271315574646, 0.5020518898963928, 0.48591527342796326, 0.4809083342552185, 0.47415006160736084], "val_accuracy": [0.4183333218097687, 0.445333331823349, 0.6486666798591614, 0.6996666789054871, 0.7123333215713501, 0.7360000014305115, 0.7689999938011169, 0.7586666941642761, 0.750333309173584, 0.7789999842643738, 0.7720000147819519, 0.7923333048820496, 0.796999990940094, 0.7956666946411133, 0.8133333325386047, 0.8059999942779541, 0.8083333373069763, 0.8083333373069763, 0.809333324432373, 0.8130000233650208]}, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 2, 2, 0, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 4], [0, 1, 0, 2, 3], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 9, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 2, 5, 6, 8, 1, 4, 1, 4, 1, 8, 9], [0, 0, 1, 3, 0, 0, 3, 1, 2, 3], [94, 99, 96, 99, 61, 16]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 2, 2, 0, 1, 1, 0, 1, 1, 20, 12, 8, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(alpha, sigma))), tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), sigma), tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10236428678035736, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 6, 1, 4, 2, 8], [0, 0, 0, 4, 0, 0, 3, 4, 2, 0], [16, 62, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), grad), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3], [0, 0, 0, 2], [39, 39, 24], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1], [0, 2, 3, 0, 3, 5, 6, 0], [0, 2, 2, 3, 4], [16, 65], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1], [6, 3, 3, 6, 4, 6, 4, 2, 4, 2, 2, 6, 5, 1, 5, 7, 8, 4, 0, 8, 6, 4, 8, 4, 7, 3, 3, 1, 1, 9, 3, 4, 4, 5, 8, 7, 0, 6, 6, 8, 9, 5, 9, 2, 7, 1], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 0, 7, 0, 1, 3, 4, 0, 6, 1, 6, 0, 1, 4, 4, 3, 0, 7, 2, 2, 4], [94, 99, 96, 2, 61, 4, 15, 64, 10, 23, 3, 94, 42, 52]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(beta, tf.math.square(tf.math.divide_no_nan(tf.math.negative(grad), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.pow(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.add(tf.math.pow(tf.math.add(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.divide_no_nan(tf.math.square(sigma), alpha), beta)), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.square(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))))), alpha), tf.math.sqrt(tf.math.pow(tf.math.negative(tf.math.sqrt(sigma)), tf.math.divide_no_nan(tf.math.pow(tf.math.sqrt(tf.math.pow(grad, tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.math.pow(alpha, tf.math.pow(tf.math.square(tf.math.sqrt(tf.math.add(grad, tf.math.negative(tf.math.divide_no_nan(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))))), alpha)), grad))), grad), sigma))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(grad, tf.math.subtract(beta, beta)), grad)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}, "mapping_values": [1, 7, 4, 3, 3, 13, 8, 5, 1, 2, 1, 1, 1, 76, 46, 30, 14], "tree_depth": 46}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 1, 3], [12, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [4, 0, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 4, 3, 0, 0, 4, 1, 2, 0], [16, 10, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 10, 6, 4, 1, 2, 1, 1, 1, 15, 8, 7, 4], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(alpha, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))))), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}]