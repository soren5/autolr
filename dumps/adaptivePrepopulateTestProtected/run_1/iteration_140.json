[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222564220428467, 1.8654934167861938, 1.392636775970459, 1.0800100564956665, 0.9349965453147888, 0.83723384141922, 0.771166205406189, 0.7229189872741699, 0.6917352080345154, 0.6532851457595825, 0.6217012405395508, 0.6138775944709778, 0.5917757749557495, 0.5793368220329285, 0.5567960739135742, 0.5480981469154358, 0.5474538803100586, 0.5317270755767822, 0.5151227116584778, 0.5055264234542847, 0.5014929175376892, 0.4862228035926819, 0.4727080464363098, 0.47010233998298645, 0.46293196082115173, 0.4504174590110779, 0.447412371635437, 0.4438058137893677, 0.42948198318481445, 0.417126327753067, 0.4136964678764343, 0.40704113245010376, 0.4020131528377533, 0.39997783303260803, 0.39442774653434753, 0.3916949927806854, 0.38260385394096375, 0.3716582953929901, 0.3650337755680084, 0.3573426902294159, 0.36132100224494934, 0.3564379811286926, 0.3445151448249817, 0.33812835812568665, 0.3384065330028534, 0.3359524607658386, 0.33294373750686646, 0.3212839663028717, 0.3217304050922394, 0.3110441267490387, 0.31119072437286377], "accuracy": [0.2685246467590332, 0.4955752193927765, 0.5610883831977844, 0.6197332143783569, 0.6668868064880371, 0.6963412761688232, 0.7205125093460083, 0.7349095344543457, 0.7469290494918823, 0.7604015469551086, 0.7732135653495789, 0.7761194109916687, 0.7878747582435608, 0.7901201844215393, 0.8009510040283203, 0.802271842956543, 0.8050455451011658, 0.8103289008140564, 0.8158763647079468, 0.8197067975997925, 0.817461371421814, 0.8255184292793274, 0.8273676037788391, 0.8333113193511963, 0.832650899887085, 0.8392550349235535, 0.8367455005645752, 0.8408400416374207, 0.8474441766738892, 0.8475762605667114, 0.8519350290298462, 0.8545766472816467, 0.8574824929237366, 0.8544445633888245, 0.8589354157447815, 0.8561616539955139, 0.8632941246032715, 0.8640866279602051, 0.869502067565918, 0.8702945709228516, 0.8702945709228516, 0.8689737319946289, 0.8772949576377869, 0.8754457831382751, 0.8767666220664978, 0.8809932470321655, 0.8776912093162537, 0.8853520154953003, 0.8811253309249878, 0.8886540532112122, 0.8885219693183899], "val_loss": [2.042604923248291, 1.5189800262451172, 1.0515391826629639, 0.8450219035148621, 0.7558016777038574, 0.7093545794487, 0.6593213081359863, 0.6230939030647278, 0.5998342037200928, 0.5830129981040955, 0.5592260956764221, 0.5484577417373657, 0.5345214009284973, 0.5245682597160339, 0.508945107460022, 0.5038147568702698, 0.4949795603752136, 0.4867953658103943, 0.47808560729026794, 0.4682127833366394, 0.46202969551086426, 0.4617370665073395, 0.4514632225036621, 0.4495610296726227, 0.4391477108001709, 0.43453720211982727, 0.42648962140083313, 0.42570948600769043, 0.4242604672908783, 0.4146496057510376, 0.41664713621139526, 0.4113439619541168, 0.41593310236930847, 0.4013250470161438, 0.40437138080596924, 0.39875122904777527, 0.3905998170375824, 0.3918660581111908, 0.38664665818214417, 0.3956036865711212, 0.38548287749290466, 0.3855803310871124, 0.3777529299259186, 0.3802799582481384, 0.3779101073741913, 0.371540904045105, 0.3776323199272156, 0.36875513195991516, 0.37442195415496826, 0.3655129075050354, 0.3628164827823639], "val_accuracy": [0.5523333549499512, 0.6656666398048401, 0.6830000281333923, 0.7059999704360962, 0.7336666584014893, 0.7506666779518127, 0.7580000162124634, 0.7689999938011169, 0.7736666798591614, 0.7846666574478149, 0.7950000166893005, 0.7963333129882812, 0.7993333339691162, 0.8100000023841858, 0.8173333406448364, 0.8190000057220459, 0.8213333487510681, 0.8209999799728394, 0.8286666870117188, 0.828000009059906, 0.8323333263397217, 0.8336666822433472, 0.8333333134651184, 0.8349999785423279, 0.8386666774749756, 0.8393333554267883, 0.8429999947547913, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8446666598320007, 0.8463333249092102, 0.8503333330154419, 0.8529999852180481, 0.8493333458900452, 0.8550000190734863, 0.8546666502952576, 0.856333315372467, 0.8613333106040955, 0.856333315372467, 0.859000027179718, 0.8550000190734863, 0.8586666584014893, 0.8633333444595337, 0.8619999885559082, 0.8659999966621399, 0.859666645526886, 0.862666666507721, 0.8603333234786987, 0.8610000014305115, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.87371426820755, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2232072353363037, 1.8595184087753296, 1.3872238397598267, 1.0952762365341187, 0.9485238194465637, 0.8367305994033813, 0.7788837552070618, 0.7277123332023621, 0.6899584531784058, 0.6658381819725037, 0.6349176168441772, 0.6135618686676025, 0.5958915948867798, 0.5786265730857849, 0.5547975897789001, 0.5399771928787231, 0.5304890871047974, 0.5208351612091064, 0.5093869566917419, 0.4935591518878937, 0.4877454340457916, 0.47730597853660583, 0.4586595892906189, 0.4513325095176697, 0.44582605361938477, 0.44309309124946594, 0.4281500577926636, 0.4212981164455414, 0.41194888949394226, 0.4061999022960663, 0.40356868505477905, 0.39932727813720703, 0.392719030380249, 0.3809816539287567, 0.3723923861980438, 0.3628491163253784, 0.36209601163864136, 0.36025628447532654, 0.3542947769165039, 0.3377310335636139, 0.3395015001296997, 0.3354354798793793, 0.3369399905204773, 0.32550540566444397, 0.3264126479625702, 0.32149738073349, 0.3139738142490387, 0.3039264976978302, 0.307658851146698, 0.3000647723674774, 0.2987280488014221, 0.29617008566856384, 0.2863553464412689, 0.2871435880661011, 0.28066694736480713, 0.2763734757900238, 0.271951824426651, 0.27542391419410706, 0.26730287075042725, 0.26872631907463074, 0.2565184533596039, 0.2520299255847931, 0.24587149918079376, 0.24850520491600037, 0.2404542714357376], "accuracy": [0.2860916554927826, 0.4954431354999542, 0.5654470920562744, 0.6189407110214233, 0.661471426486969, 0.7040021419525146, 0.7181349992752075, 0.7347774505615234, 0.7449478507041931, 0.750759482383728, 0.7707040309906006, 0.7754589915275574, 0.7791573405265808, 0.7882710099220276, 0.7992339134216309, 0.8062343001365662, 0.8088759779930115, 0.8094043135643005, 0.8137630224227905, 0.8177255392074585, 0.8277638554573059, 0.82683926820755, 0.8339717388153076, 0.8380662798881531, 0.8425571322441101, 0.8413683772087097, 0.8451988101005554, 0.8473120927810669, 0.8504821062088013, 0.8524633646011353, 0.8553691506385803, 0.8552370667457581, 0.8581429123878479, 0.8636903762817383, 0.8640866279602051, 0.8714832663536072, 0.8671245574951172, 0.8709549307823181, 0.8745211958885193, 0.8768987059593201, 0.8792761564254761, 0.878879964351654, 0.8755778670310974, 0.8821820020675659, 0.8817857503890991, 0.8831065893173218, 0.8874653577804565, 0.8891823887825012, 0.8865407705307007, 0.8916919827461243, 0.8926165699958801, 0.8906353116035461, 0.8953903317451477, 0.898428201675415, 0.8971073627471924, 0.8968431949615479, 0.9008057117462158, 0.9005415439605713, 0.9019944667816162, 0.8986923694610596, 0.9101836085319519, 0.9039757251739502, 0.9134856462478638, 0.9084665179252625, 0.9134856462478638], "val_loss": [2.036461353302002, 1.5084456205368042, 1.0438703298568726, 0.8431764245033264, 0.7608805298805237, 0.7065868973731995, 0.6638791561126709, 0.6321718096733093, 0.6096727848052979, 0.585335910320282, 0.5675576329231262, 0.5512966513633728, 0.537562906742096, 0.5223724246025085, 0.5127972364425659, 0.5063348412513733, 0.49306148290634155, 0.4878966212272644, 0.47431209683418274, 0.4664848744869232, 0.46708279848098755, 0.4574602544307709, 0.4505165219306946, 0.44262993335723877, 0.4345061182975769, 0.4329158663749695, 0.4357229471206665, 0.42260608077049255, 0.41635310649871826, 0.4156838357448578, 0.41225361824035645, 0.40967217087745667, 0.4026162028312683, 0.3991028368473053, 0.39995571970939636, 0.39828410744667053, 0.3945038914680481, 0.39039114117622375, 0.3900546431541443, 0.3867461681365967, 0.3893929719924927, 0.3950970768928528, 0.3867029547691345, 0.3846761882305145, 0.38009461760520935, 0.3773682415485382, 0.3774473965167999, 0.3755345940589905, 0.3709557354450226, 0.37013664841651917, 0.36995071172714233, 0.369544118642807, 0.3667477071285248, 0.36594271659851074, 0.3593677878379822, 0.36235305666923523, 0.37010180950164795, 0.36131495237350464, 0.3602229058742523, 0.3570607602596283, 0.35777005553245544, 0.3555726706981659, 0.35730046033859253, 0.3547685444355011, 0.36098939180374146], "val_accuracy": [0.5460000038146973, 0.6656666398048401, 0.6813333630561829, 0.7059999704360962, 0.7226666808128357, 0.7386666536331177, 0.7519999742507935, 0.7643333077430725, 0.7689999938011169, 0.7773333191871643, 0.7863333225250244, 0.7943333387374878, 0.793666660785675, 0.8036666512489319, 0.8066666722297668, 0.8090000152587891, 0.8169999718666077, 0.8196666836738586, 0.8299999833106995, 0.8306666612625122, 0.8289999961853027, 0.8320000171661377, 0.8376666903495789, 0.8383333086967468, 0.8429999947547913, 0.8446666598320007, 0.8463333249092102, 0.8476666808128357, 0.8493333458900452, 0.8503333330154419, 0.8513333201408386, 0.8529999852180481, 0.8523333072662354, 0.8560000061988831, 0.8576666712760925, 0.8573333621025085, 0.8556666374206543, 0.859666645526886, 0.8603333234786987, 0.8610000014305115, 0.8610000014305115, 0.8573333621025085, 0.8606666922569275, 0.8586666584014893, 0.862333357334137, 0.8653333187103271, 0.8610000014305115, 0.8650000095367432, 0.8673333525657654, 0.8686666488647461, 0.871666669845581, 0.8673333525657654, 0.8723333477973938, 0.8679999709129333, 0.8740000128746033, 0.8703333139419556, 0.8676666617393494, 0.8709999918937683, 0.8723333477973938, 0.8769999742507935, 0.8769999742507935, 0.8726666569709778, 0.8766666650772095, 0.8759999871253967, 0.8756666779518127]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 1], [0], [0], [0], [0, 0, 0, 1], [0, 1, 9], [0], [0, 44], [0, 1], [0], [1], [0]], "fitness": -0.8351428508758545, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2920966148376465, 2.187831401824951, 1.7602075338363647, 1.3472474813461304, 1.0706462860107422, 0.9228896498680115, 0.8427982926368713, 0.8254492878913879, 0.7607827186584473, 0.7484736442565918, 0.7055529356002808, 0.6838659048080444, 0.6409980058670044, 0.6226823329925537, 0.6005944609642029, 0.5792745351791382, 0.5685053467750549, 0.5592539310455322, 0.5431851148605347, 0.5336273312568665, 0.5175857543945312, 0.5023314952850342, 0.4988839030265808, 0.4994265139102936, 0.4836634397506714, 0.46192625164985657, 0.47250163555145264, 0.4476223289966583, 0.4393928050994873, 0.4359734356403351, 0.42612677812576294, 0.4188997745513916, 0.41186192631721497, 0.40034767985343933, 0.3894561529159546, 0.3898157775402069, 0.39196527004241943, 0.37939292192459106, 0.3701338469982147, 0.3749760687351227, 0.36140939593315125, 0.34068483114242554, 0.35192444920539856, 0.34129270911216736, 0.3577248156070709, 0.3411501944065094, 0.34665554761886597, 0.32979607582092285, 0.339932918548584, 0.3164084553718567, 0.3096435070037842, 0.3233959972858429, 0.3158680498600006, 0.3019430935382843, 0.2974763512611389, 0.2985917627811432, 0.2904847264289856, 0.27759310603141785, 0.28498393297195435, 0.2734089493751526, 0.2765980660915375], "accuracy": [0.13036586344242096, 0.3206973969936371, 0.4367983043193817, 0.5455026030540466, 0.629111111164093, 0.6692643165588379, 0.7010962963104248, 0.7062475085258484, 0.7161537408828735, 0.7206445932388306, 0.7367587089538574, 0.7430986762046814, 0.7467969655990601, 0.7625148296356201, 0.7666094303131104, 0.774798572063446, 0.780610203742981, 0.7887993454933167, 0.7943468689918518, 0.7989697456359863, 0.8064984679222107, 0.8157442808151245, 0.8124422430992126, 0.8088759779930115, 0.8169330358505249, 0.8236692547798157, 0.8183859586715698, 0.8280280232429504, 0.8322546482086182, 0.8337075710296631, 0.8421608805656433, 0.8388587832450867, 0.847840428352356, 0.8492933511734009, 0.8508783578872681, 0.857218325138092, 0.8549728989601135, 0.8555012345314026, 0.86118084192276, 0.8555012345314026, 0.8613129258155823, 0.8697662353515625, 0.8580108284950256, 0.8673887252807617, 0.8647470474243164, 0.868049144744873, 0.8725399374961853, 0.8767666220664978, 0.8625016212463379, 0.8713511824607849, 0.8765024542808533, 0.8829745054244995, 0.8771628737449646, 0.8816536664962769, 0.8792761564254761, 0.883238673210144, 0.8799365758895874, 0.8869370222091675, 0.8881257176399231, 0.8916919827461243, 0.8903711438179016], "val_loss": [2.2460262775421143, 2.01865553855896, 1.1512126922607422, 0.8806227445602417, 0.7560908794403076, 0.7072606086730957, 0.6563447117805481, 0.6446599960327148, 0.6510627269744873, 0.6115043759346008, 0.5833830833435059, 0.5499383807182312, 0.5320945382118225, 0.5207059979438782, 0.5079300403594971, 0.4996086061000824, 0.49282723665237427, 0.48359155654907227, 0.48697468638420105, 0.48162442445755005, 0.4678332209587097, 0.4616081416606903, 0.4604690670967102, 0.45797863602638245, 0.44527897238731384, 0.44650813937187195, 0.44326505064964294, 0.4351605772972107, 0.4264739155769348, 0.42569467425346375, 0.41554170846939087, 0.41686418652534485, 0.4185207486152649, 0.41952863335609436, 0.4220433831214905, 0.4114448130130768, 0.40322065353393555, 0.41072046756744385, 0.4155867397785187, 0.4121097922325134, 0.4171335995197296, 0.42071297764778137, 0.4231324791908264, 0.40881484746932983, 0.40902119874954224, 0.42963552474975586, 0.426666259765625, 0.4162745475769043, 0.40595442056655884, 0.4109715223312378, 0.43661466240882874, 0.44330331683158875, 0.43761056661605835, 0.42677175998687744, 0.4280194938182831, 0.4092584252357483, 0.41370874643325806, 0.4283398389816284, 0.43629956245422363, 0.42982372641563416, 0.4505349099636078], "val_accuracy": [0.421999990940094, 0.48233333230018616, 0.6446666717529297, 0.6953333616256714, 0.7296666502952576, 0.7356666922569275, 0.7526666522026062, 0.7573333382606506, 0.765333354473114, 0.7803333401679993, 0.7773333191871643, 0.7990000247955322, 0.7953333258628845, 0.8043333292007446, 0.8076666593551636, 0.8050000071525574, 0.8133333325386047, 0.8203333616256714, 0.8146666884422302, 0.8130000233650208, 0.82833331823349, 0.8316666483879089, 0.8320000171661377, 0.8223333358764648, 0.8360000252723694, 0.8343333601951599, 0.8336666822433472, 0.8423333168029785, 0.8460000157356262, 0.8433333039283752, 0.847000002861023, 0.843999981880188, 0.8513333201408386, 0.856333315372467, 0.8569999933242798, 0.8519999980926514, 0.8553333282470703, 0.8579999804496765, 0.8543333411216736, 0.8583333492279053, 0.8636666536331177, 0.859666645526886, 0.8579999804496765, 0.8586666584014893, 0.862333357334137, 0.8656666874885559, 0.8656666874885559, 0.8610000014305115, 0.8636666536331177, 0.8653333187103271, 0.871999979019165, 0.8726666569709778, 0.8696666955947876, 0.871666669845581, 0.8686666488647461, 0.8756666779518127, 0.8736666440963745, 0.871999979019165, 0.8740000128746033, 0.8683333396911621, 0.871666669845581]}, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 4, 3, 1, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8334285616874695, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5476869344711304, 0.832309901714325, 0.7320665717124939, 0.6438804864883423, 0.595230221748352, 0.5446693897247314, 0.5149200558662415, 0.49737316370010376, 0.4964779317378998, 0.49005040526390076, 0.49641892313957214, 0.5043416619300842, 0.5373557209968567, 0.5130024552345276, 0.5089585781097412, 0.471377432346344, 0.5136762261390686, 0.5052322745323181, 0.5034730434417725, 0.5091114640235901], "accuracy": [0.4733852744102478, 0.7036058902740479, 0.7375511527061462, 0.7569673657417297, 0.7763835787773132, 0.7965922355651855, 0.8101968169212341, 0.8201030492782593, 0.8210275769233704, 0.8175934553146362, 0.8245938420295715, 0.8204993009567261, 0.8107251524925232, 0.8281601071357727, 0.8189142942428589, 0.8342359066009521, 0.8175934553146362, 0.8255184292793274, 0.8212917447090149, 0.832650899887085], "val_loss": [0.8288375735282898, 0.6738670468330383, 0.5960492491722107, 0.550539493560791, 0.5278011560440063, 0.5552583932876587, 0.5460333824157715, 0.5563971996307373, 0.5458706617355347, 0.5377490520477295, 0.6506750583648682, 0.5664800405502319, 0.600412130355835, 0.5937777161598206, 0.6005886197090149, 0.5874490737915039, 0.5926242470741272, 0.6197654008865356, 0.6326146125793457, 0.5659457445144653], "val_accuracy": [0.6993333101272583, 0.765999972820282, 0.7879999876022339, 0.8096666932106018, 0.8073333501815796, 0.8253333568572998, 0.8303333520889282, 0.824999988079071, 0.8326666951179504, 0.8356666564941406, 0.8299999833106995, 0.8276666402816772, 0.8159999847412109, 0.8309999704360962, 0.840666651725769, 0.8196666836738586, 0.8323333263397217, 0.82833331823349, 0.8316666483879089, 0.8316666483879089]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0], [0, 2, 3, 0, 3, 6, 1, 5, 9], [0, 1, 0, 2, 0], [39, 39, 57, 12], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 2, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [1, 3, 5, 0, 7, 4, 8, 0], [0, 0, 7, 1, 2], [99, 95], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 9, 1, 4, 2, 8], [0, 0, 0, 3, 3, 4, 4, 1, 2, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 9, 5, 4, 10, 6, 4, 2, 13, 8, 5, 2, 12, 7, 5, 4], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.square(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.square(tf.math.negative(tf.math.add(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.sqrt(tf.math.negative(grad)), alpha)))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(sigma, sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 8], [0, 1, 0, 2], [39, 18], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1], [0, 2, 3, 0, 3, 5, 7, 0, 9, 0], [0, 2, 3, 3], [16, 16], [0, 0, 1], [0, 8], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [4, 3, 3, 6, 8, 1, 9, 1, 8, 1, 8], [4, 0, 0, 3, 0, 4, 3, 1, 2, 3], [16, 99, 96, 70, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 5, 3, 2, 14, 10, 4, 2, 3, 2, 1, 1, 17, 10, 7, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.sqrt(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.add(grad, tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.sqrt(sigma), tf.math.subtract(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), grad))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 0, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [83, 99, 27], [0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [0], [0, 1], [0], [0], [82], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 6, 1, 9, 0], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [0, 12, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 6, 4, 2, 3], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3033411502838135, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10289261490106583, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 9, 3, 1, 5], [0, 1, 1, 2, 2], [83, 99, 27], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 4], [0, 1, 4, 2, 4], [0], [0, 0, 1], [0, 8], [0], [8], [0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [1, 4, 5, 6, 3], [16, 99, 96, 99, 61, 1]], "fitness": -0.08457142859697342, "mapping_values": [1, 2, 2, 0, 1, 12, 7, 5, 1, 3, 2, 1, 1, 9, 4, 5, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.square(tf.math.pow(grad, beta)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(alpha, tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(grad, grad)), sigma))", "other_info": {"loss": [3.641429639777617e+32, 4.348731323498466e+32, 4.31000352993821e+32, 4.26337381036469e+32, 4.297683705409747e+32, 4.3061550838410815e+32], "accuracy": [0.09206181764602661, 0.10091137140989304, 0.09840179979801178, 0.10077928751707077, 0.0936468094587326, 0.09628847241401672], "val_loss": [3.3817256806422974e+32, 3.3817256806422974e+32, 3.3817256806422974e+32, 3.3817256806422974e+32, 3.3817256806422974e+32, 3.3817256806422974e+32], "val_accuracy": [0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076]}}]