[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222564220428467, 1.8654934167861938, 1.392636775970459, 1.0800100564956665, 0.9349965453147888, 0.83723384141922, 0.771166205406189, 0.7229189872741699, 0.6917352080345154, 0.6532851457595825, 0.6217012405395508, 0.6138775944709778, 0.5917757749557495, 0.5793368220329285, 0.5567960739135742, 0.5480981469154358, 0.5474538803100586, 0.5317270755767822, 0.5151227116584778, 0.5055264234542847, 0.5014929175376892, 0.4862228035926819, 0.4727080464363098, 0.47010233998298645, 0.46293196082115173, 0.4504174590110779, 0.447412371635437, 0.4438058137893677, 0.42948198318481445, 0.417126327753067, 0.4136964678764343, 0.40704113245010376, 0.4020131528377533, 0.39997783303260803, 0.39442774653434753, 0.3916949927806854, 0.38260385394096375, 0.3716582953929901, 0.3650337755680084, 0.3573426902294159, 0.36132100224494934, 0.3564379811286926, 0.3445151448249817, 0.33812835812568665, 0.3384065330028534, 0.3359524607658386, 0.33294373750686646, 0.3212839663028717, 0.3217304050922394, 0.3110441267490387, 0.31119072437286377], "accuracy": [0.2685246467590332, 0.4955752193927765, 0.5610883831977844, 0.6197332143783569, 0.6668868064880371, 0.6963412761688232, 0.7205125093460083, 0.7349095344543457, 0.7469290494918823, 0.7604015469551086, 0.7732135653495789, 0.7761194109916687, 0.7878747582435608, 0.7901201844215393, 0.8009510040283203, 0.802271842956543, 0.8050455451011658, 0.8103289008140564, 0.8158763647079468, 0.8197067975997925, 0.817461371421814, 0.8255184292793274, 0.8273676037788391, 0.8333113193511963, 0.832650899887085, 0.8392550349235535, 0.8367455005645752, 0.8408400416374207, 0.8474441766738892, 0.8475762605667114, 0.8519350290298462, 0.8545766472816467, 0.8574824929237366, 0.8544445633888245, 0.8589354157447815, 0.8561616539955139, 0.8632941246032715, 0.8640866279602051, 0.869502067565918, 0.8702945709228516, 0.8702945709228516, 0.8689737319946289, 0.8772949576377869, 0.8754457831382751, 0.8767666220664978, 0.8809932470321655, 0.8776912093162537, 0.8853520154953003, 0.8811253309249878, 0.8886540532112122, 0.8885219693183899], "val_loss": [2.042604923248291, 1.5189800262451172, 1.0515391826629639, 0.8450219035148621, 0.7558016777038574, 0.7093545794487, 0.6593213081359863, 0.6230939030647278, 0.5998342037200928, 0.5830129981040955, 0.5592260956764221, 0.5484577417373657, 0.5345214009284973, 0.5245682597160339, 0.508945107460022, 0.5038147568702698, 0.4949795603752136, 0.4867953658103943, 0.47808560729026794, 0.4682127833366394, 0.46202969551086426, 0.4617370665073395, 0.4514632225036621, 0.4495610296726227, 0.4391477108001709, 0.43453720211982727, 0.42648962140083313, 0.42570948600769043, 0.4242604672908783, 0.4146496057510376, 0.41664713621139526, 0.4113439619541168, 0.41593310236930847, 0.4013250470161438, 0.40437138080596924, 0.39875122904777527, 0.3905998170375824, 0.3918660581111908, 0.38664665818214417, 0.3956036865711212, 0.38548287749290466, 0.3855803310871124, 0.3777529299259186, 0.3802799582481384, 0.3779101073741913, 0.371540904045105, 0.3776323199272156, 0.36875513195991516, 0.37442195415496826, 0.3655129075050354, 0.3628164827823639], "val_accuracy": [0.5523333549499512, 0.6656666398048401, 0.6830000281333923, 0.7059999704360962, 0.7336666584014893, 0.7506666779518127, 0.7580000162124634, 0.7689999938011169, 0.7736666798591614, 0.7846666574478149, 0.7950000166893005, 0.7963333129882812, 0.7993333339691162, 0.8100000023841858, 0.8173333406448364, 0.8190000057220459, 0.8213333487510681, 0.8209999799728394, 0.8286666870117188, 0.828000009059906, 0.8323333263397217, 0.8336666822433472, 0.8333333134651184, 0.8349999785423279, 0.8386666774749756, 0.8393333554267883, 0.8429999947547913, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8446666598320007, 0.8463333249092102, 0.8503333330154419, 0.8529999852180481, 0.8493333458900452, 0.8550000190734863, 0.8546666502952576, 0.856333315372467, 0.8613333106040955, 0.856333315372467, 0.859000027179718, 0.8550000190734863, 0.8586666584014893, 0.8633333444595337, 0.8619999885559082, 0.8659999966621399, 0.859666645526886, 0.862666666507721, 0.8603333234786987, 0.8610000014305115, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8645714521408081, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.22580885887146, 1.8759790658950806, 1.4030475616455078, 1.1032969951629639, 0.951804518699646, 0.8472790718078613, 0.7755237817764282, 0.7337287068367004, 0.6937264204025269, 0.6610440611839294, 0.6441484093666077, 0.6180076599121094, 0.6059363484382629, 0.5808984041213989, 0.5620035529136658, 0.5418986082077026, 0.5275938510894775, 0.5216745734214783, 0.5211244225502014, 0.5041075944900513, 0.49805206060409546, 0.480202853679657, 0.46226802468299866, 0.46685677766799927, 0.45737677812576294, 0.4503828287124634, 0.4339708387851715, 0.4333484172821045, 0.4271220862865448, 0.42390862107276917, 0.412600576877594, 0.4038970470428467, 0.4032876789569855, 0.39208000898361206, 0.38939014077186584, 0.38308626413345337, 0.3715762197971344, 0.3685465455055237, 0.36730724573135376, 0.36184021830558777, 0.35363978147506714, 0.3551021218299866, 0.34879070520401, 0.3444705307483673, 0.3387996256351471, 0.3331405222415924, 0.3274364471435547, 0.3204544484615326, 0.31237685680389404, 0.3083650767803192, 0.3083477318286896, 0.30324864387512207, 0.30307722091674805, 0.2960105836391449], "accuracy": [0.25795799493789673, 0.4880464971065521, 0.5583146214485168, 0.6165632009506226, 0.6596222519874573, 0.693831741809845, 0.715889573097229, 0.7284374833106995, 0.7448157668113708, 0.7576277852058411, 0.7650244235992432, 0.7775723338127136, 0.7769119143486023, 0.7930260300636292, 0.7955356240272522, 0.807158887386322, 0.8055738806724548, 0.8133667707443237, 0.8115176558494568, 0.8185180425643921, 0.8228767514228821, 0.8302733898162842, 0.8368775844573975, 0.8333113193511963, 0.8396512866020203, 0.8354246616363525, 0.8428213000297546, 0.8421608805656433, 0.8462554216384888, 0.8500858545303345, 0.8518029451370239, 0.8558974862098694, 0.8568220734596252, 0.8602562546730042, 0.8598600029945374, 0.8593316674232483, 0.8634262084960938, 0.8702945709228516, 0.8693699836730957, 0.8722757697105408, 0.871879518032074, 0.873860776424408, 0.8750495314598083, 0.8765024542808533, 0.8780874609947205, 0.8770307898521423, 0.8782195448875427, 0.8841632604598999, 0.887597382068634, 0.8838990926742554, 0.885219931602478, 0.8886540532112122, 0.8881257176399231, 0.8918240666389465], "val_loss": [2.042395830154419, 1.5207140445709229, 1.0438592433929443, 0.830740213394165, 0.7448909282684326, 0.692960262298584, 0.6484988331794739, 0.6130355000495911, 0.5864108204841614, 0.5640827417373657, 0.5479333400726318, 0.5310889482498169, 0.5195455551147461, 0.505888044834137, 0.4913308024406433, 0.48157998919487, 0.4720236361026764, 0.46553927659988403, 0.45597758889198303, 0.4475090205669403, 0.4442937970161438, 0.43477991223335266, 0.43232184648513794, 0.4255349040031433, 0.4150283932685852, 0.41524264216423035, 0.40691035985946655, 0.40334752202033997, 0.4118399918079376, 0.3926067352294922, 0.392811119556427, 0.3888240456581116, 0.38569727540016174, 0.384320467710495, 0.3797323405742645, 0.3727880120277405, 0.3761308193206787, 0.37041354179382324, 0.37031090259552, 0.3651716709136963, 0.36370325088500977, 0.36751630902290344, 0.36046117544174194, 0.3595114052295685, 0.36206701397895813, 0.35273227095603943, 0.35620906949043274, 0.3572900891304016, 0.34882649779319763, 0.35322335362434387, 0.3517414927482605, 0.35541051626205444, 0.34652677178382874, 0.3496934473514557], "val_accuracy": [0.5356666445732117, 0.6629999876022339, 0.6803333163261414, 0.7036666870117188, 0.7319999933242798, 0.749666690826416, 0.762333333492279, 0.7763333320617676, 0.7833333611488342, 0.7923333048820496, 0.79666668176651, 0.8106666803359985, 0.8106666803359985, 0.8180000185966492, 0.8240000009536743, 0.8193333148956299, 0.8296666741371155, 0.8289999961853027, 0.8339999914169312, 0.8376666903495789, 0.8336666822433472, 0.8420000076293945, 0.8420000076293945, 0.8460000157356262, 0.8550000190734863, 0.847000002861023, 0.8529999852180481, 0.8560000061988831, 0.8513333201408386, 0.8579999804496765, 0.8610000014305115, 0.8610000014305115, 0.8633333444595337, 0.862666666507721, 0.8643333315849304, 0.8679999709129333, 0.8669999837875366, 0.8696666955947876, 0.8659999966621399, 0.8700000047683716, 0.8713333606719971, 0.8673333525657654, 0.8690000176429749, 0.8696666955947876, 0.8666666746139526, 0.8736666440963745, 0.871666669845581, 0.8703333139419556, 0.8769999742507935, 0.8736666440963745, 0.875333309173584, 0.8730000257492065, 0.874666690826416, 0.875333309173584]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1], [0, 8], [0], [0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 6, 3, 7, 8, 8, 0, 8, 4, 4, 6], [0, 0, 0, 4, 0, 1, 6], [0, 60, 11, 52], [0, 1], [0], [1], [0]], "fitness": -0.8522857427597046, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.negative(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.sqrt(tf.math.negative(tf.math.sqrt(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))))), tf.math.pow(grad, tf.math.pow(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.29296875, 2.1864304542541504, 1.764461874961853, 1.314910888671875, 1.0812617540359497, 0.9288100004196167, 0.8483752608299255, 0.8532851934432983, 0.7608968615531921, 0.7458322048187256, 0.7174584865570068, 0.6944544315338135, 0.6531051397323608, 0.6226606369018555, 0.6061986684799194, 0.5989341735839844, 0.5854576230049133, 0.5777485966682434, 0.5563800930976868, 0.553117573261261, 0.5434610843658447, 0.5241698622703552, 0.5142084360122681, 0.5026760697364807, 0.4944953918457031, 0.4866718649864197, 0.47561702132225037, 0.47053369879722595, 0.4559171497821808, 0.44854676723480225, 0.4440237581729889, 0.42774486541748047, 0.42115330696105957, 0.4060649871826172, 0.4072895348072052, 0.4017837643623352, 0.39268356561660767, 0.3872658610343933, 0.38542595505714417, 0.37252023816108704, 0.37452948093414307, 0.37459298968315125, 0.3645889163017273, 0.34566745162010193], "accuracy": [0.12732796370983124, 0.33086779713630676, 0.43587371706962585, 0.5458987951278687, 0.6357152462005615, 0.6610751748085022, 0.6936996579170227, 0.6881521344184875, 0.7150970697402954, 0.7108704447746277, 0.7269845604896545, 0.7400607466697693, 0.7471932172775269, 0.7585523724555969, 0.7630431652069092, 0.7681944370269775, 0.7744023203849792, 0.7726852297782898, 0.7832518815994263, 0.7891955971717834, 0.7922335267066956, 0.7938185334205627, 0.8004226684570312, 0.8096684813499451, 0.8112534880638123, 0.8112534880638123, 0.8128384351730347, 0.8226125836372375, 0.8310658931732178, 0.8302733898162842, 0.8294808864593506, 0.8300092220306396, 0.8378021121025085, 0.8474441766738892, 0.8457271456718445, 0.8477083444595337, 0.8485008478164673, 0.8511425256729126, 0.8541803956031799, 0.8548408150672913, 0.8540483713150024, 0.8581429123878479, 0.859199583530426, 0.8650112152099609], "val_loss": [2.2459590435028076, 2.014299154281616, 1.1274126768112183, 0.8764873147010803, 0.7468934655189514, 0.6957665085792542, 0.6550045609474182, 0.6449651122093201, 0.6566200852394104, 0.633339524269104, 0.5810366272926331, 0.5634498000144958, 0.5323103666305542, 0.5232540369033813, 0.5203611850738525, 0.5071542859077454, 0.5128064155578613, 0.5047020316123962, 0.49341848492622375, 0.4900182783603668, 0.48566585779190063, 0.4767701327800751, 0.4618581533432007, 0.46007969975471497, 0.43941202759742737, 0.4370698630809784, 0.4309913218021393, 0.4244568347930908, 0.4139617383480072, 0.41276437044143677, 0.41601744294166565, 0.4203484356403351, 0.41659945249557495, 0.40285709500312805, 0.3955983817577362, 0.40183767676353455, 0.39674118161201477, 0.39651036262512207, 0.3839598298072815, 0.38179248571395874, 0.38620108366012573, 0.381550669670105, 0.371544748544693, 0.3745189607143402], "val_accuracy": [0.4180000126361847, 0.4339999854564667, 0.6536666750907898, 0.6826666593551636, 0.7229999899864197, 0.7473333477973938, 0.749666690826416, 0.7486666440963745, 0.7580000162124634, 0.7526666522026062, 0.7733333110809326, 0.7833333611488342, 0.7943333387374878, 0.7973333597183228, 0.8069999814033508, 0.8090000152587891, 0.796999990940094, 0.8130000233650208, 0.8103333115577698, 0.8080000281333923, 0.8169999718666077, 0.8166666626930237, 0.8303333520889282, 0.8256666660308838, 0.8376666903495789, 0.8343333601951599, 0.8443333506584167, 0.8503333330154419, 0.8576666712760925, 0.8556666374206543, 0.856333315372467, 0.8546666502952576, 0.8576666712760925, 0.8643333315849304, 0.8666666746139526, 0.8633333444595337, 0.8693333268165588, 0.8713333606719971, 0.8730000257492065, 0.8683333396911621, 0.8693333268165588, 0.8676666617393494, 0.8700000047683716, 0.8676666617393494]}, "mapping_values": [1, 10, 5, 5, 3, 3, 2, 1, 1, 20, 13, 7, 4, 2, 1, 1, 0], "tree_depth": 24}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8351428508758545, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5760972499847412, 0.8878467679023743, 0.6536533832550049, 0.5966021418571472, 0.5456681847572327, 0.5104681253433228, 0.4636183977127075, 0.4680452346801758, 0.4405962824821472, 0.436980277299881, 0.4144729971885681, 0.4601130187511444, 0.47456586360931396, 0.484579861164093, 0.4692510962486267], "accuracy": [0.48870691657066345, 0.7012283802032471, 0.7611940503120422, 0.77677983045578, 0.7984414100646973, 0.8124422430992126, 0.828292191028595, 0.8256505131721497, 0.8388587832450867, 0.8392550349235535, 0.8461233377456665, 0.8454629778862, 0.8333113193511963, 0.826310932636261, 0.8350284099578857], "val_loss": [0.8800513744354248, 0.5828127264976501, 0.5240921974182129, 0.5089410543441772, 0.4683351516723633, 0.46817463636398315, 0.4685017168521881, 0.4617093801498413, 0.4776330888271332, 0.5170658826828003, 0.6002528667449951, 0.5205848217010498, 0.5689371228218079, 0.5592793226242065, 0.5766457319259644], "val_accuracy": [0.7070000171661377, 0.7940000295639038, 0.8046666383743286, 0.8190000057220459, 0.8383333086967468, 0.8343333601951599, 0.8423333168029785, 0.8403333425521851, 0.8483333587646484, 0.8526666760444641, 0.8443333506584167, 0.8399999737739563, 0.8326666951179504, 0.8389999866485596, 0.8463333249092102]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3, 1, 3], [0, 1, 2, 2, 1, 3], [39, 38], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [24, 16], [0, 1, 1], [6], [2, 7], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 5, 4, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [24, 99, 96, 99, 61, 1]], "fitness": -0.10285714268684387, "mapping_values": [1, 13, 7, 6, 1, 6, 3, 3, 2, 3, 1, 2, 0, 4, 2, 2, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.subtract(alpha, grad), grad)), tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3088266849517822, 2.305553674697876, 2.303264856338501, 2.3027091026306152, 2.3025903701782227, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.0870426595211029, 0.08400475233793259, 0.10487385839223862, 0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3061461448669434, 2.3035671710968018, 2.302642345428467, 2.3025848865509033, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.06866666674613953, 0.08399999886751175, 0.10566666722297668, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [1, 1, 0, 2], [74, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [3, 1, 9, 3, 1, 9, 7, 0, 2, 9, 2, 6, 7, 6, 0, 2], [0, 5, 1, 1, 5, 0, 1, 3, 7], [23, 45, 10, 53, 27], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 5, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4], [16, 99, 41, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 2, 1, 1, 1, 25, 16, 9, 5, 16, 8, 8, 5], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), alpha), tf.math.multiply(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), grad), tf.math.add(tf.math.negative(tf.math.add(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(alpha, grad), tf.math.negative(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), alpha), tf.math.add(sigma, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), sigma))), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 3, 9], [0, 1, 0, 2], [63, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 3, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [4, 0, 0, 3, 0, 0, 3, 4, 2, 4], [16, 99, 4, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 2, 6, 3, 3, 2, 2, 1, 1, 1, 14, 7, 7, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma)), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 2, 5, 0, 3, 5, 7], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 0, 6, 8, 1, 4, 4, 4, 2, 8], [0, 4, 0, 3, 0, 0, 3, 1, 1, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 11, 7, 4, 2, 2, 1, 1, 1, 11, 6, 5, 3], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.square(beta), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(grad), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}]