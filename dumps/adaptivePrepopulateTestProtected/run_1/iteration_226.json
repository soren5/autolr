[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8837142586708069, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2235751152038574, 1.863627314567566, 1.3881967067718506, 1.0971885919570923, 0.9431154727935791, 0.835616409778595, 0.7718875408172607, 0.7267177104949951, 0.6853072643280029, 0.6501961350440979, 0.6362801194190979, 0.6226356029510498, 0.5988889336585999, 0.5801778435707092, 0.5583580732345581, 0.5447906851768494, 0.5406832695007324, 0.5254860520362854, 0.5062505006790161, 0.5079479217529297, 0.49121394753456116, 0.48989003896713257, 0.47510769963264465, 0.46506667137145996, 0.4554359018802643, 0.45054957270622253, 0.44110772013664246, 0.430584579706192, 0.42144355177879333, 0.4155716598033905, 0.4158378839492798, 0.4039183557033539, 0.4085548520088196, 0.39546728134155273, 0.39515864849090576, 0.3871508538722992, 0.38307344913482666, 0.3732011318206787, 0.3693823516368866, 0.36437657475471497, 0.3559441566467285, 0.3469986915588379, 0.343269407749176, 0.3417010009288788, 0.33637532591819763, 0.32835736870765686, 0.3263590931892395, 0.31998395919799805], "accuracy": [0.2810725271701813, 0.4971602261066437, 0.5653150081634521, 0.6174877882003784, 0.6604147553443909, 0.6975300312042236, 0.7224937081336975, 0.7313432693481445, 0.7481178045272827, 0.7605336308479309, 0.7685906887054443, 0.7737419009208679, 0.7836481332778931, 0.7877426743507385, 0.8004226684570312, 0.7952714562416077, 0.8047813773155212, 0.8120459914207458, 0.8137630224227905, 0.8156121969223022, 0.8216879963874817, 0.8222163319587708, 0.828820526599884, 0.8327829837799072, 0.8348963260650635, 0.8391229510307312, 0.8408400416374207, 0.8436138033866882, 0.8473120927810669, 0.8507462739944458, 0.8518029451370239, 0.8524633646011353, 0.852331280708313, 0.8539162874221802, 0.8544445633888245, 0.8615770936012268, 0.859199583530426, 0.8668603897094727, 0.8696341514587402, 0.8679170608520508, 0.872407853603363, 0.8747853636741638, 0.8750495314598083, 0.8750495314598083, 0.8766345381736755, 0.882710337638855, 0.8792761564254761, 0.8848236799240112], "val_loss": [2.041090488433838, 1.5073738098144531, 1.0351890325546265, 0.8288497924804688, 0.7493756413459778, 0.6886183023452759, 0.646604061126709, 0.6087713837623596, 0.582353949546814, 0.5605174899101257, 0.5534560680389404, 0.5316277742385864, 0.514729917049408, 0.5010638236999512, 0.4920998513698578, 0.47585147619247437, 0.47390398383140564, 0.45993757247924805, 0.46219465136528015, 0.44748595356941223, 0.4464666247367859, 0.44296160340309143, 0.4343818426132202, 0.42551079392433167, 0.42283767461776733, 0.41507044434547424, 0.4149109423160553, 0.4069209098815918, 0.40459540486335754, 0.40145280957221985, 0.3985113203525543, 0.3906044065952301, 0.3908856511116028, 0.3974918723106384, 0.38081249594688416, 0.38753604888916016, 0.37521854043006897, 0.37901124358177185, 0.37925422191619873, 0.3736351728439331, 0.36485224962234497, 0.36611106991767883, 0.3618214428424835, 0.35893985629081726, 0.3620902895927429, 0.35414883494377136, 0.3574270009994507, 0.35906851291656494], "val_accuracy": [0.5236666798591614, 0.6586666703224182, 0.6903333067893982, 0.7173333168029785, 0.734000027179718, 0.7480000257492065, 0.7580000162124634, 0.7746666669845581, 0.7803333401679993, 0.7893333435058594, 0.7866666913032532, 0.8023333549499512, 0.8130000233650208, 0.8149999976158142, 0.8186666369438171, 0.8316666483879089, 0.8273333311080933, 0.8356666564941406, 0.8343333601951599, 0.8399999737739563, 0.8420000076293945, 0.840666651725769, 0.8446666598320007, 0.847000002861023, 0.8503333330154419, 0.8516666889190674, 0.8539999723434448, 0.856333315372467, 0.8583333492279053, 0.8579999804496765, 0.8613333106040955, 0.8573333621025085, 0.8636666536331177, 0.8523333072662354, 0.8656666874885559, 0.8583333492279053, 0.8690000176429749, 0.8683333396911621, 0.8696666955947876, 0.8666666746139526, 0.8700000047683716, 0.8726666569709778, 0.8773333430290222, 0.874666690826416, 0.8759999871253967, 0.8773333430290222, 0.8756666779518127, 0.8766666650772095]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.87628573179245, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222585678100586, 1.8575540781021118, 1.3777978420257568, 1.090723991394043, 0.9327471256256104, 0.8334836363792419, 0.7658133506774902, 0.7259491682052612, 0.6982786655426025, 0.6670331954956055, 0.6383914351463318, 0.6161369681358337, 0.6005538702011108, 0.5778543949127197, 0.5625312328338623, 0.5517688393592834, 0.5385631918907166, 0.5281677842140198, 0.5147821307182312, 0.5107185244560242, 0.49078014492988586, 0.4813837707042694, 0.4810948073863983, 0.46792855858802795, 0.4667118787765503, 0.44989192485809326, 0.442532479763031, 0.4385741949081421, 0.42941659688949585, 0.4270811975002289, 0.4173266589641571, 0.41037750244140625, 0.4102056622505188, 0.40080687403678894, 0.3993462920188904, 0.38857632875442505, 0.37533968687057495, 0.37603524327278137, 0.36693719029426575, 0.36787211894989014, 0.35448119044303894, 0.3599545359611511, 0.3571881949901581, 0.3417234420776367, 0.3433385491371155, 0.33633944392204285, 0.32727086544036865, 0.3308214545249939, 0.32379913330078125, 0.3216014802455902, 0.31436824798583984, 0.312408447265625, 0.30309051275253296, 0.30502796173095703, 0.29680806398391724, 0.29563647508621216, 0.2890024781227112, 0.28954800963401794, 0.2819020450115204, 0.2804219722747803, 0.27616938948631287, 0.2705131769180298, 0.2616370618343353, 0.2639574408531189], "accuracy": [0.26839256286621094, 0.4971602261066437, 0.5610883831977844, 0.6168273687362671, 0.6664905548095703, 0.7013604640960693, 0.7302865982055664, 0.7403249144554138, 0.7467969655990601, 0.7594769597053528, 0.7666094303131104, 0.7728173136711121, 0.7773081660270691, 0.7967243194580078, 0.7993659973144531, 0.800818920135498, 0.8004226684570312, 0.8088759779930115, 0.8144234418869019, 0.8156121969223022, 0.8216879963874817, 0.8238013386726379, 0.8259146809577942, 0.8298771381378174, 0.8352925777435303, 0.8368775844573975, 0.8424250483512878, 0.8457271456718445, 0.8462554216384888, 0.8455950617790222, 0.8451988101005554, 0.8481045961380005, 0.8525954484939575, 0.8548408150672913, 0.8555012345314026, 0.8569541573524475, 0.8628978729248047, 0.8631620407104492, 0.8676528930664062, 0.8640866279602051, 0.8722757697105408, 0.8663320541381836, 0.8714832663536072, 0.8713511824607849, 0.8749174475669861, 0.8782195448875427, 0.8778232932090759, 0.8802007436752319, 0.8809932470321655, 0.8823140859603882, 0.8845595121383667, 0.8869370222091675, 0.8902390599250793, 0.8879936337471008, 0.8907673954963684, 0.8894465565681458, 0.89552241563797, 0.8986923694610596, 0.8957865834236145, 0.8989565372467041, 0.8968431949615479, 0.8990886211395264, 0.9037115573883057, 0.9060890078544617], "val_loss": [2.036885976791382, 1.5064585208892822, 1.039852261543274, 0.8418487310409546, 0.7548293471336365, 0.7020009160041809, 0.6556540727615356, 0.6260444521903992, 0.6042202711105347, 0.590808093547821, 0.5684680342674255, 0.5633052587509155, 0.539660632610321, 0.5307235717773438, 0.5250636339187622, 0.516337513923645, 0.5102841258049011, 0.5013311505317688, 0.4971015751361847, 0.493589848279953, 0.482736736536026, 0.4741741418838501, 0.4673236012458801, 0.4636954069137573, 0.46590420603752136, 0.45301592350006104, 0.452231764793396, 0.4500732421875, 0.43928706645965576, 0.4416857063770294, 0.4361305832862854, 0.43207210302352905, 0.4385809004306793, 0.42461681365966797, 0.4266112744808197, 0.42410698533058167, 0.4252035617828369, 0.41297802329063416, 0.41178467869758606, 0.4130292236804962, 0.4074077010154724, 0.40867719054222107, 0.4070773422718048, 0.4036633372306824, 0.4025765359401703, 0.39687126874923706, 0.3964633643627167, 0.39382869005203247, 0.39028704166412354, 0.3902451992034912, 0.39158540964126587, 0.38951224088668823, 0.3885795474052429, 0.3858138918876648, 0.38984036445617676, 0.37891724705696106, 0.38493749499320984, 0.38479748368263245, 0.3761557638645172, 0.387143075466156, 0.3849416971206665, 0.3741494417190552, 0.3794650733470917, 0.38439249992370605], "val_accuracy": [0.5120000243186951, 0.6483333110809326, 0.6796666383743286, 0.7039999961853027, 0.731333315372467, 0.7459999918937683, 0.7603333592414856, 0.7680000066757202, 0.7749999761581421, 0.7870000004768372, 0.7863333225250244, 0.7853333353996277, 0.8033333420753479, 0.8090000152587891, 0.8080000281333923, 0.8103333115577698, 0.8130000233650208, 0.8159999847412109, 0.815666675567627, 0.8243333101272583, 0.8270000219345093, 0.8316666483879089, 0.8296666741371155, 0.8349999785423279, 0.8309999704360962, 0.8366666436195374, 0.8420000076293945, 0.8360000252723694, 0.8456666469573975, 0.8443333506584167, 0.847000002861023, 0.8416666388511658, 0.8420000076293945, 0.8510000109672546, 0.8539999723434448, 0.8503333330154419, 0.8496666550636292, 0.8550000190734863, 0.856333315372467, 0.8533333539962769, 0.8576666712760925, 0.8560000061988831, 0.856333315372467, 0.8579999804496765, 0.859666645526886, 0.8640000224113464, 0.8619999885559082, 0.862333357334137, 0.8659999966621399, 0.8640000224113464, 0.8629999756813049, 0.8666666746139526, 0.8669999837875366, 0.8659999966621399, 0.8663333058357239, 0.8700000047683716, 0.8690000176429749, 0.8706666827201843, 0.875, 0.8690000176429749, 0.8676666617393494, 0.8723333477973938, 0.871999979019165, 0.8743333220481873]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 1], [0], [0], [0], [0, 0, 1, 0, 1, 0], [0, 3, 6, 9], [0, 3], [0, 77], [0, 1], [0], [1], [0]], "fitness": -0.8394285440444946, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(sigma, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2937371730804443, 2.1905667781829834, 1.7667657136917114, 1.3431340456008911, 1.0623433589935303, 0.914192795753479, 0.8416425585746765, 0.7891896963119507, 0.7613207697868347, 0.7215832471847534, 0.6958951950073242, 0.6857185363769531, 0.6506569981575012, 0.6337011456489563, 0.6104492545127869, 0.5919450521469116, 0.5780966281890869, 0.5659146308898926, 0.5628208518028259, 0.5406836271286011, 0.5268912315368652, 0.5213814973831177, 0.5148859024047852, 0.5049759149551392, 0.4940398931503296, 0.4855422377586365, 0.48346325755119324, 0.4625609219074249, 0.46477600932121277, 0.4530704617500305, 0.4529697299003601, 0.43357977271080017, 0.43134963512420654, 0.4203035235404968, 0.40550386905670166, 0.40445899963378906, 0.3878975212574005, 0.38929039239883423, 0.38020676374435425, 0.380698025226593, 0.37196704745292664, 0.3637184500694275, 0.35407382249832153, 0.3513163924217224, 0.34593459963798523, 0.341230571269989, 0.34299981594085693], "accuracy": [0.1320829540491104, 0.3291507065296173, 0.4423457980155945, 0.5464271306991577, 0.6470743417739868, 0.6641130447387695, 0.6970016956329346, 0.707568347454071, 0.7150970697402954, 0.7288337349891663, 0.7383436560630798, 0.7403249144554138, 0.7498348951339722, 0.7664773464202881, 0.7656848430633545, 0.7738739848136902, 0.7819310426712036, 0.7862898111343384, 0.7872143983840942, 0.8001585006713867, 0.796328067779541, 0.8010830879211426, 0.8095363974571228, 0.8095363974571228, 0.8070268034934998, 0.8141592741012573, 0.8207634687423706, 0.8259146809577942, 0.8265751004219055, 0.8286884427070618, 0.8278959393501282, 0.8368775844573975, 0.8388587832450867, 0.8437458872795105, 0.8488970994949341, 0.8514066934585571, 0.8568220734596252, 0.8545766472816467, 0.8580108284950256, 0.8598600029945374, 0.8599920868873596, 0.8621054291725159, 0.8732003569602966, 0.8676528930664062, 0.8610487580299377, 0.8721436858177185, 0.868049144744873], "val_loss": [2.24685001373291, 2.0211892127990723, 1.1506197452545166, 0.8917139768600464, 0.7723870277404785, 0.7305809855461121, 0.6788622140884399, 0.6592318415641785, 0.6410238146781921, 0.6214677691459656, 0.5849649310112, 0.5692645907402039, 0.5561065077781677, 0.5382049679756165, 0.5304980278015137, 0.5156833529472351, 0.5006134510040283, 0.49580714106559753, 0.4950224757194519, 0.48766231536865234, 0.4797019362449646, 0.46826469898223877, 0.45911890268325806, 0.45497384667396545, 0.44388988614082336, 0.44045963883399963, 0.4350447654724121, 0.4290390908718109, 0.4235273003578186, 0.43424639105796814, 0.41898414492607117, 0.4205666184425354, 0.41917139291763306, 0.39957356452941895, 0.39778441190719604, 0.40055570006370544, 0.39579036831855774, 0.38677889108657837, 0.3925911486148834, 0.38757091760635376, 0.3845270574092865, 0.3967234790325165, 0.3836793899536133, 0.38669729232788086, 0.3918432891368866, 0.40599146485328674, 0.3949936628341675], "val_accuracy": [0.4113333225250244, 0.4426666796207428, 0.6383333206176758, 0.7006666660308838, 0.7269999980926514, 0.7363333106040955, 0.7360000014305115, 0.7670000195503235, 0.746999979019165, 0.7739999890327454, 0.7673333287239075, 0.7716666460037231, 0.7793333530426025, 0.7900000214576721, 0.7886666655540466, 0.7913333177566528, 0.8013333082199097, 0.8056666851043701, 0.8080000281333923, 0.8220000267028809, 0.8116666674613953, 0.8209999799728394, 0.8293333053588867, 0.8256666660308838, 0.8376666903495789, 0.8296666741371155, 0.8373333215713501, 0.8303333520889282, 0.840666651725769, 0.8376666903495789, 0.843999981880188, 0.8366666436195374, 0.8416666388511658, 0.8513333201408386, 0.8536666631698608, 0.8533333539962769, 0.8526666760444641, 0.8569999933242798, 0.8616666793823242, 0.8566666841506958, 0.8633333444595337, 0.8683333396911621, 0.8646666407585144, 0.862333357334137, 0.8640000224113464, 0.8640000224113464, 0.8633333444595337]}, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 6, 4, 2, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 7, 7, 6, 9, 5, 1, 7, 7, 7], [0, 2, 3, 2, 5, 5, 0], [0, 19, 67], [1], [0], [2], [0]], "fitness": -0.8362857103347778, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.subtract(sigma, tf.math.add(tf.math.add(beta, tf.math.add(grad, grad)), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.4857287406921387, 0.7532979249954224, 0.6198040843009949, 0.5845418572425842, 0.5341472029685974, 0.5029699206352234, 0.5233471393585205, 0.5293505787849426, 0.5379965901374817, 0.5112775564193726, 0.5394832491874695, 0.5252856016159058, 0.5260217785835266, 0.5306934118270874, 0.5257083177566528], "accuracy": [0.4970281422138214, 0.7351737022399902, 0.7749306559562683, 0.7820631265640259, 0.8001585006713867, 0.8109893202781677, 0.8087438941001892, 0.8156121969223022, 0.8148196935653687, 0.8170651197433472, 0.8296129703521729, 0.8168009519577026, 0.8187822103500366, 0.8201030492782593, 0.8227446675300598], "val_loss": [0.7139415740966797, 0.6378134489059448, 0.5371759533882141, 0.5764452219009399, 0.5138443112373352, 0.5193281769752502, 0.5012679696083069, 0.6210513710975647, 0.5174990296363831, 0.5810246467590332, 0.5689280033111572, 0.5451160073280334, 0.5422458648681641, 0.6349937319755554, 0.5501185059547424], "val_accuracy": [0.7493333220481873, 0.777999997138977, 0.8063333630561829, 0.8063333630561829, 0.8259999752044678, 0.8209999799728394, 0.8276666402816772, 0.828000009059906, 0.8153333067893982, 0.8323333263397217, 0.8243333101272583, 0.82833331823349, 0.8226666450500488, 0.8289999961853027, 0.8289999961853027]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 17, 10, 7, 3, 1, 0, 1, 0], "tree_depth": 15}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0], [0, 2, 8, 8, 3], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1], [0, 2, 3, 0, 3, 5, 3, 4, 6, 1, 2, 8, 1, 2, 0, 4, 7, 0, 6, 6, 8, 9, 7, 4, 3, 3, 3, 9], [0, 2, 0, 2, 1, 0, 5, 1, 5, 3, 2, 1, 1, 1, 1, 1, 1, 0], [6, 16, 56, 2, 49, 13], [0, 1, 1], [2], [0, 3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 4, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 71]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 46, 28, 18, 6, 3, 1, 2, 1, 21, 11, 10, 6], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.multiply(tf.math.pow(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.divide_no_nan(grad, alpha)), grad)))), tf.math.divide_no_nan(grad, tf.math.sqrt(beta))))), alpha)), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(alpha, tf.math.multiply(tf.math.multiply(alpha, alpha), alpha))))), tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 2, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [33], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 3, 4, 6, 8, 1, 2, 1, 4, 2, 0, 8, 7, 5, 3], [3, 0, 3, 3, 3, 0, 3, 1, 2, 0, 5, 3], [72, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 6, 3, 3, 2, 2, 1, 1, 1, 27, 15, 12, 3], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(sigma, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, sigma))), tf.math.subtract(tf.math.pow(tf.math.add(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)), sigma), tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.square(beta))))))), tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad)), sigma)", "other_info": {"loss": [3.8563830258963e+34, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.137630432844162, 0.09879804402589798, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09533333033323288, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 2, 5, 4, 5, 2, 4, 0], [0, 1, 0, 2, 2, 1, 2, 3], [83, 99, 27], [0, 1], [0], [0], [0], [0, 1], [0, 9], [0], [0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 0], [1, 4, 0, 2, 4, 0, 5, 5, 4, 1], [0, 70]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 12, 8, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.0, shape=shape, dtype=tf.float32)))), grad), tf.math.square(tf.math.pow(tf.math.square(tf.math.add(grad, alpha)), tf.math.pow(grad, tf.math.negative(grad)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 0, 3], [2, 1, 0, 2, 2], [56, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0], [0, 8, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 2, 0, 0, 3, 1, 2, 0], [16, 60, 96, 99, 61, 26]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), grad)), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), beta))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}, "mapping_values": [1, 10, 5, 5, 1, 6, 4, 2, 1, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}]