[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8837142586708069, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2235751152038574, 1.863627314567566, 1.3881967067718506, 1.0971885919570923, 0.9431154727935791, 0.835616409778595, 0.7718875408172607, 0.7267177104949951, 0.6853072643280029, 0.6501961350440979, 0.6362801194190979, 0.6226356029510498, 0.5988889336585999, 0.5801778435707092, 0.5583580732345581, 0.5447906851768494, 0.5406832695007324, 0.5254860520362854, 0.5062505006790161, 0.5079479217529297, 0.49121394753456116, 0.48989003896713257, 0.47510769963264465, 0.46506667137145996, 0.4554359018802643, 0.45054957270622253, 0.44110772013664246, 0.430584579706192, 0.42144355177879333, 0.4155716598033905, 0.4158378839492798, 0.4039183557033539, 0.4085548520088196, 0.39546728134155273, 0.39515864849090576, 0.3871508538722992, 0.38307344913482666, 0.3732011318206787, 0.3693823516368866, 0.36437657475471497, 0.3559441566467285, 0.3469986915588379, 0.343269407749176, 0.3417010009288788, 0.33637532591819763, 0.32835736870765686, 0.3263590931892395, 0.31998395919799805], "accuracy": [0.2810725271701813, 0.4971602261066437, 0.5653150081634521, 0.6174877882003784, 0.6604147553443909, 0.6975300312042236, 0.7224937081336975, 0.7313432693481445, 0.7481178045272827, 0.7605336308479309, 0.7685906887054443, 0.7737419009208679, 0.7836481332778931, 0.7877426743507385, 0.8004226684570312, 0.7952714562416077, 0.8047813773155212, 0.8120459914207458, 0.8137630224227905, 0.8156121969223022, 0.8216879963874817, 0.8222163319587708, 0.828820526599884, 0.8327829837799072, 0.8348963260650635, 0.8391229510307312, 0.8408400416374207, 0.8436138033866882, 0.8473120927810669, 0.8507462739944458, 0.8518029451370239, 0.8524633646011353, 0.852331280708313, 0.8539162874221802, 0.8544445633888245, 0.8615770936012268, 0.859199583530426, 0.8668603897094727, 0.8696341514587402, 0.8679170608520508, 0.872407853603363, 0.8747853636741638, 0.8750495314598083, 0.8750495314598083, 0.8766345381736755, 0.882710337638855, 0.8792761564254761, 0.8848236799240112], "val_loss": [2.041090488433838, 1.5073738098144531, 1.0351890325546265, 0.8288497924804688, 0.7493756413459778, 0.6886183023452759, 0.646604061126709, 0.6087713837623596, 0.582353949546814, 0.5605174899101257, 0.5534560680389404, 0.5316277742385864, 0.514729917049408, 0.5010638236999512, 0.4920998513698578, 0.47585147619247437, 0.47390398383140564, 0.45993757247924805, 0.46219465136528015, 0.44748595356941223, 0.4464666247367859, 0.44296160340309143, 0.4343818426132202, 0.42551079392433167, 0.42283767461776733, 0.41507044434547424, 0.4149109423160553, 0.4069209098815918, 0.40459540486335754, 0.40145280957221985, 0.3985113203525543, 0.3906044065952301, 0.3908856511116028, 0.3974918723106384, 0.38081249594688416, 0.38753604888916016, 0.37521854043006897, 0.37901124358177185, 0.37925422191619873, 0.3736351728439331, 0.36485224962234497, 0.36611106991767883, 0.3618214428424835, 0.35893985629081726, 0.3620902895927429, 0.35414883494377136, 0.3574270009994507, 0.35906851291656494], "val_accuracy": [0.5236666798591614, 0.6586666703224182, 0.6903333067893982, 0.7173333168029785, 0.734000027179718, 0.7480000257492065, 0.7580000162124634, 0.7746666669845581, 0.7803333401679993, 0.7893333435058594, 0.7866666913032532, 0.8023333549499512, 0.8130000233650208, 0.8149999976158142, 0.8186666369438171, 0.8316666483879089, 0.8273333311080933, 0.8356666564941406, 0.8343333601951599, 0.8399999737739563, 0.8420000076293945, 0.840666651725769, 0.8446666598320007, 0.847000002861023, 0.8503333330154419, 0.8516666889190674, 0.8539999723434448, 0.856333315372467, 0.8583333492279053, 0.8579999804496765, 0.8613333106040955, 0.8573333621025085, 0.8636666536331177, 0.8523333072662354, 0.8656666874885559, 0.8583333492279053, 0.8690000176429749, 0.8683333396911621, 0.8696666955947876, 0.8666666746139526, 0.8700000047683716, 0.8726666569709778, 0.8773333430290222, 0.874666690826416, 0.8759999871253967, 0.8773333430290222, 0.8756666779518127, 0.8766666650772095]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8579999804496765, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2234439849853516, 1.866501808166504, 1.3892910480499268, 1.094988226890564, 0.9336250424385071, 0.8303745985031128, 0.7591425776481628, 0.7173819541931152, 0.6854421496391296, 0.6537204384803772, 0.6177811622619629, 0.5994788408279419, 0.5731849074363708, 0.566276490688324, 0.5484831929206848, 0.5297400951385498, 0.5217315554618835, 0.5037074685096741, 0.5027947425842285, 0.48420605063438416, 0.47732219099998474, 0.4649040102958679, 0.45845022797584534, 0.4525432586669922, 0.43667009472846985, 0.4360121190547943, 0.42515137791633606, 0.4161938428878784, 0.4086307883262634, 0.3980642557144165, 0.401886522769928, 0.38837578892707825, 0.3791259229183197, 0.37948158383369446, 0.37419161200523376, 0.3638079762458801, 0.36033451557159424, 0.35392555594444275, 0.35578274726867676, 0.3461371958255768, 0.3438072204589844, 0.3443046808242798, 0.3367829918861389, 0.33098143339157104, 0.33017826080322266, 0.3299308717250824, 0.31779614090919495, 0.31740203499794006, 0.31069788336753845, 0.3072948157787323, 0.3032093644142151, 0.2915443181991577, 0.29048484563827515, 0.28635236620903015, 0.2799944579601288, 0.2843458950519562, 0.28307583928108215, 0.27845075726509094], "accuracy": [0.25742965936660767, 0.4861973226070404, 0.5705983638763428, 0.6190727949142456, 0.6666226387023926, 0.7091533541679382, 0.7314753532409668, 0.7420420050621033, 0.7508915662765503, 0.7621186375617981, 0.7779685854911804, 0.780610203742981, 0.7955356240272522, 0.7980451583862305, 0.7997622489929199, 0.8095363974571228, 0.8107251524925232, 0.8182538747787476, 0.8170651197433472, 0.8259146809577942, 0.8317263126373291, 0.8310658931732178, 0.8364813327789307, 0.8400475382804871, 0.8449346423149109, 0.8437458872795105, 0.8490291833877563, 0.8514066934585571, 0.8565579056739807, 0.8594637513160706, 0.8602562546730042, 0.8622375130653381, 0.8688416481018066, 0.8640866279602051, 0.8659358024597168, 0.872407853603363, 0.8702945709228516, 0.8739928603172302, 0.874389111995697, 0.878351628780365, 0.8770307898521423, 0.8833707571029663, 0.8804649114608765, 0.8790120482444763, 0.8820499181747437, 0.8816536664962769, 0.887597382068634, 0.8837670087814331, 0.8854840993881226, 0.8887861371040344, 0.8899748921394348, 0.8956544995307922, 0.8948619961738586, 0.894069492816925, 0.8990886211395264, 0.8957865834236145, 0.8980319499969482, 0.9009377956390381], "val_loss": [2.038909435272217, 1.5120561122894287, 1.0348334312438965, 0.8236903548240662, 0.7376577258110046, 0.6761050224304199, 0.6323261857032776, 0.5963923335075378, 0.5759446620941162, 0.5517469644546509, 0.5328708291053772, 0.5206127762794495, 0.5072473287582397, 0.49696969985961914, 0.48082268238067627, 0.47397997975349426, 0.46720707416534424, 0.4599635899066925, 0.4548411965370178, 0.44452059268951416, 0.4378918409347534, 0.4333900511264801, 0.42384105920791626, 0.4232061505317688, 0.4192633330821991, 0.4143552780151367, 0.4076305329799652, 0.4045135974884033, 0.40439069271087646, 0.4013737440109253, 0.3979282081127167, 0.39386335015296936, 0.38710176944732666, 0.38809263706207275, 0.38586872816085815, 0.3793017268180847, 0.3781593143939972, 0.3750097155570984, 0.37387076020240784, 0.36916622519493103, 0.3709564208984375, 0.37208065390586853, 0.36785179376602173, 0.36685603857040405, 0.3644736409187317, 0.3592032790184021, 0.3644222021102905, 0.35931509733200073, 0.36491498351097107, 0.3552433252334595, 0.35492920875549316, 0.35143032670021057, 0.3496737778186798, 0.35345444083213806, 0.35269567370414734, 0.3500424325466156, 0.3537048399448395, 0.3488977551460266], "val_accuracy": [0.5270000100135803, 0.6546666622161865, 0.684333324432373, 0.7049999833106995, 0.7336666584014893, 0.7549999952316284, 0.7639999985694885, 0.778333306312561, 0.7886666655540466, 0.7960000038146973, 0.8059999942779541, 0.8109999895095825, 0.815666675567627, 0.8213333487510681, 0.8259999752044678, 0.8253333568572998, 0.8336666822433472, 0.8346666693687439, 0.8413333296775818, 0.8403333425521851, 0.8426666855812073, 0.8446666598320007, 0.8483333587646484, 0.8476666808128357, 0.8479999899864197, 0.8496666550636292, 0.8493333458900452, 0.8533333539962769, 0.8529999852180481, 0.8500000238418579, 0.8543333411216736, 0.8539999723434448, 0.8629999756813049, 0.8573333621025085, 0.8606666922569275, 0.862666666507721, 0.8636666536331177, 0.862666666507721, 0.8646666407585144, 0.8669999837875366, 0.8653333187103271, 0.8656666874885559, 0.8709999918937683, 0.8666666746139526, 0.8650000095367432, 0.8696666955947876, 0.8629999756813049, 0.8713333606719971, 0.8709999918937683, 0.8736666440963745, 0.8736666440963745, 0.8733333349227905, 0.8790000081062317, 0.8690000176429749, 0.8713333606719971, 0.878333330154419, 0.8759999871253967, 0.875]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 3, 4, 2, 6, 3, 8, 1, 6, 6, 5], [0, 4, 1, 2, 4, 4, 2, 4, 5, 1], [0], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.854285717010498, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.pow(tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.math.subtract(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha)), tf.math.divide_no_nan(beta, grad)), grad), tf.math.square(beta)), grad), grad), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2928082942962646, 2.1913414001464844, 1.774082064628601, 1.3506696224212646, 1.081150770187378, 0.9339689016342163, 0.8509129881858826, 0.8476976752281189, 0.7782264947891235, 0.7644846439361572, 0.7207648158073425, 0.7075070142745972, 0.6603304743766785, 0.6431052088737488, 0.6163829565048218, 0.6140523552894592, 0.582801103591919, 0.5860711336135864, 0.5673972368240356, 0.5559072494506836, 0.5418530106544495, 0.51453697681427, 0.5175657272338867, 0.5087911486625671, 0.5001063346862793, 0.4867299199104309, 0.4988025426864624, 0.48632508516311646, 0.4656863510608673, 0.45249783992767334, 0.44962772727012634, 0.435634970664978, 0.44907882809638977, 0.43033334612846375, 0.4331232011318207, 0.4208478629589081, 0.41245919466018677, 0.4052387475967407, 0.3967174291610718, 0.3912954330444336, 0.39138010144233704, 0.38433244824409485, 0.36224818229675293, 0.36277011036872864, 0.36084362864494324, 0.3471270501613617, 0.34475746750831604, 0.3561913073062897, 0.3284550905227661], "accuracy": [0.13036586344242096, 0.3271694481372833, 0.4443270266056061, 0.5460308790206909, 0.6302998065948486, 0.6600185036659241, 0.6905296444892883, 0.6915863156318665, 0.7062475085258484, 0.707568347454071, 0.7256637215614319, 0.7318716049194336, 0.7511557340621948, 0.7520803213119507, 0.7637035846710205, 0.7637035846710205, 0.7761194109916687, 0.77677983045578, 0.785629391670227, 0.7931581139564514, 0.7977809906005859, 0.8025360107421875, 0.8047813773155212, 0.8057059645652771, 0.8054417967796326, 0.8127063512802124, 0.8119139075279236, 0.8158763647079468, 0.8195747137069702, 0.8285563588142395, 0.8297450542449951, 0.8372738361358643, 0.8240655064582825, 0.8366134166717529, 0.8372738361358643, 0.8379341959953308, 0.837537944316864, 0.8471800088882446, 0.8481045961380005, 0.8499537706375122, 0.8500858545303345, 0.8512746095657349, 0.8601241707801819, 0.8541803956031799, 0.8602562546730042, 0.8663320541381836, 0.8664641380310059, 0.8621054291725159, 0.8698983192443848], "val_loss": [2.245112419128418, 2.017728090286255, 1.139653205871582, 0.8552629351615906, 0.7519080638885498, 0.7109562754631042, 0.6911701560020447, 0.6818291544914246, 0.6558552384376526, 0.6225132942199707, 0.5787180662155151, 0.5483388900756836, 0.5429917573928833, 0.5309993624687195, 0.5174981951713562, 0.49339061975479126, 0.4899364113807678, 0.48826029896736145, 0.4761829376220703, 0.47751057147979736, 0.4756280779838562, 0.47334256768226624, 0.46852409839630127, 0.4741207957267761, 0.460359662771225, 0.454921156167984, 0.45699214935302734, 0.4358501434326172, 0.42290249466896057, 0.4319639205932617, 0.422631174325943, 0.41158732771873474, 0.4169831871986389, 0.4220436215400696, 0.4308217763900757, 0.4033676087856293, 0.40604329109191895, 0.4280809462070465, 0.4080744683742523, 0.40360814332962036, 0.4036944508552551, 0.40146028995513916, 0.4057961404323578, 0.4043560326099396, 0.3971339464187622, 0.40348997712135315, 0.4073834717273712, 0.400016188621521, 0.3964078724384308], "val_accuracy": [0.42533332109451294, 0.4749999940395355, 0.6526666879653931, 0.6959999799728394, 0.7203333377838135, 0.737666666507721, 0.7279999852180481, 0.7443333268165588, 0.7486666440963745, 0.7680000066757202, 0.7723333239555359, 0.7836666703224182, 0.7860000133514404, 0.7979999780654907, 0.7873333096504211, 0.8053333163261414, 0.8006666898727417, 0.8059999942779541, 0.8206666707992554, 0.8243333101272583, 0.8233333230018616, 0.8259999752044678, 0.8256666660308838, 0.8246666789054871, 0.8263333439826965, 0.8366666436195374, 0.8396666646003723, 0.8396666646003723, 0.8463333249092102, 0.8429999947547913, 0.8503333330154419, 0.8569999933242798, 0.8526666760444641, 0.859000027179718, 0.8529999852180481, 0.8610000014305115, 0.8616666793823242, 0.8600000143051147, 0.8619999885559082, 0.8619999885559082, 0.8659999966621399, 0.8676666617393494, 0.8673333525657654, 0.871666669845581, 0.871666669845581, 0.8703333139419556, 0.8683333396911621, 0.8693333268165588, 0.8709999918937683]}, "mapping_values": [1, 10, 5, 5, 3, 22, 12, 10, 1, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 24}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 0, 1, 1, 1], [0, 5, 3, 1], [0, 1, 7], [0], [1], [0], [2], [0]], "fitness": -0.8362857103347778, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha), grad))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5500239133834839, 0.9067978262901306, 0.77243572473526, 0.6662629842758179, 0.5888798832893372, 0.5839555263519287, 0.5744683146476746, 0.5501567721366882, 0.5226781368255615, 0.5068517923355103, 0.4866792857646942, 0.4864633083343506, 0.4718509912490845, 0.4639258086681366, 0.4490736722946167, 0.46326377987861633, 0.4616492986679077, 0.5136534571647644, 0.5211853384971619], "accuracy": [0.4682340621948242, 0.6922467350959778, 0.7248712182044983, 0.7585523724555969, 0.7833839654922485, 0.7936864495277405, 0.7928939461708069, 0.8113855719566345, 0.8086118102073669, 0.8156121969223022, 0.8249900937080383, 0.8267071843147278, 0.8257825970649719, 0.8322546482086182, 0.8453308939933777, 0.8418967127799988, 0.8381983637809753, 0.834632158279419, 0.8219521641731262], "val_loss": [0.7898535132408142, 0.7099531888961792, 0.5753872990608215, 0.5304504036903381, 0.5077676773071289, 0.5272400379180908, 0.5030689835548401, 0.5563598871231079, 0.5144554972648621, 0.5407918095588684, 0.49340471625328064, 0.5702334046363831, 0.5588271021842957, 0.5671767592430115, 0.5495234727859497, 0.6423783898353577, 0.6228373050689697, 0.6456583142280579, 0.6276935338973999], "val_accuracy": [0.7276666760444641, 0.7609999775886536, 0.7976666688919067, 0.8033333420753479, 0.8203333616256714, 0.8153333067893982, 0.8256666660308838, 0.8223333358764648, 0.8276666402816772, 0.8256666660308838, 0.8330000042915344, 0.8446666598320007, 0.8253333568572998, 0.8479999899864197, 0.843999981880188, 0.840666651725769, 0.8456666469573975, 0.8373333215713501, 0.8413333296775818]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 7, 4, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 0], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [8, 1, 5, 0, 3, 5], [0, 2, 3, 3], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [5, 3, 8, 6, 8, 1, 4, 1, 4, 2, 4, 6, 7, 2, 1, 1, 2], [0, 0, 0, 3, 1, 0, 2, 1, 2, 0, 6, 4, 3, 3, 7], [16, 99, 34, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.subtract(tf.math.square(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(alpha, tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, alpha), beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.subtract(tf.math.subtract(grad, tf.math.add(grad, sigma)), sigma), grad))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}, "mapping_values": [1, 8, 5, 3, 2, 6, 4, 2, 1, 1, 0, 1, 1, 32, 17, 15, 5], "tree_depth": 21}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 2, 3, 0, 8, 3, 6, 2, 0, 5, 7, 8, 7], [0, 1, 0, 2, 1, 2, 0, 2, 3], [39, 39, 79], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [44, 64], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 1, 7, 2, 6, 7, 7, 0, 7, 5, 0, 4, 7, 0, 0, 6, 2, 7, 7], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 3, 6, 0, 7, 1, 3, 7, 0, 6, 6, 3, 3, 0], [4, 99, 96, 84, 61, 1, 99, 7, 7]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 13, 9, 3, 10, 6, 4, 2, 2, 1, 1, 1, 52, 29, 23, 9], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(tf.math.negative(grad), alpha), tf.math.square(tf.math.add(grad, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.add(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(sigma))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(sigma, alpha), tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), sigma), tf.math.pow(tf.math.add(grad, tf.constant(1.0, shape=shape, dtype=tf.float32)), grad)), alpha), sigma)))), tf.math.negative(tf.math.negative(tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.add(grad, grad)), sigma)))))), sigma), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3], [0, 0, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 3, 1, 1, 0], [0, 27, 40, 0], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 5, 2, 5, 4, 1, 4, 2, 8], [2, 3, 4, 0, 3, 4, 1, 2, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 6, 3, 3, 2, 2, 1, 1, 1, 15, 8, 7, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(beta, tf.math.square(tf.math.add(tf.math.square(sigma), tf.math.pow(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), tf.math.subtract(sigma, grad)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 2, 0, 3, 5], [0, 2, 0, 3], [16, 87], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 0, 1, 4, 2, 8], [0, 4, 0, 0, 0, 0, 3, 1, 4, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.09028571099042892, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 13, 7, 6, 5], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.310195207595825, 2.309471607208252, 2.310854911804199, 2.3098104000091553, 2.31050968170166, 2.309938430786133], "accuracy": [0.09298639744520187, 0.0948355570435524, 0.08928807079792023, 0.09087307006120682, 0.08994849026203156, 0.09245806187391281], "val_loss": [2.3087265491485596, 2.3087265491485596, 2.3087265491485596, 2.3087265491485596, 2.3087265491485596, 2.3087265491485596], "val_accuracy": [0.09266666322946548, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548]}}]