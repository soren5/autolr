[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222564220428467, 1.8654934167861938, 1.392636775970459, 1.0800100564956665, 0.9349965453147888, 0.83723384141922, 0.771166205406189, 0.7229189872741699, 0.6917352080345154, 0.6532851457595825, 0.6217012405395508, 0.6138775944709778, 0.5917757749557495, 0.5793368220329285, 0.5567960739135742, 0.5480981469154358, 0.5474538803100586, 0.5317270755767822, 0.5151227116584778, 0.5055264234542847, 0.5014929175376892, 0.4862228035926819, 0.4727080464363098, 0.47010233998298645, 0.46293196082115173, 0.4504174590110779, 0.447412371635437, 0.4438058137893677, 0.42948198318481445, 0.417126327753067, 0.4136964678764343, 0.40704113245010376, 0.4020131528377533, 0.39997783303260803, 0.39442774653434753, 0.3916949927806854, 0.38260385394096375, 0.3716582953929901, 0.3650337755680084, 0.3573426902294159, 0.36132100224494934, 0.3564379811286926, 0.3445151448249817, 0.33812835812568665, 0.3384065330028534, 0.3359524607658386, 0.33294373750686646, 0.3212839663028717, 0.3217304050922394, 0.3110441267490387, 0.31119072437286377], "accuracy": [0.2685246467590332, 0.4955752193927765, 0.5610883831977844, 0.6197332143783569, 0.6668868064880371, 0.6963412761688232, 0.7205125093460083, 0.7349095344543457, 0.7469290494918823, 0.7604015469551086, 0.7732135653495789, 0.7761194109916687, 0.7878747582435608, 0.7901201844215393, 0.8009510040283203, 0.802271842956543, 0.8050455451011658, 0.8103289008140564, 0.8158763647079468, 0.8197067975997925, 0.817461371421814, 0.8255184292793274, 0.8273676037788391, 0.8333113193511963, 0.832650899887085, 0.8392550349235535, 0.8367455005645752, 0.8408400416374207, 0.8474441766738892, 0.8475762605667114, 0.8519350290298462, 0.8545766472816467, 0.8574824929237366, 0.8544445633888245, 0.8589354157447815, 0.8561616539955139, 0.8632941246032715, 0.8640866279602051, 0.869502067565918, 0.8702945709228516, 0.8702945709228516, 0.8689737319946289, 0.8772949576377869, 0.8754457831382751, 0.8767666220664978, 0.8809932470321655, 0.8776912093162537, 0.8853520154953003, 0.8811253309249878, 0.8886540532112122, 0.8885219693183899], "val_loss": [2.042604923248291, 1.5189800262451172, 1.0515391826629639, 0.8450219035148621, 0.7558016777038574, 0.7093545794487, 0.6593213081359863, 0.6230939030647278, 0.5998342037200928, 0.5830129981040955, 0.5592260956764221, 0.5484577417373657, 0.5345214009284973, 0.5245682597160339, 0.508945107460022, 0.5038147568702698, 0.4949795603752136, 0.4867953658103943, 0.47808560729026794, 0.4682127833366394, 0.46202969551086426, 0.4617370665073395, 0.4514632225036621, 0.4495610296726227, 0.4391477108001709, 0.43453720211982727, 0.42648962140083313, 0.42570948600769043, 0.4242604672908783, 0.4146496057510376, 0.41664713621139526, 0.4113439619541168, 0.41593310236930847, 0.4013250470161438, 0.40437138080596924, 0.39875122904777527, 0.3905998170375824, 0.3918660581111908, 0.38664665818214417, 0.3956036865711212, 0.38548287749290466, 0.3855803310871124, 0.3777529299259186, 0.3802799582481384, 0.3779101073741913, 0.371540904045105, 0.3776323199272156, 0.36875513195991516, 0.37442195415496826, 0.3655129075050354, 0.3628164827823639], "val_accuracy": [0.5523333549499512, 0.6656666398048401, 0.6830000281333923, 0.7059999704360962, 0.7336666584014893, 0.7506666779518127, 0.7580000162124634, 0.7689999938011169, 0.7736666798591614, 0.7846666574478149, 0.7950000166893005, 0.7963333129882812, 0.7993333339691162, 0.8100000023841858, 0.8173333406448364, 0.8190000057220459, 0.8213333487510681, 0.8209999799728394, 0.8286666870117188, 0.828000009059906, 0.8323333263397217, 0.8336666822433472, 0.8333333134651184, 0.8349999785423279, 0.8386666774749756, 0.8393333554267883, 0.8429999947547913, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8446666598320007, 0.8463333249092102, 0.8503333330154419, 0.8529999852180481, 0.8493333458900452, 0.8550000190734863, 0.8546666502952576, 0.856333315372467, 0.8613333106040955, 0.856333315372467, 0.859000027179718, 0.8550000190734863, 0.8586666584014893, 0.8633333444595337, 0.8619999885559082, 0.8659999966621399, 0.859666645526886, 0.862666666507721, 0.8603333234786987, 0.8610000014305115, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8605714440345764, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221120834350586, 1.8673607110977173, 1.402588129043579, 1.101830244064331, 0.9569275975227356, 0.8497902154922485, 0.7832900881767273, 0.7298540472984314, 0.6990047693252563, 0.673777163028717, 0.6503850817680359, 0.6163181066513062, 0.6081980466842651, 0.5917549133300781, 0.5671778321266174, 0.5602735280990601, 0.5364028215408325, 0.5330886244773865, 0.5219871401786804, 0.5088837742805481, 0.49635809659957886, 0.48631522059440613, 0.47941145300865173, 0.4728926122188568, 0.4609336853027344, 0.4534028470516205, 0.44961580634117126, 0.43913424015045166, 0.4260362684726715, 0.4254007935523987, 0.4148004651069641, 0.40839827060699463, 0.4051099121570587, 0.3897843062877655, 0.3884599506855011, 0.39230239391326904, 0.3857577443122864, 0.37602856755256653, 0.37064120173454285, 0.3622942864894867, 0.35956791043281555, 0.3599250912666321, 0.3455185890197754, 0.3449403941631317, 0.3339168131351471, 0.33121258020401, 0.33296650648117065, 0.3263130486011505, 0.3310271203517914, 0.31783613562583923, 0.3125482201576233], "accuracy": [0.2767137885093689, 0.49306565523147583, 0.5610883831977844, 0.6164311170578003, 0.6579051613807678, 0.6983225345611572, 0.7172104120254517, 0.7341170310974121, 0.7467969655990601, 0.7515519857406616, 0.7629110813140869, 0.7759873270988464, 0.7796856164932251, 0.7802139520645142, 0.7917051911354065, 0.7964601516723633, 0.8062343001365662, 0.8049134612083435, 0.8124422430992126, 0.8181217908859253, 0.8228767514228821, 0.8240655064582825, 0.8302733898162842, 0.8318583965301514, 0.8342359066009521, 0.8381983637809753, 0.8413683772087097, 0.8409721255302429, 0.8470479249954224, 0.8453308939933777, 0.852331280708313, 0.8524633646011353, 0.8565579056739807, 0.8593316674232483, 0.8640866279602051, 0.8628978729248047, 0.8631620407104492, 0.8639545440673828, 0.8677849769592285, 0.8714832663536072, 0.8717474341392517, 0.8706908226013184, 0.8767666220664978, 0.8778232932090759, 0.8802007436752319, 0.878879964351654, 0.8782195448875427, 0.8816536664962769, 0.8824461698532104, 0.8819178342819214, 0.8844274282455444], "val_loss": [2.036510467529297, 1.5143349170684814, 1.0438189506530762, 0.8342743515968323, 0.7442945837974548, 0.6835758686065674, 0.6419472694396973, 0.6055135726928711, 0.5780074000358582, 0.566606342792511, 0.544039785861969, 0.5315260291099548, 0.5120301246643066, 0.4990527033805847, 0.49340906739234924, 0.4726335406303406, 0.46337059140205383, 0.45865657925605774, 0.4487224817276001, 0.4452933669090271, 0.4368937313556671, 0.4283847212791443, 0.4239184558391571, 0.41676709055900574, 0.4164997935295105, 0.41005054116249084, 0.40768754482269287, 0.4012695252895355, 0.39680060744285583, 0.3898128271102905, 0.3909969627857208, 0.3938281238079071, 0.3827013373374939, 0.3793197572231293, 0.37829023599624634, 0.3771343231201172, 0.36948487162590027, 0.3710983991622925, 0.37292349338531494, 0.36737775802612305, 0.36604052782058716, 0.36563634872436523, 0.36305585503578186, 0.3566964566707611, 0.35748735070228577, 0.3546760678291321, 0.3533252477645874, 0.35502973198890686, 0.351395845413208, 0.3510514199733734, 0.3451409637928009], "val_accuracy": [0.5243333578109741, 0.656000018119812, 0.6793333292007446, 0.7106666564941406, 0.7289999723434448, 0.7513333559036255, 0.7616666555404663, 0.7726666927337646, 0.7839999794960022, 0.7846666574478149, 0.7906666398048401, 0.800000011920929, 0.809333324432373, 0.8109999895095825, 0.8183333277702332, 0.8306666612625122, 0.8330000042915344, 0.8336666822433472, 0.8379999995231628, 0.8373333215713501, 0.8386666774749756, 0.8416666388511658, 0.8489999771118164, 0.8463333249092102, 0.8516666889190674, 0.8550000190734863, 0.8553333282470703, 0.8526666760444641, 0.859333336353302, 0.8586666584014893, 0.856333315372467, 0.859000027179718, 0.8616666793823242, 0.8646666407585144, 0.8640000224113464, 0.8640000224113464, 0.8656666874885559, 0.8686666488647461, 0.8643333315849304, 0.8666666746139526, 0.8663333058357239, 0.8700000047683716, 0.8676666617393494, 0.8726666569709778, 0.871999979019165, 0.8736666440963745, 0.8703333139419556, 0.8733333349227905, 0.8700000047683716, 0.8709999918937683, 0.8736666440963745]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0], [0, 6, 9], [0], [0, 30], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8488571643829346, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2937393188476562, 2.1916704177856445, 1.7679052352905273, 1.3389467000961304, 1.05129873752594, 0.9058427810668945, 0.8634123206138611, 0.8008643984794617, 0.7608991265296936, 0.7267493605613708, 0.703813910484314, 0.6767834424972534, 0.6384384632110596, 0.613889217376709, 0.5924685597419739, 0.5750382542610168, 0.557441234588623, 0.5526303052902222, 0.529297411441803, 0.5317656397819519, 0.5202940106391907, 0.5124207139015198, 0.503572940826416, 0.4901202917098999, 0.47614574432373047, 0.4665774703025818, 0.4666885435581207, 0.44685807824134827, 0.4518963694572449, 0.4400466978549957, 0.42956310510635376, 0.40831199288368225, 0.40467163920402527, 0.3925617039203644, 0.38230136036872864, 0.38479331135749817, 0.3824901878833771, 0.3755253553390503, 0.3621232211589813, 0.3552481234073639, 0.352493017911911, 0.3460707664489746, 0.34820812940597534, 0.3317176103591919, 0.3305896818637848, 0.3235374987125397, 0.3201911151409149, 0.3146006166934967], "accuracy": [0.1278562992811203, 0.32333904504776, 0.4472328722476959, 0.5449742674827576, 0.6445648074150085, 0.6692643165588379, 0.6963412761688232, 0.7040021419525146, 0.7082287669181824, 0.7279091477394104, 0.7342491149902344, 0.7417778372764587, 0.7627789974212646, 0.7660810947418213, 0.77677983045578, 0.7812706232070923, 0.7817989587783813, 0.7921014428138733, 0.8012151718139648, 0.7984414100646973, 0.7977809906005859, 0.802800178527832, 0.8055738806724548, 0.8129705190658569, 0.8183859586715698, 0.8230088353157043, 0.8220842480659485, 0.8323867321014404, 0.830669641494751, 0.8285563588142395, 0.8342359066009521, 0.8411042094230652, 0.8461233377456665, 0.8487650156021118, 0.8532558679580688, 0.8524633646011353, 0.8544445633888245, 0.8548408150672913, 0.8582749962806702, 0.8643507957458496, 0.86553955078125, 0.8688416481018066, 0.8615770936012268, 0.874389111995697, 0.8714832663536072, 0.8702945709228516, 0.8732003569602966, 0.8739928603172302], "val_loss": [2.24641752243042, 2.0188815593719482, 1.1352843046188354, 0.8671285510063171, 0.7633954286575317, 0.7067717909812927, 0.6822621822357178, 0.6554429531097412, 0.6507695913314819, 0.6190115809440613, 0.592840313911438, 0.5691218972206116, 0.5552411675453186, 0.5401796102523804, 0.5392877459526062, 0.5338621139526367, 0.5217239856719971, 0.5264507532119751, 0.5027909874916077, 0.4996824264526367, 0.49629825353622437, 0.4846556782722473, 0.4783862829208374, 0.48216569423675537, 0.4664134979248047, 0.4675676226615906, 0.4632958173751831, 0.46681657433509827, 0.44958966970443726, 0.448289155960083, 0.42955583333969116, 0.43103888630867004, 0.42786356806755066, 0.42410725355148315, 0.4200684130191803, 0.42133456468582153, 0.41305530071258545, 0.4202609956264496, 0.40986546874046326, 0.407337486743927, 0.41204777359962463, 0.4211706221103668, 0.4069112241268158, 0.408463716506958, 0.3978370726108551, 0.4077029228210449, 0.4083404839038849, 0.42317309975624084], "val_accuracy": [0.43533334136009216, 0.47699999809265137, 0.6420000195503235, 0.6923333406448364, 0.7080000042915344, 0.7296666502952576, 0.7319999933242798, 0.7523333430290222, 0.7509999871253967, 0.7580000162124634, 0.7620000243186951, 0.7789999842643738, 0.7893333435058594, 0.7950000166893005, 0.7889999747276306, 0.7900000214576721, 0.8036666512489319, 0.8043333292007446, 0.812666654586792, 0.8223333358764648, 0.8213333487510681, 0.8236666917800903, 0.8240000009536743, 0.8230000138282776, 0.8243333101272583, 0.8246666789054871, 0.8320000171661377, 0.8330000042915344, 0.8360000252723694, 0.8370000123977661, 0.8463333249092102, 0.8526666760444641, 0.8506666421890259, 0.8533333539962769, 0.8519999980926514, 0.8529999852180481, 0.8573333621025085, 0.8519999980926514, 0.8573333621025085, 0.8616666793823242, 0.8629999756813049, 0.862333357334137, 0.8646666407585144, 0.862666666507721, 0.8640000224113464, 0.8600000143051147, 0.862666666507721, 0.8603333234786987]}, "mapping_values": [1, 10, 5, 5, 3, 4, 3, 1, 2, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1], [0, 5, 8], [0], [0], [1], [0], [2], [0]], "fitness": -0.8345714211463928, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5745877027511597, 0.8514919281005859, 0.68795245885849, 0.6262213587760925, 0.5973207950592041, 0.5768516659736633, 0.5385832190513611, 0.5358403921127319, 0.5142578482627869, 0.5419530868530273, 0.5198255181312561, 0.49570509791374207, 0.5266445875167847, 0.5201188921928406, 0.5002152323722839, 0.48476293683052063, 0.4877471327781677, 0.5077424645423889, 0.48247861862182617, 0.46605825424194336, 0.4903014898300171, 0.45910096168518066, 0.4782540500164032, 0.49559542536735535, 0.48926326632499695, 0.5293083786964417, 0.5037422180175781, 0.5213000774383545], "accuracy": [0.47668737173080444, 0.687887966632843, 0.7518161535263062, 0.7681944370269775, 0.7816668748855591, 0.7873464822769165, 0.7969884872436523, 0.8062343001365662, 0.8165367841720581, 0.7994980812072754, 0.8112534880638123, 0.8230088353157043, 0.8127063512802124, 0.8204993009567261, 0.8252542614936829, 0.8314621448516846, 0.830669641494751, 0.8171972036361694, 0.8240655064582825, 0.837141752243042, 0.8396512866020203, 0.8441421389579773, 0.8388587832450867, 0.8260467648506165, 0.8308017253875732, 0.8252542614936829, 0.8378021121025085, 0.8267071843147278], "val_loss": [0.8324399590492249, 0.6465267539024353, 0.5604764223098755, 0.5404373407363892, 0.5328656435012817, 0.49154210090637207, 0.5089361667633057, 0.5103278160095215, 0.5421554446220398, 0.49360916018486023, 0.566862165927887, 0.5426720976829529, 0.5257482528686523, 0.5647414326667786, 0.5757381319999695, 0.5479048490524292, 0.5459970831871033, 0.527289628982544, 0.533994197845459, 0.562701404094696, 0.5127242803573608, 0.5638793706893921, 0.6502785682678223, 0.5367496609687805, 0.5446503758430481, 0.5817389488220215, 0.5342681407928467, 0.6087886691093445], "val_accuracy": [0.684333324432373, 0.7556666731834412, 0.7829999923706055, 0.8036666512489319, 0.7933333516120911, 0.8153333067893982, 0.8213333487510681, 0.8193333148956299, 0.8276666402816772, 0.824999988079071, 0.8243333101272583, 0.8293333053588867, 0.8223333358764648, 0.8336666822433472, 0.8330000042915344, 0.8386666774749756, 0.8373333215713501, 0.8263333439826965, 0.843666672706604, 0.8339999914169312, 0.8416666388511658, 0.8473333120346069, 0.8526666760444641, 0.8339999914169312, 0.8356666564941406, 0.8403333425521851, 0.8420000076293945, 0.8326666951179504]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 4, 3, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 5, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 1], [3], [0, 4], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 8, 0, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [16, 99, 96, 51, 61, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 3, 3, 2, 3, 1, 2, 1, 11, 6, 5, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.negative(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3032374382019043, 2.3025834560394287, 2.302582263946533, 2.3025827407836914, 2.302579402923584, 2.302583694458008, 2.3025829792022705], "accuracy": [0.10434553027153015, 0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.302584648132324, 2.302584648132324, 2.3025832176208496, 2.3025832176208496, 2.3025803565979004, 2.302579641342163, 2.302579402923584], "val_accuracy": [0.09866666793823242, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 4, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 8, 5], [2, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [1, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [69, 99, 96, 99, 63, 11]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 8, 5, 3, 1, 2, 1, 1, 1, 21, 12, 9, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(beta), beta), tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.multiply(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), sigma)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))))), alpha), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [4, 2, 3, 0, 3], [0, 2, 0, 2, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 2, 9, 0, 4, 5], [3, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 4, 0, 0, 3, 1, 3, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 5, 4, 1, 1, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(sigma), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0], [0, 2, 3, 0, 3, 5, 7, 9, 1, 8, 2, 4, 8, 7, 8, 2, 8, 8, 2, 1, 3, 4, 4, 8, 9], [3, 2, 0, 3, 3, 5, 0, 3, 4, 1, 5, 0, 2], [16, 16, 32, 17, 10], [0, 0, 1, 1], [0, 7], [0, 4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 2, 3, 1, 4, 1, 4, 2, 3], [0, 0, 0, 3, 0, 0, 1, 1, 0, 0], [16, 99, 96, 99, 93, 1]], "fitness": -0.09714286029338837, "mapping_values": [1, 9, 5, 4, 2, 38, 25, 13, 5, 4, 2, 2, 1, 17, 8, 9, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), tf.math.multiply(tf.math.square(beta), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.sqrt(grad), tf.math.add(grad, tf.math.pow(tf.math.sqrt(tf.math.add(tf.math.sqrt(grad), tf.math.add(tf.math.sqrt(tf.math.sqrt(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), grad))), tf.math.add(grad, tf.math.subtract(tf.math.multiply(alpha, grad), tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.sqrt(beta), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), alpha)), alpha), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.308314085006714, 2.3037197589874268, 2.302726984024048, 2.302518606185913, 2.3024356365203857, 2.3016486167907715], "accuracy": [0.09338264167308807, 0.09391097724437714, 0.08875974267721176, 0.08942015469074249, 0.08413683623075485, 0.09298639744520187], "val_loss": [2.305476665496826, 2.3030812740325928, 2.3027126789093018, 2.3025381565093994, 2.3022830486297607, 2.302213430404663], "val_accuracy": [0.0976666659116745, 0.09600000083446503, 0.0729999989271164, 0.0676666647195816, 0.061666667461395264, 0.05766666680574417]}}]