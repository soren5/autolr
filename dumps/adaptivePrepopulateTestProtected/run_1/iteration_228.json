[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8837142586708069, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2235751152038574, 1.863627314567566, 1.3881967067718506, 1.0971885919570923, 0.9431154727935791, 0.835616409778595, 0.7718875408172607, 0.7267177104949951, 0.6853072643280029, 0.6501961350440979, 0.6362801194190979, 0.6226356029510498, 0.5988889336585999, 0.5801778435707092, 0.5583580732345581, 0.5447906851768494, 0.5406832695007324, 0.5254860520362854, 0.5062505006790161, 0.5079479217529297, 0.49121394753456116, 0.48989003896713257, 0.47510769963264465, 0.46506667137145996, 0.4554359018802643, 0.45054957270622253, 0.44110772013664246, 0.430584579706192, 0.42144355177879333, 0.4155716598033905, 0.4158378839492798, 0.4039183557033539, 0.4085548520088196, 0.39546728134155273, 0.39515864849090576, 0.3871508538722992, 0.38307344913482666, 0.3732011318206787, 0.3693823516368866, 0.36437657475471497, 0.3559441566467285, 0.3469986915588379, 0.343269407749176, 0.3417010009288788, 0.33637532591819763, 0.32835736870765686, 0.3263590931892395, 0.31998395919799805], "accuracy": [0.2810725271701813, 0.4971602261066437, 0.5653150081634521, 0.6174877882003784, 0.6604147553443909, 0.6975300312042236, 0.7224937081336975, 0.7313432693481445, 0.7481178045272827, 0.7605336308479309, 0.7685906887054443, 0.7737419009208679, 0.7836481332778931, 0.7877426743507385, 0.8004226684570312, 0.7952714562416077, 0.8047813773155212, 0.8120459914207458, 0.8137630224227905, 0.8156121969223022, 0.8216879963874817, 0.8222163319587708, 0.828820526599884, 0.8327829837799072, 0.8348963260650635, 0.8391229510307312, 0.8408400416374207, 0.8436138033866882, 0.8473120927810669, 0.8507462739944458, 0.8518029451370239, 0.8524633646011353, 0.852331280708313, 0.8539162874221802, 0.8544445633888245, 0.8615770936012268, 0.859199583530426, 0.8668603897094727, 0.8696341514587402, 0.8679170608520508, 0.872407853603363, 0.8747853636741638, 0.8750495314598083, 0.8750495314598083, 0.8766345381736755, 0.882710337638855, 0.8792761564254761, 0.8848236799240112], "val_loss": [2.041090488433838, 1.5073738098144531, 1.0351890325546265, 0.8288497924804688, 0.7493756413459778, 0.6886183023452759, 0.646604061126709, 0.6087713837623596, 0.582353949546814, 0.5605174899101257, 0.5534560680389404, 0.5316277742385864, 0.514729917049408, 0.5010638236999512, 0.4920998513698578, 0.47585147619247437, 0.47390398383140564, 0.45993757247924805, 0.46219465136528015, 0.44748595356941223, 0.4464666247367859, 0.44296160340309143, 0.4343818426132202, 0.42551079392433167, 0.42283767461776733, 0.41507044434547424, 0.4149109423160553, 0.4069209098815918, 0.40459540486335754, 0.40145280957221985, 0.3985113203525543, 0.3906044065952301, 0.3908856511116028, 0.3974918723106384, 0.38081249594688416, 0.38753604888916016, 0.37521854043006897, 0.37901124358177185, 0.37925422191619873, 0.3736351728439331, 0.36485224962234497, 0.36611106991767883, 0.3618214428424835, 0.35893985629081726, 0.3620902895927429, 0.35414883494377136, 0.3574270009994507, 0.35906851291656494], "val_accuracy": [0.5236666798591614, 0.6586666703224182, 0.6903333067893982, 0.7173333168029785, 0.734000027179718, 0.7480000257492065, 0.7580000162124634, 0.7746666669845581, 0.7803333401679993, 0.7893333435058594, 0.7866666913032532, 0.8023333549499512, 0.8130000233650208, 0.8149999976158142, 0.8186666369438171, 0.8316666483879089, 0.8273333311080933, 0.8356666564941406, 0.8343333601951599, 0.8399999737739563, 0.8420000076293945, 0.840666651725769, 0.8446666598320007, 0.847000002861023, 0.8503333330154419, 0.8516666889190674, 0.8539999723434448, 0.856333315372467, 0.8583333492279053, 0.8579999804496765, 0.8613333106040955, 0.8573333621025085, 0.8636666536331177, 0.8523333072662354, 0.8656666874885559, 0.8583333492279053, 0.8690000176429749, 0.8683333396911621, 0.8696666955947876, 0.8666666746139526, 0.8700000047683716, 0.8726666569709778, 0.8773333430290222, 0.874666690826416, 0.8759999871253967, 0.8773333430290222, 0.8756666779518127, 0.8766666650772095]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8659999966621399, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223684310913086, 1.8655160665512085, 1.379196047782898, 1.0912163257598877, 0.9402640461921692, 0.8355085253715515, 0.7637160420417786, 0.7255861163139343, 0.6806430220603943, 0.6530026197433472, 0.6265086531639099, 0.6048099994659424, 0.5772045850753784, 0.5618361830711365, 0.5472090244293213, 0.5375014543533325, 0.5254420042037964, 0.505954921245575, 0.49675360321998596, 0.49552255868911743, 0.47421973943710327, 0.46635863184928894, 0.45897698402404785, 0.44424155354499817, 0.43710023164749146, 0.4242314100265503, 0.4324704706668854, 0.4160706698894501, 0.4105522334575653, 0.413740873336792, 0.4002600312232971, 0.39150160551071167, 0.38144156336784363, 0.38456442952156067, 0.36814621090888977, 0.37328779697418213, 0.3631255030632019, 0.3575533628463745, 0.34977951645851135], "accuracy": [0.2678642272949219, 0.4939902126789093, 0.5695416927337646, 0.6205257177352905, 0.6680755615234375, 0.6999075412750244, 0.7194558382034302, 0.7334566116333008, 0.7499669790267944, 0.7683265209197998, 0.7707040309906006, 0.7865539789199829, 0.7903843522071838, 0.8021397590637207, 0.8035926818847656, 0.8099326491355896, 0.8117818236351013, 0.816008448600769, 0.8224804997444153, 0.8228767514228821, 0.8338396549224854, 0.8358209133148193, 0.8374059200286865, 0.8405758738517761, 0.8438779711723328, 0.8469158411026001, 0.8455950617790222, 0.8488970994949341, 0.8543124794960022, 0.8557654023170471, 0.8560295701026917, 0.8631620407104492, 0.8643507957458496, 0.8636903762817383, 0.8668603897094727, 0.8660678863525391, 0.8705587387084961, 0.8714832663536072, 0.8725399374961853], "val_loss": [2.0415472984313965, 1.5227354764938354, 1.0537798404693604, 0.8487650752067566, 0.7591153979301453, 0.6950925588607788, 0.6488800048828125, 0.6114721894264221, 0.5827168822288513, 0.5554558634757996, 0.5407083630561829, 0.5237858891487122, 0.5050964951515198, 0.4929828345775604, 0.49056583642959595, 0.47272130846977234, 0.46726465225219727, 0.4515094757080078, 0.4485720098018646, 0.44525668025016785, 0.4320310950279236, 0.42963385581970215, 0.42065486311912537, 0.41455280780792236, 0.4101768434047699, 0.40969571471214294, 0.4040721356868744, 0.39872297644615173, 0.39910221099853516, 0.39310184121131897, 0.39164432883262634, 0.38648420572280884, 0.3825949728488922, 0.3777652978897095, 0.3802248537540436, 0.3709383010864258, 0.3743876516819, 0.37049174308776855, 0.36364468932151794], "val_accuracy": [0.5360000133514404, 0.6520000100135803, 0.6786666512489319, 0.7076666951179504, 0.7333333492279053, 0.75, 0.7609999775886536, 0.7776666879653931, 0.7870000004768372, 0.7953333258628845, 0.8006666898727417, 0.8086666464805603, 0.8173333406448364, 0.8183333277702332, 0.8149999976158142, 0.8296666741371155, 0.8270000219345093, 0.8389999866485596, 0.8333333134651184, 0.8363333344459534, 0.8420000076293945, 0.8450000286102295, 0.8450000286102295, 0.8539999723434448, 0.8526666760444641, 0.8529999852180481, 0.8556666374206543, 0.859333336353302, 0.8576666712760925, 0.8610000014305115, 0.8566666841506958, 0.859000027179718, 0.8603333234786987, 0.8679999709129333, 0.8613333106040955, 0.8653333187103271, 0.8643333315849304, 0.8669999837875366, 0.8673333525657654]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0], [0, 6, 2, 2, 7, 7, 6, 9], [0, 4, 5, 1, 0, 0], [0, 45, 52, 6], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8385714292526245, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(grad, grad), alpha)), tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2924644947052, 2.1874804496765137, 1.752581000328064, 1.3205833435058594, 1.031969666481018, 0.8872321844100952, 0.8230587244033813, 0.7958252429962158, 0.7610760927200317, 0.7312856316566467, 0.6879824995994568, 0.6661719679832458, 0.6408601999282837, 0.6228379607200623, 0.6059518456459045, 0.578376054763794, 0.5742594003677368, 0.5615727305412292, 0.5485022664070129, 0.5352907776832581, 0.5259368419647217, 0.5007995367050171, 0.503878653049469, 0.5016236305236816, 0.4712875783443451, 0.4677885174751282, 0.4584677219390869, 0.4493497610092163, 0.44853538274765015, 0.4311457574367523, 0.433136522769928, 0.42707642912864685, 0.4181782305240631, 0.40274086594581604], "accuracy": [0.13353586196899414, 0.3280940353870392, 0.44327038526535034, 0.5565975308418274, 0.6479989290237427, 0.6742834448814392, 0.7020208835601807, 0.7041342258453369, 0.7103421092033386, 0.7180029153823853, 0.7420420050621033, 0.743891179561615, 0.7604015469551086, 0.7660810947418213, 0.7720248103141785, 0.7825914621353149, 0.7804781198501587, 0.7817989587783813, 0.7940827012062073, 0.8001585006713867, 0.7981772422790527, 0.8054417967796326, 0.8087438941001892, 0.8108572363853455, 0.8182538747787476, 0.8193105459213257, 0.824329674243927, 0.8253863453865051, 0.8285563588142395, 0.8277638554573059, 0.8358209133148193, 0.8355567455291748, 0.8374059200286865, 0.8432175517082214], "val_loss": [2.244563102722168, 2.0100884437561035, 1.1213700771331787, 0.891745924949646, 0.7505024671554565, 0.7024783492088318, 0.6866884827613831, 0.6541125178337097, 0.6276137828826904, 0.5968758463859558, 0.5704892873764038, 0.5434471368789673, 0.5285564064979553, 0.5161384344100952, 0.512374758720398, 0.4887147545814514, 0.4820922911167145, 0.4746023416519165, 0.4735719859600067, 0.46268513798713684, 0.45950353145599365, 0.46363115310668945, 0.4440237581729889, 0.4350551664829254, 0.44143620133399963, 0.4329395294189453, 0.4364820122718811, 0.4355088174343109, 0.4273412823677063, 0.4344528019428253, 0.4404742419719696, 0.4362305998802185, 0.4210762679576874, 0.4223300814628601], "val_accuracy": [0.44733333587646484, 0.4690000116825104, 0.6470000147819519, 0.6949999928474426, 0.7260000109672546, 0.7403333187103271, 0.7409999966621399, 0.7443333268165588, 0.7606666684150696, 0.7723333239555359, 0.7776666879653931, 0.7923333048820496, 0.7929999828338623, 0.8059999942779541, 0.8056666851043701, 0.8109999895095825, 0.815666675567627, 0.8196666836738586, 0.809333324432373, 0.8299999833106995, 0.82833331823349, 0.8243333101272583, 0.8356666564941406, 0.8373333215713501, 0.8366666436195374, 0.8450000286102295, 0.8373333215713501, 0.843999981880188, 0.8539999723434448, 0.8533333539962769, 0.8473333120346069, 0.8460000157356262, 0.8506666421890259, 0.8539999723434448]}, "mapping_values": [1, 10, 5, 5, 3, 14, 8, 6, 4, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 15}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8357142806053162, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.6725683212280273, 0.9450681805610657, 0.7808883190155029, 0.6536338329315186, 0.5945674180984497, 0.5704764723777771, 0.5203217267990112, 0.5198767781257629, 0.4927884638309479, 0.4746796786785126, 0.505316972732544, 0.49909508228302, 0.5185660123825073, 0.5072358846664429, 0.4705227017402649], "accuracy": [0.46691322326660156, 0.6794346570968628, 0.7309470176696777, 0.7670056819915771, 0.787082314491272, 0.7887993454933167, 0.8063663840293884, 0.8144234418869019, 0.8181217908859253, 0.8212917447090149, 0.8224804997444153, 0.8224804997444153, 0.8142913579940796, 0.8305375576019287, 0.8358209133148193], "val_loss": [0.8611351847648621, 0.721177875995636, 0.588005542755127, 0.5550851225852966, 0.5184599757194519, 0.5184310078620911, 0.5160930752754211, 0.5110524892807007, 0.5278696417808533, 0.5701204538345337, 0.5317175984382629, 0.5534455180168152, 0.5633169412612915, 0.5164817571640015, 0.5646042227745056], "val_accuracy": [0.6983333230018616, 0.7649999856948853, 0.7963333129882812, 0.7996666431427002, 0.8203333616256714, 0.8246666789054871, 0.831333339214325, 0.8336666822433472, 0.840666651725769, 0.843666672706604, 0.8383333086967468, 0.8339999914169312, 0.8366666436195374, 0.8403333425521851, 0.8353333473205566]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [46, 19], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 41], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [3, 0, 0, 3, 0, 0, 3, 1, 2, 0], [34, 99, 96, 99, 61, 29]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 7, 4, 3, 2, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.subtract(sigma, tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)), alpha))), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1], [2, 2, 6, 0, 3, 6, 2, 8, 5], [0, 1, 2, 2, 3, 3, 2], [39, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 1], [4], [0, 0], [99, 97], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 2, 8, 1, 4, 1, 3, 2, 8], [0, 4, 0, 3, 3, 3, 3, 1, 2, 0], [16, 99, 96, 99, 47, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 9, 7, 1, 1, 0, 1, 1, 3, 1, 2, 2, 16, 8, 8, 2], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, grad))), grad), tf.math.add(grad, tf.math.sqrt(grad))), tf.math.square(grad)), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.multiply(tf.math.add(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, sigma)), tf.math.pow(sigma, tf.math.subtract(sigma, alpha)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [1, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 2, 0, 3, 5], [3, 2, 1, 3], [16, 0], [0, 1, 0, 1, 1], [2, 7], [0, 7, 6], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 2, 3, 6, 8, 1, 4, 1, 4, 3, 8], [0, 2, 4, 3, 0, 0, 3, 1, 2, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 6, 3, 3, 0, 5, 2, 3, 1, 16, 8, 8, 3], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(grad, tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(beta, tf.math.sqrt(grad))), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [70, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 1, 0, 3, 5], [1, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 0, 0], [16, 99, 96, 92, 61, 58, 40]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 10, 6, 4, 1, 2, 1, 1, 1, 21, 11, 10, 7], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(alpha), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3958945274353027, 6.537792682647705, 36.99144744873047, 175.99777221679688, 723.0364990234375, 2568.790283203125], "accuracy": [0.09919429570436478, 0.09734513610601425, 0.10540219396352768, 0.09972262382507324, 0.10117553919553757, 0.09721305221319199], "val_loss": [2.6953024864196777, 12.81983757019043, 67.8541488647461, 297.6139221191406, 1138.8486328125, 3746.4052734375], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}]