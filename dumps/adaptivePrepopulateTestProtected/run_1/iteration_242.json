[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8837142586708069, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2235751152038574, 1.863627314567566, 1.3881967067718506, 1.0971885919570923, 0.9431154727935791, 0.835616409778595, 0.7718875408172607, 0.7267177104949951, 0.6853072643280029, 0.6501961350440979, 0.6362801194190979, 0.6226356029510498, 0.5988889336585999, 0.5801778435707092, 0.5583580732345581, 0.5447906851768494, 0.5406832695007324, 0.5254860520362854, 0.5062505006790161, 0.5079479217529297, 0.49121394753456116, 0.48989003896713257, 0.47510769963264465, 0.46506667137145996, 0.4554359018802643, 0.45054957270622253, 0.44110772013664246, 0.430584579706192, 0.42144355177879333, 0.4155716598033905, 0.4158378839492798, 0.4039183557033539, 0.4085548520088196, 0.39546728134155273, 0.39515864849090576, 0.3871508538722992, 0.38307344913482666, 0.3732011318206787, 0.3693823516368866, 0.36437657475471497, 0.3559441566467285, 0.3469986915588379, 0.343269407749176, 0.3417010009288788, 0.33637532591819763, 0.32835736870765686, 0.3263590931892395, 0.31998395919799805], "accuracy": [0.2810725271701813, 0.4971602261066437, 0.5653150081634521, 0.6174877882003784, 0.6604147553443909, 0.6975300312042236, 0.7224937081336975, 0.7313432693481445, 0.7481178045272827, 0.7605336308479309, 0.7685906887054443, 0.7737419009208679, 0.7836481332778931, 0.7877426743507385, 0.8004226684570312, 0.7952714562416077, 0.8047813773155212, 0.8120459914207458, 0.8137630224227905, 0.8156121969223022, 0.8216879963874817, 0.8222163319587708, 0.828820526599884, 0.8327829837799072, 0.8348963260650635, 0.8391229510307312, 0.8408400416374207, 0.8436138033866882, 0.8473120927810669, 0.8507462739944458, 0.8518029451370239, 0.8524633646011353, 0.852331280708313, 0.8539162874221802, 0.8544445633888245, 0.8615770936012268, 0.859199583530426, 0.8668603897094727, 0.8696341514587402, 0.8679170608520508, 0.872407853603363, 0.8747853636741638, 0.8750495314598083, 0.8750495314598083, 0.8766345381736755, 0.882710337638855, 0.8792761564254761, 0.8848236799240112], "val_loss": [2.041090488433838, 1.5073738098144531, 1.0351890325546265, 0.8288497924804688, 0.7493756413459778, 0.6886183023452759, 0.646604061126709, 0.6087713837623596, 0.582353949546814, 0.5605174899101257, 0.5534560680389404, 0.5316277742385864, 0.514729917049408, 0.5010638236999512, 0.4920998513698578, 0.47585147619247437, 0.47390398383140564, 0.45993757247924805, 0.46219465136528015, 0.44748595356941223, 0.4464666247367859, 0.44296160340309143, 0.4343818426132202, 0.42551079392433167, 0.42283767461776733, 0.41507044434547424, 0.4149109423160553, 0.4069209098815918, 0.40459540486335754, 0.40145280957221985, 0.3985113203525543, 0.3906044065952301, 0.3908856511116028, 0.3974918723106384, 0.38081249594688416, 0.38753604888916016, 0.37521854043006897, 0.37901124358177185, 0.37925422191619873, 0.3736351728439331, 0.36485224962234497, 0.36611106991767883, 0.3618214428424835, 0.35893985629081726, 0.3620902895927429, 0.35414883494377136, 0.3574270009994507, 0.35906851291656494], "val_accuracy": [0.5236666798591614, 0.6586666703224182, 0.6903333067893982, 0.7173333168029785, 0.734000027179718, 0.7480000257492065, 0.7580000162124634, 0.7746666669845581, 0.7803333401679993, 0.7893333435058594, 0.7866666913032532, 0.8023333549499512, 0.8130000233650208, 0.8149999976158142, 0.8186666369438171, 0.8316666483879089, 0.8273333311080933, 0.8356666564941406, 0.8343333601951599, 0.8399999737739563, 0.8420000076293945, 0.840666651725769, 0.8446666598320007, 0.847000002861023, 0.8503333330154419, 0.8516666889190674, 0.8539999723434448, 0.856333315372467, 0.8583333492279053, 0.8579999804496765, 0.8613333106040955, 0.8573333621025085, 0.8636666536331177, 0.8523333072662354, 0.8656666874885559, 0.8583333492279053, 0.8690000176429749, 0.8683333396911621, 0.8696666955947876, 0.8666666746139526, 0.8700000047683716, 0.8726666569709778, 0.8773333430290222, 0.874666690826416, 0.8759999871253967, 0.8773333430290222, 0.8756666779518127, 0.8766666650772095]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8554285764694214, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.22312593460083, 1.8696640729904175, 1.390701174736023, 1.1070042848587036, 0.9431422352790833, 0.8348954916000366, 0.7796046733856201, 0.7385503053665161, 0.6839080452919006, 0.6609109044075012, 0.6264917254447937, 0.6096743941307068, 0.5957651734352112, 0.5731767416000366, 0.5583043098449707, 0.5438823103904724, 0.5265402793884277, 0.5166805982589722, 0.49695196747779846, 0.49256688356399536, 0.48724067211151123, 0.48347774147987366, 0.47035208344459534, 0.45870262384414673, 0.4522814154624939, 0.4384465515613556, 0.4337744414806366, 0.4196288287639618, 0.42274221777915955, 0.40636441111564636, 0.39618930220603943, 0.406380295753479, 0.39103150367736816, 0.38154280185699463, 0.38238266110420227, 0.3700118660926819, 0.3683764636516571, 0.36743664741516113, 0.3561212718486786, 0.3519046902656555], "accuracy": [0.27063795924186707, 0.4737815260887146, 0.5691454410552979, 0.6067890524864197, 0.659490168094635, 0.7020208835601807, 0.7169462442398071, 0.7317395210266113, 0.7511557340621948, 0.7539294958114624, 0.7721568942070007, 0.7766477465629578, 0.7815347909927368, 0.7964601516723633, 0.7988376617431641, 0.7951393723487854, 0.8049134612083435, 0.8067626357078552, 0.817461371421814, 0.8197067975997925, 0.817989706993103, 0.8203672170639038, 0.8280280232429504, 0.8300092220306396, 0.8368775844573975, 0.8430854678153992, 0.841500461101532, 0.848368763923645, 0.8446704745292664, 0.8487650156021118, 0.8570862412452698, 0.852859616279602, 0.8585391640663147, 0.8609166741371155, 0.858671247959137, 0.8672566413879395, 0.8628978729248047, 0.8689737319946289, 0.8717474341392517, 0.8709549307823181], "val_loss": [2.0414657592773438, 1.5234496593475342, 1.053972601890564, 0.8439325094223022, 0.753671407699585, 0.6944676041603088, 0.6448144912719727, 0.6121445894241333, 0.5837157964706421, 0.5582697987556458, 0.5399757027626038, 0.515829861164093, 0.5098104476928711, 0.4887271821498871, 0.48076698184013367, 0.468344509601593, 0.45508667826652527, 0.44779902696609497, 0.4412020742893219, 0.4271988570690155, 0.4224214255809784, 0.4183881878852844, 0.41234090924263, 0.40382519364356995, 0.4030515253543854, 0.39085692167282104, 0.3917100131511688, 0.3828869163990021, 0.37969714403152466, 0.3705293834209442, 0.37658658623695374, 0.36977165937423706, 0.3645470440387726, 0.36271780729293823, 0.35900983214378357, 0.35790756344795227, 0.36050188541412354, 0.355916291475296, 0.35202714800834656, 0.3515767455101013], "val_accuracy": [0.5456666946411133, 0.6579999923706055, 0.6803333163261414, 0.7016666531562805, 0.7269999980926514, 0.7429999709129333, 0.7543333172798157, 0.7703333497047424, 0.7823333144187927, 0.7926666736602783, 0.8003333210945129, 0.8063333630561829, 0.8090000152587891, 0.8256666660308838, 0.8216666579246521, 0.8326666951179504, 0.8356666564941406, 0.8366666436195374, 0.8420000076293945, 0.8479999899864197, 0.8486666679382324, 0.8493333458900452, 0.8519999980926514, 0.8576666712760925, 0.8566666841506958, 0.8613333106040955, 0.8619999885559082, 0.8650000095367432, 0.8656666874885559, 0.8693333268165588, 0.8650000095367432, 0.8683333396911621, 0.8733333349227905, 0.871999979019165, 0.874666690826416, 0.8723333477973938, 0.8659999966621399, 0.8690000176429749, 0.871999979019165, 0.8723333477973938]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1], [0, 2, 4, 1, 1, 3, 6, 1, 5, 9, 3, 3, 6, 8, 0, 9, 6, 4, 0, 1, 1, 4, 3, 2, 8], [0, 4, 0, 3, 3, 2, 1, 5, 0, 5, 4, 2, 0, 0, 1, 5], [0, 48, 23, 45, 10, 20, 32], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8517143130302429, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.square(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), grad))))), tf.math.multiply(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(alpha), tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.pow(tf.math.negative(tf.math.subtract(tf.math.subtract(grad, tf.math.pow(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), grad)), grad)), tf.math.multiply(beta, tf.math.add(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), alpha)))), tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2928531169891357, 2.1876230239868164, 1.757468342781067, 1.3345317840576172, 1.0970137119293213, 0.9294372797012329, 0.834094762802124, 0.8094434142112732, 0.7558305859565735, 0.7294419407844543, 0.6979720592498779, 0.6727581024169922, 0.6409791707992554, 0.6124905347824097, 0.6020492315292358, 0.5920652747154236, 0.5783643126487732, 0.5655004978179932, 0.5479838848114014, 0.5193741321563721, 0.523622453212738, 0.5139287710189819, 0.4938969910144806, 0.48527663946151733, 0.48343023657798767, 0.48008206486701965, 0.46204787492752075, 0.46245425939559937, 0.44526052474975586, 0.4425397217273712, 0.4280645549297333, 0.4275476932525635, 0.4194697141647339, 0.41033658385276794, 0.39387625455856323, 0.3988352417945862, 0.38268664479255676, 0.38027986884117126, 0.37717244029045105, 0.36747920513153076, 0.3659169375896454, 0.3557308614253998, 0.3645121157169342, 0.3534507751464844, 0.3363015055656433, 0.34256061911582947, 0.31551966071128845, 0.3263067603111267, 0.3229130506515503, 0.3214680552482605, 0.30238208174705505, 0.309524267911911, 0.30690252780914307, 0.3006092309951782, 0.30308797955513, 0.2907279431819916, 0.2801397740840912, 0.28129610419273376, 0.27793827652931213, 0.2779911756515503, 0.28048163652420044], "accuracy": [0.13115836679935455, 0.32782986760139465, 0.4443270266056061, 0.549068808555603, 0.6306960582733154, 0.6600185036659241, 0.6909258961677551, 0.702681303024292, 0.705058753490448, 0.7218332886695862, 0.7357020378112793, 0.7449478507041931, 0.7556465268135071, 0.7697794437408447, 0.7712323069572449, 0.7701756954193115, 0.7817989587783813, 0.7872143983840942, 0.7946110367774963, 0.7971205711364746, 0.804649293422699, 0.8039889335632324, 0.8109893202781677, 0.8170651197433472, 0.816008448600769, 0.8214238286018372, 0.8256505131721497, 0.8264430165290833, 0.8310658931732178, 0.8393871188163757, 0.839519202709198, 0.8358209133148193, 0.8400475382804871, 0.8436138033866882, 0.8500858545303345, 0.8540483713150024, 0.8543124794960022, 0.8549728989601135, 0.8573504090309143, 0.8569541573524475, 0.8557654023170471, 0.8679170608520508, 0.8610487580299377, 0.8578787446022034, 0.8709549307823181, 0.863029956817627, 0.8739928603172302, 0.8725399374961853, 0.8717474341392517, 0.8753136992454529, 0.8804649114608765, 0.876370370388031, 0.8794082403182983, 0.8812574148178101, 0.876370370388031, 0.8868049383163452, 0.8883898854255676, 0.8893144726753235, 0.8924844861030579, 0.8922203183174133, 0.8906353116035461], "val_loss": [2.2450180053710938, 2.0115535259246826, 1.1208879947662354, 0.8720716834068298, 0.7752952575683594, 0.7059640288352966, 0.6887184381484985, 0.6557491421699524, 0.6303741931915283, 0.6111375093460083, 0.5639424920082092, 0.5397257208824158, 0.5443770885467529, 0.5293624401092529, 0.5156052112579346, 0.5033339262008667, 0.49938663840293884, 0.501232385635376, 0.48108798265457153, 0.475393682718277, 0.46613743901252747, 0.4675513505935669, 0.448517382144928, 0.4464400112628937, 0.4538288712501526, 0.4457443952560425, 0.4328167736530304, 0.4179095923900604, 0.4208616018295288, 0.4152697026729584, 0.4070050120353699, 0.4042987525463104, 0.4033181965351105, 0.39909473061561584, 0.3990742862224579, 0.396746426820755, 0.38908934593200684, 0.38622012734413147, 0.3946009576320648, 0.38544633984565735, 0.3862035274505615, 0.3975488543510437, 0.39340654015541077, 0.3786222040653229, 0.37646788358688354, 0.3806022107601166, 0.38787147402763367, 0.39675310254096985, 0.4064725637435913, 0.40288785099983215, 0.3969757854938507, 0.3995404541492462, 0.3864293098449707, 0.3951716423034668, 0.3874020576477051, 0.40127241611480713, 0.41598185896873474, 0.42988964915275574, 0.431364506483078, 0.42067036032676697, 0.41489046812057495], "val_accuracy": [0.4350000023841858, 0.45533332228660583, 0.6710000038146973, 0.7096666693687439, 0.7289999723434448, 0.7400000095367432, 0.750333309173584, 0.7716666460037231, 0.7596666812896729, 0.7796666622161865, 0.7753333449363708, 0.7993333339691162, 0.7953333258628845, 0.8026666641235352, 0.812333345413208, 0.8173333406448364, 0.8166666626930237, 0.8193333148956299, 0.8230000138282776, 0.824999988079071, 0.8306666612625122, 0.8349999785423279, 0.840666651725769, 0.8410000205039978, 0.8510000109672546, 0.8476666808128357, 0.8416666388511658, 0.8503333330154419, 0.8496666550636292, 0.8546666502952576, 0.8523333072662354, 0.8536666631698608, 0.8523333072662354, 0.8550000190734863, 0.859666645526886, 0.859666645526886, 0.862333357334137, 0.8613333106040955, 0.8646666407585144, 0.8633333444595337, 0.862666666507721, 0.8636666536331177, 0.862333357334137, 0.8653333187103271, 0.8673333525657654, 0.8686666488647461, 0.8646666407585144, 0.8616666793823242, 0.8640000224113464, 0.8706666827201843, 0.8763333559036255, 0.8709999918937683, 0.8730000257492065, 0.871666669845581, 0.8723333477973938, 0.8776666522026062, 0.8776666522026062, 0.8756666779518127, 0.8773333430290222, 0.8759999871253967, 0.871999979019165]}, "mapping_values": [1, 10, 5, 5, 3, 41, 25, 16, 7, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 26}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8154285550117493, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.721541166305542, 0.9577725529670715, 0.7575161457061768, 0.6863480806350708, 0.6402594447135925, 0.610375702381134, 0.5800337791442871, 0.5741835832595825, 0.5462124943733215, 0.5820608139038086, 0.5472025871276855], "accuracy": [0.4757627844810486, 0.6637167930603027, 0.7378153204917908, 0.7470611333847046, 0.7630431652069092, 0.7824593782424927, 0.7989697456359863, 0.7980451583862305, 0.8058380484580994, 0.8004226684570312, 0.8000264167785645], "val_loss": [0.8331105709075928, 0.6118065714836121, 0.573959231376648, 0.5331766605377197, 0.5434340834617615, 0.4980000853538513, 0.5039405226707458, 0.5404317378997803, 0.5650988817214966, 0.5689516067504883, 0.5176307559013367], "val_accuracy": [0.6886666417121887, 0.7743333578109741, 0.7956666946411133, 0.8096666932106018, 0.8103333115577698, 0.828000009059906, 0.8259999752044678, 0.8220000267028809, 0.8196666836738586, 0.8136666417121887, 0.8253333568572998]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 8, 9, 3], [1, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [0, 2, 3, 5, 3, 5, 1], [0, 2, 0, 3, 0], [16, 16, 3], [0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 4, 4, 8, 7], [0, 4, 4, 7], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 4, 3, 3, 0, 0, 3, 1, 2, 0], [16, 99, 82, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 4, 1, 1, 12, 7, 5, 3, 9, 5, 4, 1, 21, 11, 10, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.sqrt(tf.math.add(grad, grad)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(sigma, sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), sigma), alpha)))), tf.math.sqrt(beta)), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 0], [0, 1, 0, 0], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 0], [16, 16, 87], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 0, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 32, 99, 17, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 3, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))), sigma), alpha)", "other_info": {"loss": [2.3034920692443848, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1], [0, 2, 9, 6, 3, 1, 6, 2, 9, 8, 5, 1], [0, 1, 0, 2, 2, 3], [39, 39, 30, 74], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 8], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [6, 5, 3, 6, 8, 1, 4, 1, 4, 3, 4, 9, 6, 0, 7, 7, 9, 6, 8, 3, 4, 3, 7, 4, 8, 1], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 3, 4, 0, 3, 2, 4, 0, 6], [16, 99, 96, 99, 61, 1, 74, 45, 72, 17]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 12, 6, 4, 6, 3, 3, 2, 2, 1, 1, 1, 44, 26, 18, 10], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.square(tf.math.subtract(grad, grad))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.multiply(sigma, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(sigma, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), beta)))))), tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.math.pow(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma), tf.math.multiply(grad, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, tf.math.pow(beta, tf.math.sqrt(grad))))))), tf.math.subtract(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [85, 44], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 5, 6, 8, 1, 4, 1, 4, 2, 8, 0, 1, 1, 6, 8], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0, 5, 1], [16, 99, 96, 99, 61, 1]], "fitness": -0.0908571407198906, "mapping_values": [1, 6, 4, 2, 1, 6, 3, 3, 2, 2, 1, 1, 1, 28, 16, 12, 5], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), beta), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(grad, tf.math.subtract(tf.math.pow(tf.math.add(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(sigma, alpha)), beta))), tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), grad), alpha)", "other_info": {"loss": [2.3090627193450928, 2.310310125350952, 2.309549570083618, 2.3102457523345947, 2.310598611831665, 2.309220790863037], "accuracy": [0.08889182657003403, 0.09219389408826828, 0.09232597798109055, 0.0944393053650856, 0.09298639744520187, 0.09272222965955734], "val_loss": [2.308957099914551, 2.308957099914551, 2.308957099914551, 2.308957099914551, 2.308957099914551, 2.308957099914551], "val_accuracy": [0.08766666799783707, 0.08766666799783707, 0.08766666799783707, 0.08766666799783707, 0.08766666799783707, 0.08766666799783707]}}]