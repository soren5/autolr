[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222564220428467, 1.8654934167861938, 1.392636775970459, 1.0800100564956665, 0.9349965453147888, 0.83723384141922, 0.771166205406189, 0.7229189872741699, 0.6917352080345154, 0.6532851457595825, 0.6217012405395508, 0.6138775944709778, 0.5917757749557495, 0.5793368220329285, 0.5567960739135742, 0.5480981469154358, 0.5474538803100586, 0.5317270755767822, 0.5151227116584778, 0.5055264234542847, 0.5014929175376892, 0.4862228035926819, 0.4727080464363098, 0.47010233998298645, 0.46293196082115173, 0.4504174590110779, 0.447412371635437, 0.4438058137893677, 0.42948198318481445, 0.417126327753067, 0.4136964678764343, 0.40704113245010376, 0.4020131528377533, 0.39997783303260803, 0.39442774653434753, 0.3916949927806854, 0.38260385394096375, 0.3716582953929901, 0.3650337755680084, 0.3573426902294159, 0.36132100224494934, 0.3564379811286926, 0.3445151448249817, 0.33812835812568665, 0.3384065330028534, 0.3359524607658386, 0.33294373750686646, 0.3212839663028717, 0.3217304050922394, 0.3110441267490387, 0.31119072437286377], "accuracy": [0.2685246467590332, 0.4955752193927765, 0.5610883831977844, 0.6197332143783569, 0.6668868064880371, 0.6963412761688232, 0.7205125093460083, 0.7349095344543457, 0.7469290494918823, 0.7604015469551086, 0.7732135653495789, 0.7761194109916687, 0.7878747582435608, 0.7901201844215393, 0.8009510040283203, 0.802271842956543, 0.8050455451011658, 0.8103289008140564, 0.8158763647079468, 0.8197067975997925, 0.817461371421814, 0.8255184292793274, 0.8273676037788391, 0.8333113193511963, 0.832650899887085, 0.8392550349235535, 0.8367455005645752, 0.8408400416374207, 0.8474441766738892, 0.8475762605667114, 0.8519350290298462, 0.8545766472816467, 0.8574824929237366, 0.8544445633888245, 0.8589354157447815, 0.8561616539955139, 0.8632941246032715, 0.8640866279602051, 0.869502067565918, 0.8702945709228516, 0.8702945709228516, 0.8689737319946289, 0.8772949576377869, 0.8754457831382751, 0.8767666220664978, 0.8809932470321655, 0.8776912093162537, 0.8853520154953003, 0.8811253309249878, 0.8886540532112122, 0.8885219693183899], "val_loss": [2.042604923248291, 1.5189800262451172, 1.0515391826629639, 0.8450219035148621, 0.7558016777038574, 0.7093545794487, 0.6593213081359863, 0.6230939030647278, 0.5998342037200928, 0.5830129981040955, 0.5592260956764221, 0.5484577417373657, 0.5345214009284973, 0.5245682597160339, 0.508945107460022, 0.5038147568702698, 0.4949795603752136, 0.4867953658103943, 0.47808560729026794, 0.4682127833366394, 0.46202969551086426, 0.4617370665073395, 0.4514632225036621, 0.4495610296726227, 0.4391477108001709, 0.43453720211982727, 0.42648962140083313, 0.42570948600769043, 0.4242604672908783, 0.4146496057510376, 0.41664713621139526, 0.4113439619541168, 0.41593310236930847, 0.4013250470161438, 0.40437138080596924, 0.39875122904777527, 0.3905998170375824, 0.3918660581111908, 0.38664665818214417, 0.3956036865711212, 0.38548287749290466, 0.3855803310871124, 0.3777529299259186, 0.3802799582481384, 0.3779101073741913, 0.371540904045105, 0.3776323199272156, 0.36875513195991516, 0.37442195415496826, 0.3655129075050354, 0.3628164827823639], "val_accuracy": [0.5523333549499512, 0.6656666398048401, 0.6830000281333923, 0.7059999704360962, 0.7336666584014893, 0.7506666779518127, 0.7580000162124634, 0.7689999938011169, 0.7736666798591614, 0.7846666574478149, 0.7950000166893005, 0.7963333129882812, 0.7993333339691162, 0.8100000023841858, 0.8173333406448364, 0.8190000057220459, 0.8213333487510681, 0.8209999799728394, 0.8286666870117188, 0.828000009059906, 0.8323333263397217, 0.8336666822433472, 0.8333333134651184, 0.8349999785423279, 0.8386666774749756, 0.8393333554267883, 0.8429999947547913, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8446666598320007, 0.8463333249092102, 0.8503333330154419, 0.8529999852180481, 0.8493333458900452, 0.8550000190734863, 0.8546666502952576, 0.856333315372467, 0.8613333106040955, 0.856333315372467, 0.859000027179718, 0.8550000190734863, 0.8586666584014893, 0.8633333444595337, 0.8619999885559082, 0.8659999966621399, 0.859666645526886, 0.862666666507721, 0.8603333234786987, 0.8610000014305115, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8628571629524231, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222816228866577, 1.8691558837890625, 1.3890525102615356, 1.096269130706787, 0.9562345147132874, 0.8416682481765747, 0.768356204032898, 0.7301361560821533, 0.6839619874954224, 0.6601467132568359, 0.6380297541618347, 0.616409957408905, 0.5884636044502258, 0.5669069886207581, 0.5649526119232178, 0.5474374294281006, 0.5367708802223206, 0.5194181799888611, 0.5130559206008911, 0.49785780906677246, 0.4898169934749603, 0.48860809206962585, 0.47920337319374084, 0.4651898145675659, 0.4594436287879944, 0.45000991225242615, 0.44902077317237854, 0.434889018535614, 0.4261769652366638, 0.4202325642108917, 0.40684056282043457, 0.40672567486763, 0.40959981083869934, 0.39732712507247925, 0.3982141315937042, 0.388978511095047, 0.3834155201911926], "accuracy": [0.27182671427726746, 0.49993395805358887, 0.564258337020874, 0.6192048788070679, 0.6586976647377014, 0.6952846646308899, 0.7232862114906311, 0.726192057132721, 0.7518161535263062, 0.7560427784919739, 0.7638356685638428, 0.7751948237419128, 0.7837802171707153, 0.7921014428138733, 0.793950617313385, 0.7951393723487854, 0.8012151718139648, 0.8117818236351013, 0.8104609847068787, 0.8216879963874817, 0.8238013386726379, 0.8198388814926147, 0.8247259259223938, 0.8345000743865967, 0.8385946154594421, 0.8366134166717529, 0.839519202709198, 0.8399154543876648, 0.8454629778862, 0.8462554216384888, 0.8549728989601135, 0.852859616279602, 0.8556333184242249, 0.856689989566803, 0.8617091774940491, 0.858671247959137, 0.8615770936012268], "val_loss": [2.0419743061065674, 1.516008734703064, 1.0466108322143555, 0.833509087562561, 0.7484085559844971, 0.6881212592124939, 0.6380499005317688, 0.6051373481750488, 0.5784959197044373, 0.5605878233909607, 0.540664553642273, 0.5307101011276245, 0.5093392133712769, 0.5025044083595276, 0.4917847514152527, 0.4854449927806854, 0.4693413972854614, 0.46437573432922363, 0.45451992750167847, 0.4466596245765686, 0.440682977437973, 0.43813371658325195, 0.43400537967681885, 0.42650410532951355, 0.4223311245441437, 0.4169471561908722, 0.4156721234321594, 0.40922480821609497, 0.40349024534225464, 0.40033870935440063, 0.39528363943099976, 0.39376506209373474, 0.3891596794128418, 0.38954710960388184, 0.3873034715652466, 0.3838731646537781, 0.3846467137336731], "val_accuracy": [0.5073333382606506, 0.6539999842643738, 0.6746666431427002, 0.7059999704360962, 0.7266666889190674, 0.7446666955947876, 0.7509999871253967, 0.762333333492279, 0.7743333578109741, 0.781000018119812, 0.7973333597183228, 0.79666668176651, 0.8056666851043701, 0.8096666932106018, 0.8130000233650208, 0.8220000267028809, 0.82833331823349, 0.8303333520889282, 0.8330000042915344, 0.8379999995231628, 0.8399999737739563, 0.8399999737739563, 0.8346666693687439, 0.8410000205039978, 0.8453333377838135, 0.8523333072662354, 0.846666693687439, 0.8526666760444641, 0.8529999852180481, 0.8553333282470703, 0.8543333411216736, 0.862333357334137, 0.8556666374206543, 0.8610000014305115, 0.856333315372467, 0.859333336353302, 0.859666645526886]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 1], [0], [0], [0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [0, 3, 8, 8, 2, 8, 5, 2, 7, 1, 6, 8, 8, 2, 0, 2, 5, 9], [0, 5, 1, 7, 3, 2, 5, 4], [0, 38], [0, 1], [0], [1], [0]], "fitness": -0.8454285860061646, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(tf.math.sqrt(tf.math.square(grad)), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.math.negative(grad), sigma))), tf.math.add(tf.math.square(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), beta)), grad)), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2931466102600098, 2.1868133544921875, 1.7579299211502075, 1.3390464782714844, 1.071699857711792, 0.9241631627082825, 0.8439719676971436, 0.8160678148269653, 0.75741046667099, 0.716903805732727, 0.7021883130073547, 0.6776130795478821, 0.6410319805145264, 0.6124739050865173, 0.6111071705818176, 0.5926055312156677, 0.5811704993247986, 0.5700385570526123, 0.5534447431564331, 0.5417946577072144, 0.5205003023147583, 0.5187753438949585, 0.5095260739326477, 0.48880699276924133, 0.4813855290412903, 0.47796380519866943, 0.4696197807788849, 0.44617754220962524, 0.44410473108291626, 0.4414241909980774, 0.4235987067222595, 0.4245236814022064, 0.4220486879348755, 0.41121119260787964, 0.4099295437335968, 0.39051714539527893, 0.3938196301460266, 0.3823748230934143, 0.387370228767395, 0.38449814915657043, 0.37499910593032837, 0.35783687233924866, 0.3479897081851959, 0.3565346896648407, 0.35789334774017334, 0.3536742329597473, 0.3451591730117798, 0.34845638275146484, 0.3294278085231781, 0.32786741852760315], "accuracy": [0.13076211512088776, 0.3343019485473633, 0.4345529079437256, 0.54220050573349, 0.6336019039154053, 0.6639809608459473, 0.6890767216682434, 0.7054550051689148, 0.7083608508110046, 0.7256637215614319, 0.7331924438476562, 0.7457403540611267, 0.7567031979560852, 0.7681944370269775, 0.7625148296356201, 0.7707040309906006, 0.7804781198501587, 0.7876105904579163, 0.7936864495277405, 0.7895918488502502, 0.8041210174560547, 0.802271842956543, 0.802271842956543, 0.8113855719566345, 0.8198388814926147, 0.819970965385437, 0.8251221776008606, 0.8294808864593506, 0.8281601071357727, 0.835160493850708, 0.8411042094230652, 0.835160493850708, 0.8372738361358643, 0.8438779711723328, 0.8407079577445984, 0.8479725122451782, 0.8507462739944458, 0.8487650156021118, 0.8457271456718445, 0.8475762605667114, 0.8558974862098694, 0.8578787446022034, 0.8647470474243164, 0.8609166741371155, 0.8561616539955139, 0.8590674996376038, 0.8622375130653381, 0.8621054291725159, 0.863558292388916, 0.872407853603363], "val_loss": [2.2447547912597656, 2.011552333831787, 1.1269421577453613, 0.8988794684410095, 0.7891803979873657, 0.7175678610801697, 0.7239978313446045, 0.6536691188812256, 0.6345105171203613, 0.5989966988563538, 0.5814499258995056, 0.5513139367103577, 0.5348780751228333, 0.5368627905845642, 0.5287660956382751, 0.5157160758972168, 0.5157753229141235, 0.5157648921012878, 0.5157045722007751, 0.49666398763656616, 0.5147390365600586, 0.4910767376422882, 0.48957812786102295, 0.47290241718292236, 0.466726154088974, 0.46304866671562195, 0.45764124393463135, 0.4512636661529541, 0.46074429154396057, 0.45775511860847473, 0.4415596127510071, 0.4467397928237915, 0.4666109085083008, 0.44950801134109497, 0.44605061411857605, 0.46277210116386414, 0.4549335241317749, 0.4587783217430115, 0.4491964876651764, 0.4370238482952118, 0.45099687576293945, 0.43697214126586914, 0.4467049539089203, 0.43379902839660645, 0.43390092253685, 0.4703112840652466, 0.4751172959804535, 0.4397748112678528, 0.43904393911361694, 0.461456298828125], "val_accuracy": [0.44066667556762695, 0.43033334612846375, 0.6413333415985107, 0.6786666512489319, 0.6949999928474426, 0.7369999885559082, 0.734000027179718, 0.749666690826416, 0.7713333368301392, 0.7723333239555359, 0.778333306312561, 0.7910000085830688, 0.7979999780654907, 0.7873333096504211, 0.7960000038146973, 0.8009999990463257, 0.8046666383743286, 0.809333324432373, 0.8136666417121887, 0.8226666450500488, 0.8063333630561829, 0.8190000057220459, 0.8303333520889282, 0.8233333230018616, 0.8330000042915344, 0.8393333554267883, 0.8410000205039978, 0.846666693687439, 0.8463333249092102, 0.8410000205039978, 0.846666693687439, 0.8493333458900452, 0.8476666808128357, 0.8519999980926514, 0.8533333539962769, 0.8503333330154419, 0.843999981880188, 0.8483333587646484, 0.8543333411216736, 0.8536666631698608, 0.8543333411216736, 0.8536666631698608, 0.8576666712760925, 0.8586666584014893, 0.862333357334137, 0.8553333282470703, 0.8573333621025085, 0.8569999933242798, 0.8610000014305115, 0.859000027179718]}, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 26, 18, 8, 2, 2, 1, 1, 0], "tree_depth": 27}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8217142820358276, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5888543128967285, 0.8679971098899841, 0.680380642414093, 0.6447319984436035, 0.6242473125457764, 0.5729014277458191, 0.548481285572052, 0.5339305400848389, 0.5135498642921448, 0.5165092349052429, 0.49537333846092224, 0.4869192838668823, 0.4853508472442627, 0.4569963216781616, 0.5170934796333313, 0.5126786828041077, 0.5149573087692261, 0.5041014552116394, 0.5475723147392273, 0.5572579503059387, 0.529875636100769, 0.49432945251464844], "accuracy": [0.4831594228744507, 0.7069079279899597, 0.7489103078842163, 0.7728173136711121, 0.7758552432060242, 0.7924976944923401, 0.8075551390647888, 0.804649293422699, 0.8185180425643921, 0.8198388814926147, 0.8241975903511047, 0.826310932636261, 0.8366134166717529, 0.8408400416374207, 0.8255184292793274, 0.8165367841720581, 0.8333113193511963, 0.839519202709198, 0.83119797706604, 0.8124422430992126, 0.8125742673873901, 0.834632158279419], "val_loss": [0.909045398235321, 0.5902466773986816, 0.5642887353897095, 0.5604991912841797, 0.5310666561126709, 0.49706795811653137, 0.4800969958305359, 0.49351221323013306, 0.5214844942092896, 0.48945116996765137, 0.531021237373352, 0.5106106996536255, 0.5294994711875916, 0.5544739365577698, 0.5305705666542053, 0.5578081011772156, 0.6070690751075745, 0.5624635219573975, 0.5679295659065247, 0.5196009874343872, 0.5334382653236389, 0.5605309009552002], "val_accuracy": [0.7223333120346069, 0.7806666493415833, 0.7983333468437195, 0.7960000038146973, 0.809333324432373, 0.8143333196640015, 0.8353333473205566, 0.8316666483879089, 0.8336666822433472, 0.8360000252723694, 0.8183333277702332, 0.8429999947547913, 0.8399999737739563, 0.8343333601951599, 0.8399999737739563, 0.8323333263397217, 0.8529999852180481, 0.8446666598320007, 0.8516666889190674, 0.8413333296775818, 0.8446666598320007, 0.840666651725769]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 8, 3, 0, 3, 5], [0, 0, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1], [2, 3, 3, 6, 8, 1, 2, 1, 4, 2, 8, 9, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [77, 99, 96, 44, 10, 1, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 4, 2, 2, 2, 1, 1, 1, 21, 13, 8, 7], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.math.sqrt(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), sigma), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0], [0, 2, 3, 0, 3, 6, 9], [1, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 2, 3, 0, 3, 5, 2], [0, 2, 0, 3, 2, 4], [16, 16], [0, 1, 0, 1, 1], [4, 3], [0, 5, 5], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 9, 5, 8], [0, 0, 0, 3, 2, 0, 3, 1, 2, 0], [16, 20, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 7, 4, 2, 13, 7, 6, 2, 5, 2, 3, 1, 16, 9, 7, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(alpha, tf.math.divide_no_nan(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), beta), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(beta, tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 2], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0, 7], [16, 11, 96, 99, 93, 41]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.add(grad, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 1, 2, 1, 1, 1, 22, 11, 11, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 0, 1, 0, 2], [73, 68, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [3, 2, 3, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 1, 6, 7, 4, 9, 1, 0, 7], [0, 0, 0, 3, 4, 0, 3, 3, 2, 0], [0, 11, 26, 89, 33]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 13, 7, 6, 1, 2, 1, 1, 1, 13, 8, 5, 4], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(grad, beta), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(grad), grad), alpha)), tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.negative(grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09377889335155487, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}]