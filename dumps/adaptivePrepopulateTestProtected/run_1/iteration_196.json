[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222564220428467, 1.8654934167861938, 1.392636775970459, 1.0800100564956665, 0.9349965453147888, 0.83723384141922, 0.771166205406189, 0.7229189872741699, 0.6917352080345154, 0.6532851457595825, 0.6217012405395508, 0.6138775944709778, 0.5917757749557495, 0.5793368220329285, 0.5567960739135742, 0.5480981469154358, 0.5474538803100586, 0.5317270755767822, 0.5151227116584778, 0.5055264234542847, 0.5014929175376892, 0.4862228035926819, 0.4727080464363098, 0.47010233998298645, 0.46293196082115173, 0.4504174590110779, 0.447412371635437, 0.4438058137893677, 0.42948198318481445, 0.417126327753067, 0.4136964678764343, 0.40704113245010376, 0.4020131528377533, 0.39997783303260803, 0.39442774653434753, 0.3916949927806854, 0.38260385394096375, 0.3716582953929901, 0.3650337755680084, 0.3573426902294159, 0.36132100224494934, 0.3564379811286926, 0.3445151448249817, 0.33812835812568665, 0.3384065330028534, 0.3359524607658386, 0.33294373750686646, 0.3212839663028717, 0.3217304050922394, 0.3110441267490387, 0.31119072437286377], "accuracy": [0.2685246467590332, 0.4955752193927765, 0.5610883831977844, 0.6197332143783569, 0.6668868064880371, 0.6963412761688232, 0.7205125093460083, 0.7349095344543457, 0.7469290494918823, 0.7604015469551086, 0.7732135653495789, 0.7761194109916687, 0.7878747582435608, 0.7901201844215393, 0.8009510040283203, 0.802271842956543, 0.8050455451011658, 0.8103289008140564, 0.8158763647079468, 0.8197067975997925, 0.817461371421814, 0.8255184292793274, 0.8273676037788391, 0.8333113193511963, 0.832650899887085, 0.8392550349235535, 0.8367455005645752, 0.8408400416374207, 0.8474441766738892, 0.8475762605667114, 0.8519350290298462, 0.8545766472816467, 0.8574824929237366, 0.8544445633888245, 0.8589354157447815, 0.8561616539955139, 0.8632941246032715, 0.8640866279602051, 0.869502067565918, 0.8702945709228516, 0.8702945709228516, 0.8689737319946289, 0.8772949576377869, 0.8754457831382751, 0.8767666220664978, 0.8809932470321655, 0.8776912093162537, 0.8853520154953003, 0.8811253309249878, 0.8886540532112122, 0.8885219693183899], "val_loss": [2.042604923248291, 1.5189800262451172, 1.0515391826629639, 0.8450219035148621, 0.7558016777038574, 0.7093545794487, 0.6593213081359863, 0.6230939030647278, 0.5998342037200928, 0.5830129981040955, 0.5592260956764221, 0.5484577417373657, 0.5345214009284973, 0.5245682597160339, 0.508945107460022, 0.5038147568702698, 0.4949795603752136, 0.4867953658103943, 0.47808560729026794, 0.4682127833366394, 0.46202969551086426, 0.4617370665073395, 0.4514632225036621, 0.4495610296726227, 0.4391477108001709, 0.43453720211982727, 0.42648962140083313, 0.42570948600769043, 0.4242604672908783, 0.4146496057510376, 0.41664713621139526, 0.4113439619541168, 0.41593310236930847, 0.4013250470161438, 0.40437138080596924, 0.39875122904777527, 0.3905998170375824, 0.3918660581111908, 0.38664665818214417, 0.3956036865711212, 0.38548287749290466, 0.3855803310871124, 0.3777529299259186, 0.3802799582481384, 0.3779101073741913, 0.371540904045105, 0.3776323199272156, 0.36875513195991516, 0.37442195415496826, 0.3655129075050354, 0.3628164827823639], "val_accuracy": [0.5523333549499512, 0.6656666398048401, 0.6830000281333923, 0.7059999704360962, 0.7336666584014893, 0.7506666779518127, 0.7580000162124634, 0.7689999938011169, 0.7736666798591614, 0.7846666574478149, 0.7950000166893005, 0.7963333129882812, 0.7993333339691162, 0.8100000023841858, 0.8173333406448364, 0.8190000057220459, 0.8213333487510681, 0.8209999799728394, 0.8286666870117188, 0.828000009059906, 0.8323333263397217, 0.8336666822433472, 0.8333333134651184, 0.8349999785423279, 0.8386666774749756, 0.8393333554267883, 0.8429999947547913, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8446666598320007, 0.8463333249092102, 0.8503333330154419, 0.8529999852180481, 0.8493333458900452, 0.8550000190734863, 0.8546666502952576, 0.856333315372467, 0.8613333106040955, 0.856333315372467, 0.859000027179718, 0.8550000190734863, 0.8586666584014893, 0.8633333444595337, 0.8619999885559082, 0.8659999966621399, 0.859666645526886, 0.862666666507721, 0.8603333234786987, 0.8610000014305115, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8711428642272949, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222639322280884, 1.8674843311309814, 1.390872836112976, 1.0852786302566528, 0.9416776299476624, 0.8369849920272827, 0.7685914635658264, 0.7202665209770203, 0.6898794770240784, 0.6481255888938904, 0.636335551738739, 0.6061558723449707, 0.5948034524917603, 0.5801207423210144, 0.5638642311096191, 0.5515366792678833, 0.5266704559326172, 0.5217444896697998, 0.5085755586624146, 0.5026410222053528, 0.4933716356754303, 0.475766122341156, 0.47485682368278503, 0.46177399158477783, 0.4536206126213074, 0.43638888001441956, 0.4352295696735382, 0.42536771297454834, 0.42135897278785706, 0.4137732684612274, 0.41372573375701904, 0.39820146560668945, 0.3989989161491394, 0.3824976086616516, 0.3826347589492798, 0.3797007203102112, 0.368669331073761, 0.3651408851146698, 0.36312371492385864, 0.3604695498943329, 0.3493834435939789, 0.34524574875831604, 0.3435545265674591, 0.3390199840068817, 0.3313908576965332, 0.3239118456840515, 0.3215649724006653, 0.3115544617176056, 0.3130769729614258, 0.30619749426841736], "accuracy": [0.27724209427833557, 0.48566898703575134, 0.5699379444122314, 0.6166952848434448, 0.6631884574890137, 0.6964733600616455, 0.7240787148475647, 0.735569953918457, 0.7430986762046814, 0.7586844563484192, 0.763967752456665, 0.7755910754203796, 0.776251494884491, 0.787082314491272, 0.789988100528717, 0.7932901978492737, 0.8072909712791443, 0.8123101592063904, 0.8127063512802124, 0.8158763647079468, 0.8183859586715698, 0.8280280232429504, 0.8278959393501282, 0.830669641494751, 0.8399154543876648, 0.842028796672821, 0.8425571322441101, 0.8424250483512878, 0.848368763923645, 0.8500858545303345, 0.8508783578872681, 0.854708731174469, 0.8585391640663147, 0.86118084192276, 0.8627657890319824, 0.8619733452796936, 0.8676528930664062, 0.8673887252807617, 0.8691058158874512, 0.8717474341392517, 0.8732003569602966, 0.876370370388031, 0.8772949576377869, 0.8772949576377869, 0.8786157965660095, 0.883238673210144, 0.8856161832809448, 0.8854840993881226, 0.8883898854255676, 0.8889182209968567], "val_loss": [2.038513660430908, 1.512725591659546, 1.0426106452941895, 0.837576687335968, 0.7383180260658264, 0.6804239749908447, 0.6318199634552002, 0.5994766354560852, 0.5731139183044434, 0.5523946285247803, 0.5350561738014221, 0.526377260684967, 0.5014543533325195, 0.5016491413116455, 0.48613712191581726, 0.4737872779369354, 0.4615664482116699, 0.45719271898269653, 0.4562644958496094, 0.44144654273986816, 0.4348008632659912, 0.4273379445075989, 0.42154768109321594, 0.4215312600135803, 0.40982916951179504, 0.4058348536491394, 0.39901021122932434, 0.40369629859924316, 0.39518260955810547, 0.39121249318122864, 0.3851017951965332, 0.3816516399383545, 0.3812187612056732, 0.3761575520038605, 0.3734265863895416, 0.37205082178115845, 0.36963483691215515, 0.3699144423007965, 0.3733026087284088, 0.3646945059299469, 0.3558805286884308, 0.35799291729927063, 0.36650845408439636, 0.35417675971984863, 0.35086771845817566, 0.35622456669807434, 0.3551497459411621, 0.3481581509113312, 0.3482920825481415, 0.34710177779197693], "val_accuracy": [0.5066666603088379, 0.6589999794960022, 0.6863333582878113, 0.7120000123977661, 0.7396666407585144, 0.7583333253860474, 0.7689999938011169, 0.7799999713897705, 0.7946666479110718, 0.79666668176651, 0.8036666512489319, 0.8050000071525574, 0.8169999718666077, 0.8146666884422302, 0.8193333148956299, 0.8296666741371155, 0.8353333473205566, 0.8306666612625122, 0.8366666436195374, 0.8410000205039978, 0.8450000286102295, 0.8493333458900452, 0.8476666808128357, 0.8493333458900452, 0.8553333282470703, 0.8550000190734863, 0.859000027179718, 0.856333315372467, 0.8636666536331177, 0.8633333444595337, 0.8686666488647461, 0.8663333058357239, 0.8646666407585144, 0.8666666746139526, 0.8683333396911621, 0.8696666955947876, 0.8683333396911621, 0.8659999966621399, 0.8669999837875366, 0.875, 0.8736666440963745, 0.8730000257492065, 0.8663333058357239, 0.874666690826416, 0.8763333559036255, 0.8723333477973938, 0.8700000047683716, 0.874666690826416, 0.8743333220481873, 0.8723333477973938]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0, 1], [0, 5, 8], [0], [0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1], [0, 0, 0, 3, 6, 4, 5, 3, 5, 1, 8, 2, 8, 7, 2, 2, 6, 2, 9, 8], [0, 4, 2, 1, 3, 4, 1, 7, 1, 6, 5], [0, 24], [0, 1], [0], [1], [0]], "fitness": -0.8625714182853699, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.square(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.square(tf.math.multiply(tf.math.square(grad), beta)), tf.math.subtract(alpha, tf.math.sqrt(sigma)))), tf.math.add(tf.math.sqrt(tf.math.add(tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(grad, alpha), grad))), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), tf.math.sqrt(grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2915890216827393, 2.186457872390747, 1.7702358961105347, 1.3483197689056396, 1.0688745975494385, 0.9221339225769043, 0.846027135848999, 0.8134282827377319, 0.7776711583137512, 0.7451991438865662, 0.7077586650848389, 0.692055881023407, 0.6571117639541626, 0.6307702660560608, 0.6196218729019165, 0.6130165457725525, 0.5829430818557739, 0.5792925953865051, 0.5737988352775574, 0.5612404346466064, 0.5483797192573547, 0.5383535623550415, 0.5482995510101318, 0.515559196472168, 0.5156304240226746, 0.4865191876888275, 0.4821743071079254, 0.47710350155830383, 0.4673347771167755, 0.4639808237552643, 0.4552002251148224, 0.4490702450275421, 0.4490542411804199, 0.4205063581466675, 0.43199363350868225, 0.4077453315258026, 0.4036848545074463, 0.3949047923088074, 0.394142210483551, 0.3941477835178375, 0.36924096941947937, 0.37668707966804504, 0.3708900809288025, 0.3688379228115082, 0.36498919129371643], "accuracy": [0.13380002975463867, 0.3303394615650177, 0.4301941692829132, 0.5474838018417358, 0.6355831623077393, 0.6622639298439026, 0.6873596906661987, 0.6933034062385559, 0.7013604640960693, 0.715889573097229, 0.7368907928466797, 0.7310791015625, 0.7469290494918823, 0.7557786107063293, 0.7651565074920654, 0.7565711140632629, 0.7799497842788696, 0.7771760821342468, 0.778761088848114, 0.7930260300636292, 0.7944789528846741, 0.789459764957428, 0.7951393723487854, 0.8006868362426758, 0.8010830879211426, 0.8145555257797241, 0.8152159452438354, 0.8152159452438354, 0.8191784620285034, 0.8289526104927063, 0.8293488025665283, 0.8317263126373291, 0.8293488025665283, 0.842028796672821, 0.8335754871368408, 0.8442742228507996, 0.8436138033866882, 0.8479725122451782, 0.8486329317092896, 0.8507462739944458, 0.8560295701026917, 0.8597279191017151, 0.8582749962806702, 0.8585391640663147, 0.8598600029945374], "val_loss": [2.245609760284424, 2.01112961769104, 1.127316951751709, 0.8628372550010681, 0.7781345844268799, 0.7063596844673157, 0.6579598784446716, 0.6444635391235352, 0.623806893825531, 0.6030944585800171, 0.5601898431777954, 0.5395477414131165, 0.5290119647979736, 0.5205443501472473, 0.5239723920822144, 0.5095734000205994, 0.5026231408119202, 0.5092164874076843, 0.5054984092712402, 0.49561452865600586, 0.5041330456733704, 0.4904879927635193, 0.47531449794769287, 0.48325130343437195, 0.4692760705947876, 0.47441521286964417, 0.45966923236846924, 0.4437482953071594, 0.4456520080566406, 0.43318822979927063, 0.4305226504802704, 0.4323621690273285, 0.43122395873069763, 0.4279279112815857, 0.4260866343975067, 0.42231428623199463, 0.41964319348335266, 0.42030414938926697, 0.4277057349681854, 0.41003677248954773, 0.39815250039100647, 0.4090825915336609, 0.3972644805908203, 0.39831995964050293, 0.4101077616214752], "val_accuracy": [0.4206666648387909, 0.45399999618530273, 0.637333333492279, 0.6786666512489319, 0.7146666646003723, 0.7226666808128357, 0.7429999709129333, 0.7549999952316284, 0.7549999952316284, 0.7549999952316284, 0.7710000276565552, 0.7889999747276306, 0.8019999861717224, 0.7986666560173035, 0.7976666688919067, 0.7960000038146973, 0.7996666431427002, 0.8029999732971191, 0.8046666383743286, 0.8100000023841858, 0.8009999990463257, 0.8100000023841858, 0.8163333535194397, 0.8236666917800903, 0.8216666579246521, 0.8166666626930237, 0.8316666483879089, 0.8336666822433472, 0.8343333601951599, 0.8399999737739563, 0.843666672706604, 0.8416666388511658, 0.8413333296775818, 0.8413333296775818, 0.8450000286102295, 0.8463333249092102, 0.8513333201408386, 0.8553333282470703, 0.8539999723434448, 0.8579999804496765, 0.8573333621025085, 0.8539999723434448, 0.8513333201408386, 0.8550000190734863, 0.8536666631698608]}, "mapping_values": [1, 10, 5, 5, 3, 4, 3, 1, 1, 31, 20, 11, 2, 2, 1, 1, 0], "tree_depth": 25}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8231428861618042, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5985726118087769, 0.8758277893066406, 0.7095576524734497, 0.6505507230758667, 0.6111390590667725, 0.5614506006240845, 0.5667352676391602, 0.5498738288879395, 0.5392664670944214, 0.5404488444328308, 0.5090568661689758, 0.5126247406005859, 0.5111475586891174, 0.5068401098251343, 0.47069045901298523, 0.4931385815143585, 0.4352901577949524, 0.46961382031440735, 0.4838677942752838, 0.4740943908691406, 0.48121780157089233], "accuracy": [0.46730947494506836, 0.7017567157745361, 0.7510236501693726, 0.7607977986335754, 0.7781006693840027, 0.7936864495277405, 0.7981772422790527, 0.8124422430992126, 0.8164047002792358, 0.8115176558494568, 0.8165367841720581, 0.8210275769233704, 0.8261788487434387, 0.826310932636261, 0.8356888294219971, 0.8264430165290833, 0.8496896028518677, 0.8407079577445984, 0.8329150676727295, 0.8360850811004639, 0.8290846943855286], "val_loss": [0.8261244893074036, 0.6658488512039185, 0.5794627070426941, 0.558790385723114, 0.5297333598136902, 0.48437368869781494, 0.46072500944137573, 0.4770338535308838, 0.5304587483406067, 0.5290345549583435, 0.5210675597190857, 0.5276384949684143, 0.5361252427101135, 0.5125988125801086, 0.5423145294189453, 0.5500257015228271, 0.594083845615387, 0.5702470541000366, 0.6111488342285156, 0.5881374478340149, 0.6108368039131165], "val_accuracy": [0.7073333263397217, 0.7633333206176758, 0.7886666655540466, 0.7950000166893005, 0.8116666674613953, 0.8220000267028809, 0.8349999785423279, 0.8343333601951599, 0.8263333439826965, 0.8343333601951599, 0.8383333086967468, 0.8289999961853027, 0.8353333473205566, 0.8346666693687439, 0.8346666693687439, 0.843999981880188, 0.8389999866485596, 0.8353333473205566, 0.8346666693687439, 0.843666672706604, 0.8403333425521851]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1], [8, 2, 6, 0, 3, 9], [0, 1, 0, 2], [39, 39, 33], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 1, 3, 3], [16, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 9, 1, 2, 7, 0, 2, 6, 4, 6, 5, 1, 7, 0, 3, 7, 4, 0, 8, 9, 6, 7, 5, 3, 7, 3, 4, 4, 8, 2, 5, 2, 0, 0, 8, 4, 2, 1, 0, 0, 5, 0, 2, 3, 8, 3, 4, 1, 8, 7], [0, 0, 0, 4, 0, 0, 4, 1, 0, 0, 7, 7, 0, 7, 5, 7, 7, 2, 6, 2, 3, 2, 0, 0, 1, 3, 1, 4, 5, 5, 2, 4, 0, 4, 2, 3, 3, 4], [16, 34, 96, 99, 61, 1, 71, 31, 82, 98, 69, 5, 23]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 6, 3, 3, 10, 6, 4, 1, 2, 1, 1, 0, 98, 60, 38, 13], "tree_depth": 33, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.pow(grad, tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), grad))), tf.math.add(tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.subtract(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(tf.math.negative(tf.math.add(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.pow(grad, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(grad, tf.math.square(grad))), tf.math.subtract(tf.math.add(tf.math.negative(grad), tf.math.multiply(grad, tf.math.add(tf.math.pow(tf.math.negative(beta), tf.math.sqrt(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(grad, tf.math.add(tf.math.square(beta), sigma))))), tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha))), tf.math.add(tf.math.square(tf.math.add(tf.math.negative(tf.math.negative(sigma)), tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.subtract(grad, tf.math.negative(grad))), tf.math.negative(tf.math.square(tf.math.negative(tf.math.add(grad, beta)))))))), grad))), tf.math.multiply(tf.math.sqrt(tf.math.multiply(tf.math.pow(tf.math.subtract(tf.math.sqrt(tf.math.add(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), grad)), beta), sigma), sigma)), grad)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [0, 2, 6, 0, 3, 5, 5, 6, 9], [0, 2, 0, 3], [16, 16, 32], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 3, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 13, 9, 4, 3, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.square(tf.math.divide_no_nan(grad, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)), sigma)))), alpha)), tf.math.sqrt(beta)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 2, 3, 0, 9, 3], [0, 1, 0, 2], [39, 39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1], [0, 2, 3, 6, 3, 5, 8, 7], [0, 2, 1, 3, 2, 0], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 2, 6], [0, 0, 0, 3, 0, 0, 3, 4, 3, 0, 4, 3], [30, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 6, 3, 3, 14, 8, 6, 2, 2, 1, 1, 1, 25, 13, 12, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(alpha, tf.math.square(grad))), tf.math.sqrt(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), sigma), tf.math.sqrt(tf.math.add(grad, sigma))))), tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 8, 8, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 4, 4, 7], [0, 3, 0, 3, 1, 3], [16, 16], [0, 1], [0], [4], [74], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [6, 3, 3, 6, 2, 1, 4, 1, 4, 2, 8, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 13, 7, 6, 2, 2, 1, 1, 0, 23, 12, 11, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma)), tf.math.sqrt(tf.math.sqrt(alpha))), beta)), grad), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}]