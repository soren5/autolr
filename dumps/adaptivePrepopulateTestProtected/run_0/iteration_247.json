[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8805714249610901, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585988998413, 1.8659464120864868, 1.3939106464385986, 1.0966308116912842, 0.9349022507667542, 0.8419743776321411, 0.7695197463035583, 0.729751467704773, 0.6897091865539551, 0.6576535105705261, 0.6359990835189819, 0.6094067096710205, 0.589935839176178, 0.5596274733543396, 0.5528120398521423, 0.5393894910812378, 0.5281672477722168, 0.5202223062515259, 0.5057564377784729, 0.5040625333786011, 0.48261573910713196, 0.46983885765075684, 0.4574008584022522, 0.454408198595047, 0.4424269199371338, 0.42842501401901245, 0.42894208431243896, 0.42616719007492065, 0.41881483793258667, 0.4155913293361664, 0.4008829891681671, 0.39691162109375, 0.38997870683670044, 0.38351768255233765, 0.37681254744529724, 0.3729562759399414, 0.36148902773857117, 0.362969309091568, 0.3563940227031708, 0.3505782186985016, 0.35241496562957764, 0.34010687470436096, 0.3387279510498047, 0.3343537747859955, 0.3285624086856842, 0.32427793741226196, 0.319965660572052, 0.3122166097164154, 0.30889007449150085, 0.3045063316822052], "accuracy": [0.2694492042064667, 0.48870691657066345, 0.568220853805542, 0.6156386137008667, 0.6696605682373047, 0.6963412761688232, 0.7223616242408752, 0.7312111854553223, 0.750759482383728, 0.7600052952766418, 0.7696473598480225, 0.7761194109916687, 0.787082314491272, 0.7985734939575195, 0.7980451583862305, 0.8045172095298767, 0.8121780753135681, 0.8125742673873901, 0.8178576231002808, 0.8191784620285034, 0.8251221776008606, 0.8322546482086182, 0.8356888294219971, 0.8359529972076416, 0.8389908671379089, 0.846387505531311, 0.8451988101005554, 0.8454629778862, 0.848368763923645, 0.8531237840652466, 0.8598600029945374, 0.854708731174469, 0.8605204224586487, 0.8609166741371155, 0.86553955078125, 0.8639545440673828, 0.8689737319946289, 0.8706908226013184, 0.873860776424408, 0.872407853603363, 0.8710870146751404, 0.8776912093162537, 0.8792761564254761, 0.8824461698532104, 0.882710337638855, 0.8811253309249878, 0.887597382068634, 0.887597382068634, 0.8906353116035461, 0.8911636471748352], "val_loss": [2.0369274616241455, 1.5092171430587769, 1.0378726720809937, 0.8372371196746826, 0.7430018186569214, 0.693951427936554, 0.6459794044494629, 0.6065753698348999, 0.5836796760559082, 0.5591391324996948, 0.5475665926933289, 0.5286199450492859, 0.5111508965492249, 0.49807658791542053, 0.4888598918914795, 0.4807276725769043, 0.4732670187950134, 0.46291399002075195, 0.4651739001274109, 0.44972753524780273, 0.44051307439804077, 0.4300120174884796, 0.42833927273750305, 0.4226953983306885, 0.42076465487480164, 0.41008231043815613, 0.40701472759246826, 0.4087570011615753, 0.3987274467945099, 0.39754143357276917, 0.3908216655254364, 0.39351579546928406, 0.3876643180847168, 0.3835429251194, 0.3747929334640503, 0.37449854612350464, 0.3731365501880646, 0.3678072988986969, 0.3718084394931793, 0.3737613260746002, 0.36592888832092285, 0.3612542748451233, 0.3634853661060333, 0.3576800525188446, 0.35225361585617065, 0.35540124773979187, 0.35645702481269836, 0.3527815639972687, 0.3493586778640747, 0.349461168050766], "val_accuracy": [0.5453333258628845, 0.6666666865348816, 0.6899999976158142, 0.7136666774749756, 0.737666666507721, 0.7523333430290222, 0.765666663646698, 0.7816666960716248, 0.7886666655540466, 0.7976666688919067, 0.7953333258628845, 0.8090000152587891, 0.8193333148956299, 0.8209999799728394, 0.8233333230018616, 0.8309999704360962, 0.8243333101272583, 0.843666672706604, 0.8333333134651184, 0.840666651725769, 0.846666693687439, 0.8569999933242798, 0.8533333539962769, 0.8556666374206543, 0.8533333539962769, 0.8613333106040955, 0.8636666536331177, 0.8616666793823242, 0.8659999966621399, 0.862333357334137, 0.8683333396911621, 0.8663333058357239, 0.871999979019165, 0.8673333525657654, 0.8763333559036255, 0.878000020980835, 0.8756666779518127, 0.878000020980835, 0.8756666779518127, 0.8756666779518127, 0.8790000081062317, 0.8776666522026062, 0.8809999823570251, 0.8813333511352539, 0.8833333253860474, 0.8796666860580444, 0.8826666474342346, 0.8826666474342346, 0.8823333382606506, 0.8830000162124634]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8640000224113464, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223867177963257, 1.8687102794647217, 1.3914313316345215, 1.0861966609954834, 0.9433271288871765, 0.8443641066551208, 0.7759418487548828, 0.7239277362823486, 0.689464271068573, 0.662111222743988, 0.6326039433479309, 0.6050465106964111, 0.5939785242080688, 0.5801215767860413, 0.560019850730896, 0.5419639945030212, 0.5331719517707825, 0.513992965221405, 0.4992353320121765, 0.48528677225112915, 0.47802790999412537, 0.46816977858543396, 0.46179482340812683, 0.44934993982315063, 0.43549373745918274, 0.43000057339668274, 0.43678778409957886, 0.42514246702194214, 0.40948644280433655, 0.39870789647102356, 0.401826411485672, 0.3939976394176483, 0.37740710377693176, 0.3751925826072693, 0.3779982030391693, 0.36760270595550537, 0.35716482996940613, 0.35186341404914856], "accuracy": [0.27380794286727905, 0.4892352521419525, 0.5643904209136963, 0.6135252714157104, 0.6633205413818359, 0.6984546184539795, 0.7154933214187622, 0.737947404384613, 0.7445515990257263, 0.7563069462776184, 0.7700436115264893, 0.7781006693840027, 0.7862898111343384, 0.7858935594558716, 0.7947431206703186, 0.8058380484580994, 0.8064984679222107, 0.8127063512802124, 0.8193105459213257, 0.8274996876716614, 0.8252542614936829, 0.8333113193511963, 0.833179235458374, 0.8352925777435303, 0.8396512866020203, 0.8448025584220886, 0.846387505531311, 0.848368763923645, 0.8561616539955139, 0.8548408150672913, 0.8574824929237366, 0.8560295701026917, 0.8668603897094727, 0.8643507957458496, 0.8628978729248047, 0.8698983192443848, 0.8757099509239197, 0.8759741187095642], "val_loss": [2.0402183532714844, 1.5208462476730347, 1.047083854675293, 0.8337907791137695, 0.7485367655754089, 0.6911307573318481, 0.6443160772323608, 0.607637345790863, 0.5849220156669617, 0.5585489273071289, 0.5356687903404236, 0.5238876342773438, 0.5113331079483032, 0.4975052773952484, 0.48719456791877747, 0.47733423113822937, 0.47104117274284363, 0.4617798924446106, 0.4465796649456024, 0.4401436448097229, 0.43540990352630615, 0.44221436977386475, 0.4249570369720459, 0.41619691252708435, 0.4149510860443115, 0.408680260181427, 0.40987277030944824, 0.40159013867378235, 0.3974234163761139, 0.39492204785346985, 0.39373040199279785, 0.38647541403770447, 0.38574811816215515, 0.38475969433784485, 0.3791781961917877, 0.3807273209095001, 0.3768084645271301, 0.378892183303833], "val_accuracy": [0.5270000100135803, 0.6543333530426025, 0.6826666593551636, 0.7113333344459534, 0.7326666712760925, 0.7540000081062317, 0.7720000147819519, 0.7786666750907898, 0.7826666831970215, 0.7956666946411133, 0.8050000071525574, 0.8146666884422302, 0.8116666674613953, 0.8243333101272583, 0.8270000219345093, 0.824999988079071, 0.8330000042915344, 0.8320000171661377, 0.840666651725769, 0.8420000076293945, 0.8460000157356262, 0.8433333039283752, 0.8506666421890259, 0.8529999852180481, 0.8510000109672546, 0.8576666712760925, 0.8536666631698608, 0.8613333106040955, 0.8606666922569275, 0.8583333492279053, 0.8610000014305115, 0.8640000224113464, 0.8679999709129333, 0.8666666746139526, 0.8646666407585144, 0.8640000224113464, 0.8676666617393494, 0.8643333315849304]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 1], [0], [0], [0], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8460000157356262, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2924768924713135, 2.1898128986358643, 1.7634260654449463, 1.362191081047058, 1.0641217231750488, 0.9309340119361877, 0.8369830846786499, 0.8369157314300537, 0.7676549553871155, 0.730822741985321, 0.6931707262992859, 0.6768243312835693, 0.6643553376197815, 0.6134913563728333, 0.5975580215454102, 0.583409309387207, 0.5766003727912903, 0.5487069487571716, 0.5510263442993164, 0.5375124216079712, 0.5333435535430908, 0.5190846920013428, 0.5057395100593567, 0.4853726625442505, 0.4843370020389557, 0.4852876365184784, 0.47019293904304504, 0.4575651288032532, 0.4540920853614807, 0.43947961926460266, 0.4430188238620758, 0.4181884527206421, 0.4304508566856384, 0.4075246751308441, 0.4086858928203583, 0.3987923562526703, 0.3961007595062256, 0.3727709650993347, 0.38309401273727417, 0.3686349093914032, 0.3694506883621216, 0.35942140221595764, 0.36406293511390686, 0.35778316855430603, 0.3449643850326538, 0.357036828994751, 0.3445546329021454, 0.32800576090812683, 0.3342057764530182, 0.310823917388916, 0.3151991367340088, 0.31751853227615356, 0.30606815218925476, 0.3038642704486847, 0.30206945538520813, 0.3010275065898895, 0.2942218482494354, 0.2945910096168518, 0.293251097202301, 0.2940085232257843, 0.2772746980190277, 0.2700052559375763, 0.27281346917152405, 0.28812962770462036, 0.2649432420730591], "accuracy": [0.13036586344242096, 0.3210936486721039, 0.4472328722476959, 0.5433892607688904, 0.6353189945220947, 0.6653017997741699, 0.6935675740242004, 0.6927750706672668, 0.7053229212760925, 0.7218332886695862, 0.7401928305625916, 0.7425703406333923, 0.7524765729904175, 0.76542067527771, 0.7709681391716003, 0.7784969210624695, 0.7833839654922485, 0.7935543656349182, 0.7905164361000061, 0.7943468689918518, 0.7960638999938965, 0.8088759779930115, 0.8101968169212341, 0.8190463781356812, 0.821820080280304, 0.8162726163864136, 0.8261788487434387, 0.8232730031013489, 0.8267071843147278, 0.8273676037788391, 0.8285563588142395, 0.8413683772087097, 0.8393871188163757, 0.8451988101005554, 0.8405758738517761, 0.8475762605667114, 0.8498216867446899, 0.8537842035293579, 0.8516708612442017, 0.8585391640663147, 0.856689989566803, 0.8610487580299377, 0.8619733452796936, 0.8597279191017151, 0.8636903762817383, 0.8639545440673828, 0.8706908226013184, 0.8728041052818298, 0.8697662353515625, 0.8780874609947205, 0.8775591254234314, 0.878879964351654, 0.8821820020675659, 0.8775591254234314, 0.8857482671737671, 0.8802007436752319, 0.8800686597824097, 0.8849557638168335, 0.8831065893173218, 0.883238673210144, 0.8914278149604797, 0.8982961177825928, 0.8931449055671692, 0.891559898853302, 0.8932769894599915], "val_loss": [2.2465567588806152, 2.0205910205841064, 1.149166226387024, 0.9030227661132812, 0.7853572368621826, 0.7357836365699768, 0.6796861886978149, 0.6552362442016602, 0.6434356570243835, 0.6360000967979431, 0.5715091228485107, 0.5442098379135132, 0.5315220355987549, 0.5403232574462891, 0.5310738682746887, 0.5255178809165955, 0.5207661986351013, 0.5152783989906311, 0.5143691301345825, 0.5101523399353027, 0.5079283714294434, 0.5000813007354736, 0.4870867431163788, 0.478159099817276, 0.4765552878379822, 0.4634934067726135, 0.4571698307991028, 0.45471906661987305, 0.44800519943237305, 0.44830331206321716, 0.445817232131958, 0.4468623995780945, 0.4339936375617981, 0.43647685647010803, 0.43330931663513184, 0.43279409408569336, 0.4167691767215729, 0.43171101808547974, 0.4278484284877777, 0.4187544286251068, 0.4297062158584595, 0.4214129149913788, 0.4212226867675781, 0.41851717233657837, 0.4370514750480652, 0.4491516947746277, 0.4332197308540344, 0.42651447653770447, 0.4275805354118347, 0.43776077032089233, 0.44488540291786194, 0.44803377985954285, 0.4439542591571808, 0.4453887939453125, 0.4555988013744354, 0.4542207717895508, 0.4495909810066223, 0.4488973021507263, 0.4568019211292267, 0.4619000554084778, 0.4707895517349243, 0.4723634421825409, 0.4827308654785156, 0.480195552110672, 0.45862051844596863], "val_accuracy": [0.42933332920074463, 0.45899999141693115, 0.6470000147819519, 0.687666654586792, 0.6953333616256714, 0.7326666712760925, 0.7409999966621399, 0.7559999823570251, 0.7606666684150696, 0.7549999952316284, 0.7773333191871643, 0.7796666622161865, 0.7946666479110718, 0.8013333082199097, 0.7946666479110718, 0.8009999990463257, 0.8040000200271606, 0.8023333549499512, 0.8050000071525574, 0.8103333115577698, 0.812333345413208, 0.8176666498184204, 0.8206666707992554, 0.8236666917800903, 0.828000009059906, 0.8330000042915344, 0.8326666951179504, 0.8366666436195374, 0.8296666741371155, 0.8296666741371155, 0.8389999866485596, 0.8460000157356262, 0.8496666550636292, 0.8426666855812073, 0.846666693687439, 0.8473333120346069, 0.8539999723434448, 0.8476666808128357, 0.8486666679382324, 0.8510000109672546, 0.8550000190734863, 0.8529999852180481, 0.8523333072662354, 0.8573333621025085, 0.8513333201408386, 0.8569999933242798, 0.8600000143051147, 0.8576666712760925, 0.8616666793823242, 0.8616666793823242, 0.8579999804496765, 0.859333336353302, 0.8619999885559082, 0.859666645526886, 0.8606666922569275, 0.8600000143051147, 0.8646666407585144, 0.862666666507721, 0.8600000143051147, 0.8656666874885559, 0.8653333187103271, 0.862333357334137, 0.862666666507721, 0.8643333315849304, 0.862666666507721]}, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 0, 1, 1, 0, 1], [0, 4, 1, 0, 0], [0, 4, 3], [0], [1], [0], [2], [0]], "fitness": -0.8254285454750061, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.subtract(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad), tf.math.negative(sigma))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5830345153808594, 0.8234167695045471, 0.6692573428153992, 0.6035668849945068, 0.5715422630310059, 0.5266320109367371, 0.5167115330696106, 0.507441520690918, 0.48137637972831726, 0.47784990072250366, 0.47426536679267883, 0.4631117880344391, 0.46022269129753113], "accuracy": [0.4554220139980316, 0.7091533541679382, 0.7537974119186401, 0.7736098170280457, 0.7928939461708069, 0.8043851256370544, 0.8064984679222107, 0.8164047002792358, 0.8165367841720581, 0.826310932636261, 0.8285563588142395, 0.837141752243042, 0.8342359066009521], "val_loss": [0.8971506953239441, 0.61588454246521, 0.5392600297927856, 0.49726763367652893, 0.4957341253757477, 0.48637109994888306, 0.49107038974761963, 0.49199455976486206, 0.49655693769454956, 0.47536686062812805, 0.5195068120956421, 0.5071439146995544, 0.5101699233055115], "val_accuracy": [0.6766666769981384, 0.7766666412353516, 0.8023333549499512, 0.8113333582878113, 0.8183333277702332, 0.8276666402816772, 0.82833331823349, 0.8396666646003723, 0.8333333134651184, 0.8263333439826965, 0.8320000171661377, 0.8363333344459534, 0.8370000123977661]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [3, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 58], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 3, 6, 8, 6, 4, 1, 2, 2, 8, 6, 1, 7, 4, 1, 2, 3, 4, 4, 3, 9, 1], [0, 3, 0, 3, 0, 0, 3, 1, 2, 0, 4, 4, 7, 6, 1, 2, 7, 6, 7, 3], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 43, 23, 20, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(sigma, tf.math.sqrt(tf.math.divide_no_nan(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma)), tf.math.sqrt(tf.math.divide_no_nan(alpha, beta)))))), tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(tf.math.subtract(tf.math.add(grad, grad), tf.math.multiply(tf.math.pow(tf.math.pow(grad, grad), alpha), tf.math.multiply(beta, grad))), grad), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.subtract(grad, sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 2, 3, 0, 7], [0, 1, 0, 2, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 5, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [6, 3, 3, 4, 8, 1, 4, 1, 4, 2, 8, 2, 2, 4, 7, 1, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 7, 3, 4, 6], [16, 99, 96, 26, 61, 35, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 7, 6, 2, 8, 5, 3, 2, 2, 1, 1, 1, 31, 17, 14, 7], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.negative(tf.math.add(grad, grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.pow(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.math.pow(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)), alpha))), tf.math.add(tf.math.sqrt(beta), tf.math.add(tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(grad, sigma), grad)), tf.math.subtract(grad, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5, 1, 7, 2, 5, 9, 9, 5], [2, 2, 0, 3, 4], [53, 74, 17], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [6, 1, 1, 6, 8, 1, 4, 1, 4, 2, 8, 4], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0, 5], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 18, 13, 5, 3, 2, 1, 1, 1, 23, 12, 11, 5], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.math.square(tf.math.subtract(beta, tf.math.add(tf.math.add(tf.math.square(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), beta), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), grad), tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma)))), tf.math.sqrt(tf.math.pow(alpha, beta)))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0], [3, 2, 3, 0, 3, 7, 7, 8, 2, 9], [0, 1, 0, 2, 1, 2, 1], [39, 39, 71], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 1], [16, 88], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 4, 2, 9, 8, 1, 9, 2, 6, 2, 5, 8, 1, 9, 4, 7, 2, 9, 0, 6, 9, 3, 7, 4, 3, 9, 4, 3, 3, 1, 1, 7, 4, 5, 4, 0, 7, 5, 6, 7, 6, 5, 9, 7, 4, 5, 4, 9, 3, 0, 6, 0, 2, 9], [2, 0, 0, 3, 4, 0, 3, 1, 2, 0, 6, 1, 3, 2, 4, 3, 0, 7, 1, 0, 6, 7, 7, 0, 4, 4, 1, 6, 3, 3, 0, 1, 6, 4], [16, 99, 96, 99, 61, 1, 98, 14, 9, 65, 70, 40, 47, 48, 36, 91, 18]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 10, 7, 3, 10, 6, 4, 2, 2, 1, 1, 1, 97, 63, 34, 17], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, tf.math.add(tf.math.sqrt(grad), tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(beta, tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(tf.math.pow(sigma, grad), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(sigma))))), alpha), tf.math.subtract(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.math.add(grad, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), alpha), tf.math.negative(sigma))))), tf.math.divide_no_nan(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(tf.math.pow(grad, sigma), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.pow(alpha, tf.math.multiply(tf.math.multiply(tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.pow(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), grad), tf.math.square(grad)), grad), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.negative(grad))), tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.math.square(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(grad, tf.math.square(tf.math.pow(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(sigma), sigma)))))), tf.math.divide_no_nan(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.negative(grad))), tf.math.add(grad, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}]