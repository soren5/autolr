[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8805714249610901, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585988998413, 1.8659464120864868, 1.3939106464385986, 1.0966308116912842, 0.9349022507667542, 0.8419743776321411, 0.7695197463035583, 0.729751467704773, 0.6897091865539551, 0.6576535105705261, 0.6359990835189819, 0.6094067096710205, 0.589935839176178, 0.5596274733543396, 0.5528120398521423, 0.5393894910812378, 0.5281672477722168, 0.5202223062515259, 0.5057564377784729, 0.5040625333786011, 0.48261573910713196, 0.46983885765075684, 0.4574008584022522, 0.454408198595047, 0.4424269199371338, 0.42842501401901245, 0.42894208431243896, 0.42616719007492065, 0.41881483793258667, 0.4155913293361664, 0.4008829891681671, 0.39691162109375, 0.38997870683670044, 0.38351768255233765, 0.37681254744529724, 0.3729562759399414, 0.36148902773857117, 0.362969309091568, 0.3563940227031708, 0.3505782186985016, 0.35241496562957764, 0.34010687470436096, 0.3387279510498047, 0.3343537747859955, 0.3285624086856842, 0.32427793741226196, 0.319965660572052, 0.3122166097164154, 0.30889007449150085, 0.3045063316822052], "accuracy": [0.2694492042064667, 0.48870691657066345, 0.568220853805542, 0.6156386137008667, 0.6696605682373047, 0.6963412761688232, 0.7223616242408752, 0.7312111854553223, 0.750759482383728, 0.7600052952766418, 0.7696473598480225, 0.7761194109916687, 0.787082314491272, 0.7985734939575195, 0.7980451583862305, 0.8045172095298767, 0.8121780753135681, 0.8125742673873901, 0.8178576231002808, 0.8191784620285034, 0.8251221776008606, 0.8322546482086182, 0.8356888294219971, 0.8359529972076416, 0.8389908671379089, 0.846387505531311, 0.8451988101005554, 0.8454629778862, 0.848368763923645, 0.8531237840652466, 0.8598600029945374, 0.854708731174469, 0.8605204224586487, 0.8609166741371155, 0.86553955078125, 0.8639545440673828, 0.8689737319946289, 0.8706908226013184, 0.873860776424408, 0.872407853603363, 0.8710870146751404, 0.8776912093162537, 0.8792761564254761, 0.8824461698532104, 0.882710337638855, 0.8811253309249878, 0.887597382068634, 0.887597382068634, 0.8906353116035461, 0.8911636471748352], "val_loss": [2.0369274616241455, 1.5092171430587769, 1.0378726720809937, 0.8372371196746826, 0.7430018186569214, 0.693951427936554, 0.6459794044494629, 0.6065753698348999, 0.5836796760559082, 0.5591391324996948, 0.5475665926933289, 0.5286199450492859, 0.5111508965492249, 0.49807658791542053, 0.4888598918914795, 0.4807276725769043, 0.4732670187950134, 0.46291399002075195, 0.4651739001274109, 0.44972753524780273, 0.44051307439804077, 0.4300120174884796, 0.42833927273750305, 0.4226953983306885, 0.42076465487480164, 0.41008231043815613, 0.40701472759246826, 0.4087570011615753, 0.3987274467945099, 0.39754143357276917, 0.3908216655254364, 0.39351579546928406, 0.3876643180847168, 0.3835429251194, 0.3747929334640503, 0.37449854612350464, 0.3731365501880646, 0.3678072988986969, 0.3718084394931793, 0.3737613260746002, 0.36592888832092285, 0.3612542748451233, 0.3634853661060333, 0.3576800525188446, 0.35225361585617065, 0.35540124773979187, 0.35645702481269836, 0.3527815639972687, 0.3493586778640747, 0.349461168050766], "val_accuracy": [0.5453333258628845, 0.6666666865348816, 0.6899999976158142, 0.7136666774749756, 0.737666666507721, 0.7523333430290222, 0.765666663646698, 0.7816666960716248, 0.7886666655540466, 0.7976666688919067, 0.7953333258628845, 0.8090000152587891, 0.8193333148956299, 0.8209999799728394, 0.8233333230018616, 0.8309999704360962, 0.8243333101272583, 0.843666672706604, 0.8333333134651184, 0.840666651725769, 0.846666693687439, 0.8569999933242798, 0.8533333539962769, 0.8556666374206543, 0.8533333539962769, 0.8613333106040955, 0.8636666536331177, 0.8616666793823242, 0.8659999966621399, 0.862333357334137, 0.8683333396911621, 0.8663333058357239, 0.871999979019165, 0.8673333525657654, 0.8763333559036255, 0.878000020980835, 0.8756666779518127, 0.878000020980835, 0.8756666779518127, 0.8756666779518127, 0.8790000081062317, 0.8776666522026062, 0.8809999823570251, 0.8813333511352539, 0.8833333253860474, 0.8796666860580444, 0.8826666474342346, 0.8826666474342346, 0.8823333382606506, 0.8830000162124634]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8574285507202148, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221766471862793, 1.863905906677246, 1.377975344657898, 1.087321400642395, 0.9251075983047485, 0.8282592296600342, 0.7652892470359802, 0.7143030166625977, 0.6821821928024292, 0.6554058194160461, 0.6199043393135071, 0.6074539422988892, 0.5799475312232971, 0.5637248754501343, 0.5482937097549438, 0.535873532295227, 0.5203416347503662, 0.5133892297744751, 0.4964633285999298, 0.4900679588317871, 0.4803983271121979, 0.474926620721817, 0.45638278126716614, 0.45258527994155884, 0.449576199054718, 0.43680426478385925, 0.4315306842327118, 0.4207485020160675, 0.4130728542804718, 0.40237030386924744, 0.3933519124984741, 0.3995104730129242, 0.3926663398742676, 0.38491129875183105, 0.38103538751602173, 0.3692050874233246, 0.36796098947525024, 0.358857125043869, 0.35441020131111145, 0.34836819767951965, 0.34619787335395813, 0.337094783782959, 0.3323962390422821, 0.3317042291164398, 0.3288067877292633, 0.32045885920524597, 0.31588464975357056, 0.30804675817489624, 0.3145453929901123], "accuracy": [0.27816668152809143, 0.4928014874458313, 0.5719191431999207, 0.624620258808136, 0.6659622192382812, 0.705058753490448, 0.7273808121681213, 0.7409853339195251, 0.7541936039924622, 0.7633073329925537, 0.7757231593132019, 0.7788931727409363, 0.7841764688491821, 0.796328067779541, 0.7989697456359863, 0.8099326491355896, 0.8117818236351013, 0.8169330358505249, 0.8222163319587708, 0.8247259259223938, 0.8255184292793274, 0.8293488025665283, 0.8345000743865967, 0.842028796672821, 0.8417646288871765, 0.8429533839225769, 0.8451988101005554, 0.8514066934585571, 0.8521991968154907, 0.8524633646011353, 0.8605204224586487, 0.8537842035293579, 0.8568220734596252, 0.8577466607093811, 0.8667283058166504, 0.86553955078125, 0.8689737319946289, 0.8717474341392517, 0.8705587387084961, 0.8778232932090759, 0.8768987059593201, 0.8812574148178101, 0.8780874609947205, 0.878879964351654, 0.8792761564254761, 0.8844274282455444, 0.8862766027450562, 0.8877294659614563, 0.8869370222091675], "val_loss": [2.0358076095581055, 1.505741834640503, 1.046085000038147, 0.8445113301277161, 0.751416802406311, 0.7048509120941162, 0.6489385366439819, 0.6122926473617554, 0.5942065715789795, 0.5627086758613586, 0.5512509942054749, 0.5333700180053711, 0.5173540115356445, 0.504485011100769, 0.49535393714904785, 0.4817642867565155, 0.4717574119567871, 0.46782100200653076, 0.4586517810821533, 0.4497741758823395, 0.4440144896507263, 0.4373069703578949, 0.43661174178123474, 0.42825740575790405, 0.4255183935165405, 0.42034801840782166, 0.4158317446708679, 0.40722689032554626, 0.4200053811073303, 0.4030837416648865, 0.40035462379455566, 0.39901790022850037, 0.3991638720035553, 0.3945513963699341, 0.3879244923591614, 0.3857215642929077, 0.38401758670806885, 0.37940657138824463, 0.3778502643108368, 0.3786776661872864, 0.37167292833328247, 0.37246814370155334, 0.3706762194633484, 0.3673539161682129, 0.37158581614494324, 0.3725843131542206, 0.35752469301223755, 0.3683173954486847, 0.3627113401889801], "val_accuracy": [0.5323333144187927, 0.656000018119812, 0.6830000281333923, 0.706333339214325, 0.7316666841506958, 0.7429999709129333, 0.7599999904632568, 0.7693333625793457, 0.778333306312561, 0.7976666688919067, 0.7973333597183228, 0.8109999895095825, 0.8116666674613953, 0.8216666579246521, 0.8243333101272583, 0.8309999704360962, 0.8360000252723694, 0.8309999704360962, 0.8399999737739563, 0.8413333296775818, 0.8413333296775818, 0.847000002861023, 0.8413333296775818, 0.8486666679382324, 0.8516666889190674, 0.8569999933242798, 0.8546666502952576, 0.8533333539962769, 0.8493333458900452, 0.862333357334137, 0.8569999933242798, 0.8569999933242798, 0.8569999933242798, 0.8640000224113464, 0.8643333315849304, 0.8646666407585144, 0.8633333444595337, 0.8676666617393494, 0.8706666827201843, 0.8706666827201843, 0.8663333058357239, 0.8690000176429749, 0.871999979019165, 0.878333330154419, 0.8706666827201843, 0.8666666746139526, 0.8766666650772095, 0.874666690826416, 0.8756666779518127]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.829714298248291, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5008338689804077, 0.7789546847343445, 0.6898987889289856, 0.6208570003509521, 0.5790027379989624, 0.5551031231880188, 0.5353358387947083, 0.511681318283081, 0.4444220960140228, 0.4953795373439789, 0.5416128635406494, 0.524931788444519, 0.5127477049827576], "accuracy": [0.4951789677143097, 0.7284374833106995, 0.7555144429206848, 0.77677983045578, 0.7922335267066956, 0.7957997918128967, 0.8131026029586792, 0.8207634687423706, 0.8364813327789307, 0.829216718673706, 0.805177628993988, 0.8197067975997925, 0.828292191028595], "val_loss": [0.7565295696258545, 0.5989861488342285, 0.5324446558952332, 0.5441552996635437, 0.49210017919540405, 0.46288880705833435, 0.4366585314273834, 0.43680107593536377, 0.4476530849933624, 0.512549638748169, 0.4628472924232483, 0.5407811403274536, 0.5085225701332092], "val_accuracy": [0.7429999709129333, 0.7876666784286499, 0.8103333115577698, 0.8006666898727417, 0.8276666402816772, 0.8330000042915344, 0.8453333377838135, 0.8493333458900452, 0.8450000286102295, 0.8416666388511658, 0.8479999899864197, 0.8396666646003723, 0.82833331823349]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0], [0, 9], [0], [0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 1, 4, 4, 2, 5, 9, 9], [0, 4, 6], [0, 64, 36], [0, 1], [0], [1], [0]], "fitness": -0.803428590297699, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.pow(tf.math.add(tf.math.square(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), grad), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2927653789520264, 2.1895205974578857, 1.7731927633285522, 1.3644200563430786, 1.0610039234161377, 0.9352360367774963, 0.8407525420188904, 0.814420759677887, 0.7617608904838562, 0.7533919215202332, 0.7050701379776001, 0.6838986277580261, 0.6548514366149902, 0.6360805034637451, 0.6131769418716431, 0.5972657799720764, 0.5885713696479797, 0.5758712291717529, 0.5657435059547424, 0.5636022090911865, 0.5461982488632202], "accuracy": [0.1306300312280655, 0.33284902572631836, 0.4371945559978485, 0.5444459319114685, 0.6408664584159851, 0.6588297486305237, 0.6859067678451538, 0.6950204968452454, 0.7059833407402039, 0.7086250185966492, 0.7354378700256348, 0.7417778372764587, 0.7515519857406616, 0.757099449634552, 0.7627789974212646, 0.7689869403839111, 0.7779685854911804, 0.7814027070999146, 0.7847048044204712, 0.7841764688491821, 0.7814027070999146], "val_loss": [2.2465293407440186, 2.017836809158325, 1.126110315322876, 0.8805102705955505, 0.7783654928207397, 0.7242599129676819, 0.6864917874336243, 0.6737111210823059, 0.6512756943702698, 0.6322473287582397, 0.5833359956741333, 0.5752095580101013, 0.5736405253410339, 0.5486651062965393, 0.5307934284210205, 0.5139527916908264, 0.520884096622467, 0.524117112159729, 0.5149528980255127, 0.5082672834396362, 0.5093539357185364], "val_accuracy": [0.41466665267944336, 0.4663333296775818, 0.6556666493415833, 0.6899999976158142, 0.7086666822433472, 0.7076666951179504, 0.7403333187103271, 0.7419999837875366, 0.7483333349227905, 0.7613333463668823, 0.7753333449363708, 0.7749999761581421, 0.781333327293396, 0.7833333611488342, 0.7960000038146973, 0.8103333115577698, 0.8043333292007446, 0.8043333292007446, 0.8059999942779541, 0.8076666593551636, 0.8006666898727417]}, "mapping_values": [1, 10, 5, 5, 3, 2, 2, 0, 1, 11, 8, 3, 3, 2, 1, 1, 0], "tree_depth": 16}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [5, 2, 3, 0, 3], [1, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 1, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [6, 1, 3, 5, 8, 1, 4, 1, 4, 5, 8, 4, 2, 2, 9, 1, 0], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4, 1], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 2, 2, 1, 1, 1, 28, 17, 11, 6], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.negative(alpha), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.math.square(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(sigma, alpha), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.negative(beta), grad)))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 9, 3, 1, 3], [0, 1, 0, 2, 2], [83, 99, 27], [0, 1], [0, 2, 3, 0, 3, 5], [0], [16, 16], [0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 7, 0, 8], [3, 6, 4, 7], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 5, 8, 1, 3, 1, 2, 2, 8, 4], [0, 0, 0, 2, 0, 0, 1, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 0, 1, 2, 1, 1, 1, 8, 5, 3, 0, 22, 12, 10, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(sigma, tf.math.negative(tf.math.sqrt(grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), alpha)))))), tf.math.sqrt(tf.math.pow(alpha, beta))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3033108711242676, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 0, 0, 3, 9], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [2, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 6, 2, 2, 10, 6, 4, 2, 2, 1, 1, 1, 12, 6, 6, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(beta, tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3068630695343018, 2.302917003631592, 2.3067057132720947, 2.3870327472686768, 3.6663904190063477, 9.088433265686035, 21.036624908447266, 41.08806228637695], "accuracy": [0.09496764093637466, 0.09179764986038208, 0.09760929644107819, 0.09708096832036972, 0.10236428678035736, 0.09813763201236725, 0.09668471664190292, 0.0952318087220192], "val_loss": [2.301971912384033, 2.3040590286254883, 2.3189704418182373, 2.7217066287994385, 6.0013346672058105, 15.123177528381348, 31.735166549682617, 57.67729187011719], "val_accuracy": [0.07333333045244217, 0.09866666793823242, 0.10199999809265137, 0.0989999994635582, 0.10166666656732559, 0.0989999994635582, 0.09799999743700027, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 2, 0, 3, 5, 1], [0, 2, 0, 3, 4], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 6, 2, 8, 2, 5, 5, 5], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0, 1], [16, 99, 44, 99, 32, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 12, 7, 5, 2, 2, 1, 1, 1, 26, 15, 11, 5], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(sigma, tf.math.add(tf.math.sqrt(grad), tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.square(sigma), alpha)))), tf.math.square(tf.math.square(beta)))), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}]