[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8785714507102966, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.22385311126709, 1.8689895868301392, 1.3921784162521362, 1.09282648563385, 0.943203330039978, 0.8380605578422546, 0.7783129811286926, 0.7317649722099304, 0.697516679763794, 0.6667935848236084, 0.6370715498924255, 0.6119930148124695, 0.597540020942688, 0.585638165473938, 0.5669749975204468, 0.5510876774787903, 0.5321505069732666, 0.528533399105072, 0.5092916488647461, 0.5203198194503784, 0.49983617663383484, 0.48847419023513794, 0.48181167244911194, 0.46785861253738403, 0.4670261740684509, 0.4507957398891449, 0.44654130935668945, 0.4353342354297638, 0.42720916867256165, 0.4178202748298645, 0.4137081205844879, 0.4128495752811432, 0.417216032743454, 0.39360734820365906, 0.39136654138565063, 0.3920917809009552, 0.3843253552913666, 0.3787577748298645, 0.36371058225631714, 0.35812604427337646, 0.36053144931793213, 0.3547873795032501, 0.3530988097190857, 0.3457549214363098, 0.3456178307533264, 0.33321312069892883, 0.33248311281204224, 0.3293883204460144, 0.3254311978816986, 0.31505241990089417, 0.3130646049976349, 0.30993208289146423, 0.3013964593410492, 0.2993669807910919, 0.2997386157512665, 0.29056525230407715, 0.2877940833568573, 0.29028749465942383, 0.28097987174987793, 0.28064799308776855, 0.2704039216041565, 0.268941193819046, 0.26596739888191223, 0.26158997416496277, 0.2584567368030548, 0.25905969738960266, 0.25384601950645447, 0.24113249778747559, 0.24394433200359344, 0.2416629046201706, 0.24062906205654144, 0.2293824404478073, 0.22863131761550903, 0.2209962159395218, 0.22504355013370514], "accuracy": [0.2763175368309021, 0.4807819426059723, 0.5597675442695618, 0.6222427487373352, 0.6719059348106384, 0.698190450668335, 0.7252674698829651, 0.7397965788841248, 0.748778223991394, 0.7617223858833313, 0.7697794437408447, 0.7804781198501587, 0.7837802171707153, 0.7882710099220276, 0.7976489067077637, 0.806630551815033, 0.8121780753135681, 0.8109893202781677, 0.8157442808151245, 0.8182538747787476, 0.822348415851593, 0.8245938420295715, 0.8285563588142395, 0.835160493850708, 0.8368775844573975, 0.8433496356010437, 0.844010055065155, 0.844010055065155, 0.8514066934585571, 0.8512746095657349, 0.8576145768165588, 0.8514066934585571, 0.8527275323867798, 0.8625016212463379, 0.863029956817627, 0.8595958352088928, 0.8627657890319824, 0.863029956817627, 0.8713511824607849, 0.8728041052818298, 0.8733324408531189, 0.8746532797813416, 0.8721436858177185, 0.8745211958885193, 0.8758420348167419, 0.8816536664962769, 0.8799365758895874, 0.8835028409957886, 0.8845595121383667, 0.8908994793891907, 0.8902390599250793, 0.8873332738876343, 0.8928807377815247, 0.8928807377815247, 0.8918240666389465, 0.8949940800666809, 0.8960506916046143, 0.8957865834236145, 0.8982961177825928, 0.9005415439605713, 0.9022586345672607, 0.902390718460083, 0.9038436412811279, 0.9063531756401062, 0.901862382888794, 0.9063531756401062, 0.9083344340324402, 0.9126931428909302, 0.9105798602104187, 0.9157310724258423, 0.910711944103241, 0.9126931428909302, 0.9167877435684204, 0.9220710396766663, 0.9181085824966431], "val_loss": [2.0362961292266846, 1.5109721422195435, 1.0366545915603638, 0.8216940760612488, 0.7334108352661133, 0.6752658486366272, 0.6272311210632324, 0.5901768207550049, 0.565755307674408, 0.5454519987106323, 0.5303096771240234, 0.5078737735748291, 0.49619564414024353, 0.4870852828025818, 0.477031409740448, 0.46416130661964417, 0.45332321524620056, 0.45065897703170776, 0.4499213993549347, 0.43400630354881287, 0.42278340458869934, 0.42549237608909607, 0.4191504716873169, 0.406779408454895, 0.4038170576095581, 0.39954128861427307, 0.39287909865379333, 0.386243611574173, 0.3859941065311432, 0.38023167848587036, 0.3832986652851105, 0.38317835330963135, 0.37083789706230164, 0.37188199162483215, 0.3707095682621002, 0.36467626690864563, 0.35694506764411926, 0.3572940230369568, 0.35267552733421326, 0.35352417826652527, 0.34998568892478943, 0.3500393331050873, 0.3457832932472229, 0.3445078134536743, 0.34039610624313354, 0.3432251811027527, 0.3378094434738159, 0.3373914062976837, 0.33233195543289185, 0.33655405044555664, 0.3316599130630493, 0.3272864520549774, 0.3274107575416565, 0.3278765380382538, 0.3250201344490051, 0.32743147015571594, 0.3283940255641937, 0.3233192265033722, 0.32683950662612915, 0.32519635558128357, 0.3187567889690399, 0.3262876868247986, 0.317158967256546, 0.3196517527103424, 0.31830424070358276, 0.31782957911491394, 0.3168559968471527, 0.31806766986846924, 0.3201530873775482, 0.3147178888320923, 0.31271007657051086, 0.3128334879875183, 0.3134373426437378, 0.3189963698387146, 0.3166082501411438], "val_accuracy": [0.49900001287460327, 0.6556666493415833, 0.684333324432373, 0.7089999914169312, 0.7406666874885559, 0.7543333172798157, 0.765333354473114, 0.7803333401679993, 0.7916666865348816, 0.8043333292007446, 0.7990000247955322, 0.8119999766349792, 0.8173333406448364, 0.8199999928474426, 0.8276666402816772, 0.8273333311080933, 0.8343333601951599, 0.8306666612625122, 0.8356666564941406, 0.8433333039283752, 0.8483333587646484, 0.8420000076293945, 0.847000002861023, 0.8500000238418579, 0.8489999771118164, 0.8513333201408386, 0.8550000190734863, 0.8566666841506958, 0.8579999804496765, 0.859666645526886, 0.8613333106040955, 0.8569999933242798, 0.8640000224113464, 0.8619999885559082, 0.8600000143051147, 0.862666666507721, 0.8683333396911621, 0.8676666617393494, 0.8709999918937683, 0.8683333396911621, 0.8703333139419556, 0.8696666955947876, 0.8709999918937683, 0.8740000128746033, 0.875, 0.8730000257492065, 0.8769999742507935, 0.8726666569709778, 0.8790000081062317, 0.878000020980835, 0.8776666522026062, 0.8799999952316284, 0.8790000081062317, 0.8813333511352539, 0.8826666474342346, 0.8776666522026062, 0.8809999823570251, 0.8830000162124634, 0.8796666860580444, 0.8823333382606506, 0.8836666941642761, 0.8813333511352539, 0.8849999904632568, 0.8863333463668823, 0.8889999985694885, 0.8830000162124634, 0.8853333592414856, 0.8856666684150696, 0.8883333206176758, 0.8899999856948853, 0.8856666684150696, 0.8896666765213013, 0.8880000114440918, 0.8866666555404663, 0.8853333592414856]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8654285669326782, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2231712341308594, 1.8694766759872437, 1.392189383506775, 1.0995451211929321, 0.9460440278053284, 0.8464201092720032, 0.7755148410797119, 0.7315294146537781, 0.6938923597335815, 0.6639559268951416, 0.6485854983329773, 0.6252471208572388, 0.6084079742431641, 0.578192949295044, 0.5757381916046143, 0.5555657148361206, 0.5385696291923523, 0.5294257998466492, 0.5229997038841248, 0.5094579458236694, 0.5013909339904785, 0.48944246768951416, 0.48483723402023315, 0.47644075751304626, 0.4668102264404297, 0.4511459171772003, 0.44656845927238464, 0.4414930045604706, 0.4329104423522949, 0.4239068627357483, 0.416126012802124, 0.4146164357662201, 0.41472965478897095, 0.41267162561416626, 0.39881622791290283, 0.39500346779823303, 0.3793998062610626, 0.3797621428966522, 0.37920108437538147, 0.37044990062713623, 0.36240914463996887, 0.3651607036590576, 0.35893934965133667, 0.3521653413772583, 0.3449188768863678, 0.3420220613479614, 0.34021830558776855, 0.33595356345176697, 0.33075323700904846, 0.3273521363735199, 0.31791526079177856, 0.31232988834381104, 0.3133402168750763, 0.3101871609687805, 0.3095741271972656, 0.30118194222450256, 0.2943752408027649, 0.28678223490715027, 0.2813396453857422, 0.28418779373168945], "accuracy": [0.27327960729599, 0.48791441321372986, 0.561352550983429, 0.6122044920921326, 0.6612072587013245, 0.6956809163093567, 0.7251353859901428, 0.7329282760620117, 0.7478536367416382, 0.7568352818489075, 0.7652885913848877, 0.7744023203849792, 0.7814027070999146, 0.7928939461708069, 0.7924976944923401, 0.805177628993988, 0.8082155585289001, 0.8133667707443237, 0.8105930685997009, 0.8161405324935913, 0.8201030492782593, 0.8236692547798157, 0.8239334225654602, 0.8334434032440186, 0.8367455005645752, 0.839519202709198, 0.8389908671379089, 0.842028796672821, 0.8449346423149109, 0.8519350290298462, 0.8507462739944458, 0.852331280708313, 0.852859616279602, 0.8543124794960022, 0.8578787446022034, 0.8581429123878479, 0.8644828796386719, 0.8654074668884277, 0.8660678863525391, 0.8683133125305176, 0.8705587387084961, 0.8716153502464294, 0.8698983192443848, 0.8706908226013184, 0.8750495314598083, 0.8739928603172302, 0.8755778670310974, 0.8792761564254761, 0.8805969953536987, 0.8808611631393433, 0.8845595121383667, 0.8886540532112122, 0.8823140859603882, 0.8816536664962769, 0.8878615498542786, 0.891559898853302, 0.8912957310676575, 0.8963148593902588, 0.8969752788543701, 0.8949940800666809], "val_loss": [2.0397861003875732, 1.5123289823532104, 1.0450901985168457, 0.8305109739303589, 0.7395370006561279, 0.6853163838386536, 0.6367082595825195, 0.6011555194854736, 0.577974796295166, 0.5536714792251587, 0.5401409268379211, 0.5176670551300049, 0.5097797513008118, 0.4957611858844757, 0.48173555731773376, 0.47177034616470337, 0.46179088950157166, 0.45486703515052795, 0.44768622517585754, 0.4410915672779083, 0.4309391677379608, 0.43005022406578064, 0.4193800389766693, 0.409891277551651, 0.40441155433654785, 0.3971785604953766, 0.397682249546051, 0.3903273046016693, 0.3869248926639557, 0.38070353865623474, 0.3903151750564575, 0.3724520206451416, 0.3763796091079712, 0.3681962192058563, 0.36719727516174316, 0.3656775653362274, 0.3588828146457672, 0.35914453864097595, 0.35150760412216187, 0.3585225045681, 0.34891727566719055, 0.3484519124031067, 0.34746524691581726, 0.34623196721076965, 0.34086835384368896, 0.3411407172679901, 0.33834943175315857, 0.3406914174556732, 0.3364366888999939, 0.33606216311454773, 0.33312365412712097, 0.33285409212112427, 0.33379077911376953, 0.32980799674987793, 0.32430213689804077, 0.32838374376296997, 0.3227519094944, 0.32575178146362305, 0.32242998480796814, 0.32230424880981445], "val_accuracy": [0.531000018119812, 0.6520000100135803, 0.6856666803359985, 0.7116666436195374, 0.734666645526886, 0.749666690826416, 0.762666642665863, 0.7716666460037231, 0.7833333611488342, 0.79666668176651, 0.8036666512489319, 0.8130000233650208, 0.8159999847412109, 0.8149999976158142, 0.8256666660308838, 0.8296666741371155, 0.8326666951179504, 0.8360000252723694, 0.8373333215713501, 0.8403333425521851, 0.8426666855812073, 0.8450000286102295, 0.846666693687439, 0.8513333201408386, 0.8550000190734863, 0.8539999723434448, 0.8529999852180481, 0.8579999804496765, 0.859333336353302, 0.8613333106040955, 0.8500000238418579, 0.8666666746139526, 0.8610000014305115, 0.8646666407585144, 0.8629999756813049, 0.8619999885559082, 0.8686666488647461, 0.8683333396911621, 0.8669999837875366, 0.8679999709129333, 0.8693333268165588, 0.8730000257492065, 0.8730000257492065, 0.8706666827201843, 0.8743333220481873, 0.875, 0.874666690826416, 0.8743333220481873, 0.875333309173584, 0.8759999871253967, 0.8786666393280029, 0.8763333559036255, 0.8733333349227905, 0.8786666393280029, 0.8816666603088379, 0.878333330154419, 0.8803333044052124, 0.878000020980835, 0.8799999952316284, 0.878000020980835]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0], [0, 9], [0], [0], [1], [0], [2], [0]], "fitness": -0.8257142901420593, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.4507094621658325, 0.7715643644332886, 0.646766722202301, 0.6032902598381042, 0.5593042373657227, 0.5139151811599731, 0.4718859791755676, 0.4851560890674591, 0.49467167258262634, 0.46614256501197815, 0.46377432346343994, 0.4457789957523346, 0.42542141675949097, 0.44738757610321045, 0.4967384338378906, 0.47959423065185547], "accuracy": [0.4970281422138214, 0.724739134311676, 0.7655527591705322, 0.785101056098938, 0.7968564033508301, 0.8132346868515015, 0.8314621448516846, 0.826310932636261, 0.822348415851593, 0.8302733898162842, 0.8416325449943542, 0.8380662798881531, 0.8521991968154907, 0.845859169960022, 0.8379341959953308, 0.8428213000297546], "val_loss": [0.8161919116973877, 0.5975948572158813, 0.5292832255363464, 0.5062061548233032, 0.4805542826652527, 0.472540944814682, 0.4836138188838959, 0.48328107595443726, 0.45069172978401184, 0.5244590044021606, 0.47089242935180664, 0.4776057004928589, 0.5905385613441467, 0.6133545637130737, 0.5279889702796936, 0.6826147437095642], "val_accuracy": [0.7120000123977661, 0.7699999809265137, 0.8046666383743286, 0.8133333325386047, 0.8220000267028809, 0.8303333520889282, 0.8273333311080933, 0.8199999928474426, 0.8429999947547913, 0.8423333168029785, 0.8496666550636292, 0.8420000076293945, 0.8456666469573975, 0.8476666808128357, 0.847000002861023, 0.8320000171661377]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 2, 0, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 1], [0], [0], [0], [0, 0, 0], [0, 8, 9], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8254285454750061, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.29190993309021, 2.190215587615967, 1.7615768909454346, 1.3607177734375, 1.0583126544952393, 0.9112427234649658, 0.8533433079719543, 0.810420036315918, 0.7653511166572571, 0.7516981363296509, 0.7164528369903564, 0.6806408166885376, 0.6487640738487244, 0.6238270998001099, 0.6107229590415955, 0.6009494662284851, 0.5831196308135986, 0.5750084519386292, 0.5559998750686646, 0.5475383996963501, 0.543322741985321, 0.5297161936759949, 0.5159946084022522, 0.5042620897293091, 0.4958917796611786, 0.4911806881427765, 0.48426562547683716, 0.4831967353820801, 0.4606100618839264], "accuracy": [0.12957337498664856, 0.328490287065506, 0.4407607913017273, 0.5404834151268005, 0.6371681690216064, 0.6650376319885254, 0.687887966632843, 0.7012283802032471, 0.7000396251678467, 0.7135120630264282, 0.7300224304199219, 0.735041618347168, 0.7578919529914856, 0.7646281719207764, 0.7638356685638428, 0.7725531458854675, 0.7815347909927368, 0.7853652238845825, 0.7876105904579163, 0.7917051911354065, 0.7927618622779846, 0.7923656105995178, 0.8039889335632324, 0.800290584564209, 0.8101968169212341, 0.8166688680648804, 0.8171972036361694, 0.8062343001365662, 0.8182538747787476], "val_loss": [2.246025323867798, 2.0118372440338135, 1.1268061399459839, 0.8467063903808594, 0.7562039494514465, 0.6973438262939453, 0.6611014604568481, 0.6381613612174988, 0.6514869928359985, 0.6070062518119812, 0.5706577897071838, 0.5592918992042542, 0.5369232296943665, 0.5288887619972229, 0.5270858407020569, 0.514331042766571, 0.5044275522232056, 0.4870845675468445, 0.4885883033275604, 0.47031351923942566, 0.470409631729126, 0.4611729681491852, 0.4488708972930908, 0.4391806721687317, 0.43874698877334595, 0.4482143521308899, 0.4294174909591675, 0.42724472284317017, 0.4312395453453064], "val_accuracy": [0.4323333203792572, 0.4636666774749756, 0.6583333611488342, 0.703000009059906, 0.7143333554267883, 0.734000027179718, 0.7476666569709778, 0.7616666555404663, 0.75, 0.7820000052452087, 0.7883333563804626, 0.7829999923706055, 0.7983333468437195, 0.7950000166893005, 0.8009999990463257, 0.7983333468437195, 0.8090000152587891, 0.8243333101272583, 0.8236666917800903, 0.8266666531562805, 0.8299999833106995, 0.831333339214325, 0.8456666469573975, 0.8489999771118164, 0.843999981880188, 0.8450000286102295, 0.8446666598320007, 0.8456666469573975, 0.8460000157356262]}, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 3, 3, 0, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 7, 0, 3, 9], [0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 2, 1, 0, 3, 3, 5, 3, 6, 6], [1, 0, 2, 0, 3, 1, 0, 1], [16, 16, 94], [0, 0, 0, 1, 1, 0], [0, 2, 1, 9], [0, 1], [99, 46], [0, 0, 1, 1], [0, 3], [2, 1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 6, 3, 3, 18, 10, 8, 3, 6, 4, 2, 2, 4, 2, 2, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(alpha), tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.multiply(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, alpha), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), alpha), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, alpha))", "other_info": {"loss": [2.3043761253356934, 2.634615182876587, 165540.421875, 82842312.0, 63607608.0, 2.3025851249694824], "accuracy": [0.09272222965955734, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09972262382507324, 0.09998679161071777], "val_loss": [2.302583694458008, 561.3206176757812, 2218390.75, 483004864.0, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 2], [0, 1, 0, 0], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 1, 0, 1, 1, 1], [6, 4, 2], [0, 6, 2, 3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 0, 4, 1, 4, 8, 8], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 16, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 10, 6, 4, 2, 7, 3, 4, 1, 17, 9, 8, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(grad, beta)), sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 0], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5, 7, 3, 5, 1, 1, 9, 4, 1, 7, 5, 4, 7, 9], [0, 2, 0, 3, 2, 1, 2, 2, 0, 2, 5], [16, 12, 37, 56, 15], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 6, 3, 6, 8, 1, 4, 1, 4, 2, 5], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 30, 19, 11, 5, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(tf.math.multiply(tf.math.square(grad), beta), tf.math.subtract(alpha, tf.math.subtract(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(beta, tf.math.add(tf.math.square(beta), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha))))", "other_info": {"loss": [2.3049349784851074, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 1, 3, 1, 6, 0, 4, 6, 6, 4, 7, 5, 6], [0, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3], [83, 64, 27], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [2, 2, 3, 0, 3, 4, 5, 1, 5, 7, 1, 4, 9], [0, 2, 4, 3, 1, 5, 0, 2, 5], [0, 61, 24], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 5, 6, 2, 2, 8], [0, 2, 5, 1], [32], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 0, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [0]], "fitness": -0.09028571099042892, "mapping_values": [1, 24, 13, 11, 3, 22, 13, 9, 3, 10, 6, 4, 1, 1, 0, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.math.divide_no_nan(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.pow(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.divide_no_nan(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad)), tf.math.divide_no_nan(tf.math.pow(alpha, tf.math.add(tf.math.square(alpha), grad)), tf.math.divide_no_nan(grad, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.pow(tf.math.square(tf.math.subtract(grad, alpha)), tf.math.square(tf.math.add(tf.math.subtract(grad, tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), beta))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.math.add(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.309539794921875, 2.310992956161499, 2.3098244667053223, 2.310546636581421, 2.309966802597046, 2.3104631900787354], "accuracy": [0.09126931428909302, 0.09113723784685135, 0.09272222965955734, 0.08796724677085876, 0.09008057415485382, 0.08770307898521423], "val_loss": [2.308336019515991, 2.308336019515991, 2.308336019515991, 2.308336019515991, 2.308336019515991, 2.308336019515991], "val_accuracy": [0.08766666799783707, 0.08766666799783707, 0.08766666799783707, 0.08766666799783707, 0.08766666799783707, 0.08766666799783707]}}]