[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8785714507102966, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.22385311126709, 1.8689895868301392, 1.3921784162521362, 1.09282648563385, 0.943203330039978, 0.8380605578422546, 0.7783129811286926, 0.7317649722099304, 0.697516679763794, 0.6667935848236084, 0.6370715498924255, 0.6119930148124695, 0.597540020942688, 0.585638165473938, 0.5669749975204468, 0.5510876774787903, 0.5321505069732666, 0.528533399105072, 0.5092916488647461, 0.5203198194503784, 0.49983617663383484, 0.48847419023513794, 0.48181167244911194, 0.46785861253738403, 0.4670261740684509, 0.4507957398891449, 0.44654130935668945, 0.4353342354297638, 0.42720916867256165, 0.4178202748298645, 0.4137081205844879, 0.4128495752811432, 0.417216032743454, 0.39360734820365906, 0.39136654138565063, 0.3920917809009552, 0.3843253552913666, 0.3787577748298645, 0.36371058225631714, 0.35812604427337646, 0.36053144931793213, 0.3547873795032501, 0.3530988097190857, 0.3457549214363098, 0.3456178307533264, 0.33321312069892883, 0.33248311281204224, 0.3293883204460144, 0.3254311978816986, 0.31505241990089417, 0.3130646049976349, 0.30993208289146423, 0.3013964593410492, 0.2993669807910919, 0.2997386157512665, 0.29056525230407715, 0.2877940833568573, 0.29028749465942383, 0.28097987174987793, 0.28064799308776855, 0.2704039216041565, 0.268941193819046, 0.26596739888191223, 0.26158997416496277, 0.2584567368030548, 0.25905969738960266, 0.25384601950645447, 0.24113249778747559, 0.24394433200359344, 0.2416629046201706, 0.24062906205654144, 0.2293824404478073, 0.22863131761550903, 0.2209962159395218, 0.22504355013370514], "accuracy": [0.2763175368309021, 0.4807819426059723, 0.5597675442695618, 0.6222427487373352, 0.6719059348106384, 0.698190450668335, 0.7252674698829651, 0.7397965788841248, 0.748778223991394, 0.7617223858833313, 0.7697794437408447, 0.7804781198501587, 0.7837802171707153, 0.7882710099220276, 0.7976489067077637, 0.806630551815033, 0.8121780753135681, 0.8109893202781677, 0.8157442808151245, 0.8182538747787476, 0.822348415851593, 0.8245938420295715, 0.8285563588142395, 0.835160493850708, 0.8368775844573975, 0.8433496356010437, 0.844010055065155, 0.844010055065155, 0.8514066934585571, 0.8512746095657349, 0.8576145768165588, 0.8514066934585571, 0.8527275323867798, 0.8625016212463379, 0.863029956817627, 0.8595958352088928, 0.8627657890319824, 0.863029956817627, 0.8713511824607849, 0.8728041052818298, 0.8733324408531189, 0.8746532797813416, 0.8721436858177185, 0.8745211958885193, 0.8758420348167419, 0.8816536664962769, 0.8799365758895874, 0.8835028409957886, 0.8845595121383667, 0.8908994793891907, 0.8902390599250793, 0.8873332738876343, 0.8928807377815247, 0.8928807377815247, 0.8918240666389465, 0.8949940800666809, 0.8960506916046143, 0.8957865834236145, 0.8982961177825928, 0.9005415439605713, 0.9022586345672607, 0.902390718460083, 0.9038436412811279, 0.9063531756401062, 0.901862382888794, 0.9063531756401062, 0.9083344340324402, 0.9126931428909302, 0.9105798602104187, 0.9157310724258423, 0.910711944103241, 0.9126931428909302, 0.9167877435684204, 0.9220710396766663, 0.9181085824966431], "val_loss": [2.0362961292266846, 1.5109721422195435, 1.0366545915603638, 0.8216940760612488, 0.7334108352661133, 0.6752658486366272, 0.6272311210632324, 0.5901768207550049, 0.565755307674408, 0.5454519987106323, 0.5303096771240234, 0.5078737735748291, 0.49619564414024353, 0.4870852828025818, 0.477031409740448, 0.46416130661964417, 0.45332321524620056, 0.45065897703170776, 0.4499213993549347, 0.43400630354881287, 0.42278340458869934, 0.42549237608909607, 0.4191504716873169, 0.406779408454895, 0.4038170576095581, 0.39954128861427307, 0.39287909865379333, 0.386243611574173, 0.3859941065311432, 0.38023167848587036, 0.3832986652851105, 0.38317835330963135, 0.37083789706230164, 0.37188199162483215, 0.3707095682621002, 0.36467626690864563, 0.35694506764411926, 0.3572940230369568, 0.35267552733421326, 0.35352417826652527, 0.34998568892478943, 0.3500393331050873, 0.3457832932472229, 0.3445078134536743, 0.34039610624313354, 0.3432251811027527, 0.3378094434738159, 0.3373914062976837, 0.33233195543289185, 0.33655405044555664, 0.3316599130630493, 0.3272864520549774, 0.3274107575416565, 0.3278765380382538, 0.3250201344490051, 0.32743147015571594, 0.3283940255641937, 0.3233192265033722, 0.32683950662612915, 0.32519635558128357, 0.3187567889690399, 0.3262876868247986, 0.317158967256546, 0.3196517527103424, 0.31830424070358276, 0.31782957911491394, 0.3168559968471527, 0.31806766986846924, 0.3201530873775482, 0.3147178888320923, 0.31271007657051086, 0.3128334879875183, 0.3134373426437378, 0.3189963698387146, 0.3166082501411438], "val_accuracy": [0.49900001287460327, 0.6556666493415833, 0.684333324432373, 0.7089999914169312, 0.7406666874885559, 0.7543333172798157, 0.765333354473114, 0.7803333401679993, 0.7916666865348816, 0.8043333292007446, 0.7990000247955322, 0.8119999766349792, 0.8173333406448364, 0.8199999928474426, 0.8276666402816772, 0.8273333311080933, 0.8343333601951599, 0.8306666612625122, 0.8356666564941406, 0.8433333039283752, 0.8483333587646484, 0.8420000076293945, 0.847000002861023, 0.8500000238418579, 0.8489999771118164, 0.8513333201408386, 0.8550000190734863, 0.8566666841506958, 0.8579999804496765, 0.859666645526886, 0.8613333106040955, 0.8569999933242798, 0.8640000224113464, 0.8619999885559082, 0.8600000143051147, 0.862666666507721, 0.8683333396911621, 0.8676666617393494, 0.8709999918937683, 0.8683333396911621, 0.8703333139419556, 0.8696666955947876, 0.8709999918937683, 0.8740000128746033, 0.875, 0.8730000257492065, 0.8769999742507935, 0.8726666569709778, 0.8790000081062317, 0.878000020980835, 0.8776666522026062, 0.8799999952316284, 0.8790000081062317, 0.8813333511352539, 0.8826666474342346, 0.8776666522026062, 0.8809999823570251, 0.8830000162124634, 0.8796666860580444, 0.8823333382606506, 0.8836666941642761, 0.8813333511352539, 0.8849999904632568, 0.8863333463668823, 0.8889999985694885, 0.8830000162124634, 0.8853333592414856, 0.8856666684150696, 0.8883333206176758, 0.8899999856948853, 0.8856666684150696, 0.8896666765213013, 0.8880000114440918, 0.8866666555404663, 0.8853333592414856]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8688571453094482, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2231621742248535, 1.8666037321090698, 1.3996139764785767, 1.092958927154541, 0.9308695197105408, 0.835270881652832, 0.7827228903770447, 0.7306715250015259, 0.707614541053772, 0.6608535647392273, 0.6371518969535828, 0.6145458817481995, 0.6022321581840515, 0.5792436599731445, 0.5714845657348633, 0.5482786893844604, 0.5393227934837341, 0.5236523151397705, 0.5168775916099548, 0.499545693397522, 0.49515286087989807, 0.47647446393966675, 0.4712536334991455, 0.46067574620246887, 0.45096278190612793, 0.446920782327652, 0.43967199325561523, 0.43088170886039734, 0.4290650486946106, 0.4185679852962494, 0.4050035774707794, 0.40803173184394836, 0.3990965485572815, 0.3910108506679535, 0.390702486038208], "accuracy": [0.2727513015270233, 0.4951789677143097, 0.5588429570198059, 0.6222427487373352, 0.669792652130127, 0.6991150379180908, 0.7168141603469849, 0.7343811988830566, 0.7397965788841248, 0.7530049085617065, 0.7656848430633545, 0.7784969210624695, 0.7835160493850708, 0.7910447716712952, 0.7910447716712952, 0.8004226684570312, 0.8053097128868103, 0.8112534880638123, 0.8104609847068787, 0.8189142942428589, 0.8214238286018372, 0.828820526599884, 0.8298771381378174, 0.8356888294219971, 0.8417646288871765, 0.8438779711723328, 0.8470479249954224, 0.8462554216384888, 0.847840428352356, 0.8454629778862, 0.8603883385658264, 0.8552370667457581, 0.8557654023170471, 0.8578787446022034, 0.8548408150672913], "val_loss": [2.0367157459259033, 1.5045356750488281, 1.0260653495788574, 0.8230341672897339, 0.7308619022369385, 0.6767268776893616, 0.6365953683853149, 0.6068534851074219, 0.5795583724975586, 0.5503348708152771, 0.5310965776443481, 0.5144782662391663, 0.49921923875808716, 0.4866180717945099, 0.47194185853004456, 0.45894595980644226, 0.4519910216331482, 0.44923341274261475, 0.4338283836841583, 0.42515552043914795, 0.4184286594390869, 0.41623544692993164, 0.4029252231121063, 0.40454545617103577, 0.3928699493408203, 0.3897666335105896, 0.3886527419090271, 0.3831422030925751, 0.3735797107219696, 0.36972901225090027, 0.37013304233551025, 0.36653435230255127, 0.3638153076171875, 0.3621859848499298, 0.36654284596443176], "val_accuracy": [0.5296666622161865, 0.656333327293396, 0.6986666917800903, 0.7113333344459534, 0.7409999966621399, 0.7566666603088379, 0.7713333368301392, 0.7726666927337646, 0.7876666784286499, 0.800000011920929, 0.8076666593551636, 0.812333345413208, 0.8206666707992554, 0.8223333358764648, 0.8330000042915344, 0.8356666564941406, 0.8416666388511658, 0.8349999785423279, 0.8443333506584167, 0.8493333458900452, 0.8516666889190674, 0.8523333072662354, 0.8533333539962769, 0.8516666889190674, 0.8619999885559082, 0.8633333444595337, 0.859000027179718, 0.8600000143051147, 0.8679999709129333, 0.8723333477973938, 0.871666669845581, 0.8703333139419556, 0.8709999918937683, 0.8666666746139526, 0.8706666827201843]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 7], [0, 4, 5], [0], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8460000157356262, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.291700601577759, 2.1860005855560303, 1.756100058555603, 1.3419630527496338, 1.04938542842865, 0.9167930483818054, 0.8418219089508057, 0.7983787059783936, 0.7574501037597656, 0.7222122550010681, 0.6886274814605713, 0.6810006499290466, 0.6398453116416931, 0.6112545728683472, 0.6047664880752563, 0.6018366813659668, 0.5752547979354858, 0.5632543563842773, 0.5558356642723083, 0.5400515198707581, 0.5347802639007568, 0.5243308544158936, 0.5041234493255615, 0.5083975195884705, 0.48038026690483093, 0.47839057445526123, 0.47336897253990173, 0.4693481922149658, 0.45469024777412415, 0.449109822511673, 0.4437554180622101, 0.4287342131137848, 0.4149354100227356, 0.4214950501918793, 0.41094475984573364, 0.4021969735622406, 0.4050735533237457, 0.38046756386756897], "accuracy": [0.13749834895133972, 0.32320696115493774, 0.43547746539115906, 0.5460308790206909, 0.6444327235221863, 0.6608110070228577, 0.6991150379180908, 0.707040011882782, 0.7079645991325378, 0.726192057132721, 0.7312111854553223, 0.7382115721702576, 0.7625148296356201, 0.7638356685638428, 0.7643640041351318, 0.7741381525993347, 0.7771760821342468, 0.7898560166358948, 0.7952714562416077, 0.7936864495277405, 0.7951393723487854, 0.8021397590637207, 0.8053097128868103, 0.8038568496704102, 0.8183859586715698, 0.8138951063156128, 0.8222163319587708, 0.8208954930305481, 0.8265751004219055, 0.8362171649932861, 0.8341038227081299, 0.835160493850708, 0.8407079577445984, 0.839519202709198, 0.8465195894241333, 0.8454629778862, 0.8430854678153992, 0.8498216867446899], "val_loss": [2.2465872764587402, 2.013596773147583, 1.1213037967681885, 0.8642075061798096, 0.7669095993041992, 0.702382504940033, 0.6708235144615173, 0.632146954536438, 0.64604651927948, 0.6129963994026184, 0.5968396067619324, 0.5830002427101135, 0.5624070763587952, 0.5533212423324585, 0.546018123626709, 0.5273221731185913, 0.5217408537864685, 0.5086832642555237, 0.5079561471939087, 0.5105268955230713, 0.49044743180274963, 0.4858616888523102, 0.4877890944480896, 0.4806770086288452, 0.4709126055240631, 0.458617627620697, 0.4613098204135895, 0.47469189763069153, 0.45138582587242126, 0.4476747214794159, 0.446023166179657, 0.44731199741363525, 0.4532533884048462, 0.44290515780448914, 0.43935519456863403, 0.4376084804534912, 0.4325268864631653, 0.4253605902194977], "val_accuracy": [0.41100001335144043, 0.4646666646003723, 0.6536666750907898, 0.7013333439826965, 0.731333315372467, 0.7323333621025085, 0.7423333525657654, 0.7556666731834412, 0.753333330154419, 0.7643333077430725, 0.7736666798591614, 0.7723333239555359, 0.7856666445732117, 0.7973333597183228, 0.7926666736602783, 0.8063333630561829, 0.8090000152587891, 0.8159999847412109, 0.8173333406448364, 0.8236666917800903, 0.8180000185966492, 0.8213333487510681, 0.8240000009536743, 0.8270000219345093, 0.8299999833106995, 0.8353333473205566, 0.8426666855812073, 0.8383333086967468, 0.8456666469573975, 0.847000002861023, 0.8513333201408386, 0.8456666469573975, 0.8560000061988831, 0.8473333120346069, 0.8500000238418579, 0.8446666598320007, 0.8546666502952576, 0.8546666502952576]}, "mapping_values": [1, 10, 5, 5, 3, 6, 3, 3, 1, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 1, 1], [0, 2, 2], [0, 7, 2], [0], [1], [0], [2], [0]], "fitness": -0.8342857360839844, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), beta)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5551146268844604, 0.8454616665840149, 0.6980616450309753, 0.6672928333282471, 0.5953044295310974, 0.5773448944091797, 0.5542921423912048, 0.49033892154693604, 0.501259982585907, 0.46329429745674133, 0.43824219703674316, 0.43672797083854675, 0.4339989721775055, 0.43785151839256287, 0.465850830078125, 0.45639896392822266, 0.43795233964920044], "accuracy": [0.4694227874279022, 0.6980583667755127, 0.7401928305625916, 0.7534011602401733, 0.7737419009208679, 0.7952714562416077, 0.8006868362426758, 0.8121780753135681, 0.8173292875289917, 0.8235371708869934, 0.8409721255302429, 0.8367455005645752, 0.8413683772087097, 0.8330471515655518, 0.8425571322441101, 0.8500858545303345, 0.8465195894241333], "val_loss": [0.8420742154121399, 0.6305451393127441, 0.5883179903030396, 0.5433956980705261, 0.526306688785553, 0.506695568561554, 0.507104754447937, 0.4613998532295227, 0.47158515453338623, 0.480206698179245, 0.48232176899909973, 0.5181175470352173, 0.5061694979667664, 0.5838062167167664, 0.52469801902771, 0.6139777898788452, 0.5527070164680481], "val_accuracy": [0.6909999847412109, 0.7590000033378601, 0.7793333530426025, 0.7953333258628845, 0.8056666851043701, 0.8186666369438171, 0.8149999976158142, 0.8299999833106995, 0.8259999752044678, 0.8326666951179504, 0.8306666612625122, 0.8473333120346069, 0.8410000205039978, 0.8393333554267883, 0.8379999995231628, 0.8370000123977661, 0.8463333249092102]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 6, 3, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 2, 3, 0, 2, 7, 9], [2, 1, 0, 2], [3, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 2, 0, 3, 5], [0, 3, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [4, 1, 3, 6, 8, 1, 4, 1, 4, 5, 8], [0, 4, 0, 1, 0, 0, 3, 1, 2, 0], [71, 8, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 7, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 20, 11, 9, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), tf.math.add(tf.math.add(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.subtract(tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), alpha))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), tf.math.square(tf.math.sqrt(alpha))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 6, 8, 3], [0, 1, 2, 2, 0, 3], [9, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 3, 5], [3, 2, 0, 3], [16, 71], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 5, 4, 2, 8, 7, 7, 1, 0, 2, 3, 0, 2, 4, 1, 0, 8, 6, 4, 6, 1, 0, 5, 9, 7, 7, 3, 1, 3, 9, 9, 2, 3, 7, 3, 6, 8, 3, 0, 3, 2, 6, 0, 6, 8, 7, 2, 9, 4, 7, 2, 6, 9, 9, 2, 4, 3, 2, 1, 2, 1, 3, 3, 4, 9, 6, 2, 8, 4, 3, 5, 1, 9, 4, 3, 5, 6], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 0, 1, 2, 3, 3, 2, 4, 3, 0, 0, 4, 2, 6, 3, 3, 7, 4, 5, 1, 1, 2, 5, 7, 3, 2, 5, 3, 0, 0, 1, 0, 0, 4, 6, 3, 6, 5, 2, 1, 1, 7, 0], [16, 99, 27, 99, 61, 1, 77, 59, 89, 14, 82, 66, 33, 17, 34, 86, 52, 26, 0, 20, 28, 45]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 8, 6, 2, 1, 0, 1, 0, 2, 1, 1, 1, 135, 83, 52, 22], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, grad))), tf.math.sqrt(tf.math.multiply(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(tf.math.sqrt(sigma), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma), alpha))), tf.math.negative(beta)))), tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.pow(tf.math.subtract(tf.math.negative(tf.math.sqrt(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.pow(alpha, tf.math.divide_no_nan(tf.math.subtract(beta, sigma), tf.math.negative(tf.math.square(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))))), sigma)), beta), tf.math.add(tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.multiply(grad, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), sigma), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.multiply(tf.math.negative(tf.math.multiply(beta, grad)), tf.math.add(tf.math.divide_no_nan(sigma, sigma), grad)))), tf.math.negative(grad)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(grad, tf.math.add(tf.math.divide_no_nan(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), alpha)), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))), beta)), grad)), tf.math.add(grad, sigma))))), tf.math.pow(beta, grad)))), tf.math.multiply(tf.math.add(tf.math.subtract(sigma, tf.math.add(tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.multiply(tf.math.pow(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.square(grad)))))), sigma)), grad)), grad), tf.math.subtract(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), beta))), tf.math.pow(tf.math.multiply(tf.math.square(alpha), tf.math.divide_no_nan(alpha, grad)), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 0], [38, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 0, 1, 4, 1, 4, 2, 8], [0, 0, 0, 2, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 1, 0, 1, 1, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), beta))), tf.math.subtract(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), sigma))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [95, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [6, 2, 3, 2, 3, 5], [0, 2, 0, 3, 2, 0], [16, 16, 53], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 12, 6, 6, 3, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.multiply(beta, tf.math.square(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}]