[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8785714507102966, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.22385311126709, 1.8689895868301392, 1.3921784162521362, 1.09282648563385, 0.943203330039978, 0.8380605578422546, 0.7783129811286926, 0.7317649722099304, 0.697516679763794, 0.6667935848236084, 0.6370715498924255, 0.6119930148124695, 0.597540020942688, 0.585638165473938, 0.5669749975204468, 0.5510876774787903, 0.5321505069732666, 0.528533399105072, 0.5092916488647461, 0.5203198194503784, 0.49983617663383484, 0.48847419023513794, 0.48181167244911194, 0.46785861253738403, 0.4670261740684509, 0.4507957398891449, 0.44654130935668945, 0.4353342354297638, 0.42720916867256165, 0.4178202748298645, 0.4137081205844879, 0.4128495752811432, 0.417216032743454, 0.39360734820365906, 0.39136654138565063, 0.3920917809009552, 0.3843253552913666, 0.3787577748298645, 0.36371058225631714, 0.35812604427337646, 0.36053144931793213, 0.3547873795032501, 0.3530988097190857, 0.3457549214363098, 0.3456178307533264, 0.33321312069892883, 0.33248311281204224, 0.3293883204460144, 0.3254311978816986, 0.31505241990089417, 0.3130646049976349, 0.30993208289146423, 0.3013964593410492, 0.2993669807910919, 0.2997386157512665, 0.29056525230407715, 0.2877940833568573, 0.29028749465942383, 0.28097987174987793, 0.28064799308776855, 0.2704039216041565, 0.268941193819046, 0.26596739888191223, 0.26158997416496277, 0.2584567368030548, 0.25905969738960266, 0.25384601950645447, 0.24113249778747559, 0.24394433200359344, 0.2416629046201706, 0.24062906205654144, 0.2293824404478073, 0.22863131761550903, 0.2209962159395218, 0.22504355013370514], "accuracy": [0.2763175368309021, 0.4807819426059723, 0.5597675442695618, 0.6222427487373352, 0.6719059348106384, 0.698190450668335, 0.7252674698829651, 0.7397965788841248, 0.748778223991394, 0.7617223858833313, 0.7697794437408447, 0.7804781198501587, 0.7837802171707153, 0.7882710099220276, 0.7976489067077637, 0.806630551815033, 0.8121780753135681, 0.8109893202781677, 0.8157442808151245, 0.8182538747787476, 0.822348415851593, 0.8245938420295715, 0.8285563588142395, 0.835160493850708, 0.8368775844573975, 0.8433496356010437, 0.844010055065155, 0.844010055065155, 0.8514066934585571, 0.8512746095657349, 0.8576145768165588, 0.8514066934585571, 0.8527275323867798, 0.8625016212463379, 0.863029956817627, 0.8595958352088928, 0.8627657890319824, 0.863029956817627, 0.8713511824607849, 0.8728041052818298, 0.8733324408531189, 0.8746532797813416, 0.8721436858177185, 0.8745211958885193, 0.8758420348167419, 0.8816536664962769, 0.8799365758895874, 0.8835028409957886, 0.8845595121383667, 0.8908994793891907, 0.8902390599250793, 0.8873332738876343, 0.8928807377815247, 0.8928807377815247, 0.8918240666389465, 0.8949940800666809, 0.8960506916046143, 0.8957865834236145, 0.8982961177825928, 0.9005415439605713, 0.9022586345672607, 0.902390718460083, 0.9038436412811279, 0.9063531756401062, 0.901862382888794, 0.9063531756401062, 0.9083344340324402, 0.9126931428909302, 0.9105798602104187, 0.9157310724258423, 0.910711944103241, 0.9126931428909302, 0.9167877435684204, 0.9220710396766663, 0.9181085824966431], "val_loss": [2.0362961292266846, 1.5109721422195435, 1.0366545915603638, 0.8216940760612488, 0.7334108352661133, 0.6752658486366272, 0.6272311210632324, 0.5901768207550049, 0.565755307674408, 0.5454519987106323, 0.5303096771240234, 0.5078737735748291, 0.49619564414024353, 0.4870852828025818, 0.477031409740448, 0.46416130661964417, 0.45332321524620056, 0.45065897703170776, 0.4499213993549347, 0.43400630354881287, 0.42278340458869934, 0.42549237608909607, 0.4191504716873169, 0.406779408454895, 0.4038170576095581, 0.39954128861427307, 0.39287909865379333, 0.386243611574173, 0.3859941065311432, 0.38023167848587036, 0.3832986652851105, 0.38317835330963135, 0.37083789706230164, 0.37188199162483215, 0.3707095682621002, 0.36467626690864563, 0.35694506764411926, 0.3572940230369568, 0.35267552733421326, 0.35352417826652527, 0.34998568892478943, 0.3500393331050873, 0.3457832932472229, 0.3445078134536743, 0.34039610624313354, 0.3432251811027527, 0.3378094434738159, 0.3373914062976837, 0.33233195543289185, 0.33655405044555664, 0.3316599130630493, 0.3272864520549774, 0.3274107575416565, 0.3278765380382538, 0.3250201344490051, 0.32743147015571594, 0.3283940255641937, 0.3233192265033722, 0.32683950662612915, 0.32519635558128357, 0.3187567889690399, 0.3262876868247986, 0.317158967256546, 0.3196517527103424, 0.31830424070358276, 0.31782957911491394, 0.3168559968471527, 0.31806766986846924, 0.3201530873775482, 0.3147178888320923, 0.31271007657051086, 0.3128334879875183, 0.3134373426437378, 0.3189963698387146, 0.3166082501411438], "val_accuracy": [0.49900001287460327, 0.6556666493415833, 0.684333324432373, 0.7089999914169312, 0.7406666874885559, 0.7543333172798157, 0.765333354473114, 0.7803333401679993, 0.7916666865348816, 0.8043333292007446, 0.7990000247955322, 0.8119999766349792, 0.8173333406448364, 0.8199999928474426, 0.8276666402816772, 0.8273333311080933, 0.8343333601951599, 0.8306666612625122, 0.8356666564941406, 0.8433333039283752, 0.8483333587646484, 0.8420000076293945, 0.847000002861023, 0.8500000238418579, 0.8489999771118164, 0.8513333201408386, 0.8550000190734863, 0.8566666841506958, 0.8579999804496765, 0.859666645526886, 0.8613333106040955, 0.8569999933242798, 0.8640000224113464, 0.8619999885559082, 0.8600000143051147, 0.862666666507721, 0.8683333396911621, 0.8676666617393494, 0.8709999918937683, 0.8683333396911621, 0.8703333139419556, 0.8696666955947876, 0.8709999918937683, 0.8740000128746033, 0.875, 0.8730000257492065, 0.8769999742507935, 0.8726666569709778, 0.8790000081062317, 0.878000020980835, 0.8776666522026062, 0.8799999952316284, 0.8790000081062317, 0.8813333511352539, 0.8826666474342346, 0.8776666522026062, 0.8809999823570251, 0.8830000162124634, 0.8796666860580444, 0.8823333382606506, 0.8836666941642761, 0.8813333511352539, 0.8849999904632568, 0.8863333463668823, 0.8889999985694885, 0.8830000162124634, 0.8853333592414856, 0.8856666684150696, 0.8883333206176758, 0.8899999856948853, 0.8856666684150696, 0.8896666765213013, 0.8880000114440918, 0.8866666555404663, 0.8853333592414856]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8714285492897034, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2217047214508057, 1.859409213066101, 1.3832324743270874, 1.0845112800598145, 0.9219669103622437, 0.8312433958053589, 0.7663909792900085, 0.7215419411659241, 0.6850261688232422, 0.6548992991447449, 0.6346248984336853, 0.6095706820487976, 0.5835818648338318, 0.5775547027587891, 0.560603678226471, 0.5465009212493896, 0.5290031433105469, 0.5248739123344421, 0.503557026386261, 0.4884483218193054, 0.4791652262210846, 0.48179662227630615, 0.46827661991119385, 0.4628415107727051, 0.44792690873146057, 0.43836045265197754, 0.435805082321167, 0.4280048906803131, 0.42425277829170227, 0.4122617840766907, 0.40317854285240173, 0.39665621519088745, 0.3898201584815979, 0.39615190029144287, 0.38411495089530945, 0.3687278926372528, 0.37646475434303284, 0.3685242235660553, 0.3532258868217468, 0.35419270396232605, 0.35114341974258423, 0.344513475894928, 0.3376394212245941, 0.3350025415420532, 0.33554163575172424, 0.32757148146629333, 0.3224794864654541, 0.3267580568790436, 0.31621888279914856, 0.31504324078559875, 0.31015855073928833, 0.30113837122917175, 0.2939740717411041, 0.29642343521118164, 0.2873006761074066, 0.2829182744026184, 0.278371125459671, 0.27661800384521484, 0.26763829588890076, 0.2650739848613739, 0.26509034633636475, 0.26112163066864014], "accuracy": [0.2697133719921112, 0.4908202290534973, 0.5655791759490967, 0.6248844265937805, 0.6742834448814392, 0.6991150379180908, 0.7239466309547424, 0.7415136694908142, 0.7526086568832397, 0.7684586048126221, 0.7697794437408447, 0.7847048044204712, 0.7890635132789612, 0.7897239327430725, 0.7980451583862305, 0.8101968169212341, 0.8125742673873901, 0.8152159452438354, 0.817461371421814, 0.8272355198860168, 0.8273676037788391, 0.8261788487434387, 0.8354246616363525, 0.8381983637809753, 0.8421608805656433, 0.8462554216384888, 0.8465195894241333, 0.8449346423149109, 0.8474441766738892, 0.8548408150672913, 0.8607845902442932, 0.8545766472816467, 0.8609166741371155, 0.8597279191017151, 0.8626337051391602, 0.8667283058166504, 0.8693699836730957, 0.8716153502464294, 0.8757099509239197, 0.8741249442100525, 0.8721436858177185, 0.8768987059593201, 0.8774270415306091, 0.8833707571029663, 0.8805969953536987, 0.8815215826034546, 0.8864086866378784, 0.8809932470321655, 0.8878615498542786, 0.8837670087814331, 0.889578640460968, 0.891559898853302, 0.8914278149604797, 0.8927486538887024, 0.8952582478523254, 0.9010698795318604, 0.8976356983184814, 0.8990886211395264, 0.9055606722831726, 0.901862382888794, 0.9030511379241943, 0.9060890078544617], "val_loss": [2.039041757583618, 1.5100836753845215, 1.0382660627365112, 0.8223959803581238, 0.7272889018058777, 0.6761298179626465, 0.6247863173484802, 0.5874438285827637, 0.566074013710022, 0.5416721105575562, 0.5241612792015076, 0.507248044013977, 0.49049392342567444, 0.4819345772266388, 0.47012215852737427, 0.45977628231048584, 0.45221102237701416, 0.4434499144554138, 0.430253267288208, 0.4238659739494324, 0.4166507422924042, 0.41061821579933167, 0.40629321336746216, 0.39997175335884094, 0.39978548884391785, 0.38964706659317017, 0.3858160674571991, 0.38173383474349976, 0.3777645528316498, 0.3705269396305084, 0.37372294068336487, 0.36924153566360474, 0.36454373598098755, 0.36104631423950195, 0.362844318151474, 0.35921117663383484, 0.35776588320732117, 0.3595826029777527, 0.3546144664287567, 0.3527595102787018, 0.34879395365715027, 0.3476628065109253, 0.3448179066181183, 0.3435512185096741, 0.3408504128456116, 0.34165918827056885, 0.3472740948200226, 0.3394796550273895, 0.3324022591114044, 0.3374919891357422, 0.3372250497341156, 0.32732316851615906, 0.3271077573299408, 0.3294248580932617, 0.3320665955543518, 0.32813239097595215, 0.3268352746963501, 0.32581961154937744, 0.3273760676383972, 0.3278930187225342, 0.3258543014526367, 0.33008822798728943], "val_accuracy": [0.515999972820282, 0.6626666784286499, 0.6869999766349792, 0.7193333506584167, 0.7476666569709778, 0.7609999775886536, 0.7703333497047424, 0.784333348274231, 0.7910000085830688, 0.8090000152587891, 0.8026666641235352, 0.809333324432373, 0.8246666789054871, 0.8226666450500488, 0.8320000171661377, 0.831333339214325, 0.8333333134651184, 0.8356666564941406, 0.8476666808128357, 0.8456666469573975, 0.8496666550636292, 0.8503333330154419, 0.8546666502952576, 0.8550000190734863, 0.8553333282470703, 0.8600000143051147, 0.859666645526886, 0.8616666793823242, 0.862666666507721, 0.8646666407585144, 0.8633333444595337, 0.8669999837875366, 0.8690000176429749, 0.8706666827201843, 0.871999979019165, 0.8686666488647461, 0.8693333268165588, 0.8673333525657654, 0.8693333268165588, 0.8743333220481873, 0.8723333477973938, 0.871666669845581, 0.874666690826416, 0.874666690826416, 0.878333330154419, 0.8766666650772095, 0.874666690826416, 0.8773333430290222, 0.8790000081062317, 0.8773333430290222, 0.8790000081062317, 0.8849999904632568, 0.8820000290870667, 0.8809999823570251, 0.8803333044052124, 0.8823333382606506, 0.8870000243186951, 0.8820000290870667, 0.8866666555404663, 0.8830000162124634, 0.8836666941642761, 0.8843333125114441]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0, 1, 1], [0, 5, 1], [0, 0], [0, 57], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8517143130302429, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.square(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.294400930404663, 2.1949503421783447, 1.789994478225708, 1.3447531461715698, 1.1004528999328613, 0.9078019261360168, 0.8487568497657776, 0.8008204698562622, 0.76859050989151, 0.7451772093772888, 0.7090320587158203, 0.6800263524055481, 0.6639269590377808, 0.6339991688728333, 0.6177525520324707, 0.6114321947097778, 0.5945096015930176, 0.5666484236717224, 0.5639232993125916, 0.5507792234420776, 0.5346182584762573, 0.5274363160133362, 0.5263023376464844, 0.5156112313270569, 0.5120007991790771, 0.4941219985485077, 0.48302850127220154, 0.4746291935443878, 0.4659299850463867, 0.45214906334877014, 0.43113452196121216, 0.43438953161239624, 0.4157867133617401, 0.4233816862106323, 0.4130825698375702, 0.4201963543891907, 0.40179163217544556, 0.4112684428691864, 0.3916335701942444, 0.3860293924808502, 0.37517309188842773, 0.39393022656440735, 0.3727695643901825, 0.3573002219200134, 0.36188483238220215, 0.36122050881385803, 0.35087448358535767], "accuracy": [0.12415797263383865, 0.32545238733291626, 0.43825122714042664, 0.5394267439842224, 0.6302998065948486, 0.6649055480957031, 0.6889446377754211, 0.6955488324165344, 0.7038700580596924, 0.7113987803459167, 0.7341170310974121, 0.7413815855979919, 0.7460044622421265, 0.7600052952766418, 0.7576277852058411, 0.767401933670044, 0.7696473598480225, 0.7828556299209595, 0.7877426743507385, 0.7938185334205627, 0.7972526550292969, 0.7955356240272522, 0.8000264167785645, 0.8001585006713867, 0.8064984679222107, 0.8115176558494568, 0.8150838613510132, 0.8133667707443237, 0.8215559124946594, 0.8264430165290833, 0.8416325449943542, 0.8345000743865967, 0.8449346423149109, 0.8391229510307312, 0.8442742228507996, 0.8438779711723328, 0.8485008478164673, 0.8429533839225769, 0.8495575189590454, 0.8527275323867798, 0.8568220734596252, 0.8518029451370239, 0.8549728989601135, 0.8617091774940491, 0.8622375130653381, 0.8580108284950256, 0.8628978729248047], "val_loss": [2.247244119644165, 2.0319631099700928, 1.153883695602417, 0.8600653409957886, 0.7367640733718872, 0.7216467261314392, 0.6505327820777893, 0.6538568139076233, 0.6231943964958191, 0.596383810043335, 0.5667741894721985, 0.5519927740097046, 0.5387588143348694, 0.520000159740448, 0.5236904621124268, 0.5115139484405518, 0.49246272444725037, 0.491210401058197, 0.4863554835319519, 0.4729245603084564, 0.46078771352767944, 0.45630374550819397, 0.4530201554298401, 0.43921321630477905, 0.44068998098373413, 0.4306428134441376, 0.4224488139152527, 0.42044922709465027, 0.4174673557281494, 0.41653427481651306, 0.40656208992004395, 0.4034194350242615, 0.3978070020675659, 0.39875492453575134, 0.4044630825519562, 0.4023480713367462, 0.4014972746372223, 0.40405339002609253, 0.4012634754180908, 0.40160465240478516, 0.41063863039016724, 0.40637674927711487, 0.4050661325454712, 0.4028143584728241, 0.4194328486919403, 0.4055213928222656, 0.40013810992240906], "val_accuracy": [0.4230000078678131, 0.4506666660308838, 0.656000018119812, 0.6959999799728394, 0.7336666584014893, 0.7369999885559082, 0.7506666779518127, 0.7563333511352539, 0.7553333044052124, 0.7756666541099548, 0.7743333578109741, 0.7853333353996277, 0.7923333048820496, 0.7929999828338623, 0.8036666512489319, 0.8043333292007446, 0.8063333630561829, 0.8106666803359985, 0.8163333535194397, 0.8119999766349792, 0.8263333439826965, 0.8346666693687439, 0.8316666483879089, 0.8420000076293945, 0.8403333425521851, 0.8429999947547913, 0.8486666679382324, 0.8486666679382324, 0.8543333411216736, 0.8556666374206543, 0.859333336353302, 0.8566666841506958, 0.8636666536331177, 0.8666666746139526, 0.8669999837875366, 0.8613333106040955, 0.859666645526886, 0.862666666507721, 0.8679999709129333, 0.8646666407585144, 0.8663333058357239, 0.871666669845581, 0.8703333139419556, 0.8703333139419556, 0.8669999837875366, 0.8676666617393494, 0.8663333058357239]}, "mapping_values": [1, 10, 5, 5, 3, 5, 3, 2, 2, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 6, 1, 8, 6, 1, 2, 4, 9, 7, 5, 5], [0, 7, 4, 5, 5, 6, 4], [0, 90], [1], [0], [2], [0]], "fitness": -0.8291428685188293, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.subtract(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad), tf.math.divide_no_nan(tf.math.subtract(tf.math.add(tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(grad), grad)), grad), tf.math.square(grad)), grad))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.418725609779358, 0.7329639196395874, 0.6446312665939331, 0.583008348941803, 0.568845272064209, 0.5451492071151733, 0.5244390368461609, 0.5200918912887573, 0.5117384791374207, 0.4920092523097992, 0.5022392868995667, 0.511711835861206, 0.5342990756034851, 0.4968498945236206, 0.5065451264381409, 0.49722692370414734, 0.4929957389831543, 0.4551311731338501], "accuracy": [0.495839387178421, 0.7396644949913025, 0.7683265209197998, 0.7807422876358032, 0.7973847389221191, 0.8057059645652771, 0.8208954930305481, 0.8142913579940796, 0.8092722296714783, 0.822348415851593, 0.8182538747787476, 0.821820080280304, 0.8224804997444153, 0.8298771381378174, 0.8212917447090149, 0.8274996876716614, 0.8322546482086182, 0.8469158411026001], "val_loss": [0.7111497521400452, 0.5855866074562073, 0.5159892439842224, 0.5176331400871277, 0.5018333196640015, 0.5153416395187378, 0.48832494020462036, 0.5005638003349304, 0.5506508350372314, 0.5113323330879211, 0.517898440361023, 0.5144680738449097, 0.4871425926685333, 0.5064455270767212, 0.48757320642471313, 0.5713168978691101, 0.5523210167884827, 0.5317588448524475], "val_accuracy": [0.7570000290870667, 0.7976666688919067, 0.812666654586792, 0.8153333067893982, 0.8233333230018616, 0.8316666483879089, 0.8330000042915344, 0.8320000171661377, 0.8299999833106995, 0.828000009059906, 0.8193333148956299, 0.8396666646003723, 0.846666693687439, 0.843666672706604, 0.8366666436195374, 0.8446666598320007, 0.8446666598320007, 0.8460000157356262]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 19, 12, 7, 2, 1, 0, 1, 0], "tree_depth": 19}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1], [1, 2, 3, 0, 2, 4, 3, 9], [0, 1, 0, 2, 3, 1], [39, 39, 4], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 3, 8, 4, 3, 5], [0, 3, 0, 3], [16, 16], [0, 1], [0], [1], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 0, 3, 1, 8, 6, 8], [0, 0, 0, 3, 0, 0, 3, 1, 3, 0], [16, 42, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 8, 6, 3, 5, 3, 2, 1, 2, 1, 1, 0, 18, 10, 8, 5], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, grad))), tf.math.multiply(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))), tf.math.sqrt(sigma)), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), sigma), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 2, 3, 0, 3, 9], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 9, 0, 3, 5], [0, 2, 0, 3], [21, 16], [0, 1], [5], [2], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1], [6, 3, 3, 2, 8, 1, 4, 1, 4, 2, 8, 7, 3, 4, 8], [0, 0, 0, 3, 0, 0, 3, 1, 0, 4, 2, 5, 1], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 6, 3, 2, 5, 4, 1, 2, 2, 1, 1, 0, 28, 15, 13, 6], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.multiply(sigma, alpha), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.pow(grad, beta)), grad), tf.math.sqrt(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3], [0, 0, 0, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2, 5], [0, 0, 0, 3, 2, 5, 0], [0, 27, 26, 0], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [6, 3, 3, 6, 4, 1, 0, 1, 4, 2, 8, 6, 3, 5, 6], [4, 4, 0, 3, 0, 0, 3, 1, 2, 4, 3, 3, 6], [50, 77, 51, 57, 79, 78]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 3, 16, 9, 7, 4, 2, 1, 1, 1, 28, 15, 13, 3], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(grad), tf.math.add(tf.math.square(beta), grad)), tf.constant(0.0, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(grad, tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), sigma), tf.math.subtract(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.math.divide_no_nan(alpha, beta)))))), tf.math.multiply(tf.math.square(grad), sigma)), tf.math.divide_no_nan(sigma, grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 0, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 96, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}]