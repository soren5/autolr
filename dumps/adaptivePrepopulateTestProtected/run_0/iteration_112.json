[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8785714507102966, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.22385311126709, 1.8689895868301392, 1.3921784162521362, 1.09282648563385, 0.943203330039978, 0.8380605578422546, 0.7783129811286926, 0.7317649722099304, 0.697516679763794, 0.6667935848236084, 0.6370715498924255, 0.6119930148124695, 0.597540020942688, 0.585638165473938, 0.5669749975204468, 0.5510876774787903, 0.5321505069732666, 0.528533399105072, 0.5092916488647461, 0.5203198194503784, 0.49983617663383484, 0.48847419023513794, 0.48181167244911194, 0.46785861253738403, 0.4670261740684509, 0.4507957398891449, 0.44654130935668945, 0.4353342354297638, 0.42720916867256165, 0.4178202748298645, 0.4137081205844879, 0.4128495752811432, 0.417216032743454, 0.39360734820365906, 0.39136654138565063, 0.3920917809009552, 0.3843253552913666, 0.3787577748298645, 0.36371058225631714, 0.35812604427337646, 0.36053144931793213, 0.3547873795032501, 0.3530988097190857, 0.3457549214363098, 0.3456178307533264, 0.33321312069892883, 0.33248311281204224, 0.3293883204460144, 0.3254311978816986, 0.31505241990089417, 0.3130646049976349, 0.30993208289146423, 0.3013964593410492, 0.2993669807910919, 0.2997386157512665, 0.29056525230407715, 0.2877940833568573, 0.29028749465942383, 0.28097987174987793, 0.28064799308776855, 0.2704039216041565, 0.268941193819046, 0.26596739888191223, 0.26158997416496277, 0.2584567368030548, 0.25905969738960266, 0.25384601950645447, 0.24113249778747559, 0.24394433200359344, 0.2416629046201706, 0.24062906205654144, 0.2293824404478073, 0.22863131761550903, 0.2209962159395218, 0.22504355013370514], "accuracy": [0.2763175368309021, 0.4807819426059723, 0.5597675442695618, 0.6222427487373352, 0.6719059348106384, 0.698190450668335, 0.7252674698829651, 0.7397965788841248, 0.748778223991394, 0.7617223858833313, 0.7697794437408447, 0.7804781198501587, 0.7837802171707153, 0.7882710099220276, 0.7976489067077637, 0.806630551815033, 0.8121780753135681, 0.8109893202781677, 0.8157442808151245, 0.8182538747787476, 0.822348415851593, 0.8245938420295715, 0.8285563588142395, 0.835160493850708, 0.8368775844573975, 0.8433496356010437, 0.844010055065155, 0.844010055065155, 0.8514066934585571, 0.8512746095657349, 0.8576145768165588, 0.8514066934585571, 0.8527275323867798, 0.8625016212463379, 0.863029956817627, 0.8595958352088928, 0.8627657890319824, 0.863029956817627, 0.8713511824607849, 0.8728041052818298, 0.8733324408531189, 0.8746532797813416, 0.8721436858177185, 0.8745211958885193, 0.8758420348167419, 0.8816536664962769, 0.8799365758895874, 0.8835028409957886, 0.8845595121383667, 0.8908994793891907, 0.8902390599250793, 0.8873332738876343, 0.8928807377815247, 0.8928807377815247, 0.8918240666389465, 0.8949940800666809, 0.8960506916046143, 0.8957865834236145, 0.8982961177825928, 0.9005415439605713, 0.9022586345672607, 0.902390718460083, 0.9038436412811279, 0.9063531756401062, 0.901862382888794, 0.9063531756401062, 0.9083344340324402, 0.9126931428909302, 0.9105798602104187, 0.9157310724258423, 0.910711944103241, 0.9126931428909302, 0.9167877435684204, 0.9220710396766663, 0.9181085824966431], "val_loss": [2.0362961292266846, 1.5109721422195435, 1.0366545915603638, 0.8216940760612488, 0.7334108352661133, 0.6752658486366272, 0.6272311210632324, 0.5901768207550049, 0.565755307674408, 0.5454519987106323, 0.5303096771240234, 0.5078737735748291, 0.49619564414024353, 0.4870852828025818, 0.477031409740448, 0.46416130661964417, 0.45332321524620056, 0.45065897703170776, 0.4499213993549347, 0.43400630354881287, 0.42278340458869934, 0.42549237608909607, 0.4191504716873169, 0.406779408454895, 0.4038170576095581, 0.39954128861427307, 0.39287909865379333, 0.386243611574173, 0.3859941065311432, 0.38023167848587036, 0.3832986652851105, 0.38317835330963135, 0.37083789706230164, 0.37188199162483215, 0.3707095682621002, 0.36467626690864563, 0.35694506764411926, 0.3572940230369568, 0.35267552733421326, 0.35352417826652527, 0.34998568892478943, 0.3500393331050873, 0.3457832932472229, 0.3445078134536743, 0.34039610624313354, 0.3432251811027527, 0.3378094434738159, 0.3373914062976837, 0.33233195543289185, 0.33655405044555664, 0.3316599130630493, 0.3272864520549774, 0.3274107575416565, 0.3278765380382538, 0.3250201344490051, 0.32743147015571594, 0.3283940255641937, 0.3233192265033722, 0.32683950662612915, 0.32519635558128357, 0.3187567889690399, 0.3262876868247986, 0.317158967256546, 0.3196517527103424, 0.31830424070358276, 0.31782957911491394, 0.3168559968471527, 0.31806766986846924, 0.3201530873775482, 0.3147178888320923, 0.31271007657051086, 0.3128334879875183, 0.3134373426437378, 0.3189963698387146, 0.3166082501411438], "val_accuracy": [0.49900001287460327, 0.6556666493415833, 0.684333324432373, 0.7089999914169312, 0.7406666874885559, 0.7543333172798157, 0.765333354473114, 0.7803333401679993, 0.7916666865348816, 0.8043333292007446, 0.7990000247955322, 0.8119999766349792, 0.8173333406448364, 0.8199999928474426, 0.8276666402816772, 0.8273333311080933, 0.8343333601951599, 0.8306666612625122, 0.8356666564941406, 0.8433333039283752, 0.8483333587646484, 0.8420000076293945, 0.847000002861023, 0.8500000238418579, 0.8489999771118164, 0.8513333201408386, 0.8550000190734863, 0.8566666841506958, 0.8579999804496765, 0.859666645526886, 0.8613333106040955, 0.8569999933242798, 0.8640000224113464, 0.8619999885559082, 0.8600000143051147, 0.862666666507721, 0.8683333396911621, 0.8676666617393494, 0.8709999918937683, 0.8683333396911621, 0.8703333139419556, 0.8696666955947876, 0.8709999918937683, 0.8740000128746033, 0.875, 0.8730000257492065, 0.8769999742507935, 0.8726666569709778, 0.8790000081062317, 0.878000020980835, 0.8776666522026062, 0.8799999952316284, 0.8790000081062317, 0.8813333511352539, 0.8826666474342346, 0.8776666522026062, 0.8809999823570251, 0.8830000162124634, 0.8796666860580444, 0.8823333382606506, 0.8836666941642761, 0.8813333511352539, 0.8849999904632568, 0.8863333463668823, 0.8889999985694885, 0.8830000162124634, 0.8853333592414856, 0.8856666684150696, 0.8883333206176758, 0.8899999856948853, 0.8856666684150696, 0.8896666765213013, 0.8880000114440918, 0.8866666555404663, 0.8853333592414856]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8597142696380615, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2235331535339355, 1.8649585247039795, 1.3884395360946655, 1.086710810661316, 0.9389857649803162, 0.8395881652832031, 0.7672269940376282, 0.7301424741744995, 0.6947439908981323, 0.6621719598770142, 0.6325259804725647, 0.6170585751533508, 0.5982381701469421, 0.5754513144493103, 0.5608895421028137, 0.5521935820579529, 0.53069669008255, 0.5195288062095642, 0.4979078769683838, 0.4978846311569214, 0.48321831226348877, 0.47732338309288025, 0.4773542881011963, 0.46529901027679443, 0.4476604461669922, 0.44392290711402893, 0.4356440603733063, 0.43339353799819946, 0.4237261712551117, 0.41738423705101013, 0.4092977046966553, 0.39960941672325134, 0.3943019509315491, 0.3896450698375702, 0.38940906524658203, 0.3844236731529236, 0.38096538186073303], "accuracy": [0.2793554365634918, 0.4931977391242981, 0.5612204670906067, 0.6203936338424683, 0.6667547225952148, 0.6914542317390442, 0.7317395210266113, 0.733588695526123, 0.750231146812439, 0.7559106945991516, 0.7726852297782898, 0.7716285586357117, 0.7828556299209595, 0.7893276810646057, 0.7968564033508301, 0.8001585006713867, 0.8103289008140564, 0.8092722296714783, 0.821820080280304, 0.8232730031013489, 0.8249900937080383, 0.8290846943855286, 0.8259146809577942, 0.8322546482086182, 0.8403117060661316, 0.839519202709198, 0.843481719493866, 0.8432175517082214, 0.8485008478164673, 0.8520671129226685, 0.8536521196365356, 0.8565579056739807, 0.8597279191017151, 0.8593316674232483, 0.8638224601745605, 0.8640866279602051, 0.8595958352088928], "val_loss": [2.0421597957611084, 1.522718906402588, 1.0575817823410034, 0.8527448773384094, 0.765744149684906, 0.7138627767562866, 0.6631574034690857, 0.624678909778595, 0.5982531905174255, 0.5810295939445496, 0.5530709624290466, 0.5455048084259033, 0.5280582308769226, 0.5063842535018921, 0.5025450587272644, 0.48754796385765076, 0.4830087423324585, 0.4685899615287781, 0.46136555075645447, 0.4502699077129364, 0.4466904401779175, 0.4433646500110626, 0.4486282169818878, 0.430411696434021, 0.4227745831012726, 0.42112311720848083, 0.41485607624053955, 0.41298994421958923, 0.41202765703201294, 0.4031031131744385, 0.4003809094429016, 0.39814844727516174, 0.39460045099258423, 0.39130473136901855, 0.39207974076271057, 0.39226317405700684, 0.38639071583747864], "val_accuracy": [0.5090000033378601, 0.6430000066757202, 0.6736666560173035, 0.7020000219345093, 0.722000002861023, 0.7400000095367432, 0.7523333430290222, 0.762666642665863, 0.7713333368301392, 0.7746666669845581, 0.7973333597183228, 0.8016666769981384, 0.8016666769981384, 0.8116666674613953, 0.8153333067893982, 0.8240000009536743, 0.8226666450500488, 0.8349999785423279, 0.8309999704360962, 0.8360000252723694, 0.8360000252723694, 0.8376666903495789, 0.8360000252723694, 0.8413333296775818, 0.847000002861023, 0.8486666679382324, 0.8536666631698608, 0.8556666374206543, 0.8536666631698608, 0.859333336353302, 0.8566666841506958, 0.8613333106040955, 0.8586666584014893, 0.859666645526886, 0.8586666584014893, 0.8586666584014893, 0.8613333106040955]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 1], [0], [0], [0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [0, 2, 4, 8, 6, 7, 0, 8, 3, 1, 4, 2, 6, 1], [0, 5, 4, 2, 6, 0, 3, 6, 4, 6, 3], [0, 32], [0, 1], [0], [1], [0]], "fitness": -0.852571427822113, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(grad, grad), tf.math.negative(beta))), tf.math.sqrt(tf.math.multiply(tf.math.subtract(tf.math.pow(tf.math.add(grad, tf.math.divide_no_nan(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(grad, grad)), grad), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.294058084487915, 2.1900839805603027, 1.7828090190887451, 1.3559092283248901, 1.0784951448440552, 0.9226832985877991, 0.849141538143158, 0.816580057144165, 0.7737065553665161, 0.7341765761375427, 0.6953542828559875, 0.683968186378479, 0.6600267291069031, 0.6391705870628357, 0.6176875829696655, 0.5914114713668823, 0.5762478113174438, 0.5698195099830627, 0.5596127510070801, 0.5398575663566589, 0.525270938873291, 0.5231413841247559, 0.5215650200843811, 0.5133599042892456, 0.5080272555351257, 0.5008804798126221, 0.4761151075363159, 0.4730934500694275, 0.45652368664741516, 0.4559996724128723, 0.44351926445961, 0.4361305832862854, 0.42909514904022217, 0.4254254996776581, 0.4126864969730377], "accuracy": [0.12732796370983124, 0.3350944519042969, 0.4391758143901825, 0.544181764125824, 0.6326773166656494, 0.6668868064880371, 0.6975300312042236, 0.6942279934883118, 0.6979262828826904, 0.7189275026321411, 0.7308149337768555, 0.7310791015625, 0.7441553473472595, 0.7534011602401733, 0.7643640041351318, 0.7705719470977783, 0.7759873270988464, 0.778761088848114, 0.7832518815994263, 0.7862898111343384, 0.7895918488502502, 0.7944789528846741, 0.793422281742096, 0.7967243194580078, 0.7956677079200745, 0.8058380484580994, 0.8131026029586792, 0.8166688680648804, 0.8157442808151245, 0.8198388814926147, 0.8215559124946594, 0.8222163319587708, 0.8318583965301514, 0.8278959393501282, 0.8367455005645752], "val_loss": [2.246422290802002, 2.0209243297576904, 1.1491185426712036, 0.916151225566864, 0.7472534775733948, 0.7100563049316406, 0.6621158719062805, 0.6430703997612, 0.6338534355163574, 0.6032024621963501, 0.5790155529975891, 0.5606005191802979, 0.5512341856956482, 0.5296822786331177, 0.5203449130058289, 0.5091058611869812, 0.5052822232246399, 0.5075955390930176, 0.5074003338813782, 0.4968728721141815, 0.4937160909175873, 0.4887540638446808, 0.4940895140171051, 0.4789057672023773, 0.47673094272613525, 0.4753865599632263, 0.47504371404647827, 0.46776822209358215, 0.4630397856235504, 0.44941630959510803, 0.4427315592765808, 0.4465915560722351, 0.44531792402267456, 0.4347808361053467, 0.44766756892204285], "val_accuracy": [0.4073333442211151, 0.46033334732055664, 0.6393333077430725, 0.6816666722297668, 0.721666693687439, 0.7250000238418579, 0.7350000143051147, 0.7413333058357239, 0.762666642665863, 0.7633333206176758, 0.7649999856948853, 0.7753333449363708, 0.7850000262260437, 0.800000011920929, 0.8003333210945129, 0.8106666803359985, 0.8069999814033508, 0.8046666383743286, 0.8140000104904175, 0.8103333115577698, 0.815666675567627, 0.8246666789054871, 0.8213333487510681, 0.8246666789054871, 0.8296666741371155, 0.8293333053588867, 0.8360000252723694, 0.8433333039283752, 0.8393333554267883, 0.8500000238418579, 0.8483333587646484, 0.8416666388511658, 0.8413333296775818, 0.8476666808128357, 0.8420000076293945]}, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 25, 14, 11, 2, 2, 1, 1, 0], "tree_depth": 20}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 1], [0, 2, 8], [0, 5], [0], [1], [0], [2], [0]], "fitness": -0.829714298248291, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.4668296575546265, 0.7752403616905212, 0.6498024463653564, 0.5799996256828308, 0.555048406124115, 0.5242249965667725, 0.4916374981403351, 0.5062665939331055, 0.48592936992645264, 0.5103986859321594, 0.49970296025276184, 0.46992969512939453, 0.46946045756340027, 0.48788467049598694, 0.504239022731781, 0.5232306718826294, 0.5173399448394775], "accuracy": [0.48712190985679626, 0.733060359954834, 0.7685906887054443, 0.791441023349762, 0.8009510040283203, 0.8082155585289001, 0.8190463781356812, 0.8227446675300598, 0.8202351331710815, 0.8278959393501282, 0.8231409192085266, 0.8322546482086182, 0.8388587832450867, 0.8276317715644836, 0.8341038227081299, 0.8322546482086182, 0.8399154543876648], "val_loss": [0.7070114016532898, 0.6075794100761414, 0.5261215567588806, 0.49366170167922974, 0.4855056703090668, 0.48039522767066956, 0.48104995489120483, 0.47193172574043274, 0.48252978920936584, 0.5332911014556885, 0.4759017825126648, 0.49776220321655273, 0.536948025226593, 0.5272192358970642, 0.5632072687149048, 0.6276302337646484, 0.6520784497261047], "val_accuracy": [0.7509999871253967, 0.7773333191871643, 0.8083333373069763, 0.8136666417121887, 0.8233333230018616, 0.8206666707992554, 0.8393333554267883, 0.8323333263397217, 0.8293333053588867, 0.828000009059906, 0.8396666646003723, 0.843666672706604, 0.8353333473205566, 0.8353333473205566, 0.8303333520889282, 0.8356666564941406, 0.8220000267028809]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 5, 3, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 3, 7, 3, 1, 3, 3, 8, 9, 1, 8, 6, 5, 8, 8], [0, 1, 0, 2, 2, 1, 0, 1, 3, 3, 1], [31, 39, 85, 58], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [6, 2, 3, 0, 3, 5, 7, 8], [0, 2, 0, 3, 1, 0], [16, 16, 62], [0, 1], [0], [0], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 4, 1, 4, 1, 4, 2, 8], [2, 0, 0, 3, 0, 0, 3, 1, 2, 4], [16, 39, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 19, 11, 4, 14, 8, 6, 3, 2, 1, 1, 1, 13, 6, 7, 4], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.multiply(grad, grad), alpha), tf.math.multiply(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.sqrt(tf.math.divide_no_nan(tf.math.square(alpha), grad)), tf.math.sqrt(grad)))), tf.math.sqrt(alpha))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), tf.math.sqrt(alpha))), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(beta, tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32)), sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [3, 2, 5, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 8, 2, 8, 1, 3, 6, 3, 9, 5, 7, 5, 5, 1, 2, 5, 7, 4, 9, 5, 5, 6, 8, 3, 2, 9], [4, 0, 0, 3, 0, 0, 2, 1, 1, 0, 6, 0, 4, 7, 2, 0, 5, 2], [68, 99, 96, 99, 61, 1, 12, 33, 50, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 1, 0, 1, 1, 2, 1, 1, 0, 51, 33, 18, 10], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.math.sqrt(tf.math.add(tf.math.sqrt(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(tf.math.square(tf.math.square(tf.math.subtract(tf.math.add(tf.math.square(beta), alpha), tf.math.add(tf.math.pow(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))))), tf.math.square(grad)))), tf.math.divide_no_nan(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.multiply(grad, grad)))))), beta)), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [9, 1, 3, 1, 3], [0, 1, 0, 2, 1], [83, 99, 27], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 2, 6], [0, 5, 2], [16, 16], [1, 0], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 0, 5], [1], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 6, 3, 3, 1, 1, 0, 1, 1, 4, 3, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), beta)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.square(alpha)))", "other_info": {"loss": [2.303145408630371, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [1, 2, 3, 0, 3, 9], [3, 1, 0, 2], [83, 99, 27], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 4, 1, 7, 0, 1], [1, 0, 3, 1, 5], [22, 72], [0, 1], [0], [0], [0], [0, 0, 1, 0, 1, 0, 1], [0, 4, 1, 5], [7, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 2, 2, 1, 1, 0, 2, 1, 1, 1, 7, 4, 3, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(grad, tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}]