[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8805714249610901, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585988998413, 1.8659464120864868, 1.3939106464385986, 1.0966308116912842, 0.9349022507667542, 0.8419743776321411, 0.7695197463035583, 0.729751467704773, 0.6897091865539551, 0.6576535105705261, 0.6359990835189819, 0.6094067096710205, 0.589935839176178, 0.5596274733543396, 0.5528120398521423, 0.5393894910812378, 0.5281672477722168, 0.5202223062515259, 0.5057564377784729, 0.5040625333786011, 0.48261573910713196, 0.46983885765075684, 0.4574008584022522, 0.454408198595047, 0.4424269199371338, 0.42842501401901245, 0.42894208431243896, 0.42616719007492065, 0.41881483793258667, 0.4155913293361664, 0.4008829891681671, 0.39691162109375, 0.38997870683670044, 0.38351768255233765, 0.37681254744529724, 0.3729562759399414, 0.36148902773857117, 0.362969309091568, 0.3563940227031708, 0.3505782186985016, 0.35241496562957764, 0.34010687470436096, 0.3387279510498047, 0.3343537747859955, 0.3285624086856842, 0.32427793741226196, 0.319965660572052, 0.3122166097164154, 0.30889007449150085, 0.3045063316822052], "accuracy": [0.2694492042064667, 0.48870691657066345, 0.568220853805542, 0.6156386137008667, 0.6696605682373047, 0.6963412761688232, 0.7223616242408752, 0.7312111854553223, 0.750759482383728, 0.7600052952766418, 0.7696473598480225, 0.7761194109916687, 0.787082314491272, 0.7985734939575195, 0.7980451583862305, 0.8045172095298767, 0.8121780753135681, 0.8125742673873901, 0.8178576231002808, 0.8191784620285034, 0.8251221776008606, 0.8322546482086182, 0.8356888294219971, 0.8359529972076416, 0.8389908671379089, 0.846387505531311, 0.8451988101005554, 0.8454629778862, 0.848368763923645, 0.8531237840652466, 0.8598600029945374, 0.854708731174469, 0.8605204224586487, 0.8609166741371155, 0.86553955078125, 0.8639545440673828, 0.8689737319946289, 0.8706908226013184, 0.873860776424408, 0.872407853603363, 0.8710870146751404, 0.8776912093162537, 0.8792761564254761, 0.8824461698532104, 0.882710337638855, 0.8811253309249878, 0.887597382068634, 0.887597382068634, 0.8906353116035461, 0.8911636471748352], "val_loss": [2.0369274616241455, 1.5092171430587769, 1.0378726720809937, 0.8372371196746826, 0.7430018186569214, 0.693951427936554, 0.6459794044494629, 0.6065753698348999, 0.5836796760559082, 0.5591391324996948, 0.5475665926933289, 0.5286199450492859, 0.5111508965492249, 0.49807658791542053, 0.4888598918914795, 0.4807276725769043, 0.4732670187950134, 0.46291399002075195, 0.4651739001274109, 0.44972753524780273, 0.44051307439804077, 0.4300120174884796, 0.42833927273750305, 0.4226953983306885, 0.42076465487480164, 0.41008231043815613, 0.40701472759246826, 0.4087570011615753, 0.3987274467945099, 0.39754143357276917, 0.3908216655254364, 0.39351579546928406, 0.3876643180847168, 0.3835429251194, 0.3747929334640503, 0.37449854612350464, 0.3731365501880646, 0.3678072988986969, 0.3718084394931793, 0.3737613260746002, 0.36592888832092285, 0.3612542748451233, 0.3634853661060333, 0.3576800525188446, 0.35225361585617065, 0.35540124773979187, 0.35645702481269836, 0.3527815639972687, 0.3493586778640747, 0.349461168050766], "val_accuracy": [0.5453333258628845, 0.6666666865348816, 0.6899999976158142, 0.7136666774749756, 0.737666666507721, 0.7523333430290222, 0.765666663646698, 0.7816666960716248, 0.7886666655540466, 0.7976666688919067, 0.7953333258628845, 0.8090000152587891, 0.8193333148956299, 0.8209999799728394, 0.8233333230018616, 0.8309999704360962, 0.8243333101272583, 0.843666672706604, 0.8333333134651184, 0.840666651725769, 0.846666693687439, 0.8569999933242798, 0.8533333539962769, 0.8556666374206543, 0.8533333539962769, 0.8613333106040955, 0.8636666536331177, 0.8616666793823242, 0.8659999966621399, 0.862333357334137, 0.8683333396911621, 0.8663333058357239, 0.871999979019165, 0.8673333525657654, 0.8763333559036255, 0.878000020980835, 0.8756666779518127, 0.878000020980835, 0.8756666779518127, 0.8756666779518127, 0.8790000081062317, 0.8776666522026062, 0.8809999823570251, 0.8813333511352539, 0.8833333253860474, 0.8796666860580444, 0.8826666474342346, 0.8826666474342346, 0.8823333382606506, 0.8830000162124634]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8700000047683716, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2231969833374023, 1.8656463623046875, 1.390383005142212, 1.0947637557983398, 0.9440947771072388, 0.8346863389015198, 0.7630856037139893, 0.7263746857643127, 0.6902129054069519, 0.6519095301628113, 0.6364237666130066, 0.6095741987228394, 0.5967380404472351, 0.5626067519187927, 0.5557389855384827, 0.543643057346344, 0.5321140885353088, 0.5138015747070312, 0.5042953491210938, 0.49537551403045654, 0.48433178663253784, 0.4731111228466034, 0.46015796065330505, 0.4504242241382599, 0.44180989265441895, 0.4351556599140167, 0.4350874722003937, 0.4255828559398651, 0.4179579019546509, 0.4117433428764343, 0.398825466632843, 0.39634522795677185, 0.3841365575790405, 0.38137122988700867, 0.3749191164970398, 0.37416547536849976, 0.3627277910709381, 0.35763275623321533, 0.35884448885917664, 0.3424191176891327, 0.3408125936985016, 0.34765177965164185, 0.32327237725257874, 0.3302063047885895, 0.32139334082603455, 0.3208361864089966, 0.3203474283218384], "accuracy": [0.2712983787059784, 0.49531105160713196, 0.5708624720573425, 0.6207898855209351, 0.6641130447387695, 0.698190450668335, 0.7290979027748108, 0.7378153204917908, 0.7479857206344604, 0.7619865536689758, 0.7660810947418213, 0.7761194109916687, 0.7886672616004944, 0.7947431206703186, 0.7961959838867188, 0.8061022162437439, 0.8050455451011658, 0.819970965385437, 0.8219521641731262, 0.8201030492782593, 0.8267071843147278, 0.8335754871368408, 0.8422929644584656, 0.8433496356010437, 0.8457271456718445, 0.8446704745292664, 0.841500461101532, 0.8491612672805786, 0.8515387773513794, 0.8531237840652466, 0.8573504090309143, 0.8568220734596252, 0.8619733452796936, 0.8594637513160706, 0.8636903762817383, 0.8667283058166504, 0.8692378997802734, 0.8691058158874512, 0.8717474341392517, 0.8774270415306091, 0.8754457831382751, 0.8737286925315857, 0.886672854423523, 0.8805969953536987, 0.8819178342819214, 0.883238673210144, 0.880729079246521], "val_loss": [2.0460057258605957, 1.5294042825698853, 1.069096565246582, 0.8619158267974854, 0.7690369486808777, 0.7118297815322876, 0.6661977171897888, 0.632001519203186, 0.6030260920524597, 0.5756518840789795, 0.5603542327880859, 0.5434598922729492, 0.526567816734314, 0.5110902786254883, 0.507024884223938, 0.49349865317344666, 0.48318979144096375, 0.475803941488266, 0.4677971303462982, 0.4589121639728546, 0.44925928115844727, 0.4427793025970459, 0.4381314814090729, 0.43146711587905884, 0.4289681911468506, 0.42114055156707764, 0.4167284667491913, 0.4159321188926697, 0.40959107875823975, 0.4059508442878723, 0.3971443176269531, 0.3968367874622345, 0.3960575461387634, 0.38955044746398926, 0.3871673047542572, 0.38447123765945435, 0.38684114813804626, 0.3803464472293854, 0.38149499893188477, 0.37311938405036926, 0.3752261698246002, 0.36965829133987427, 0.3682219982147217, 0.3644304573535919, 0.3658623993396759, 0.3628524839878082, 0.36132141947746277], "val_accuracy": [0.534333348274231, 0.6456666588783264, 0.67166668176651, 0.6956666707992554, 0.7160000205039978, 0.7363333106040955, 0.7473333477973938, 0.7620000243186951, 0.7739999890327454, 0.7876666784286499, 0.7886666655540466, 0.8003333210945129, 0.8073333501815796, 0.8153333067893982, 0.8119999766349792, 0.8196666836738586, 0.8253333568572998, 0.8306666612625122, 0.8323333263397217, 0.8336666822433472, 0.8373333215713501, 0.840666651725769, 0.8410000205039978, 0.8426666855812073, 0.843999981880188, 0.8489999771118164, 0.8483333587646484, 0.8473333120346069, 0.8503333330154419, 0.8523333072662354, 0.856333315372467, 0.8569999933242798, 0.8539999723434448, 0.8636666536331177, 0.8603333234786987, 0.8629999756813049, 0.8569999933242798, 0.8640000224113464, 0.8653333187103271, 0.8676666617393494, 0.8676666617393494, 0.8723333477973938, 0.871999979019165, 0.8709999918937683, 0.8713333606719971, 0.8683333396911621, 0.8700000047683716]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 1], [0, 6], [0, 1], [0], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.852571427822113, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2923877239227295, 2.186776638031006, 1.7586841583251953, 1.3299363851547241, 1.0587843656539917, 0.8986307382583618, 0.846336841583252, 0.8303409218788147, 0.7724196910858154, 0.7534052133560181, 0.7064000964164734, 0.6945415139198303, 0.6573026180267334, 0.6331838369369507, 0.6182910799980164, 0.6069780588150024, 0.5890148282051086, 0.5724771022796631, 0.5695016980171204, 0.5555564761161804, 0.5458487272262573, 0.5401870608329773, 0.5216425657272339, 0.49410921335220337, 0.5009552240371704, 0.4828856587409973, 0.4794374108314514, 0.4673669934272766, 0.4613110423088074, 0.45039305090904236, 0.4418478012084961, 0.44107183814048767, 0.43048933148384094, 0.4311142563819885, 0.41957300901412964, 0.4042503237724304, 0.39387407898902893, 0.3919188976287842, 0.3991657495498657], "accuracy": [0.1320829540491104, 0.32862237095832825, 0.44168537855148315, 0.5456346869468689, 0.6341302394866943, 0.6672830581665039, 0.6889446377754211, 0.696209192276001, 0.7041342258453369, 0.7165499925613403, 0.7338528633117676, 0.7343811988830566, 0.7473253011703491, 0.7576277852058411, 0.7577598690986633, 0.7637035846710205, 0.7746664881706238, 0.7812706232070923, 0.7843085527420044, 0.7907806038856506, 0.7936864495277405, 0.7968564033508301, 0.8080834746360779, 0.8137630224227905, 0.8131026029586792, 0.8183859586715698, 0.8239334225654602, 0.8244617581367493, 0.8248580098152161, 0.8322546482086182, 0.8366134166717529, 0.8337075710296631, 0.8362171649932861, 0.8401796221733093, 0.8383304476737976, 0.8412362933158875, 0.8457271456718445, 0.8496896028518677, 0.8459912538528442], "val_loss": [2.245203733444214, 2.0132813453674316, 1.129389762878418, 0.879764974117279, 0.7660793662071228, 0.6867016553878784, 0.6846224069595337, 0.6491298675537109, 0.6542982459068298, 0.6168367266654968, 0.5623325109481812, 0.5447280406951904, 0.5390186309814453, 0.5196222066879272, 0.5259209275245667, 0.5003265142440796, 0.5080399513244629, 0.480558842420578, 0.4794807434082031, 0.49052688479423523, 0.4706163704395294, 0.465769499540329, 0.46068960428237915, 0.44222891330718994, 0.43594908714294434, 0.43837714195251465, 0.4242169260978699, 0.42635464668273926, 0.42501211166381836, 0.42391619086265564, 0.4225030839443207, 0.42372000217437744, 0.4213273823261261, 0.4023224711418152, 0.4060934782028198, 0.40947094559669495, 0.43283113837242126, 0.4153599441051483, 0.40030786395072937], "val_accuracy": [0.4203333258628845, 0.47466665506362915, 0.6506666541099548, 0.6970000267028809, 0.7193333506584167, 0.7393333315849304, 0.7396666407585144, 0.7573333382606506, 0.7609999775886536, 0.7710000276565552, 0.777999997138977, 0.7786666750907898, 0.7906666398048401, 0.796999990940094, 0.8009999990463257, 0.8019999861717224, 0.8059999942779541, 0.8190000057220459, 0.8113333582878113, 0.8016666769981384, 0.8223333358764648, 0.8190000057220459, 0.8233333230018616, 0.8389999866485596, 0.8410000205039978, 0.8433333039283752, 0.843999981880188, 0.8413333296775818, 0.8463333249092102, 0.8460000157356262, 0.8489999771118164, 0.8473333120346069, 0.8513333201408386, 0.8569999933242798, 0.8516666889190674, 0.8529999852180481, 0.8529999852180481, 0.8560000061988831, 0.8553333282470703]}, "mapping_values": [1, 10, 5, 5, 3, 4, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 5, 6, 2], [0, 2, 5, 0], [0, 8], [1], [0], [2], [0]], "fitness": -0.8299999833106995, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(beta, tf.math.add(grad, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5925829410552979, 0.8868340849876404, 0.6981568336486816, 0.6181063055992126, 0.5599105954170227, 0.5421269536018372, 0.5061002969741821, 0.4888889193534851, 0.4594348073005676, 0.4651641547679901, 0.44215449690818787, 0.45318952202796936, 0.42637693881988525, 0.4966019093990326, 0.48469969630241394, 0.505915105342865], "accuracy": [0.4714040458202362, 0.6865671873092651, 0.7464007139205933, 0.7695152759552002, 0.7923656105995178, 0.8004226684570312, 0.8103289008140564, 0.8185180425643921, 0.8278959393501282, 0.8380662798881531, 0.8354246616363525, 0.8366134166717529, 0.8471800088882446, 0.8360850811004639, 0.828292191028595, 0.830669641494751], "val_loss": [0.8717262148857117, 0.6458510160446167, 0.5453366041183472, 0.479292631149292, 0.45206180214881897, 0.44803833961486816, 0.46160852909088135, 0.45476624369621277, 0.4429192841053009, 0.4382234215736389, 0.45001402497291565, 0.4730437397956848, 0.5138779282569885, 0.4849810302257538, 0.5594758987426758, 0.533672034740448], "val_accuracy": [0.6666666865348816, 0.7509999871253967, 0.8033333420753479, 0.8266666531562805, 0.8356666564941406, 0.8386666774749756, 0.8446666598320007, 0.8339999914169312, 0.8460000157356262, 0.843666672706604, 0.8553333282470703, 0.8503333330154419, 0.8516666889190674, 0.8433333039283752, 0.8423333168029785, 0.8389999866485596]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 9, 5, 4, 2, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 9, 5], [0, 2, 0, 3], [57, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [9, 4, 3, 6, 1, 1, 4, 1, 6, 2, 8], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 7, 5, 2, 2, 2, 1, 1, 1, 1, 1, 0, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303941011428833, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 1, 1, 1], [39, 39], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1], [4, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [82], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 5, 6, 8, 2, 1, 2, 9, 2, 2, 0], [0, 0, 0, 4, 0, 4, 3, 1, 2, 1, 6, 6, 7, 5, 2], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 1, 1, 0, 1, 1, 2, 1, 1, 1, 36, 21, 15, 5], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha))), alpha), alpha)), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(tf.math.sqrt(grad), tf.constant(1.0, shape=shape, dtype=tf.float32)), grad)), tf.math.square(tf.math.divide_no_nan(sigma, alpha)))), tf.math.sqrt(tf.math.add(tf.math.subtract(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(grad, grad))))), grad), tf.math.negative(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 2, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 2, 3, 1, 3, 5, 2, 2, 2, 5, 5, 9], [0, 2, 0, 3, 1, 1, 2], [16, 16, 85], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [6, 3, 3, 6, 2, 1, 4, 1, 4, 2, 8, 3, 5, 6, 9, 4, 0, 3], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 1, 0, 6, 4], [16, 99, 96, 99, 17, 1, 42, 97]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 19, 12, 7, 3, 2, 1, 1, 1, 32, 18, 14, 8], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.square(alpha), tf.math.square(beta)), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), sigma)), tf.math.sqrt(tf.math.multiply(alpha, beta))), tf.math.square(tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), alpha))))), tf.math.negative(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(grad, grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 9, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1], [0, 2, 3, 0, 3, 5, 7, 8, 0, 6, 9, 5, 3], [0, 2, 0, 3, 3, 4], [16, 16, 76], [0, 1, 0, 1], [2, 8], [0, 6], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 6, 4, 1, 4, 2, 2, 6, 3], [0, 0, 0, 3, 0, 0, 1, 1, 3, 0, 2, 4, 0], [16, 99, 96, 99, 61, 1, 90]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 19, 13, 6, 3, 4, 2, 2, 1, 26, 13, 13, 7], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(tf.math.sqrt(tf.math.negative(tf.math.divide_no_nan(grad, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.multiply(grad, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), alpha)))), alpha), tf.math.add(tf.math.add(sigma, tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), beta)), tf.math.multiply(grad, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}]