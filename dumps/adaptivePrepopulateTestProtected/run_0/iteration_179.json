[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8805714249610901, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585988998413, 1.8659464120864868, 1.3939106464385986, 1.0966308116912842, 0.9349022507667542, 0.8419743776321411, 0.7695197463035583, 0.729751467704773, 0.6897091865539551, 0.6576535105705261, 0.6359990835189819, 0.6094067096710205, 0.589935839176178, 0.5596274733543396, 0.5528120398521423, 0.5393894910812378, 0.5281672477722168, 0.5202223062515259, 0.5057564377784729, 0.5040625333786011, 0.48261573910713196, 0.46983885765075684, 0.4574008584022522, 0.454408198595047, 0.4424269199371338, 0.42842501401901245, 0.42894208431243896, 0.42616719007492065, 0.41881483793258667, 0.4155913293361664, 0.4008829891681671, 0.39691162109375, 0.38997870683670044, 0.38351768255233765, 0.37681254744529724, 0.3729562759399414, 0.36148902773857117, 0.362969309091568, 0.3563940227031708, 0.3505782186985016, 0.35241496562957764, 0.34010687470436096, 0.3387279510498047, 0.3343537747859955, 0.3285624086856842, 0.32427793741226196, 0.319965660572052, 0.3122166097164154, 0.30889007449150085, 0.3045063316822052], "accuracy": [0.2694492042064667, 0.48870691657066345, 0.568220853805542, 0.6156386137008667, 0.6696605682373047, 0.6963412761688232, 0.7223616242408752, 0.7312111854553223, 0.750759482383728, 0.7600052952766418, 0.7696473598480225, 0.7761194109916687, 0.787082314491272, 0.7985734939575195, 0.7980451583862305, 0.8045172095298767, 0.8121780753135681, 0.8125742673873901, 0.8178576231002808, 0.8191784620285034, 0.8251221776008606, 0.8322546482086182, 0.8356888294219971, 0.8359529972076416, 0.8389908671379089, 0.846387505531311, 0.8451988101005554, 0.8454629778862, 0.848368763923645, 0.8531237840652466, 0.8598600029945374, 0.854708731174469, 0.8605204224586487, 0.8609166741371155, 0.86553955078125, 0.8639545440673828, 0.8689737319946289, 0.8706908226013184, 0.873860776424408, 0.872407853603363, 0.8710870146751404, 0.8776912093162537, 0.8792761564254761, 0.8824461698532104, 0.882710337638855, 0.8811253309249878, 0.887597382068634, 0.887597382068634, 0.8906353116035461, 0.8911636471748352], "val_loss": [2.0369274616241455, 1.5092171430587769, 1.0378726720809937, 0.8372371196746826, 0.7430018186569214, 0.693951427936554, 0.6459794044494629, 0.6065753698348999, 0.5836796760559082, 0.5591391324996948, 0.5475665926933289, 0.5286199450492859, 0.5111508965492249, 0.49807658791542053, 0.4888598918914795, 0.4807276725769043, 0.4732670187950134, 0.46291399002075195, 0.4651739001274109, 0.44972753524780273, 0.44051307439804077, 0.4300120174884796, 0.42833927273750305, 0.4226953983306885, 0.42076465487480164, 0.41008231043815613, 0.40701472759246826, 0.4087570011615753, 0.3987274467945099, 0.39754143357276917, 0.3908216655254364, 0.39351579546928406, 0.3876643180847168, 0.3835429251194, 0.3747929334640503, 0.37449854612350464, 0.3731365501880646, 0.3678072988986969, 0.3718084394931793, 0.3737613260746002, 0.36592888832092285, 0.3612542748451233, 0.3634853661060333, 0.3576800525188446, 0.35225361585617065, 0.35540124773979187, 0.35645702481269836, 0.3527815639972687, 0.3493586778640747, 0.349461168050766], "val_accuracy": [0.5453333258628845, 0.6666666865348816, 0.6899999976158142, 0.7136666774749756, 0.737666666507721, 0.7523333430290222, 0.765666663646698, 0.7816666960716248, 0.7886666655540466, 0.7976666688919067, 0.7953333258628845, 0.8090000152587891, 0.8193333148956299, 0.8209999799728394, 0.8233333230018616, 0.8309999704360962, 0.8243333101272583, 0.843666672706604, 0.8333333134651184, 0.840666651725769, 0.846666693687439, 0.8569999933242798, 0.8533333539962769, 0.8556666374206543, 0.8533333539962769, 0.8613333106040955, 0.8636666536331177, 0.8616666793823242, 0.8659999966621399, 0.862333357334137, 0.8683333396911621, 0.8663333058357239, 0.871999979019165, 0.8673333525657654, 0.8763333559036255, 0.878000020980835, 0.8756666779518127, 0.878000020980835, 0.8756666779518127, 0.8756666779518127, 0.8790000081062317, 0.8776666522026062, 0.8809999823570251, 0.8813333511352539, 0.8833333253860474, 0.8796666860580444, 0.8826666474342346, 0.8826666474342346, 0.8823333382606506, 0.8830000162124634]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8585714101791382, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221322774887085, 1.8638592958450317, 1.378203272819519, 1.0848727226257324, 0.9272340536117554, 0.8123505711555481, 0.7643768191337585, 0.7122567892074585, 0.6804714798927307, 0.6423627138137817, 0.6324298977851868, 0.6004464626312256, 0.5754072666168213, 0.565095067024231, 0.5472439527511597, 0.5357486009597778, 0.5223953723907471, 0.501259982585907, 0.5007734298706055, 0.485508531332016, 0.4667249917984009, 0.46657103300094604, 0.4505903720855713, 0.44796374440193176, 0.4420716166496277, 0.43324100971221924, 0.42102503776550293, 0.41349470615386963, 0.4044427275657654, 0.40118956565856934, 0.39016613364219666, 0.385439932346344, 0.37768515944480896, 0.375479131937027, 0.3730756938457489, 0.3636832535266876, 0.36170437932014465, 0.3600785732269287], "accuracy": [0.27116629481315613, 0.48725399374961853, 0.5703341960906982, 0.6192048788070679, 0.6738871932029724, 0.7043983340263367, 0.7238145470619202, 0.7339849472045898, 0.7470611333847046, 0.7622507214546204, 0.7687227725982666, 0.7808743715286255, 0.785101056098938, 0.7931581139564514, 0.8025360107421875, 0.7994980812072754, 0.8098005652427673, 0.8156121969223022, 0.819442629814148, 0.8231409192085266, 0.8323867321014404, 0.82683926820755, 0.8356888294219971, 0.8407079577445984, 0.8424250483512878, 0.8437458872795105, 0.8462554216384888, 0.8533879518508911, 0.8543124794960022, 0.8549728989601135, 0.8594637513160706, 0.8601241707801819, 0.8654074668884277, 0.8660678863525391, 0.8632941246032715, 0.8706908226013184, 0.8667283058166504, 0.8721436858177185], "val_loss": [2.035161018371582, 1.5029723644256592, 1.0302679538726807, 0.8303224444389343, 0.7441228032112122, 0.6887380480766296, 0.6420018076896667, 0.6074332594871521, 0.5908640623092651, 0.5644874572753906, 0.5445343255996704, 0.5318567156791687, 0.5109411478042603, 0.5096191167831421, 0.48914405703544617, 0.4811236560344696, 0.4740075170993805, 0.46303388476371765, 0.4611569344997406, 0.44841256737709045, 0.44339779019355774, 0.4390448331832886, 0.43314385414123535, 0.4267558157444, 0.4252801239490509, 0.4256529211997986, 0.4182899594306946, 0.4113386273384094, 0.411775678396225, 0.40601497888565063, 0.40740707516670227, 0.3989839553833008, 0.39711958169937134, 0.39550328254699707, 0.40037596225738525, 0.3940248489379883, 0.3939090967178345, 0.38781681656837463], "val_accuracy": [0.5400000214576721, 0.6543333530426025, 0.6886666417121887, 0.7136666774749756, 0.7366666793823242, 0.7540000081062317, 0.7666666507720947, 0.781000018119812, 0.7799999713897705, 0.7940000295639038, 0.8009999990463257, 0.8053333163261414, 0.8153333067893982, 0.8149999976158142, 0.8199999928474426, 0.828000009059906, 0.82833331823349, 0.82833331823349, 0.8299999833106995, 0.8376666903495789, 0.8373333215713501, 0.8386666774749756, 0.8416666388511658, 0.8443333506584167, 0.8433333039283752, 0.8399999737739563, 0.843999981880188, 0.8456666469573975, 0.8486666679382324, 0.8500000238418579, 0.8463333249092102, 0.8503333330154419, 0.8573333621025085, 0.8529999852180481, 0.8550000190734863, 0.8523333072662354, 0.8536666631698608, 0.8556666374206543]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 1], [0], [0], [0], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8460000157356262, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.291992664337158, 2.187258243560791, 1.7614445686340332, 1.347914218902588, 1.0431960821151733, 0.883502721786499, 0.8178893327713013, 0.8047406077384949, 0.762549877166748, 0.7385367155075073, 0.6874148845672607, 0.6825588941574097, 0.6441939473152161, 0.6135221123695374, 0.6081399321556091, 0.5747377276420593, 0.5586529970169067, 0.5542072057723999, 0.5270208120346069, 0.5216835141181946, 0.514401912689209, 0.49689221382141113, 0.4973964989185333, 0.4853355586528778, 0.48082777857780457, 0.46880635619163513, 0.4596395194530487, 0.455517441034317, 0.44206225872039795, 0.44199830293655396, 0.4211362898349762, 0.4150039851665497, 0.4125697910785675, 0.39852526783943176, 0.3980458378791809, 0.38890156149864197, 0.3986542522907257, 0.3885173201560974, 0.36667847633361816, 0.36235105991363525, 0.3572228252887726, 0.3471008241176605, 0.34165263175964355, 0.33644795417785645, 0.3390248715877533], "accuracy": [0.1340641975402832, 0.32743361592292786, 0.4349491596221924, 0.5420684218406677, 0.6392814517021179, 0.6753401160240173, 0.6954167485237122, 0.6997754573822021, 0.7077004313468933, 0.7123233675956726, 0.7448157668113708, 0.7301545143127441, 0.7564390301704407, 0.7695152759552002, 0.7671377658843994, 0.7755910754203796, 0.7869502305984497, 0.7864218950271606, 0.7972526550292969, 0.7988376617431641, 0.7977809906005859, 0.8045172095298767, 0.8042530417442322, 0.8125742673873901, 0.8103289008140564, 0.8149517774581909, 0.8177255392074585, 0.8198388814926147, 0.8244617581367493, 0.8265751004219055, 0.8363492488861084, 0.8392550349235535, 0.8383304476737976, 0.843481719493866, 0.8445383906364441, 0.8454629778862, 0.8408400416374207, 0.8469158411026001, 0.8549728989601135, 0.8593316674232483, 0.8605204224586487, 0.8640866279602051, 0.8660678863525391, 0.8650112152099609, 0.8667283058166504], "val_loss": [2.245635986328125, 2.015329360961914, 1.1256327629089355, 0.881476640701294, 0.7510043382644653, 0.6951064467430115, 0.6610591411590576, 0.6570550799369812, 0.638292133808136, 0.5977216362953186, 0.5539352893829346, 0.5430293083190918, 0.5253205299377441, 0.5177152752876282, 0.5230835676193237, 0.506822407245636, 0.49718785285949707, 0.488892525434494, 0.47363412380218506, 0.4695397913455963, 0.4739121198654175, 0.474051296710968, 0.4594669044017792, 0.4486025869846344, 0.4480960965156555, 0.45751240849494934, 0.4511856734752655, 0.43792134523391724, 0.43022608757019043, 0.4436401426792145, 0.4325234293937683, 0.4241260886192322, 0.40546536445617676, 0.4182235896587372, 0.4099498391151428, 0.3998349606990814, 0.39867284893989563, 0.39789822697639465, 0.40346887707710266, 0.40203380584716797, 0.39146119356155396, 0.3950052559375763, 0.3973994553089142, 0.40438321232795715, 0.41466224193573], "val_accuracy": [0.4313333332538605, 0.4713333249092102, 0.6549999713897705, 0.6863333582878113, 0.7310000061988831, 0.7369999885559082, 0.750333309173584, 0.7559999823570251, 0.7556666731834412, 0.7846666574478149, 0.7893333435058594, 0.7870000004768372, 0.7976666688919067, 0.8063333630561829, 0.8033333420753479, 0.8046666383743286, 0.812333345413208, 0.8176666498184204, 0.8216666579246521, 0.8289999961853027, 0.8206666707992554, 0.8289999961853027, 0.8306666612625122, 0.8303333520889282, 0.8386666774749756, 0.8389999866485596, 0.8429999947547913, 0.8403333425521851, 0.8476666808128357, 0.8429999947547913, 0.8526666760444641, 0.8460000157356262, 0.8576666712760925, 0.8546666502952576, 0.859333336353302, 0.862666666507721, 0.8550000190734863, 0.8610000014305115, 0.8659999966621399, 0.8696666955947876, 0.8663333058357239, 0.8646666407585144, 0.8690000176429749, 0.8696666955947876, 0.8666666746139526]}, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 1, 1], [0, 6], [0, 4], [0], [1], [0], [2], [0]], "fitness": -0.8299999833106995, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.6211332082748413, 0.8391228318214417, 0.6967204213142395, 0.6299384832382202, 0.6083621978759766, 0.5643792152404785, 0.5423714518547058, 0.5101116299629211, 0.49873650074005127, 0.4610569477081299, 0.4728095233440399, 0.46010416746139526, 0.46191084384918213, 0.4611351788043976, 0.4525411128997803, 0.4512806832790375, 0.443551242351532, 0.438872367143631, 0.44767284393310547, 0.4487539827823639, 0.45699232816696167, 0.46319255232810974, 0.45293867588043213, 0.4560655355453491, 0.45233237743377686], "accuracy": [0.4647998809814453, 0.7123233675956726, 0.7461365461349487, 0.7692511081695557, 0.7757231593132019, 0.7849689722061157, 0.8006868362426758, 0.8090080618858337, 0.8141592741012573, 0.8298771381378174, 0.8231409192085266, 0.8257825970649719, 0.828292191028595, 0.8364813327789307, 0.8364813327789307, 0.8308017253875732, 0.8389908671379089, 0.8455950617790222, 0.8418967127799988, 0.8323867321014404, 0.8444063067436218, 0.8385946154594421, 0.8442742228507996, 0.8491612672805786, 0.8335754871368408], "val_loss": [0.8945122361183167, 0.6082440614700317, 0.5706876516342163, 0.5149503946304321, 0.5089074969291687, 0.4947373867034912, 0.47340115904808044, 0.4723757803440094, 0.4607909619808197, 0.4617776572704315, 0.45499515533447266, 0.4735865890979767, 0.4595058262348175, 0.4827623665332794, 0.46517398953437805, 0.4641281068325043, 0.500563383102417, 0.4375723898410797, 0.47652310132980347, 0.45947396755218506, 0.4933711886405945, 0.5206095576286316, 0.4346182942390442, 0.5055434703826904, 0.5087419748306274], "val_accuracy": [0.7146666646003723, 0.777999997138977, 0.7889999747276306, 0.8133333325386047, 0.8063333630561829, 0.8166666626930237, 0.8286666870117188, 0.8309999704360962, 0.8356666564941406, 0.831333339214325, 0.8373333215713501, 0.8346666693687439, 0.8413333296775818, 0.8339999914169312, 0.8336666822433472, 0.8386666774749756, 0.8500000238418579, 0.843999981880188, 0.8399999737739563, 0.859000027179718, 0.8416666388511658, 0.8513333201408386, 0.8513333201408386, 0.8496666550636292, 0.8493333458900452]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 4, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 2, 3, 5], [0, 2, 0, 3, 2], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 5, 4, 1, 4, 1, 8], [0, 0, 0, 3, 4, 0, 3, 1, 2, 4], [16, 99, 96, 62, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 5, 5, 2, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.pow(sigma, tf.math.subtract(grad, tf.math.pow(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), sigma))))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 4, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 2, 6, 7], [3, 0, 0, 3, 0, 0, 3, 1, 2, 0, 5, 0, 5], [16, 31, 81, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 10, 6, 4, 2, 2, 1, 1, 1, 26, 13, 13, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 3, 0, 3], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 1], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [6, 5, 3, 6, 8, 1, 4, 1, 4, 2, 8, 2, 1, 8, 1, 3, 3, 6, 4, 4, 6, 1, 1, 7, 5, 4, 8, 3, 1, 7, 2, 6, 6, 8, 9, 9, 7, 2, 4, 8, 9, 4, 3, 7, 1, 2, 7, 1, 0, 1, 8, 5, 1, 0, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4, 4, 3, 5, 7, 1, 4, 4, 0, 6, 4, 4, 6, 1, 6, 1, 4, 1, 1, 1, 4, 4, 4, 0, 7, 2, 3, 2], [16, 99, 96, 99, 87, 48, 84, 9, 5, 5]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 10, 6, 4, 2, 2, 1, 1, 1, 92, 55, 37, 10], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))), sigma), tf.math.sqrt(tf.math.add(alpha, beta)))), tf.math.subtract(tf.math.sqrt(tf.math.subtract(grad, grad)), tf.math.multiply(sigma, tf.math.multiply(tf.math.divide_no_nan(tf.math.pow(tf.math.pow(tf.math.divide_no_nan(tf.math.subtract(tf.math.subtract(grad, grad), tf.math.add(tf.math.square(tf.math.pow(tf.math.sqrt(tf.math.multiply(alpha, tf.math.subtract(tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.sqrt(grad), grad), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), grad), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(grad, tf.math.add(grad, tf.math.pow(tf.math.sqrt(alpha), grad))))), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), alpha), tf.math.pow(grad, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.subtract(alpha, grad)))), tf.math.add(grad, grad)), tf.math.add(tf.math.subtract(tf.math.negative(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), grad), tf.math.subtract(beta, tf.math.sqrt(tf.math.square(tf.math.subtract(tf.math.negative(sigma), tf.math.sqrt(beta))))))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 0], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0], [6, 3, 3, 1, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 85, 99, 61, 1]], "fitness": -0.09285714477300644, "mapping_values": [1, 1, 0, 1, 1, 10, 6, 4, 2, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), grad), alpha)", "other_info": {"loss": [2.3093652725219727, 2.3094282150268555, 2.3107974529266357, 2.3089165687561035, 2.3098015785217285, 2.311436891555786], "accuracy": [0.09259014576673508, 0.09813763201236725, 0.09060890227556229, 0.0940430611371994, 0.09338264167308807, 0.09113723784685135], "val_loss": [2.3090176582336426, 2.3090264797210693, 2.309056282043457, 2.309091567993164, 2.3091278076171875, 2.3091652393341064], "val_accuracy": [0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601]}}]