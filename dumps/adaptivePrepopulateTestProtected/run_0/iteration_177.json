[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8805714249610901, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585988998413, 1.8659464120864868, 1.3939106464385986, 1.0966308116912842, 0.9349022507667542, 0.8419743776321411, 0.7695197463035583, 0.729751467704773, 0.6897091865539551, 0.6576535105705261, 0.6359990835189819, 0.6094067096710205, 0.589935839176178, 0.5596274733543396, 0.5528120398521423, 0.5393894910812378, 0.5281672477722168, 0.5202223062515259, 0.5057564377784729, 0.5040625333786011, 0.48261573910713196, 0.46983885765075684, 0.4574008584022522, 0.454408198595047, 0.4424269199371338, 0.42842501401901245, 0.42894208431243896, 0.42616719007492065, 0.41881483793258667, 0.4155913293361664, 0.4008829891681671, 0.39691162109375, 0.38997870683670044, 0.38351768255233765, 0.37681254744529724, 0.3729562759399414, 0.36148902773857117, 0.362969309091568, 0.3563940227031708, 0.3505782186985016, 0.35241496562957764, 0.34010687470436096, 0.3387279510498047, 0.3343537747859955, 0.3285624086856842, 0.32427793741226196, 0.319965660572052, 0.3122166097164154, 0.30889007449150085, 0.3045063316822052], "accuracy": [0.2694492042064667, 0.48870691657066345, 0.568220853805542, 0.6156386137008667, 0.6696605682373047, 0.6963412761688232, 0.7223616242408752, 0.7312111854553223, 0.750759482383728, 0.7600052952766418, 0.7696473598480225, 0.7761194109916687, 0.787082314491272, 0.7985734939575195, 0.7980451583862305, 0.8045172095298767, 0.8121780753135681, 0.8125742673873901, 0.8178576231002808, 0.8191784620285034, 0.8251221776008606, 0.8322546482086182, 0.8356888294219971, 0.8359529972076416, 0.8389908671379089, 0.846387505531311, 0.8451988101005554, 0.8454629778862, 0.848368763923645, 0.8531237840652466, 0.8598600029945374, 0.854708731174469, 0.8605204224586487, 0.8609166741371155, 0.86553955078125, 0.8639545440673828, 0.8689737319946289, 0.8706908226013184, 0.873860776424408, 0.872407853603363, 0.8710870146751404, 0.8776912093162537, 0.8792761564254761, 0.8824461698532104, 0.882710337638855, 0.8811253309249878, 0.887597382068634, 0.887597382068634, 0.8906353116035461, 0.8911636471748352], "val_loss": [2.0369274616241455, 1.5092171430587769, 1.0378726720809937, 0.8372371196746826, 0.7430018186569214, 0.693951427936554, 0.6459794044494629, 0.6065753698348999, 0.5836796760559082, 0.5591391324996948, 0.5475665926933289, 0.5286199450492859, 0.5111508965492249, 0.49807658791542053, 0.4888598918914795, 0.4807276725769043, 0.4732670187950134, 0.46291399002075195, 0.4651739001274109, 0.44972753524780273, 0.44051307439804077, 0.4300120174884796, 0.42833927273750305, 0.4226953983306885, 0.42076465487480164, 0.41008231043815613, 0.40701472759246826, 0.4087570011615753, 0.3987274467945099, 0.39754143357276917, 0.3908216655254364, 0.39351579546928406, 0.3876643180847168, 0.3835429251194, 0.3747929334640503, 0.37449854612350464, 0.3731365501880646, 0.3678072988986969, 0.3718084394931793, 0.3737613260746002, 0.36592888832092285, 0.3612542748451233, 0.3634853661060333, 0.3576800525188446, 0.35225361585617065, 0.35540124773979187, 0.35645702481269836, 0.3527815639972687, 0.3493586778640747, 0.349461168050766], "val_accuracy": [0.5453333258628845, 0.6666666865348816, 0.6899999976158142, 0.7136666774749756, 0.737666666507721, 0.7523333430290222, 0.765666663646698, 0.7816666960716248, 0.7886666655540466, 0.7976666688919067, 0.7953333258628845, 0.8090000152587891, 0.8193333148956299, 0.8209999799728394, 0.8233333230018616, 0.8309999704360962, 0.8243333101272583, 0.843666672706604, 0.8333333134651184, 0.840666651725769, 0.846666693687439, 0.8569999933242798, 0.8533333539962769, 0.8556666374206543, 0.8533333539962769, 0.8613333106040955, 0.8636666536331177, 0.8616666793823242, 0.8659999966621399, 0.862333357334137, 0.8683333396911621, 0.8663333058357239, 0.871999979019165, 0.8673333525657654, 0.8763333559036255, 0.878000020980835, 0.8756666779518127, 0.878000020980835, 0.8756666779518127, 0.8756666779518127, 0.8790000081062317, 0.8776666522026062, 0.8809999823570251, 0.8813333511352539, 0.8833333253860474, 0.8796666860580444, 0.8826666474342346, 0.8826666474342346, 0.8823333382606506, 0.8830000162124634]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8611428737640381, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.22294282913208, 1.868560552597046, 1.3940190076828003, 1.101419448852539, 0.9509002566337585, 0.8511152267456055, 0.7911097407341003, 0.7396897673606873, 0.7047983407974243, 0.6782829165458679, 0.6477072834968567, 0.6260616779327393, 0.6126939654350281, 0.5966276526451111, 0.5860615968704224, 0.56463623046875, 0.5440170764923096, 0.5399953126907349, 0.527147650718689, 0.5166062712669373, 0.5012610554695129, 0.4927779734134674, 0.474208801984787, 0.47938284277915955, 0.4680202007293701, 0.46339941024780273, 0.44931188225746155, 0.44284114241600037, 0.44053247570991516, 0.4261470437049866, 0.4244494140148163, 0.4180382192134857, 0.4064779281616211, 0.4072993993759155, 0.39616847038269043, 0.3988294303417206, 0.3971482813358307, 0.38758519291877747, 0.3744026720523834], "accuracy": [0.2755250334739685, 0.490159809589386, 0.5639941692352295, 0.6172236204147339, 0.6571126580238342, 0.6951525807380676, 0.7119271159172058, 0.7329282760620117, 0.7430986762046814, 0.7535332441329956, 0.7625148296356201, 0.7740060687065125, 0.7770439982414246, 0.7876105904579163, 0.7860256433486938, 0.7997622489929199, 0.8035926818847656, 0.8049134612083435, 0.8145555257797241, 0.8146876096725464, 0.8240655064582825, 0.8309338092803955, 0.8342359066009521, 0.8297450542449951, 0.8327829837799072, 0.8370096683502197, 0.8355567455291748, 0.8441421389579773, 0.847840428352356, 0.8469158411026001, 0.8514066934585571, 0.8502179384231567, 0.8577466607093811, 0.857218325138092, 0.8562937378883362, 0.8552370667457581, 0.858671247959137, 0.8632941246032715, 0.8706908226013184], "val_loss": [2.0378308296203613, 1.5107861757278442, 1.0362629890441895, 0.824289858341217, 0.7358473539352417, 0.6771177649497986, 0.6352816820144653, 0.5986452102661133, 0.5745453238487244, 0.5511640310287476, 0.5367674827575684, 0.5236524343490601, 0.5068149566650391, 0.4984318017959595, 0.4858566224575043, 0.4802268147468567, 0.4678064286708832, 0.4563298225402832, 0.4545963406562805, 0.44104379415512085, 0.4389244019985199, 0.4270419478416443, 0.42330774664878845, 0.4199987053871155, 0.41894152760505676, 0.414289265871048, 0.4096945524215698, 0.40671709179878235, 0.4018740653991699, 0.4017592668533325, 0.39752522110939026, 0.3918857276439667, 0.38675937056541443, 0.38595858216285706, 0.38639795780181885, 0.38231104612350464, 0.3852863311767578, 0.3764282763004303, 0.3760406970977783], "val_accuracy": [0.5253333449363708, 0.671999990940094, 0.6880000233650208, 0.7139999866485596, 0.7323333621025085, 0.7593333125114441, 0.7720000147819519, 0.7870000004768372, 0.7923333048820496, 0.800000011920929, 0.8103333115577698, 0.8109999895095825, 0.8216666579246521, 0.8303333520889282, 0.8263333439826965, 0.8289999961853027, 0.8343333601951599, 0.8376666903495789, 0.8423333168029785, 0.8450000286102295, 0.8500000238418579, 0.8523333072662354, 0.8543333411216736, 0.8546666502952576, 0.8523333072662354, 0.8576666712760925, 0.8550000190734863, 0.8560000061988831, 0.8569999933242798, 0.8546666502952576, 0.8600000143051147, 0.8633333444595337, 0.8650000095367432, 0.8663333058357239, 0.8640000224113464, 0.8659999966621399, 0.8650000095367432, 0.8653333187103271, 0.8663333058357239]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 2, 3, 0, 1, 5, 9, 2, 3], [0, 0, 5, 3, 5], [0, 58, 82], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8460000157356262, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(tf.math.subtract(tf.math.square(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.multiply(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), grad), grad))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2935824394226074, 2.1921613216400146, 1.7825491428375244, 1.3775107860565186, 1.0969730615615845, 0.9370691180229187, 0.8637639284133911, 0.8394572138786316, 0.7933056354522705, 0.7570656538009644, 0.705053448677063, 0.6878834366798401, 0.6456834673881531, 0.6302683353424072, 0.6188089847564697, 0.5945694446563721, 0.5864628553390503, 0.5799254775047302, 0.566299319267273, 0.5563942193984985, 0.538741409778595, 0.5273817181587219, 0.5171347260475159, 0.5106357336044312, 0.4926576018333435, 0.48431840538978577, 0.4809383749961853, 0.4591239094734192, 0.45088908076286316, 0.44227105379104614, 0.4349776804447174, 0.420781672000885, 0.4138635993003845, 0.4168325960636139, 0.4053887724876404, 0.3879835903644562, 0.3870730996131897, 0.38092756271362305, 0.37695571780204773, 0.38827645778656006, 0.3681790828704834, 0.3657888174057007], "accuracy": [0.12600713968276978, 0.3203011453151703, 0.4360058009624481, 0.5291243195533752, 0.6333377361297607, 0.656980574131012, 0.6885483860969543, 0.6922467350959778, 0.700171709060669, 0.7061154246330261, 0.7339849472045898, 0.741909921169281, 0.7432307600975037, 0.7569673657417297, 0.7584202885627747, 0.774270236492157, 0.7795535326004028, 0.7845727205276489, 0.7893276810646057, 0.7913089394569397, 0.7955356240272522, 0.7957997918128967, 0.8047813773155212, 0.8098005652427673, 0.8129705190658569, 0.821820080280304, 0.8231409192085266, 0.8247259259223938, 0.8265751004219055, 0.8317263126373291, 0.8359529972076416, 0.845859169960022, 0.8474441766738892, 0.8490291833877563, 0.8459912538528442, 0.852331280708313, 0.857218325138092, 0.8511425256729126, 0.8555012345314026, 0.8588033318519592, 0.8585391640663147, 0.8568220734596252], "val_loss": [2.2475855350494385, 2.0253918170928955, 1.1508897542953491, 0.856160581111908, 0.7596151232719421, 0.7225754261016846, 0.664975643157959, 0.6506189703941345, 0.6515836715698242, 0.6071511507034302, 0.5971493124961853, 0.566884458065033, 0.5509585738182068, 0.5356376767158508, 0.5202611088752747, 0.503230631351471, 0.49115225672721863, 0.49112915992736816, 0.4915996789932251, 0.47979122400283813, 0.4738326370716095, 0.46258530020713806, 0.4558025002479553, 0.44987305998802185, 0.4412376284599304, 0.4368390440940857, 0.4279918670654297, 0.42782872915267944, 0.41931605339050293, 0.4223727881908417, 0.42064952850341797, 0.4246147871017456, 0.41408243775367737, 0.4088420271873474, 0.4087691605091095, 0.4200565218925476, 0.3955884575843811, 0.39733263850212097, 0.41257405281066895, 0.40926018357276917, 0.3997964560985565, 0.4034654498100281], "val_accuracy": [0.42233332991600037, 0.4830000102519989, 0.6493333578109741, 0.6926666498184204, 0.7279999852180481, 0.7363333106040955, 0.746999979019165, 0.7590000033378601, 0.7556666731834412, 0.7649999856948853, 0.765666663646698, 0.7636666893959045, 0.7910000085830688, 0.7973333597183228, 0.8046666383743286, 0.8006666898727417, 0.8086666464805603, 0.815666675567627, 0.8143333196640015, 0.812666654586792, 0.8180000185966492, 0.8230000138282776, 0.8303333520889282, 0.8373333215713501, 0.8373333215713501, 0.8379999995231628, 0.846666693687439, 0.8450000286102295, 0.8453333377838135, 0.8479999899864197, 0.8523333072662354, 0.8510000109672546, 0.8539999723434448, 0.8546666502952576, 0.8560000061988831, 0.862333357334137, 0.8650000095367432, 0.8573333621025085, 0.859000027179718, 0.8569999933242798, 0.8543333411216736, 0.8576666712760925]}, "mapping_values": [1, 10, 5, 5, 3, 14, 9, 5, 3, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 1, 0, 0, 1, 1, 1], [0, 3, 2, 1], [0, 4, 6, 3], [0], [1], [0], [2], [0]], "fitness": -0.817714273929596, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(grad, grad), sigma))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.6211029291152954, 0.8328229188919067, 0.6497766375541687, 0.6097517609596252, 0.5676050782203674, 0.5351822972297668, 0.5257339477539062, 0.5277722477912903, 0.4804697036743164, 0.46249547600746155, 0.4427032172679901, 0.44281211495399475, 0.4367098808288574, 0.4315791428089142, 0.43333888053894043, 0.4692067503929138, 0.44588327407836914, 0.43665754795074463], "accuracy": [0.4651961326599121, 0.6960771083831787, 0.7640998363494873, 0.7729493975639343, 0.7927618622779846, 0.8050455451011658, 0.8062343001365662, 0.8072909712791443, 0.8248580098152161, 0.830669641494751, 0.835160493850708, 0.8309338092803955, 0.8388587832450867, 0.844010055065155, 0.8496896028518677, 0.8352925777435303, 0.8454629778862, 0.8495575189590454], "val_loss": [0.8262591361999512, 0.605673611164093, 0.5710967779159546, 0.526843249797821, 0.5090067386627197, 0.5470178723335266, 0.5265222191810608, 0.518062174320221, 0.5394603610038757, 0.5549451112747192, 0.5405596494674683, 0.5233986973762512, 0.5095811486244202, 0.5354636311531067, 0.5264221429824829, 0.5898203253746033, 0.6419627070426941, 0.6290467381477356], "val_accuracy": [0.7036666870117188, 0.7826666831970215, 0.7856666445732117, 0.7993333339691162, 0.812666654586792, 0.8066666722297668, 0.8080000281333923, 0.8263333439826965, 0.8173333406448364, 0.8326666951179504, 0.8266666531562805, 0.8293333053588867, 0.846666693687439, 0.8410000205039978, 0.8429999947547913, 0.8286666870117188, 0.8443333506584167, 0.8333333134651184]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [8, 2, 3, 0, 3], [0, 1, 0, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [52, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 5, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 4, 3, 0, 0, 3, 2, 2, 0], [16, 99, 96, 17, 61, 1]], "fitness": -0.10971428453922272, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 1, 0, 1, 1, 6, 3, 3, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), grad)", "other_info": {"loss": [20036196.0, 22477562.0, 22499562.0, 22450144.0, 23009734.0, 22550060.0], "accuracy": [0.10434553027153015, 0.10870426893234253, 0.1072513535618782, 0.10606260597705841, 0.09985470771789551, 0.1026284471154213], "val_loss": [17888894.0, 17888864.0, 17888814.0, 17888810.0, 17888796.0, 17888808.0], "val_accuracy": [0.10833333432674408, 0.10833333432674408, 0.10833333432674408, 0.10833333432674408, 0.10833333432674408, 0.10833333432674408]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 2, 2], [0, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 4], [2, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [6, 3, 2, 6, 8, 1, 4, 1, 1, 2, 8, 7, 1, 4], [0, 0, 0, 3, 0, 0, 1, 4, 2, 0, 7, 7, 7], [45, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(beta, beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), alpha)))), tf.math.add(tf.math.sqrt(tf.math.add(grad, beta)), tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad))), tf.math.pow(grad, grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}, "mapping_values": [1, 6, 3, 3, 2, 6, 3, 3, 1, 2, 1, 1, 1, 27, 14, 13, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [1, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 2, 3, 0, 3, 6], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [21, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3035778999328613, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}, "mapping_values": [1, 9, 5, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 5, 2, 3, 3], "tree_depth": 11}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 4], [1, 2, 0, 0], [16, 16], [0, 1], [0], [0], [13], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 0, 4, 1, 4, 2, 8], [2, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 7, 4, 3, 1, 2, 1, 1, 1, 11, 6, 5, 3], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(grad, alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.negative(sigma)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3099074363708496, 2.310621500015259, 2.3099801540374756, 2.3098862171173096, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09391097724437714, 0.08981640636920929, 0.08942015469074249, 0.09166556596755981, 0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3082799911499023, 2.308286190032959, 2.308290719985962, 2.3044650554656982, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09466666728258133, 0.09433333575725555, 0.09466666728258133, 0.09733333438634872, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}]