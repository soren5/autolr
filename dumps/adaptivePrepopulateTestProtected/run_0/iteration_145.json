[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8785714507102966, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.22385311126709, 1.8689895868301392, 1.3921784162521362, 1.09282648563385, 0.943203330039978, 0.8380605578422546, 0.7783129811286926, 0.7317649722099304, 0.697516679763794, 0.6667935848236084, 0.6370715498924255, 0.6119930148124695, 0.597540020942688, 0.585638165473938, 0.5669749975204468, 0.5510876774787903, 0.5321505069732666, 0.528533399105072, 0.5092916488647461, 0.5203198194503784, 0.49983617663383484, 0.48847419023513794, 0.48181167244911194, 0.46785861253738403, 0.4670261740684509, 0.4507957398891449, 0.44654130935668945, 0.4353342354297638, 0.42720916867256165, 0.4178202748298645, 0.4137081205844879, 0.4128495752811432, 0.417216032743454, 0.39360734820365906, 0.39136654138565063, 0.3920917809009552, 0.3843253552913666, 0.3787577748298645, 0.36371058225631714, 0.35812604427337646, 0.36053144931793213, 0.3547873795032501, 0.3530988097190857, 0.3457549214363098, 0.3456178307533264, 0.33321312069892883, 0.33248311281204224, 0.3293883204460144, 0.3254311978816986, 0.31505241990089417, 0.3130646049976349, 0.30993208289146423, 0.3013964593410492, 0.2993669807910919, 0.2997386157512665, 0.29056525230407715, 0.2877940833568573, 0.29028749465942383, 0.28097987174987793, 0.28064799308776855, 0.2704039216041565, 0.268941193819046, 0.26596739888191223, 0.26158997416496277, 0.2584567368030548, 0.25905969738960266, 0.25384601950645447, 0.24113249778747559, 0.24394433200359344, 0.2416629046201706, 0.24062906205654144, 0.2293824404478073, 0.22863131761550903, 0.2209962159395218, 0.22504355013370514], "accuracy": [0.2763175368309021, 0.4807819426059723, 0.5597675442695618, 0.6222427487373352, 0.6719059348106384, 0.698190450668335, 0.7252674698829651, 0.7397965788841248, 0.748778223991394, 0.7617223858833313, 0.7697794437408447, 0.7804781198501587, 0.7837802171707153, 0.7882710099220276, 0.7976489067077637, 0.806630551815033, 0.8121780753135681, 0.8109893202781677, 0.8157442808151245, 0.8182538747787476, 0.822348415851593, 0.8245938420295715, 0.8285563588142395, 0.835160493850708, 0.8368775844573975, 0.8433496356010437, 0.844010055065155, 0.844010055065155, 0.8514066934585571, 0.8512746095657349, 0.8576145768165588, 0.8514066934585571, 0.8527275323867798, 0.8625016212463379, 0.863029956817627, 0.8595958352088928, 0.8627657890319824, 0.863029956817627, 0.8713511824607849, 0.8728041052818298, 0.8733324408531189, 0.8746532797813416, 0.8721436858177185, 0.8745211958885193, 0.8758420348167419, 0.8816536664962769, 0.8799365758895874, 0.8835028409957886, 0.8845595121383667, 0.8908994793891907, 0.8902390599250793, 0.8873332738876343, 0.8928807377815247, 0.8928807377815247, 0.8918240666389465, 0.8949940800666809, 0.8960506916046143, 0.8957865834236145, 0.8982961177825928, 0.9005415439605713, 0.9022586345672607, 0.902390718460083, 0.9038436412811279, 0.9063531756401062, 0.901862382888794, 0.9063531756401062, 0.9083344340324402, 0.9126931428909302, 0.9105798602104187, 0.9157310724258423, 0.910711944103241, 0.9126931428909302, 0.9167877435684204, 0.9220710396766663, 0.9181085824966431], "val_loss": [2.0362961292266846, 1.5109721422195435, 1.0366545915603638, 0.8216940760612488, 0.7334108352661133, 0.6752658486366272, 0.6272311210632324, 0.5901768207550049, 0.565755307674408, 0.5454519987106323, 0.5303096771240234, 0.5078737735748291, 0.49619564414024353, 0.4870852828025818, 0.477031409740448, 0.46416130661964417, 0.45332321524620056, 0.45065897703170776, 0.4499213993549347, 0.43400630354881287, 0.42278340458869934, 0.42549237608909607, 0.4191504716873169, 0.406779408454895, 0.4038170576095581, 0.39954128861427307, 0.39287909865379333, 0.386243611574173, 0.3859941065311432, 0.38023167848587036, 0.3832986652851105, 0.38317835330963135, 0.37083789706230164, 0.37188199162483215, 0.3707095682621002, 0.36467626690864563, 0.35694506764411926, 0.3572940230369568, 0.35267552733421326, 0.35352417826652527, 0.34998568892478943, 0.3500393331050873, 0.3457832932472229, 0.3445078134536743, 0.34039610624313354, 0.3432251811027527, 0.3378094434738159, 0.3373914062976837, 0.33233195543289185, 0.33655405044555664, 0.3316599130630493, 0.3272864520549774, 0.3274107575416565, 0.3278765380382538, 0.3250201344490051, 0.32743147015571594, 0.3283940255641937, 0.3233192265033722, 0.32683950662612915, 0.32519635558128357, 0.3187567889690399, 0.3262876868247986, 0.317158967256546, 0.3196517527103424, 0.31830424070358276, 0.31782957911491394, 0.3168559968471527, 0.31806766986846924, 0.3201530873775482, 0.3147178888320923, 0.31271007657051086, 0.3128334879875183, 0.3134373426437378, 0.3189963698387146, 0.3166082501411438], "val_accuracy": [0.49900001287460327, 0.6556666493415833, 0.684333324432373, 0.7089999914169312, 0.7406666874885559, 0.7543333172798157, 0.765333354473114, 0.7803333401679993, 0.7916666865348816, 0.8043333292007446, 0.7990000247955322, 0.8119999766349792, 0.8173333406448364, 0.8199999928474426, 0.8276666402816772, 0.8273333311080933, 0.8343333601951599, 0.8306666612625122, 0.8356666564941406, 0.8433333039283752, 0.8483333587646484, 0.8420000076293945, 0.847000002861023, 0.8500000238418579, 0.8489999771118164, 0.8513333201408386, 0.8550000190734863, 0.8566666841506958, 0.8579999804496765, 0.859666645526886, 0.8613333106040955, 0.8569999933242798, 0.8640000224113464, 0.8619999885559082, 0.8600000143051147, 0.862666666507721, 0.8683333396911621, 0.8676666617393494, 0.8709999918937683, 0.8683333396911621, 0.8703333139419556, 0.8696666955947876, 0.8709999918937683, 0.8740000128746033, 0.875, 0.8730000257492065, 0.8769999742507935, 0.8726666569709778, 0.8790000081062317, 0.878000020980835, 0.8776666522026062, 0.8799999952316284, 0.8790000081062317, 0.8813333511352539, 0.8826666474342346, 0.8776666522026062, 0.8809999823570251, 0.8830000162124634, 0.8796666860580444, 0.8823333382606506, 0.8836666941642761, 0.8813333511352539, 0.8849999904632568, 0.8863333463668823, 0.8889999985694885, 0.8830000162124634, 0.8853333592414856, 0.8856666684150696, 0.8883333206176758, 0.8899999856948853, 0.8856666684150696, 0.8896666765213013, 0.8880000114440918, 0.8866666555404663, 0.8853333592414856]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8694285750389099, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2220041751861572, 1.8716797828674316, 1.3997626304626465, 1.1042137145996094, 0.9400181770324707, 0.8552476167678833, 0.7766558527946472, 0.728121817111969, 0.6952661871910095, 0.6664553284645081, 0.6386894583702087, 0.614355742931366, 0.5936909317970276, 0.5689643621444702, 0.5640953779220581, 0.5544922947883606, 0.5451840162277222, 0.5233408808708191, 0.5079954862594604, 0.4988621771335602, 0.48880723118782043, 0.4830034673213959, 0.4717932939529419, 0.46426284313201904, 0.4511847496032715, 0.4425336718559265, 0.4374625086784363, 0.42427968978881836, 0.4124837815761566, 0.4220253527164459, 0.41253501176834106, 0.4035061001777649, 0.3993486762046814, 0.3938291370868683, 0.3814551532268524, 0.37815767526626587, 0.36903297901153564, 0.37120556831359863, 0.36567845940589905, 0.36225929856300354, 0.3535368740558624, 0.35309338569641113, 0.337925523519516, 0.3383849263191223], "accuracy": [0.27301543951034546, 0.48487651348114014, 0.5669000148773193, 0.6232994198799133, 0.6642451286315918, 0.6910579800605774, 0.722229540348053, 0.7358341217041016, 0.7514199018478394, 0.7585523724555969, 0.7700436115264893, 0.776251494884491, 0.7878747582435608, 0.8006868362426758, 0.8006868362426758, 0.8024039268493652, 0.8034605979919434, 0.8146876096725464, 0.8227446675300598, 0.828820526599884, 0.8314621448516846, 0.8337075710296631, 0.8362171649932861, 0.842028796672821, 0.8393871188163757, 0.8425571322441101, 0.8442742228507996, 0.8514066934585571, 0.8540483713150024, 0.8519350290298462, 0.8565579056739807, 0.8615770936012268, 0.857218325138092, 0.8619733452796936, 0.8683133125305176, 0.8672566413879395, 0.8692378997802734, 0.8702945709228516, 0.8733324408531189, 0.8688416481018066, 0.8770307898521423, 0.8737286925315857, 0.8795403242111206, 0.8766345381736755], "val_loss": [2.034301280975342, 1.5102276802062988, 1.0302401781082153, 0.8202376961708069, 0.7220537662506104, 0.6674091219902039, 0.6219648718833923, 0.5846255421638489, 0.5669524669647217, 0.539900004863739, 0.5239170789718628, 0.5082672238349915, 0.4940904974937439, 0.4813481569290161, 0.4754941463470459, 0.4703865051269531, 0.4560720920562744, 0.45246198773384094, 0.4385782778263092, 0.43995702266693115, 0.4330337345600128, 0.4241388440132141, 0.42098477482795715, 0.40927985310554504, 0.4050402045249939, 0.41203832626342773, 0.397433340549469, 0.39287295937538147, 0.390703946352005, 0.39216718077659607, 0.3879874646663666, 0.38292261958122253, 0.37436044216156006, 0.3749428987503052, 0.3732794523239136, 0.36859506368637085, 0.36637476086616516, 0.3678286075592041, 0.36601758003234863, 0.3632388114929199, 0.35725635290145874, 0.36086905002593994, 0.35646504163742065, 0.358356773853302], "val_accuracy": [0.5483333468437195, 0.6456666588783264, 0.6833333373069763, 0.7070000171661377, 0.7386666536331177, 0.7549999952316284, 0.7710000276565552, 0.7870000004768372, 0.7820000052452087, 0.8033333420753479, 0.8043333292007446, 0.809333324432373, 0.8140000104904175, 0.8206666707992554, 0.8199999928474426, 0.8236666917800903, 0.8303333520889282, 0.8246666789054871, 0.8343333601951599, 0.8323333263397217, 0.8363333344459534, 0.8386666774749756, 0.8393333554267883, 0.8423333168029785, 0.8456666469573975, 0.8433333039283752, 0.8483333587646484, 0.8513333201408386, 0.8516666889190674, 0.8463333249092102, 0.8506666421890259, 0.8479999899864197, 0.8529999852180481, 0.8536666631698608, 0.8583333492279053, 0.8586666584014893, 0.8576666712760925, 0.8536666631698608, 0.862666666507721, 0.862666666507721, 0.8619999885559082, 0.8556666374206543, 0.8610000014305115, 0.8613333106040955]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 1], [0], [0], [0], [0, 0, 1, 1], [0, 3], [0, 1], [0], [0, 1], [0], [1], [0]], "fitness": -0.8528571724891663, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2916407585144043, 2.185152530670166, 1.7634146213531494, 1.340085506439209, 1.0535588264465332, 0.9183690547943115, 0.8370644450187683, 0.8243274688720703, 0.7663363218307495, 0.7338080406188965, 0.6895943284034729, 0.6736325621604919, 0.6370844841003418, 0.6274367570877075, 0.5965743064880371, 0.5855469703674316, 0.5717161297798157, 0.5565177202224731, 0.5491620898246765, 0.5309774279594421, 0.5176835060119629, 0.5087710618972778, 0.49931207299232483, 0.49497324228286743, 0.4825799763202667, 0.4831027388572693, 0.4611603617668152, 0.4491948187351227, 0.44027239084243774, 0.43132105469703674, 0.42853718996047974, 0.42584705352783203, 0.4125838875770569, 0.41349032521247864, 0.3970317542552948, 0.39198437333106995, 0.3710106909275055, 0.3677505552768707, 0.3848123848438263, 0.37500858306884766, 0.3662043809890747, 0.35463622212409973, 0.33949148654937744, 0.3558041751384735, 0.352047860622406, 0.34335464239120483, 0.32531335949897766, 0.3175744414329529, 0.32362833619117737, 0.3240373730659485, 0.31588873267173767, 0.3090045154094696, 0.29691657423973083, 0.3024408221244812, 0.2997224032878876, 0.29997116327285767], "accuracy": [0.13300752639770508, 0.3267732262611389, 0.4377228915691376, 0.5521067380905151, 0.6395456194877625, 0.6592260003089905, 0.6940959095954895, 0.6972658634185791, 0.7119271159172058, 0.7166820764541626, 0.7317395210266113, 0.7446836829185486, 0.7563069462776184, 0.7576277852058411, 0.7652885913848877, 0.7677981853485107, 0.7800818681716919, 0.7854973077774048, 0.7852331399917603, 0.7918372750282288, 0.7973847389221191, 0.8012151718139648, 0.8064984679222107, 0.8095363974571228, 0.8083476424217224, 0.8171972036361694, 0.8226125836372375, 0.8280280232429504, 0.829216718673706, 0.8337075710296631, 0.8385946154594421, 0.8358209133148193, 0.8379341959953308, 0.8455950617790222, 0.8500858545303345, 0.8527275323867798, 0.8510104417800903, 0.8565579056739807, 0.8516708612442017, 0.859199583530426, 0.8607845902442932, 0.8621054291725159, 0.8728041052818298, 0.8573504090309143, 0.8631620407104492, 0.8647470474243164, 0.8795403242111206, 0.8757099509239197, 0.874389111995697, 0.8702945709228516, 0.8696341514587402, 0.8825782537460327, 0.8833707571029663, 0.8824461698532104, 0.8865407705307007, 0.8792761564254761], "val_loss": [2.246429920196533, 2.010619878768921, 1.1283810138702393, 0.8909165263175964, 0.7958514094352722, 0.7155575156211853, 0.7107140421867371, 0.6724037528038025, 0.6537874341011047, 0.609144389629364, 0.5740822553634644, 0.5550866723060608, 0.538307785987854, 0.5311018228530884, 0.5299152135848999, 0.5151625275611877, 0.5094941258430481, 0.5153231620788574, 0.5014463663101196, 0.48633861541748047, 0.47861263155937195, 0.47541487216949463, 0.47276461124420166, 0.4690326750278473, 0.4568341374397278, 0.4595579504966736, 0.4433959424495697, 0.44528213143348694, 0.4509561359882355, 0.4363122582435608, 0.4295864999294281, 0.4273746609687805, 0.4289349317550659, 0.4264765679836273, 0.42213305830955505, 0.42705485224723816, 0.43189823627471924, 0.4239645302295685, 0.4311463534832001, 0.43354830145835876, 0.44393521547317505, 0.4325301945209503, 0.4314099848270416, 0.4345133602619171, 0.44688937067985535, 0.4419313967227936, 0.4232431948184967, 0.43580323457717896, 0.4444739520549774, 0.4285522997379303, 0.4317191243171692, 0.4439844489097595, 0.4264579117298126, 0.4246048927307129, 0.4231698513031006, 0.43511417508125305], "val_accuracy": [0.43533334136009216, 0.46000000834465027, 0.6493333578109741, 0.6933333277702332, 0.7093333601951599, 0.7239999771118164, 0.7483333349227905, 0.7323333621025085, 0.7580000162124634, 0.7643333077430725, 0.765333354473114, 0.781333327293396, 0.7870000004768372, 0.7873333096504211, 0.7860000133514404, 0.8019999861717224, 0.8013333082199097, 0.7979999780654907, 0.8029999732971191, 0.812666654586792, 0.8213333487510681, 0.8296666741371155, 0.8230000138282776, 0.8193333148956299, 0.8309999704360962, 0.8303333520889282, 0.8360000252723694, 0.8346666693687439, 0.8399999737739563, 0.8399999737739563, 0.8456666469573975, 0.8493333458900452, 0.8536666631698608, 0.8529999852180481, 0.8533333539962769, 0.8539999723434448, 0.8519999980926514, 0.8550000190734863, 0.859666645526886, 0.8579999804496765, 0.8583333492279053, 0.8640000224113464, 0.8669999837875366, 0.8663333058357239, 0.8633333444595337, 0.862666666507721, 0.8653333187103271, 0.8676666617393494, 0.8603333234786987, 0.8633333444595337, 0.8730000257492065, 0.8663333058357239, 0.8669999837875366, 0.8659999966621399, 0.8686666488647461, 0.8683333396911621]}, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 4, 2, 2, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8265714049339294, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5649291276931763, 0.8384234309196472, 0.6450362801551819, 0.5897963643074036, 0.5422856211662292, 0.5148943662643433, 0.48760074377059937, 0.47322770953178406, 0.49647462368011475, 0.49570152163505554, 0.46807003021240234, 0.4818437397480011, 0.4692240059375763, 0.46495339274406433, 0.47082626819610596], "accuracy": [0.4761590361595154, 0.7045304179191589, 0.7656848430633545, 0.7819310426712036, 0.7985734939575195, 0.8137630224227905, 0.8234050869941711, 0.8245938420295715, 0.8293488025665283, 0.8222163319587708, 0.8339717388153076, 0.8339717388153076, 0.8416325449943542, 0.8368775844573975, 0.8392550349235535], "val_loss": [0.8759863376617432, 0.5699108242988586, 0.5047852993011475, 0.4912518858909607, 0.4728779196739197, 0.46140047907829285, 0.4442242980003357, 0.46545785665512085, 0.4831409156322479, 0.4705222249031067, 0.45314523577690125, 0.5007306337356567, 0.4841540455818176, 0.4338352382183075, 0.5159689784049988], "val_accuracy": [0.6996666789054871, 0.7973333597183228, 0.8173333406448364, 0.8196666836738586, 0.828000009059906, 0.8373333215713501, 0.840666651725769, 0.8343333601951599, 0.8450000286102295, 0.859000027179718, 0.8426666855812073, 0.8479999899864197, 0.8486666679382324, 0.8450000286102295, 0.8420000076293945]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 1, 9, 2, 3, 8, 0, 2, 5], [2, 1, 0, 2, 2, 0, 0], [39, 39, 66, 13], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 2, 2, 4, 6, 5, 1, 5, 6, 3, 0, 8], [0, 2, 0, 3, 2, 5, 3, 2], [16, 8], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 3, 3, 9, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 4, 4, 1, 2, 0], [16, 99, 59, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 13, 7, 4, 20, 12, 8, 2, 2, 1, 1, 1, 16, 9, 7, 5], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), tf.math.multiply(tf.math.subtract(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.multiply(grad, tf.math.sqrt(tf.math.negative(tf.math.add(grad, tf.math.square(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.divide_no_nan(tf.math.square(tf.math.subtract(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.negative(tf.math.sqrt(beta))), grad)))), grad)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 3], [0, 1, 0, 2, 3], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1], [0, 2, 2, 0, 3, 5, 7, 6, 0], [0, 2, 3, 3, 4, 0], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 4, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 2, 1, 2, 0], [94, 99, 96, 99, 61, 99]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 15, 9, 6, 2, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.add(grad, grad)), tf.math.divide_no_nan(tf.math.negative(grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(beta, alpha)))", "other_info": {"loss": [2.3034684658050537, 2.302645206451416, 2.302645206451416, 2.302645206451416, 2.302645206451416, 2.302645206451416], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025548458099365, 2.3025548458099365, 2.3025548458099365, 2.3025548458099365, 2.3025548458099365, 2.3025548458099365], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 4, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 5, 1, 1, 4, 2, 6], [0, 0, 4, 3, 4, 0, 3, 1, 2, 0], [16, 63, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.square(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(grad, sigma))), tf.math.subtract(grad, tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.add(alpha, tf.math.divide_no_nan(beta, tf.constant(1.0, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 0, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 0, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [4], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 2], [4, 0, 4, 3, 0, 0, 3, 1, 2, 0], [16, 5, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 8, 5, 3, 2, 2, 1, 1, 0, 16, 8, 8, 3], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.subtract(sigma, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}]