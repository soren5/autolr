[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8805714249610901, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585988998413, 1.8659464120864868, 1.3939106464385986, 1.0966308116912842, 0.9349022507667542, 0.8419743776321411, 0.7695197463035583, 0.729751467704773, 0.6897091865539551, 0.6576535105705261, 0.6359990835189819, 0.6094067096710205, 0.589935839176178, 0.5596274733543396, 0.5528120398521423, 0.5393894910812378, 0.5281672477722168, 0.5202223062515259, 0.5057564377784729, 0.5040625333786011, 0.48261573910713196, 0.46983885765075684, 0.4574008584022522, 0.454408198595047, 0.4424269199371338, 0.42842501401901245, 0.42894208431243896, 0.42616719007492065, 0.41881483793258667, 0.4155913293361664, 0.4008829891681671, 0.39691162109375, 0.38997870683670044, 0.38351768255233765, 0.37681254744529724, 0.3729562759399414, 0.36148902773857117, 0.362969309091568, 0.3563940227031708, 0.3505782186985016, 0.35241496562957764, 0.34010687470436096, 0.3387279510498047, 0.3343537747859955, 0.3285624086856842, 0.32427793741226196, 0.319965660572052, 0.3122166097164154, 0.30889007449150085, 0.3045063316822052], "accuracy": [0.2694492042064667, 0.48870691657066345, 0.568220853805542, 0.6156386137008667, 0.6696605682373047, 0.6963412761688232, 0.7223616242408752, 0.7312111854553223, 0.750759482383728, 0.7600052952766418, 0.7696473598480225, 0.7761194109916687, 0.787082314491272, 0.7985734939575195, 0.7980451583862305, 0.8045172095298767, 0.8121780753135681, 0.8125742673873901, 0.8178576231002808, 0.8191784620285034, 0.8251221776008606, 0.8322546482086182, 0.8356888294219971, 0.8359529972076416, 0.8389908671379089, 0.846387505531311, 0.8451988101005554, 0.8454629778862, 0.848368763923645, 0.8531237840652466, 0.8598600029945374, 0.854708731174469, 0.8605204224586487, 0.8609166741371155, 0.86553955078125, 0.8639545440673828, 0.8689737319946289, 0.8706908226013184, 0.873860776424408, 0.872407853603363, 0.8710870146751404, 0.8776912093162537, 0.8792761564254761, 0.8824461698532104, 0.882710337638855, 0.8811253309249878, 0.887597382068634, 0.887597382068634, 0.8906353116035461, 0.8911636471748352], "val_loss": [2.0369274616241455, 1.5092171430587769, 1.0378726720809937, 0.8372371196746826, 0.7430018186569214, 0.693951427936554, 0.6459794044494629, 0.6065753698348999, 0.5836796760559082, 0.5591391324996948, 0.5475665926933289, 0.5286199450492859, 0.5111508965492249, 0.49807658791542053, 0.4888598918914795, 0.4807276725769043, 0.4732670187950134, 0.46291399002075195, 0.4651739001274109, 0.44972753524780273, 0.44051307439804077, 0.4300120174884796, 0.42833927273750305, 0.4226953983306885, 0.42076465487480164, 0.41008231043815613, 0.40701472759246826, 0.4087570011615753, 0.3987274467945099, 0.39754143357276917, 0.3908216655254364, 0.39351579546928406, 0.3876643180847168, 0.3835429251194, 0.3747929334640503, 0.37449854612350464, 0.3731365501880646, 0.3678072988986969, 0.3718084394931793, 0.3737613260746002, 0.36592888832092285, 0.3612542748451233, 0.3634853661060333, 0.3576800525188446, 0.35225361585617065, 0.35540124773979187, 0.35645702481269836, 0.3527815639972687, 0.3493586778640747, 0.349461168050766], "val_accuracy": [0.5453333258628845, 0.6666666865348816, 0.6899999976158142, 0.7136666774749756, 0.737666666507721, 0.7523333430290222, 0.765666663646698, 0.7816666960716248, 0.7886666655540466, 0.7976666688919067, 0.7953333258628845, 0.8090000152587891, 0.8193333148956299, 0.8209999799728394, 0.8233333230018616, 0.8309999704360962, 0.8243333101272583, 0.843666672706604, 0.8333333134651184, 0.840666651725769, 0.846666693687439, 0.8569999933242798, 0.8533333539962769, 0.8556666374206543, 0.8533333539962769, 0.8613333106040955, 0.8636666536331177, 0.8616666793823242, 0.8659999966621399, 0.862333357334137, 0.8683333396911621, 0.8663333058357239, 0.871999979019165, 0.8673333525657654, 0.8763333559036255, 0.878000020980835, 0.8756666779518127, 0.878000020980835, 0.8756666779518127, 0.8756666779518127, 0.8790000081062317, 0.8776666522026062, 0.8809999823570251, 0.8813333511352539, 0.8833333253860474, 0.8796666860580444, 0.8826666474342346, 0.8826666474342346, 0.8823333382606506, 0.8830000162124634]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8619999885559082, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2262144088745117, 1.8750958442687988, 1.407245397567749, 1.110870122909546, 0.9499592781066895, 0.841399610042572, 0.7892752289772034, 0.7355528473854065, 0.6965563893318176, 0.6633149981498718, 0.6316420435905457, 0.6213513612747192, 0.59517502784729, 0.5737184882164001, 0.5671389102935791, 0.5540734529495239, 0.5330186486244202, 0.5220769047737122, 0.5125194787979126, 0.505232572555542, 0.4887280762195587, 0.4754738509654999, 0.4705195426940918, 0.46376892924308777, 0.45365267992019653, 0.4421016275882721, 0.43071815371513367, 0.42348918318748474, 0.4244232475757599, 0.4185238778591156, 0.41237372159957886, 0.40169548988342285, 0.39573100209236145, 0.3919321894645691, 0.3867459297180176, 0.3806148171424866, 0.3788011074066162, 0.380209356546402, 0.36171722412109375, 0.3595799505710602, 0.35668784379959106, 0.3540773391723633, 0.34863924980163574, 0.34721696376800537, 0.338650643825531, 0.3327973783016205, 0.33290189504623413, 0.3209022283554077, 0.3258886933326721, 0.32026782631874084, 0.3040156960487366], "accuracy": [0.2677321434020996, 0.4939902126789093, 0.5635979175567627, 0.6065248847007751, 0.6593580842018127, 0.7016246318817139, 0.7174745798110962, 0.7296261787414551, 0.7469290494918823, 0.7607977986335754, 0.7683265209197998, 0.7732135653495789, 0.7798177003860474, 0.7887993454933167, 0.7889314293861389, 0.7987055778503418, 0.8084797263145447, 0.8108572363853455, 0.8146876096725464, 0.8148196935653687, 0.8274996876716614, 0.82683926820755, 0.8297450542449951, 0.8356888294219971, 0.8403117060661316, 0.8381983637809753, 0.8432175517082214, 0.8486329317092896, 0.8457271456718445, 0.8512746095657349, 0.8544445633888245, 0.8581429123878479, 0.8594637513160706, 0.8555012345314026, 0.8595958352088928, 0.8650112152099609, 0.863029956817627, 0.8638224601745605, 0.871879518032074, 0.8696341514587402, 0.8692378997802734, 0.8708229064941406, 0.8732003569602966, 0.8749174475669861, 0.8747853636741638, 0.8784837126731873, 0.8811253309249878, 0.8861445188522339, 0.8809932470321655, 0.883238673210144, 0.8899748921394348], "val_loss": [2.041877031326294, 1.5193572044372559, 1.0390063524246216, 0.8205593824386597, 0.7250009775161743, 0.6695157289505005, 0.6241570115089417, 0.5939620137214661, 0.5670197010040283, 0.5477795004844666, 0.5309661626815796, 0.5163851976394653, 0.5015428066253662, 0.48981061577796936, 0.4814222455024719, 0.46845027804374695, 0.4555129408836365, 0.45142748951911926, 0.4448777735233307, 0.4367717206478119, 0.4241160452365875, 0.42033806443214417, 0.41507089138031006, 0.4091777205467224, 0.40029874444007874, 0.39947980642318726, 0.39374569058418274, 0.3932665288448334, 0.3881354033946991, 0.3866974413394928, 0.3790854811668396, 0.3758549392223358, 0.3728823959827423, 0.3662709891796112, 0.36720868945121765, 0.36788514256477356, 0.3646423816680908, 0.3615163564682007, 0.35861310362815857, 0.3556590974330902, 0.35546088218688965, 0.35152962803840637, 0.3505856394767761, 0.3483728766441345, 0.3527134656906128, 0.347506582736969, 0.35069796442985535, 0.34262263774871826, 0.3464384377002716, 0.3484993577003479, 0.3382597267627716], "val_accuracy": [0.5556666851043701, 0.6676666736602783, 0.6903333067893982, 0.7139999866485596, 0.7413333058357239, 0.7689999938011169, 0.7743333578109741, 0.7816666960716248, 0.7950000166893005, 0.7996666431427002, 0.8113333582878113, 0.8183333277702332, 0.8133333325386047, 0.8196666836738586, 0.8333333134651184, 0.8386666774749756, 0.8423333168029785, 0.8346666693687439, 0.8413333296775818, 0.8523333072662354, 0.8529999852180481, 0.8550000190734863, 0.8566666841506958, 0.8603333234786987, 0.8636666536331177, 0.8619999885559082, 0.8643333315849304, 0.8663333058357239, 0.8703333139419556, 0.8673333525657654, 0.871999979019165, 0.8679999709129333, 0.8696666955947876, 0.874666690826416, 0.8740000128746033, 0.871999979019165, 0.874666690826416, 0.875333309173584, 0.8740000128746033, 0.8756666779518127, 0.8769999742507935, 0.8736666440963745, 0.8813333511352539, 0.8809999823570251, 0.8736666440963745, 0.8826666474342346, 0.8799999952316284, 0.8806666731834412, 0.8786666393280029, 0.8763333559036255, 0.8786666393280029]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0, 1, 1], [0, 0, 6], [0, 4], [0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 3, 8, 1, 6, 2, 2, 9], [0, 4, 4, 4, 4], [0, 90], [0, 1], [0], [1], [0]], "fitness": -0.8537142872810364, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.add(grad, grad)), tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2935595512390137, 2.18813419342041, 1.7681374549865723, 1.3379234075546265, 1.055602788925171, 0.917884886264801, 0.8430947661399841, 0.8187663555145264, 0.7664976716041565, 0.7503693699836731, 0.6980119347572327, 0.6737161874771118, 0.6494143605232239, 0.6262331008911133, 0.6132000088691711, 0.5998827219009399, 0.5705121159553528, 0.5633783340454102, 0.5491597652435303, 0.5477282404899597, 0.533039927482605, 0.5155177116394043, 0.5163144469261169, 0.5059422850608826, 0.48936447501182556, 0.4752114415168762, 0.47387292981147766, 0.45347294211387634, 0.4450967311859131, 0.4402024745941162, 0.4373561143875122, 0.42182767391204834, 0.4320649802684784, 0.41863206028938293, 0.4090944230556488, 0.40403684973716736, 0.39947035908699036, 0.3868020176887512, 0.37433016300201416, 0.37752941250801086, 0.36952653527259827, 0.35891449451446533, 0.35254186391830444, 0.3402754068374634, 0.34841373562812805, 0.35085394978523254, 0.3436630368232727, 0.32045090198516846], "accuracy": [0.12600713968276978, 0.33786818385124207, 0.4371945559978485, 0.5451063513755798, 0.6413947939872742, 0.6672830581665039, 0.6888125538825989, 0.7012283802032471, 0.7014925479888916, 0.7145687341690063, 0.7322678565979004, 0.7474573850631714, 0.7553823590278625, 0.7625148296356201, 0.7672698497772217, 0.7705719470977783, 0.7815347909927368, 0.7886672616004944, 0.793422281742096, 0.7935543656349182, 0.791441023349762, 0.802271842956543, 0.8012151718139648, 0.8062343001365662, 0.8125742673873901, 0.8232730031013489, 0.8177255392074585, 0.8277638554573059, 0.8260467648506165, 0.832650899887085, 0.8293488025665283, 0.839519202709198, 0.834632158279419, 0.8418967127799988, 0.8418967127799988, 0.8393871188163757, 0.843481719493866, 0.850350022315979, 0.8552370667457581, 0.8502179384231567, 0.8549728989601135, 0.8582749962806702, 0.8597279191017151, 0.8663320541381836, 0.8602562546730042, 0.8613129258155823, 0.8631620407104492, 0.8696341514587402], "val_loss": [2.24509596824646, 2.018310785293579, 1.145653486251831, 0.9275455474853516, 0.7862839102745056, 0.7165663242340088, 0.6903562545776367, 0.6786867380142212, 0.6624526977539062, 0.6329056620597839, 0.6007974147796631, 0.5836223363876343, 0.5681832432746887, 0.5548224449157715, 0.5423928499221802, 0.527213454246521, 0.5173404812812805, 0.5201728343963623, 0.5085529685020447, 0.5005632042884827, 0.4986371397972107, 0.49767327308654785, 0.4918217360973358, 0.48623722791671753, 0.4744241535663605, 0.46935969591140747, 0.4606701731681824, 0.4570525288581848, 0.45273542404174805, 0.4509170651435852, 0.4424056112766266, 0.44412851333618164, 0.4399358034133911, 0.43780744075775146, 0.4319992661476135, 0.43083682656288147, 0.4298078715801239, 0.4252566695213318, 0.422422856092453, 0.41461050510406494, 0.4172441363334656, 0.424743115901947, 0.42354199290275574, 0.4143928289413452, 0.41934773325920105, 0.4196917712688446, 0.41524431109428406, 0.4152390658855438], "val_accuracy": [0.40833333134651184, 0.4506666660308838, 0.6326666474342346, 0.6899999976158142, 0.6959999799728394, 0.7286666631698608, 0.75, 0.7319999933242798, 0.7559999823570251, 0.7620000243186951, 0.7696666717529297, 0.7776666879653931, 0.7833333611488342, 0.796999990940094, 0.7943333387374878, 0.7956666946411133, 0.8069999814033508, 0.8143333196640015, 0.812333345413208, 0.8073333501815796, 0.812666654586792, 0.8169999718666077, 0.8213333487510681, 0.8216666579246521, 0.8263333439826965, 0.828000009059906, 0.8293333053588867, 0.8326666951179504, 0.8363333344459534, 0.8410000205039978, 0.8453333377838135, 0.8413333296775818, 0.8443333506584167, 0.846666693687439, 0.8443333506584167, 0.8483333587646484, 0.8510000109672546, 0.8523333072662354, 0.8539999723434448, 0.8536666631698608, 0.859666645526886, 0.856333315372467, 0.8603333234786987, 0.8550000190734863, 0.8573333621025085, 0.859333336353302, 0.8569999933242798, 0.859333336353302]}, "mapping_values": [1, 10, 5, 5, 3, 5, 3, 2, 1, 13, 8, 5, 2, 2, 1, 1, 0], "tree_depth": 15}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8434285521507263, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.4988433122634888, 0.8006513118743896, 0.6879212856292725, 0.622801661491394, 0.5818178653717041, 0.5601205229759216, 0.515851616859436, 0.5242533087730408, 0.5323825478553772, 0.49562057852745056, 0.5070691704750061, 0.4694821834564209, 0.45679134130477905, 0.47234541177749634, 0.4693242013454437, 0.45354580879211426, 0.4541127383708954, 0.46831780672073364, 0.4778854250907898, 0.4455793499946594, 0.44407564401626587, 0.44905710220336914, 0.4465252459049225], "accuracy": [0.49451854825019836, 0.7194558382034302, 0.7469290494918823, 0.7774402499198914, 0.7869502305984497, 0.7993659973144531, 0.8125742673873901, 0.8108572363853455, 0.8075551390647888, 0.8277638554573059, 0.8267071843147278, 0.8304054737091064, 0.8322546482086182, 0.8317263126373291, 0.8310658931732178, 0.8459912538528442, 0.8396512866020203, 0.8459912538528442, 0.8430854678153992, 0.8391229510307312, 0.8516708612442017, 0.8391229510307312, 0.8453308939933777], "val_loss": [0.8134753704071045, 0.5987172722816467, 0.534710705280304, 0.5155998468399048, 0.5230086445808411, 0.48649927973747253, 0.4725494384765625, 0.5014947652816772, 0.45250365138053894, 0.5406258702278137, 0.4642321467399597, 0.5006514191627502, 0.4926097095012665, 0.5066483616828918, 0.49688220024108887, 0.4907451272010803, 0.5036213994026184, 0.6189633011817932, 0.5185899138450623, 0.5034849643707275, 0.5342011451721191, 0.5604764819145203, 0.5251160264015198], "val_accuracy": [0.7226666808128357, 0.777999997138977, 0.800000011920929, 0.8086666464805603, 0.8036666512489319, 0.8276666402816772, 0.8176666498184204, 0.8119999766349792, 0.8320000171661377, 0.8330000042915344, 0.8360000252723694, 0.8303333520889282, 0.8366666436195374, 0.8373333215713501, 0.8403333425521851, 0.8503333330154419, 0.8333333134651184, 0.8603333234786987, 0.8456666469573975, 0.8453333377838135, 0.8446666598320007, 0.8376666903495789, 0.847000002861023]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [85, 74], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 8], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 6, 5, 9, 3, 1, 4, 1, 4, 2, 8, 4, 9], [0, 1, 0, 3, 0, 0, 3, 3, 2, 0], [16, 23, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 11, 7, 4, 2, 2, 1, 1, 1, 21, 13, 8, 6], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.subtract(tf.math.pow(tf.math.subtract(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma), tf.math.sqrt(tf.math.pow(sigma, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 5, 3], [0, 0, 1, 0, 2], [28, 99, 27], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [9, 2, 3, 0, 3, 5], [0, 5, 3, 2], [16, 16], [0, 1], [0], [0], [0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 1, 6, 0, 9, 5, 3, 3, 5, 3, 4, 3, 7], [0, 6, 5, 4, 4, 0, 7, 1, 7, 2, 0, 6, 6, 2, 0, 1, 7], [0, 72, 20, 6, 26]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 1, 1, 0, 1, 2, 1, 1, 1, 39, 22, 17, 5], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.square(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(grad, grad))), tf.math.subtract(grad, tf.math.pow(tf.math.add(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), grad), tf.math.subtract(tf.math.divide_no_nan(alpha, grad), beta))))), tf.math.negative(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.multiply(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.square(grad), tf.math.multiply(grad, tf.math.pow(tf.math.multiply(beta, tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), alpha)), grad))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 2, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 9, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 92]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(grad, beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}, "mapping_values": [1, 2, 1, 1, 1, 6, 3, 3, 1, 2, 1, 1, 1, 14, 8, 6, 6], "tree_depth": 16}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 2, 3, 0, 3, 5, 0, 6, 0, 5, 1], [0, 2, 0, 1, 4, 5], [16, 16], [0, 0, 1], [0, 5], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [2, 3, 3, 6, 8, 1, 4, 1, 2, 2, 8, 4, 3, 8, 0, 7, 3, 8, 4, 0], [0, 4, 0, 3, 0, 0, 3, 1, 2, 4, 1, 1, 5, 5, 6], [16, 52, 96, 22, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 17, 11, 6, 2, 3, 2, 1, 1, 35, 20, 15, 4], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.negative(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(alpha))))), tf.math.square(tf.math.subtract(grad, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), tf.math.add(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), sigma), tf.math.sqrt(tf.math.pow(tf.math.multiply(alpha, beta), tf.math.sqrt(grad)))), alpha), tf.math.negative(tf.math.add(tf.math.multiply(alpha, tf.math.sqrt(grad)), tf.math.pow(tf.math.negative(grad), grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}]