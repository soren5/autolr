[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8785714507102966, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.22385311126709, 1.8689895868301392, 1.3921784162521362, 1.09282648563385, 0.943203330039978, 0.8380605578422546, 0.7783129811286926, 0.7317649722099304, 0.697516679763794, 0.6667935848236084, 0.6370715498924255, 0.6119930148124695, 0.597540020942688, 0.585638165473938, 0.5669749975204468, 0.5510876774787903, 0.5321505069732666, 0.528533399105072, 0.5092916488647461, 0.5203198194503784, 0.49983617663383484, 0.48847419023513794, 0.48181167244911194, 0.46785861253738403, 0.4670261740684509, 0.4507957398891449, 0.44654130935668945, 0.4353342354297638, 0.42720916867256165, 0.4178202748298645, 0.4137081205844879, 0.4128495752811432, 0.417216032743454, 0.39360734820365906, 0.39136654138565063, 0.3920917809009552, 0.3843253552913666, 0.3787577748298645, 0.36371058225631714, 0.35812604427337646, 0.36053144931793213, 0.3547873795032501, 0.3530988097190857, 0.3457549214363098, 0.3456178307533264, 0.33321312069892883, 0.33248311281204224, 0.3293883204460144, 0.3254311978816986, 0.31505241990089417, 0.3130646049976349, 0.30993208289146423, 0.3013964593410492, 0.2993669807910919, 0.2997386157512665, 0.29056525230407715, 0.2877940833568573, 0.29028749465942383, 0.28097987174987793, 0.28064799308776855, 0.2704039216041565, 0.268941193819046, 0.26596739888191223, 0.26158997416496277, 0.2584567368030548, 0.25905969738960266, 0.25384601950645447, 0.24113249778747559, 0.24394433200359344, 0.2416629046201706, 0.24062906205654144, 0.2293824404478073, 0.22863131761550903, 0.2209962159395218, 0.22504355013370514], "accuracy": [0.2763175368309021, 0.4807819426059723, 0.5597675442695618, 0.6222427487373352, 0.6719059348106384, 0.698190450668335, 0.7252674698829651, 0.7397965788841248, 0.748778223991394, 0.7617223858833313, 0.7697794437408447, 0.7804781198501587, 0.7837802171707153, 0.7882710099220276, 0.7976489067077637, 0.806630551815033, 0.8121780753135681, 0.8109893202781677, 0.8157442808151245, 0.8182538747787476, 0.822348415851593, 0.8245938420295715, 0.8285563588142395, 0.835160493850708, 0.8368775844573975, 0.8433496356010437, 0.844010055065155, 0.844010055065155, 0.8514066934585571, 0.8512746095657349, 0.8576145768165588, 0.8514066934585571, 0.8527275323867798, 0.8625016212463379, 0.863029956817627, 0.8595958352088928, 0.8627657890319824, 0.863029956817627, 0.8713511824607849, 0.8728041052818298, 0.8733324408531189, 0.8746532797813416, 0.8721436858177185, 0.8745211958885193, 0.8758420348167419, 0.8816536664962769, 0.8799365758895874, 0.8835028409957886, 0.8845595121383667, 0.8908994793891907, 0.8902390599250793, 0.8873332738876343, 0.8928807377815247, 0.8928807377815247, 0.8918240666389465, 0.8949940800666809, 0.8960506916046143, 0.8957865834236145, 0.8982961177825928, 0.9005415439605713, 0.9022586345672607, 0.902390718460083, 0.9038436412811279, 0.9063531756401062, 0.901862382888794, 0.9063531756401062, 0.9083344340324402, 0.9126931428909302, 0.9105798602104187, 0.9157310724258423, 0.910711944103241, 0.9126931428909302, 0.9167877435684204, 0.9220710396766663, 0.9181085824966431], "val_loss": [2.0362961292266846, 1.5109721422195435, 1.0366545915603638, 0.8216940760612488, 0.7334108352661133, 0.6752658486366272, 0.6272311210632324, 0.5901768207550049, 0.565755307674408, 0.5454519987106323, 0.5303096771240234, 0.5078737735748291, 0.49619564414024353, 0.4870852828025818, 0.477031409740448, 0.46416130661964417, 0.45332321524620056, 0.45065897703170776, 0.4499213993549347, 0.43400630354881287, 0.42278340458869934, 0.42549237608909607, 0.4191504716873169, 0.406779408454895, 0.4038170576095581, 0.39954128861427307, 0.39287909865379333, 0.386243611574173, 0.3859941065311432, 0.38023167848587036, 0.3832986652851105, 0.38317835330963135, 0.37083789706230164, 0.37188199162483215, 0.3707095682621002, 0.36467626690864563, 0.35694506764411926, 0.3572940230369568, 0.35267552733421326, 0.35352417826652527, 0.34998568892478943, 0.3500393331050873, 0.3457832932472229, 0.3445078134536743, 0.34039610624313354, 0.3432251811027527, 0.3378094434738159, 0.3373914062976837, 0.33233195543289185, 0.33655405044555664, 0.3316599130630493, 0.3272864520549774, 0.3274107575416565, 0.3278765380382538, 0.3250201344490051, 0.32743147015571594, 0.3283940255641937, 0.3233192265033722, 0.32683950662612915, 0.32519635558128357, 0.3187567889690399, 0.3262876868247986, 0.317158967256546, 0.3196517527103424, 0.31830424070358276, 0.31782957911491394, 0.3168559968471527, 0.31806766986846924, 0.3201530873775482, 0.3147178888320923, 0.31271007657051086, 0.3128334879875183, 0.3134373426437378, 0.3189963698387146, 0.3166082501411438], "val_accuracy": [0.49900001287460327, 0.6556666493415833, 0.684333324432373, 0.7089999914169312, 0.7406666874885559, 0.7543333172798157, 0.765333354473114, 0.7803333401679993, 0.7916666865348816, 0.8043333292007446, 0.7990000247955322, 0.8119999766349792, 0.8173333406448364, 0.8199999928474426, 0.8276666402816772, 0.8273333311080933, 0.8343333601951599, 0.8306666612625122, 0.8356666564941406, 0.8433333039283752, 0.8483333587646484, 0.8420000076293945, 0.847000002861023, 0.8500000238418579, 0.8489999771118164, 0.8513333201408386, 0.8550000190734863, 0.8566666841506958, 0.8579999804496765, 0.859666645526886, 0.8613333106040955, 0.8569999933242798, 0.8640000224113464, 0.8619999885559082, 0.8600000143051147, 0.862666666507721, 0.8683333396911621, 0.8676666617393494, 0.8709999918937683, 0.8683333396911621, 0.8703333139419556, 0.8696666955947876, 0.8709999918937683, 0.8740000128746033, 0.875, 0.8730000257492065, 0.8769999742507935, 0.8726666569709778, 0.8790000081062317, 0.878000020980835, 0.8776666522026062, 0.8799999952316284, 0.8790000081062317, 0.8813333511352539, 0.8826666474342346, 0.8776666522026062, 0.8809999823570251, 0.8830000162124634, 0.8796666860580444, 0.8823333382606506, 0.8836666941642761, 0.8813333511352539, 0.8849999904632568, 0.8863333463668823, 0.8889999985694885, 0.8830000162124634, 0.8853333592414856, 0.8856666684150696, 0.8883333206176758, 0.8899999856948853, 0.8856666684150696, 0.8896666765213013, 0.8880000114440918, 0.8866666555404663, 0.8853333592414856]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8697142601013184, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.22780179977417, 1.8846452236175537, 1.4037967920303345, 1.1016154289245605, 0.9512664675712585, 0.8511762022972107, 0.7833787202835083, 0.731158971786499, 0.6961508989334106, 0.6687192916870117, 0.6428034901618958, 0.6125017404556274, 0.5929259061813354, 0.5741116404533386, 0.557002604007721, 0.5421856641769409, 0.5365738272666931, 0.5180584192276001, 0.5142437815666199, 0.4992888867855072, 0.4863492250442505, 0.47482964396476746, 0.4716249108314514, 0.4638846218585968, 0.4539978802204132, 0.44866523146629333, 0.42462217807769775, 0.43022894859313965, 0.4200180768966675, 0.4088297486305237, 0.4105379283428192, 0.4040459394454956, 0.3927832543849945, 0.3913552165031433, 0.38201576471328735, 0.37668243050575256, 0.3668762445449829, 0.35923001170158386, 0.36109137535095215, 0.35194581747055054, 0.3459775149822235, 0.34390681982040405, 0.32945334911346436, 0.32840394973754883, 0.3389131724834442, 0.3244631290435791, 0.3223515450954437, 0.31026962399482727, 0.3059837520122528, 0.2994815707206726, 0.2914547622203827, 0.29500123858451843, 0.2895757257938385, 0.2833341360092163, 0.2900986075401306, 0.2828923165798187, 0.27509191632270813, 0.26552316546440125], "accuracy": [0.26258090138435364, 0.4861973226070404, 0.5712587237358093, 0.6219785809516907, 0.6592260003089905, 0.696209192276001, 0.7169462442398071, 0.7362303733825684, 0.7479857206344604, 0.754589855670929, 0.7650244235992432, 0.7784969210624695, 0.7798177003860474, 0.791441023349762, 0.8016114234924316, 0.8070268034934998, 0.8076872229576111, 0.8125742673873901, 0.8104609847068787, 0.8224804997444153, 0.8257825970649719, 0.828820526599884, 0.8269713521003723, 0.8355567455291748, 0.8372738361358643, 0.8367455005645752, 0.8474441766738892, 0.8469158411026001, 0.8520671129226685, 0.8560295701026917, 0.8525954484939575, 0.8555012345314026, 0.8601241707801819, 0.8580108284950256, 0.8638224601745605, 0.8643507957458496, 0.8708229064941406, 0.8721436858177185, 0.8704266548156738, 0.8766345381736755, 0.878879964351654, 0.8786157965660095, 0.8821820020675659, 0.8815215826034546, 0.8796724081039429, 0.8841632604598999, 0.8844274282455444, 0.8864086866378784, 0.8942015767097473, 0.8927486538887024, 0.8973715305328369, 0.8907673954963684, 0.9006736278533936, 0.8988244533538818, 0.896446943283081, 0.8993527889251709, 0.8973715305328369, 0.9046360850334167], "val_loss": [2.0506181716918945, 1.5335228443145752, 1.046182632446289, 0.8256345987319946, 0.736580491065979, 0.6823239922523499, 0.6355529427528381, 0.5985385179519653, 0.5695337057113647, 0.5491832494735718, 0.5253351330757141, 0.5118297338485718, 0.49453115463256836, 0.48193448781967163, 0.47421956062316895, 0.4576038122177124, 0.45973315834999084, 0.43896931409835815, 0.4348910450935364, 0.42699000239372253, 0.41863593459129333, 0.41151782870292664, 0.4031754434108734, 0.4081501066684723, 0.393515944480896, 0.39494168758392334, 0.38314786553382874, 0.38220784068107605, 0.3748033046722412, 0.3754027187824249, 0.36790430545806885, 0.3724746108055115, 0.3641476631164551, 0.362364798784256, 0.3600737750530243, 0.3550306260585785, 0.35244327783584595, 0.3531624674797058, 0.3450063467025757, 0.3451800048351288, 0.34562090039253235, 0.33989417552948, 0.339429646730423, 0.33611685037612915, 0.34070491790771484, 0.3355379104614258, 0.33900660276412964, 0.32834675908088684, 0.3315308690071106, 0.32584908604621887, 0.323253333568573, 0.32134920358657837, 0.3195324242115021, 0.3227229118347168, 0.3230929374694824, 0.31927570700645447, 0.31818193197250366, 0.31801891326904297], "val_accuracy": [0.5453333258628845, 0.6653333306312561, 0.6859999895095825, 0.7116666436195374, 0.7386666536331177, 0.7509999871253967, 0.7606666684150696, 0.7696666717529297, 0.7853333353996277, 0.7913333177566528, 0.8006666898727417, 0.8090000152587891, 0.8130000233650208, 0.8216666579246521, 0.8186666369438171, 0.8323333263397217, 0.8289999961853027, 0.8376666903495789, 0.8399999737739563, 0.8453333377838135, 0.8456666469573975, 0.8526666760444641, 0.8529999852180481, 0.8450000286102295, 0.8556666374206543, 0.8566666841506958, 0.8656666874885559, 0.862333357334137, 0.8679999709129333, 0.8686666488647461, 0.8706666827201843, 0.8663333058357239, 0.8683333396911621, 0.871999979019165, 0.874666690826416, 0.8709999918937683, 0.8756666779518127, 0.8769999742507935, 0.8763333559036255, 0.875333309173584, 0.878000020980835, 0.8806666731834412, 0.8816666603088379, 0.8796666860580444, 0.8809999823570251, 0.8790000081062317, 0.8726666569709778, 0.8843333125114441, 0.8803333044052124, 0.8820000290870667, 0.8790000081062317, 0.8859999775886536, 0.8863333463668823, 0.8840000033378601, 0.8836666941642761, 0.8826666474342346, 0.8849999904632568, 0.8826666474342346]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 7, 8, 6, 4, 2, 4, 4], [0, 3, 3, 4, 2, 1, 3, 2, 3], [0], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8511428833007812, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(tf.math.pow(tf.math.add(grad, grad), grad), tf.math.pow(tf.math.pow(beta, alpha), grad))), beta)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.293227434158325, 2.188190221786499, 1.7747355699539185, 1.3323280811309814, 1.0747876167297363, 0.9533591270446777, 0.8347342014312744, 0.8217273354530334, 0.7763622999191284, 0.7514609694480896, 0.7150167226791382, 0.683771014213562, 0.6599308252334595, 0.6269323229789734, 0.5997307300567627, 0.588513195514679, 0.5801385641098022, 0.564437985420227, 0.5612196922302246, 0.5455512404441833, 0.5444620251655579, 0.5216125249862671, 0.5268605947494507, 0.5010535717010498, 0.5027697682380676, 0.4782262444496155, 0.47836416959762573, 0.4656607508659363, 0.4501206576824188, 0.4454083740711212, 0.4429325759410858, 0.4303405284881592, 0.4289432466030121, 0.42323338985443115, 0.40670907497406006, 0.4062374234199524], "accuracy": [0.12508255243301392, 0.33086779713630676, 0.42609959840774536, 0.5493329763412476, 0.6384889483451843, 0.6497160196304321, 0.6889446377754211, 0.7034738063812256, 0.6999075412750244, 0.7074362635612488, 0.7248712182044983, 0.7301545143127441, 0.7495707273483276, 0.7637035846710205, 0.7644960880279541, 0.7777044177055359, 0.7729493975639343, 0.7779685854911804, 0.7796856164932251, 0.7869502305984497, 0.7938185334205627, 0.8010830879211426, 0.8004226684570312, 0.8099326491355896, 0.8112534880638123, 0.8216879963874817, 0.8145555257797241, 0.8158763647079468, 0.824329674243927, 0.8321225643157959, 0.8300092220306396, 0.8378021121025085, 0.8368775844573975, 0.8416325449943542, 0.8445383906364441, 0.8407079577445984], "val_loss": [2.246877670288086, 2.0197689533233643, 1.142871379852295, 0.8877421617507935, 0.7819913625717163, 0.7226027250289917, 0.694377601146698, 0.6497827768325806, 0.6575013995170593, 0.636962890625, 0.5960883498191833, 0.575254499912262, 0.5608249306678772, 0.5446476936340332, 0.527002215385437, 0.5234052538871765, 0.5167493224143982, 0.5185148119926453, 0.5034545063972473, 0.5070255994796753, 0.4927347004413605, 0.4921497404575348, 0.4824945032596588, 0.47868049144744873, 0.48272737860679626, 0.4617106020450592, 0.45977774262428284, 0.45151790976524353, 0.4394007921218872, 0.4419288635253906, 0.4298035204410553, 0.43821200728416443, 0.4397567808628082, 0.43281489610671997, 0.43215876817703247, 0.41386109590530396], "val_accuracy": [0.4013333320617676, 0.4436666667461395, 0.6499999761581421, 0.6936666369438171, 0.7279999852180481, 0.737666666507721, 0.7463333606719971, 0.7573333382606506, 0.7573333382606506, 0.7480000257492065, 0.762333333492279, 0.7730000019073486, 0.7853333353996277, 0.7906666398048401, 0.7963333129882812, 0.7993333339691162, 0.8059999942779541, 0.7916666865348816, 0.8056666851043701, 0.8040000200271606, 0.8119999766349792, 0.8136666417121887, 0.82833331823349, 0.8259999752044678, 0.8230000138282776, 0.8343333601951599, 0.8356666564941406, 0.8433333039283752, 0.8433333039283752, 0.8453333377838135, 0.8500000238418579, 0.8500000238418579, 0.8479999899864197, 0.8473333120346069, 0.843666672706604, 0.843999981880188]}, "mapping_values": [1, 10, 5, 5, 3, 19, 10, 9, 1, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 19}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 1], [0, 5], [0], [0], [1], [0], [2], [0]], "fitness": -0.8234285712242126, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.6085388660430908, 0.8886222243309021, 0.7321775555610657, 0.6503552794456482, 0.5977885723114014, 0.5895301103591919, 0.5501960515975952, 0.5422822833061218, 0.532251238822937, 0.4955003559589386, 0.47745004296302795, 0.48490482568740845, 0.476889044046402, 0.45398226380348206, 0.4793650805950165, 0.4667665958404541, 0.45199787616729736, 0.48227351903915405, 0.4960530400276184], "accuracy": [0.46691322326660156, 0.6979262828826904, 0.7305507659912109, 0.7514199018478394, 0.7758552432060242, 0.7808743715286255, 0.7994980812072754, 0.7936864495277405, 0.8061022162437439, 0.813498854637146, 0.817989706993103, 0.8277638554573059, 0.8259146809577942, 0.8362171649932861, 0.8333113193511963, 0.8261788487434387, 0.8298771381378174, 0.8370096683502197, 0.8376700282096863], "val_loss": [0.9509384632110596, 0.6511859893798828, 0.5959325432777405, 0.5655612945556641, 0.5348109006881714, 0.5564249157905579, 0.5265992283821106, 0.5648720860481262, 0.548397958278656, 0.5016941428184509, 0.5531191229820251, 0.546216607093811, 0.549803614616394, 0.5983067154884338, 0.5800657272338867, 0.5861227512359619, 0.5778831243515015, 0.6332511305809021, 0.5826271772384644], "val_accuracy": [0.6723333597183228, 0.768666684627533, 0.768666684627533, 0.7916666865348816, 0.8056666851043701, 0.8076666593551636, 0.8130000233650208, 0.8080000281333923, 0.8199999928474426, 0.8289999961853027, 0.8203333616256714, 0.8256666660308838, 0.8376666903495789, 0.8416666388511658, 0.8316666483879089, 0.8273333311080933, 0.8330000042915344, 0.8309999704360962, 0.840666651725769]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 3, 2, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 3, 3, 5], [0, 2, 0, 3, 5], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 3, 4, 8, 1, 4, 1, 8, 2, 8, 8], [4, 0, 0, 3, 0, 0, 3, 1, 4, 0], [16, 99, 96, 99, 61, 68]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 11, 6, 5, 2, 2, 1, 1, 1, 21, 12, 9, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.pow(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))))), tf.math.sqrt(tf.math.sqrt(alpha))), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 2, 3, 0, 3], [0, 1, 0, 2, 3], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 0, 5], [0, 2, 0, 3], [16, 16], [0, 1, 1], [2], [0, 3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 3, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 8, 5, 3, 2, 3, 1, 2, 1, 21, 11, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(sigma, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 8, 0, 1], [0, 1, 0, 0], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 0, 1], [0, 0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 0, 3, 6, 8, 1, 4, 8, 4, 2, 1], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [87, 99, 96, 93, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 10, 6, 4, 1, 3, 2, 1, 1, 16, 9, 7, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 1, 8, 0, 3, 5], [0, 2, 0, 0], [16, 16], [0, 1], [0], [3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 1, 1, 4, 2, 8], [1, 2, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 4, 2, 1, 2, 1, 1, 0, 21, 11, 10, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.sqrt(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(beta, tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}]