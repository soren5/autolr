[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8805714249610901, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585988998413, 1.8659464120864868, 1.3939106464385986, 1.0966308116912842, 0.9349022507667542, 0.8419743776321411, 0.7695197463035583, 0.729751467704773, 0.6897091865539551, 0.6576535105705261, 0.6359990835189819, 0.6094067096710205, 0.589935839176178, 0.5596274733543396, 0.5528120398521423, 0.5393894910812378, 0.5281672477722168, 0.5202223062515259, 0.5057564377784729, 0.5040625333786011, 0.48261573910713196, 0.46983885765075684, 0.4574008584022522, 0.454408198595047, 0.4424269199371338, 0.42842501401901245, 0.42894208431243896, 0.42616719007492065, 0.41881483793258667, 0.4155913293361664, 0.4008829891681671, 0.39691162109375, 0.38997870683670044, 0.38351768255233765, 0.37681254744529724, 0.3729562759399414, 0.36148902773857117, 0.362969309091568, 0.3563940227031708, 0.3505782186985016, 0.35241496562957764, 0.34010687470436096, 0.3387279510498047, 0.3343537747859955, 0.3285624086856842, 0.32427793741226196, 0.319965660572052, 0.3122166097164154, 0.30889007449150085, 0.3045063316822052], "accuracy": [0.2694492042064667, 0.48870691657066345, 0.568220853805542, 0.6156386137008667, 0.6696605682373047, 0.6963412761688232, 0.7223616242408752, 0.7312111854553223, 0.750759482383728, 0.7600052952766418, 0.7696473598480225, 0.7761194109916687, 0.787082314491272, 0.7985734939575195, 0.7980451583862305, 0.8045172095298767, 0.8121780753135681, 0.8125742673873901, 0.8178576231002808, 0.8191784620285034, 0.8251221776008606, 0.8322546482086182, 0.8356888294219971, 0.8359529972076416, 0.8389908671379089, 0.846387505531311, 0.8451988101005554, 0.8454629778862, 0.848368763923645, 0.8531237840652466, 0.8598600029945374, 0.854708731174469, 0.8605204224586487, 0.8609166741371155, 0.86553955078125, 0.8639545440673828, 0.8689737319946289, 0.8706908226013184, 0.873860776424408, 0.872407853603363, 0.8710870146751404, 0.8776912093162537, 0.8792761564254761, 0.8824461698532104, 0.882710337638855, 0.8811253309249878, 0.887597382068634, 0.887597382068634, 0.8906353116035461, 0.8911636471748352], "val_loss": [2.0369274616241455, 1.5092171430587769, 1.0378726720809937, 0.8372371196746826, 0.7430018186569214, 0.693951427936554, 0.6459794044494629, 0.6065753698348999, 0.5836796760559082, 0.5591391324996948, 0.5475665926933289, 0.5286199450492859, 0.5111508965492249, 0.49807658791542053, 0.4888598918914795, 0.4807276725769043, 0.4732670187950134, 0.46291399002075195, 0.4651739001274109, 0.44972753524780273, 0.44051307439804077, 0.4300120174884796, 0.42833927273750305, 0.4226953983306885, 0.42076465487480164, 0.41008231043815613, 0.40701472759246826, 0.4087570011615753, 0.3987274467945099, 0.39754143357276917, 0.3908216655254364, 0.39351579546928406, 0.3876643180847168, 0.3835429251194, 0.3747929334640503, 0.37449854612350464, 0.3731365501880646, 0.3678072988986969, 0.3718084394931793, 0.3737613260746002, 0.36592888832092285, 0.3612542748451233, 0.3634853661060333, 0.3576800525188446, 0.35225361585617065, 0.35540124773979187, 0.35645702481269836, 0.3527815639972687, 0.3493586778640747, 0.349461168050766], "val_accuracy": [0.5453333258628845, 0.6666666865348816, 0.6899999976158142, 0.7136666774749756, 0.737666666507721, 0.7523333430290222, 0.765666663646698, 0.7816666960716248, 0.7886666655540466, 0.7976666688919067, 0.7953333258628845, 0.8090000152587891, 0.8193333148956299, 0.8209999799728394, 0.8233333230018616, 0.8309999704360962, 0.8243333101272583, 0.843666672706604, 0.8333333134651184, 0.840666651725769, 0.846666693687439, 0.8569999933242798, 0.8533333539962769, 0.8556666374206543, 0.8533333539962769, 0.8613333106040955, 0.8636666536331177, 0.8616666793823242, 0.8659999966621399, 0.862333357334137, 0.8683333396911621, 0.8663333058357239, 0.871999979019165, 0.8673333525657654, 0.8763333559036255, 0.878000020980835, 0.8756666779518127, 0.878000020980835, 0.8756666779518127, 0.8756666779518127, 0.8790000081062317, 0.8776666522026062, 0.8809999823570251, 0.8813333511352539, 0.8833333253860474, 0.8796666860580444, 0.8826666474342346, 0.8826666474342346, 0.8823333382606506, 0.8830000162124634]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8734285831451416, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2224645614624023, 1.8632408380508423, 1.3892033100128174, 1.0870976448059082, 0.9342057704925537, 0.8416444063186646, 0.7760973572731018, 0.7252415418624878, 0.6908431053161621, 0.6676685214042664, 0.6414330005645752, 0.6195282340049744, 0.5976924896240234, 0.5823432207107544, 0.5660472512245178, 0.5528821349143982, 0.5425823330879211, 0.5302988886833191, 0.512845516204834, 0.5068782567977905, 0.4975202977657318, 0.48001375794410706, 0.47864818572998047, 0.46888911724090576, 0.45525023341178894, 0.4514823257923126, 0.4418552815914154, 0.4354550242424011, 0.434112012386322, 0.41265803575515747, 0.41229429841041565, 0.40305352210998535, 0.39622125029563904, 0.39803507924079895, 0.3908786177635193, 0.38639211654663086, 0.37547144293785095, 0.37465786933898926, 0.36031338572502136, 0.36626172065734863, 0.3632253110408783, 0.34745147824287415, 0.346009761095047], "accuracy": [0.2793554365634918, 0.49887728691101074, 0.5684850215911865, 0.6263373494148254, 0.6699247360229492, 0.6955488324165344, 0.7213049530982971, 0.7338528633117676, 0.7449478507041931, 0.7532690763473511, 0.7651565074920654, 0.7707040309906006, 0.7802139520645142, 0.7882710099220276, 0.7909126877784729, 0.7998943328857422, 0.8024039268493652, 0.8113855719566345, 0.8150838613510132, 0.8146876096725464, 0.8226125836372375, 0.8228767514228821, 0.822348415851593, 0.8376700282096863, 0.8359529972076416, 0.837141752243042, 0.841500461101532, 0.8418967127799988, 0.8495575189590454, 0.8533879518508911, 0.8533879518508911, 0.8557654023170471, 0.8594637513160706, 0.8580108284950256, 0.860652506351471, 0.8632941246032715, 0.867520809173584, 0.8702945709228516, 0.873860776424408, 0.8729361891746521, 0.8728041052818298, 0.8772949576377869, 0.8800686597824097], "val_loss": [2.0413026809692383, 1.5263681411743164, 1.0678852796554565, 0.8714842200279236, 0.7832552194595337, 0.7247802019119263, 0.6814389824867249, 0.6394596695899963, 0.6216228604316711, 0.5944308638572693, 0.5761414170265198, 0.5609291791915894, 0.5450119376182556, 0.5305848121643066, 0.5229244232177734, 0.5116421580314636, 0.5115320682525635, 0.4990729093551636, 0.4973461627960205, 0.4922119677066803, 0.4687502384185791, 0.46768704056739807, 0.45912837982177734, 0.45308300852775574, 0.4580041766166687, 0.4557283818721771, 0.43976008892059326, 0.44174662232398987, 0.4311918616294861, 0.4270279109477997, 0.4265318512916565, 0.4242074489593506, 0.41693875193595886, 0.42161527276039124, 0.41262441873550415, 0.4136093854904175, 0.41281962394714355, 0.40639379620552063, 0.4069693982601166, 0.4006839096546173, 0.39785534143447876, 0.3996775448322296, 0.40013831853866577], "val_accuracy": [0.5410000085830688, 0.6396666765213013, 0.6756666898727417, 0.6819999814033508, 0.7183333039283752, 0.7283333539962769, 0.746999979019165, 0.7593333125114441, 0.7643333077430725, 0.7799999713897705, 0.7853333353996277, 0.7940000295639038, 0.7979999780654907, 0.8073333501815796, 0.809333324432373, 0.8143333196640015, 0.8130000233650208, 0.8243333101272583, 0.8136666417121887, 0.8143333196640015, 0.8299999833106995, 0.8366666436195374, 0.8346666693687439, 0.8376666903495789, 0.8309999704360962, 0.8363333344459534, 0.8479999899864197, 0.8416666388511658, 0.8479999899864197, 0.8506666421890259, 0.8510000109672546, 0.8500000238418579, 0.8539999723434448, 0.847000002861023, 0.8560000061988831, 0.8529999852180481, 0.8529999852180481, 0.8613333106040955, 0.8543333411216736, 0.859666645526886, 0.8573333621025085, 0.859000027179718, 0.859666645526886]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 1], [0, 6], [0, 1], [0], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8645714521408081, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2923150062561035, 2.1872305870056152, 1.7517911195755005, 1.340870976448059, 1.078097939491272, 0.9100751876831055, 0.8365126252174377, 0.8175832629203796, 0.7591539025306702, 0.7469353079795837, 0.7135657072067261, 0.6862017512321472, 0.6533322334289551, 0.6288012266159058, 0.6171632409095764, 0.6109511852264404, 0.5879560112953186, 0.5746002793312073, 0.5678697228431702, 0.5560823082923889, 0.5537143349647522, 0.546570360660553, 0.5219331383705139, 0.5215443968772888, 0.5174576044082642, 0.5046297907829285, 0.4975547790527344, 0.483161598443985, 0.4778168499469757, 0.4697723388671875, 0.4703492522239685, 0.45554229617118835, 0.43829768896102905, 0.42989403009414673, 0.4237370193004608, 0.41909536719322205, 0.4193567931652069, 0.39457619190216064, 0.401732861995697, 0.3940078318119049, 0.37978214025497437, 0.38093656301498413, 0.3732374608516693, 0.37509819865226746, 0.3623494803905487, 0.36069199442863464], "accuracy": [0.13168670237064362, 0.33205652236938477, 0.43983620405197144, 0.551050066947937, 0.6371681690216064, 0.6651697158813477, 0.6896050572395325, 0.6985867023468018, 0.7111346125602722, 0.7201162576675415, 0.7359662055969238, 0.7415136694908142, 0.7500990629196167, 0.7604015469551086, 0.767401933670044, 0.7697794437408447, 0.7792893648147583, 0.7790252566337585, 0.7835160493850708, 0.7864218950271606, 0.7935543656349182, 0.7891955971717834, 0.8018755912780762, 0.8024039268493652, 0.8043851256370544, 0.8090080618858337, 0.8131026029586792, 0.8141592741012573, 0.817461371421814, 0.8186501264572144, 0.8165367841720581, 0.8323867321014404, 0.8285563588142395, 0.8341038227081299, 0.8403117060661316, 0.8380662798881531, 0.8389908671379089, 0.8507462739944458, 0.8495575189590454, 0.8520671129226685, 0.8548408150672913, 0.8536521196365356, 0.8539162874221802, 0.8519350290298462, 0.8599920868873596, 0.8628978729248047], "val_loss": [2.246659994125366, 2.0111074447631836, 1.1101188659667969, 0.9162108302116394, 0.7790498733520508, 0.7154477834701538, 0.7058386206626892, 0.6658921837806702, 0.6392009854316711, 0.614635169506073, 0.5851175785064697, 0.5713509321212769, 0.5625215768814087, 0.5507092475891113, 0.5496188998222351, 0.5338005423545837, 0.526521623134613, 0.5215925574302673, 0.5147496461868286, 0.5141434669494629, 0.5069496035575867, 0.5008314847946167, 0.4887153208255768, 0.4838222563266754, 0.4881463944911957, 0.48681941628456116, 0.47451555728912354, 0.4778733253479004, 0.4775579571723938, 0.4631507098674774, 0.45148152112960815, 0.45963937044143677, 0.4512731432914734, 0.45253896713256836, 0.4373544156551361, 0.4245712459087372, 0.42731785774230957, 0.4238526523113251, 0.42526981234550476, 0.41329988837242126, 0.4118949770927429, 0.40604496002197266, 0.41691187024116516, 0.42315739393234253, 0.4288109242916107, 0.4112204313278198], "val_accuracy": [0.40933331847190857, 0.45899999141693115, 0.6510000228881836, 0.6893333196640015, 0.7103333473205566, 0.7366666793823242, 0.7390000224113464, 0.7453333139419556, 0.7580000162124634, 0.762333333492279, 0.765666663646698, 0.7826666831970215, 0.7846666574478149, 0.7889999747276306, 0.7806666493415833, 0.7933333516120911, 0.7889999747276306, 0.7996666431427002, 0.7996666431427002, 0.8003333210945129, 0.8040000200271606, 0.8090000152587891, 0.8050000071525574, 0.8216666579246521, 0.8230000138282776, 0.8240000009536743, 0.8236666917800903, 0.8223333358764648, 0.8276666402816772, 0.8343333601951599, 0.8370000123977661, 0.8299999833106995, 0.8306666612625122, 0.8376666903495789, 0.8396666646003723, 0.843999981880188, 0.8483333587646484, 0.8543333411216736, 0.8533333539962769, 0.8560000061988831, 0.859666645526886, 0.8550000190734863, 0.8553333282470703, 0.8586666584014893, 0.8539999723434448, 0.8539999723434448]}, "mapping_values": [1, 10, 5, 5, 3, 4, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 1, 1], [0, 1], [0, 7], [0], [1], [0], [2], [0]], "fitness": -0.8385714292526245, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.7643314599990845, 1.0377833843231201, 0.7806550860404968, 0.7052816152572632, 0.6159926056861877, 0.5760565996170044, 0.5666941404342651, 0.5406852960586548, 0.4925580620765686, 0.466580867767334, 0.47003427147865295, 0.46628084778785706, 0.4939076006412506, 0.49580422043800354, 0.4907398521900177, 0.47222843766212463], "accuracy": [0.4695548713207245, 0.6462818384170532, 0.7223616242408752, 0.744419515132904, 0.7584202885627747, 0.7799497842788696, 0.7942147850990295, 0.8017435073852539, 0.8230088353157043, 0.8322546482086182, 0.8289526104927063, 0.8363492488861084, 0.8212917447090149, 0.8300092220306396, 0.8318583965301514, 0.8396512866020203], "val_loss": [0.8254109621047974, 0.6760208606719971, 0.6330433487892151, 0.5674525499343872, 0.5479778051376343, 0.5632591247558594, 0.5526980757713318, 0.5364039540290833, 0.5102664232254028, 0.533266007900238, 0.5186688899993896, 0.5571075081825256, 0.5663068890571594, 0.6138386726379395, 0.5915688276290894, 0.5652779936790466], "val_accuracy": [0.7179999947547913, 0.7456666827201843, 0.7586666941642761, 0.7836666703224182, 0.7929999828338623, 0.8066666722297668, 0.8056666851043701, 0.8163333535194397, 0.8263333439826965, 0.8330000042915344, 0.8356666564941406, 0.8263333439826965, 0.8309999704360962, 0.8196666836738586, 0.8336666822433472, 0.8306666612625122]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 4, 3, 0, 3], [0, 1, 0, 2], [39, 55], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [8, 2, 4, 0, 1, 5], [3, 2, 0, 3], [17, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1], [6, 3, 3, 2, 8, 1, 4, 1, 4, 2, 8, 2, 0], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0, 2], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 10, 6, 4, 1, 2, 1, 1, 1, 24, 13, 11, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.pow(tf.math.negative(grad), beta), tf.math.subtract(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.negative(beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 5, 3, 0, 3], [2, 1, 0, 2], [30, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [1, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 3, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 0, 10, 6, 4, 1, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.math.negative(grad), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha))))", "other_info": {"loss": [2.304055690765381, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 2, 3, 0, 3, 5, 8], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 1, 6, 8, 1, 0, 1, 4, 2, 8], [0, 0, 0, 4, 0, 4, 3, 1, 2, 0], [16, 99, 37, 37, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 11, 7, 4, 2, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), grad)), tf.math.subtract(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 0], [0, 2, 3, 0, 3], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 2, 2, 2, 9, 5, 5, 8, 4, 8, 6, 8, 6, 9], [0, 0, 3, 3, 2, 0, 3, 1, 2, 0, 6, 1, 2, 1], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 10, 6, 4, 2, 2, 1, 1, 1, 37, 23, 14, 6], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), tf.math.pow(sigma, tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), sigma)), tf.math.add(tf.math.add(alpha, beta), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), tf.math.square(tf.math.square(tf.math.sqrt(tf.math.pow(grad, tf.math.sqrt(alpha)))))), tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}]