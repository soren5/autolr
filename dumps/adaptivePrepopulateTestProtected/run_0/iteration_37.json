[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8785714507102966, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.22385311126709, 1.8689895868301392, 1.3921784162521362, 1.09282648563385, 0.943203330039978, 0.8380605578422546, 0.7783129811286926, 0.7317649722099304, 0.697516679763794, 0.6667935848236084, 0.6370715498924255, 0.6119930148124695, 0.597540020942688, 0.585638165473938, 0.5669749975204468, 0.5510876774787903, 0.5321505069732666, 0.528533399105072, 0.5092916488647461, 0.5203198194503784, 0.49983617663383484, 0.48847419023513794, 0.48181167244911194, 0.46785861253738403, 0.4670261740684509, 0.4507957398891449, 0.44654130935668945, 0.4353342354297638, 0.42720916867256165, 0.4178202748298645, 0.4137081205844879, 0.4128495752811432, 0.417216032743454, 0.39360734820365906, 0.39136654138565063, 0.3920917809009552, 0.3843253552913666, 0.3787577748298645, 0.36371058225631714, 0.35812604427337646, 0.36053144931793213, 0.3547873795032501, 0.3530988097190857, 0.3457549214363098, 0.3456178307533264, 0.33321312069892883, 0.33248311281204224, 0.3293883204460144, 0.3254311978816986, 0.31505241990089417, 0.3130646049976349, 0.30993208289146423, 0.3013964593410492, 0.2993669807910919, 0.2997386157512665, 0.29056525230407715, 0.2877940833568573, 0.29028749465942383, 0.28097987174987793, 0.28064799308776855, 0.2704039216041565, 0.268941193819046, 0.26596739888191223, 0.26158997416496277, 0.2584567368030548, 0.25905969738960266, 0.25384601950645447, 0.24113249778747559, 0.24394433200359344, 0.2416629046201706, 0.24062906205654144, 0.2293824404478073, 0.22863131761550903, 0.2209962159395218, 0.22504355013370514], "accuracy": [0.2763175368309021, 0.4807819426059723, 0.5597675442695618, 0.6222427487373352, 0.6719059348106384, 0.698190450668335, 0.7252674698829651, 0.7397965788841248, 0.748778223991394, 0.7617223858833313, 0.7697794437408447, 0.7804781198501587, 0.7837802171707153, 0.7882710099220276, 0.7976489067077637, 0.806630551815033, 0.8121780753135681, 0.8109893202781677, 0.8157442808151245, 0.8182538747787476, 0.822348415851593, 0.8245938420295715, 0.8285563588142395, 0.835160493850708, 0.8368775844573975, 0.8433496356010437, 0.844010055065155, 0.844010055065155, 0.8514066934585571, 0.8512746095657349, 0.8576145768165588, 0.8514066934585571, 0.8527275323867798, 0.8625016212463379, 0.863029956817627, 0.8595958352088928, 0.8627657890319824, 0.863029956817627, 0.8713511824607849, 0.8728041052818298, 0.8733324408531189, 0.8746532797813416, 0.8721436858177185, 0.8745211958885193, 0.8758420348167419, 0.8816536664962769, 0.8799365758895874, 0.8835028409957886, 0.8845595121383667, 0.8908994793891907, 0.8902390599250793, 0.8873332738876343, 0.8928807377815247, 0.8928807377815247, 0.8918240666389465, 0.8949940800666809, 0.8960506916046143, 0.8957865834236145, 0.8982961177825928, 0.9005415439605713, 0.9022586345672607, 0.902390718460083, 0.9038436412811279, 0.9063531756401062, 0.901862382888794, 0.9063531756401062, 0.9083344340324402, 0.9126931428909302, 0.9105798602104187, 0.9157310724258423, 0.910711944103241, 0.9126931428909302, 0.9167877435684204, 0.9220710396766663, 0.9181085824966431], "val_loss": [2.0362961292266846, 1.5109721422195435, 1.0366545915603638, 0.8216940760612488, 0.7334108352661133, 0.6752658486366272, 0.6272311210632324, 0.5901768207550049, 0.565755307674408, 0.5454519987106323, 0.5303096771240234, 0.5078737735748291, 0.49619564414024353, 0.4870852828025818, 0.477031409740448, 0.46416130661964417, 0.45332321524620056, 0.45065897703170776, 0.4499213993549347, 0.43400630354881287, 0.42278340458869934, 0.42549237608909607, 0.4191504716873169, 0.406779408454895, 0.4038170576095581, 0.39954128861427307, 0.39287909865379333, 0.386243611574173, 0.3859941065311432, 0.38023167848587036, 0.3832986652851105, 0.38317835330963135, 0.37083789706230164, 0.37188199162483215, 0.3707095682621002, 0.36467626690864563, 0.35694506764411926, 0.3572940230369568, 0.35267552733421326, 0.35352417826652527, 0.34998568892478943, 0.3500393331050873, 0.3457832932472229, 0.3445078134536743, 0.34039610624313354, 0.3432251811027527, 0.3378094434738159, 0.3373914062976837, 0.33233195543289185, 0.33655405044555664, 0.3316599130630493, 0.3272864520549774, 0.3274107575416565, 0.3278765380382538, 0.3250201344490051, 0.32743147015571594, 0.3283940255641937, 0.3233192265033722, 0.32683950662612915, 0.32519635558128357, 0.3187567889690399, 0.3262876868247986, 0.317158967256546, 0.3196517527103424, 0.31830424070358276, 0.31782957911491394, 0.3168559968471527, 0.31806766986846924, 0.3201530873775482, 0.3147178888320923, 0.31271007657051086, 0.3128334879875183, 0.3134373426437378, 0.3189963698387146, 0.3166082501411438], "val_accuracy": [0.49900001287460327, 0.6556666493415833, 0.684333324432373, 0.7089999914169312, 0.7406666874885559, 0.7543333172798157, 0.765333354473114, 0.7803333401679993, 0.7916666865348816, 0.8043333292007446, 0.7990000247955322, 0.8119999766349792, 0.8173333406448364, 0.8199999928474426, 0.8276666402816772, 0.8273333311080933, 0.8343333601951599, 0.8306666612625122, 0.8356666564941406, 0.8433333039283752, 0.8483333587646484, 0.8420000076293945, 0.847000002861023, 0.8500000238418579, 0.8489999771118164, 0.8513333201408386, 0.8550000190734863, 0.8566666841506958, 0.8579999804496765, 0.859666645526886, 0.8613333106040955, 0.8569999933242798, 0.8640000224113464, 0.8619999885559082, 0.8600000143051147, 0.862666666507721, 0.8683333396911621, 0.8676666617393494, 0.8709999918937683, 0.8683333396911621, 0.8703333139419556, 0.8696666955947876, 0.8709999918937683, 0.8740000128746033, 0.875, 0.8730000257492065, 0.8769999742507935, 0.8726666569709778, 0.8790000081062317, 0.878000020980835, 0.8776666522026062, 0.8799999952316284, 0.8790000081062317, 0.8813333511352539, 0.8826666474342346, 0.8776666522026062, 0.8809999823570251, 0.8830000162124634, 0.8796666860580444, 0.8823333382606506, 0.8836666941642761, 0.8813333511352539, 0.8849999904632568, 0.8863333463668823, 0.8889999985694885, 0.8830000162124634, 0.8853333592414856, 0.8856666684150696, 0.8883333206176758, 0.8899999856948853, 0.8856666684150696, 0.8896666765213013, 0.8880000114440918, 0.8866666555404663, 0.8853333592414856]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8605714440345764, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224400758743286, 1.8716164827346802, 1.393855094909668, 1.0882062911987305, 0.9265608787536621, 0.8297896981239319, 0.7728719711303711, 0.720163106918335, 0.6938667893409729, 0.660275936126709, 0.6347261071205139, 0.607528030872345, 0.598728597164154, 0.5770145654678345, 0.560508668422699, 0.5481789112091064, 0.5342593193054199, 0.5137573480606079, 0.5103725790977478, 0.4882045388221741, 0.4849095642566681, 0.480551153421402, 0.4689546823501587, 0.45568379759788513, 0.4535762071609497, 0.44533127546310425, 0.4365217387676239, 0.4242711365222931, 0.4169858396053314, 0.41326606273651123, 0.40861907601356506, 0.406232625246048, 0.39650675654411316, 0.3853626847267151, 0.38350388407707214, 0.3790581226348877, 0.37441566586494446, 0.37290850281715393, 0.3582301139831543, 0.35904660820961, 0.35774803161621094, 0.34299397468566895, 0.33836910128593445, 0.3308557868003845, 0.33723217248916626, 0.33141839504241943, 0.3265584111213684, 0.31763923168182373, 0.3187120258808136, 0.30763405561447144, 0.3101732134819031, 0.30206188559532166, 0.29555320739746094, 0.2924124300479889, 0.2981700897216797, 0.28285232186317444, 0.28501754999160767, 0.2677706480026245, 0.2773500084877014, 0.2711511254310608, 0.26513439416885376, 0.2610972225666046, 0.2583095133304596, 0.2550000250339508, 0.25086134672164917], "accuracy": [0.27724209427833557, 0.49266940355300903, 0.5676925182342529, 0.6239598393440247, 0.6670188903808594, 0.7045304179191589, 0.7226257920265198, 0.7420420050621033, 0.7442874312400818, 0.7594769597053528, 0.7712323069572449, 0.7812706232070923, 0.785629391670227, 0.789459764957428, 0.7976489067077637, 0.8057059645652771, 0.806630551815033, 0.8164047002792358, 0.8150838613510132, 0.8261788487434387, 0.8253863453865051, 0.8302733898162842, 0.8313300609588623, 0.8348963260650635, 0.8352925777435303, 0.8422929644584656, 0.8438779711723328, 0.8487650156021118, 0.8549728989601135, 0.8535200357437134, 0.8574824929237366, 0.8521991968154907, 0.859199583530426, 0.8601241707801819, 0.8610487580299377, 0.8642187118530273, 0.8648791313171387, 0.8671245574951172, 0.8706908226013184, 0.8716153502464294, 0.8771628737449646, 0.8778232932090759, 0.8795403242111206, 0.8825782537460327, 0.8786157965660095, 0.8845595121383667, 0.8796724081039429, 0.8868049383163452, 0.8853520154953003, 0.8914278149604797, 0.8903711438179016, 0.889050304889679, 0.894069492816925, 0.8938053250312805, 0.8930128216743469, 0.8951261639595032, 0.8975036144256592, 0.9079381823539734, 0.9031832218170166, 0.9013340473175049, 0.9019944667816162, 0.9037115573883057, 0.9062210917472839, 0.9033153057098389, 0.9108440279960632], "val_loss": [2.043905735015869, 1.5204957723617554, 1.0505590438842773, 0.8487101197242737, 0.7631807327270508, 0.7104655504226685, 0.6600458025932312, 0.6288840174674988, 0.6014530062675476, 0.5905294418334961, 0.5591498017311096, 0.5458609461784363, 0.5354695916175842, 0.5192224383354187, 0.5065999627113342, 0.5006071925163269, 0.48694369196891785, 0.47891560196876526, 0.4709800183773041, 0.4652040898799896, 0.45719462633132935, 0.4527159333229065, 0.4450225532054901, 0.4489586651325226, 0.43705815076828003, 0.43047860264778137, 0.42737263441085815, 0.42254769802093506, 0.415201336145401, 0.41888323426246643, 0.4169034957885742, 0.4060537815093994, 0.4065471291542053, 0.4090653359889984, 0.3973892033100128, 0.4011492431163788, 0.3942503333091736, 0.3888995349407196, 0.38619473576545715, 0.38535594940185547, 0.3845324218273163, 0.3782167434692383, 0.3806714713573456, 0.3911764323711395, 0.37841928005218506, 0.37487614154815674, 0.3749055862426758, 0.37044432759284973, 0.3640310764312744, 0.3693021535873413, 0.36379289627075195, 0.359529048204422, 0.35669758915901184, 0.3600581884384155, 0.3576468229293823, 0.3570919632911682, 0.36298030614852905, 0.35681968927383423, 0.3529680669307709, 0.3553726375102997, 0.3613114356994629, 0.3565461337566376, 0.3536197543144226, 0.3520856201648712, 0.35463184118270874], "val_accuracy": [0.5373333096504211, 0.656000018119812, 0.6663333177566528, 0.7016666531562805, 0.7276666760444641, 0.7390000224113464, 0.7573333382606506, 0.7636666893959045, 0.7736666798591614, 0.7766666412353516, 0.7870000004768372, 0.7943333387374878, 0.796999990940094, 0.8026666641235352, 0.8133333325386047, 0.815666675567627, 0.8190000057220459, 0.8243333101272583, 0.8273333311080933, 0.8266666531562805, 0.8339999914169312, 0.8299999833106995, 0.8363333344459534, 0.8323333263397217, 0.8386666774749756, 0.8463333249092102, 0.8429999947547913, 0.8446666598320007, 0.8489999771118164, 0.8453333377838135, 0.8443333506584167, 0.8503333330154419, 0.8519999980926514, 0.8450000286102295, 0.8553333282470703, 0.8533333539962769, 0.8526666760444641, 0.8579999804496765, 0.859666645526886, 0.862666666507721, 0.8576666712760925, 0.8646666407585144, 0.8633333444595337, 0.8566666841506958, 0.8619999885559082, 0.8659999966621399, 0.8640000224113464, 0.8643333315849304, 0.8659999966621399, 0.8690000176429749, 0.8656666874885559, 0.8696666955947876, 0.871666669845581, 0.871666669845581, 0.8690000176429749, 0.8686666488647461, 0.871999979019165, 0.871666669845581, 0.8703333139419556, 0.8766666650772095, 0.8696666955947876, 0.875, 0.8730000257492065, 0.875, 0.874666690826416]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [0, 4, 7, 3, 6, 9], [0, 5, 3, 0], [0, 42, 33], [0, 0, 0, 1, 1], [0, 1, 0], [0, 3], [0], [0, 1], [0], [1], [0]], "fitness": -0.8551428318023682, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.divide_no_nan(grad, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.293229341506958, 2.186851978302002, 1.7616430521011353, 1.3359367847442627, 1.059757947921753, 0.9238370656967163, 0.8374888896942139, 0.8175318837165833, 0.7628219127655029, 0.7436760663986206, 0.7071782350540161, 0.7016170024871826, 0.6568913459777832, 0.6439289450645447, 0.613659143447876, 0.5970960855484009, 0.5840689539909363, 0.5832907557487488, 0.5613833665847778, 0.5571390986442566, 0.5434645414352417, 0.5273560285568237, 0.5216205716133118, 0.5112383961677551, 0.5055080652236938, 0.48653823137283325, 0.48019155859947205, 0.4661645293235779, 0.45115312933921814, 0.4333527088165283, 0.44299328327178955, 0.43020859360694885, 0.43189623951911926, 0.42127424478530884, 0.40719932317733765, 0.4021797776222229, 0.393172949552536, 0.3934360444545746, 0.3884750008583069, 0.37018057703971863, 0.37038514018058777, 0.37125536799430847, 0.36329585313796997, 0.35360974073410034, 0.3422531485557556, 0.3603709042072296], "accuracy": [0.12851670384407043, 0.34024566411972046, 0.43983620405197144, 0.5521067380905151, 0.6390172839164734, 0.6598864197731018, 0.6893408894538879, 0.7080966830253601, 0.7121912837028503, 0.7107383608818054, 0.7271166443824768, 0.7309470176696777, 0.7498348951339722, 0.7576277852058411, 0.759080708026886, 0.769911527633667, 0.7777044177055359, 0.7803460359573364, 0.7878747582435608, 0.7865539789199829, 0.791441023349762, 0.7969884872436523, 0.7985734939575195, 0.8063663840293884, 0.8062343001365662, 0.8099326491355896, 0.8141592741012573, 0.8204993009567261, 0.8257825970649719, 0.8302733898162842, 0.8301413059234619, 0.8330471515655518, 0.8298771381378174, 0.8347642421722412, 0.8422929644584656, 0.8432175517082214, 0.8437458872795105, 0.8465195894241333, 0.8467837572097778, 0.8561616539955139, 0.8585391640663147, 0.8562937378883362, 0.8582749962806702, 0.8640866279602051, 0.8659358024597168, 0.8594637513160706], "val_loss": [2.246568202972412, 2.0169708728790283, 1.1344356536865234, 0.8844441175460815, 0.7926076054573059, 0.756000816822052, 0.7098198533058167, 0.6701291799545288, 0.6445987224578857, 0.6396628618240356, 0.5905684232711792, 0.5754584670066833, 0.5668511390686035, 0.553817629814148, 0.5599952936172485, 0.5461240410804749, 0.5343015193939209, 0.5314251184463501, 0.5244629979133606, 0.5177446007728577, 0.5147262215614319, 0.50862717628479, 0.48781532049179077, 0.4925372004508972, 0.4893661439418793, 0.4741579592227936, 0.462503582239151, 0.46151331067085266, 0.4553406834602356, 0.45631465315818787, 0.4525371491909027, 0.45602965354919434, 0.44831210374832153, 0.4445364475250244, 0.4470043182373047, 0.440207839012146, 0.43616223335266113, 0.4365176856517792, 0.4349028468132019, 0.4304669499397278, 0.4289155602455139, 0.4289984107017517, 0.4272294044494629, 0.43768757581710815, 0.4542490243911743, 0.4624907672405243], "val_accuracy": [0.429666668176651, 0.4803333282470703, 0.6493333578109741, 0.6930000185966492, 0.703000009059906, 0.715666651725769, 0.7323333621025085, 0.746999979019165, 0.7516666650772095, 0.7580000162124634, 0.7546666860580444, 0.7703333497047424, 0.7756666541099548, 0.7889999747276306, 0.7846666574478149, 0.7889999747276306, 0.7863333225250244, 0.7929999828338623, 0.8003333210945129, 0.7919999957084656, 0.7950000166893005, 0.8013333082199097, 0.812333345413208, 0.8069999814033508, 0.8100000023841858, 0.8190000057220459, 0.8256666660308838, 0.8273333311080933, 0.8316666483879089, 0.828000009059906, 0.8320000171661377, 0.8336666822433472, 0.8389999866485596, 0.8389999866485596, 0.8500000238418579, 0.8479999899864197, 0.8473333120346069, 0.8476666808128357, 0.8513333201408386, 0.8489999771118164, 0.8526666760444641, 0.8506666421890259, 0.8493333458900452, 0.8473333120346069, 0.8510000109672546, 0.847000002861023]}, "mapping_values": [1, 10, 5, 5, 3, 10, 6, 4, 3, 5, 3, 2, 1, 2, 1, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1], [0, 3, 3, 4, 0, 4], [0, 4, 3, 7, 5], [0], [1], [0], [2], [0]], "fitness": -0.8371428847312927, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma)), tf.math.negative(tf.math.pow(grad, grad)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5375360250473022, 0.7571878433227539, 0.6354085803031921, 0.596683144569397, 0.5519331693649292, 0.5324704647064209, 0.5091354846954346, 0.4893348515033722, 0.4779609143733978, 0.4640427529811859, 0.45114582777023315, 0.4552595317363739, 0.48981428146362305, 0.46306905150413513, 0.46623003482818604, 0.45350751280784607, 0.49681442975997925, 0.5016584396362305, 0.48535990715026855, 0.47604072093963623, 0.5444167256355286, 0.5125471353530884], "accuracy": [0.47391360998153687, 0.728701651096344, 0.7683265209197998, 0.778761088848114, 0.7968564033508301, 0.8041210174560547, 0.8092722296714783, 0.8249900937080383, 0.8267071843147278, 0.8259146809577942, 0.8367455005645752, 0.8358209133148193, 0.8267071843147278, 0.835160493850708, 0.8408400416374207, 0.8426892161369324, 0.8255184292793274, 0.8479725122451782, 0.8467837572097778, 0.8400475382804871, 0.8260467648506165, 0.8327829837799072], "val_loss": [0.7834936380386353, 0.6085958480834961, 0.5529715418815613, 0.5443786382675171, 0.48483699560165405, 0.5054619312286377, 0.49337735772132874, 0.4953688979148865, 0.49514883756637573, 0.5089617371559143, 0.5430025458335876, 0.530842125415802, 0.5131739974021912, 0.5730096697807312, 0.5778273344039917, 0.5434126853942871, 0.5480135083198547, 0.6314052939414978, 0.564599871635437, 0.6459993124008179, 0.5710723996162415, 0.5426247715950012], "val_accuracy": [0.7183333039283752, 0.7716666460037231, 0.7986666560173035, 0.8033333420753479, 0.8206666707992554, 0.8163333535194397, 0.8336666822433472, 0.8429999947547913, 0.8303333520889282, 0.8366666436195374, 0.8323333263397217, 0.8373333215713501, 0.843999981880188, 0.8429999947547913, 0.8423333168029785, 0.8389999866485596, 0.8486666679382324, 0.8426666855812073, 0.8453333377838135, 0.840666651725769, 0.8423333168029785, 0.8349999785423279]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 11, 6, 5, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 9, 0, 3], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 3, 3, 5, 3, 6, 6, 1, 9, 1], [0, 2, 0, 3, 0, 0, 0, 2, 1], [44, 16, 89, 77, 93, 93], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 4, 3, 4, 6, 2, 4, 8, 9, 1, 0, 1, 3, 9, 4, 1, 4, 8, 0, 0], [4, 5, 1, 3, 6, 3, 2, 1, 5, 1, 6, 2], [99, 5], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [6, 9, 3, 6, 8, 1, 4, 1, 4, 2, 8], [4, 0, 0, 3, 0, 0, 3, 1, 2, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 4, 1, 2, 21, 12, 9, 6, 33, 21, 12, 2, 18, 10, 8, 5], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.square(beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.multiply(grad, tf.math.pow(tf.math.divide_no_nan(grad, tf.math.add(tf.math.pow(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.multiply(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), alpha), sigma)), grad)), tf.math.pow(tf.math.subtract(sigma, tf.math.pow(beta, tf.math.sqrt(alpha))), tf.math.negative(grad)))), alpha)), tf.math.negative(grad)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, alpha)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [2, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [76], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1], [6, 3, 3, 6, 0, 0, 4, 1, 4, 2, 8, 7, 6, 3, 4, 8, 1, 2, 7, 9, 4, 6, 7, 6, 8, 8, 6, 9], [0, 0, 0, 3, 3, 0, 4, 1, 2, 0, 5, 6, 2, 5, 5, 7, 3, 2, 7], [16, 99, 96, 99, 61, 1, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 8, 4, 4, 2, 2, 1, 1, 1, 47, 28, 19, 7], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.negative(tf.math.negative(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(sigma, tf.math.add(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))), grad), tf.math.sqrt(tf.math.add(alpha, beta))), tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.subtract(grad, grad))), tf.math.add(tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(beta, grad), grad), grad), sigma)), tf.math.sqrt(tf.math.sqrt(beta)))), tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 2, 3, 0, 3, 4], [2, 1, 0, 2, 0], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 1, 0, 0, 5], [0, 2, 0, 3], [16, 16], [0, 1, 1], [4], [0, 5], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 6, 2, 8, 6], [0, 0, 0, 1, 0, 0, 3, 1, 2, 0, 1], [16, 99, 96, 81, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 8, 5, 3, 2, 3, 1, 2, 1, 23, 12, 11, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), tf.math.multiply(tf.math.pow(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), alpha))), tf.math.subtract(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(alpha, beta)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 9, 6, 0, 8], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 2, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [2, 4, 0, 3, 0, 0, 3, 4, 2, 0], [16, 99, 96, 80, 83, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 0, 1, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)))), grad), tf.math.add(tf.math.sqrt(beta), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}]