[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8805714249610901, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585988998413, 1.8659464120864868, 1.3939106464385986, 1.0966308116912842, 0.9349022507667542, 0.8419743776321411, 0.7695197463035583, 0.729751467704773, 0.6897091865539551, 0.6576535105705261, 0.6359990835189819, 0.6094067096710205, 0.589935839176178, 0.5596274733543396, 0.5528120398521423, 0.5393894910812378, 0.5281672477722168, 0.5202223062515259, 0.5057564377784729, 0.5040625333786011, 0.48261573910713196, 0.46983885765075684, 0.4574008584022522, 0.454408198595047, 0.4424269199371338, 0.42842501401901245, 0.42894208431243896, 0.42616719007492065, 0.41881483793258667, 0.4155913293361664, 0.4008829891681671, 0.39691162109375, 0.38997870683670044, 0.38351768255233765, 0.37681254744529724, 0.3729562759399414, 0.36148902773857117, 0.362969309091568, 0.3563940227031708, 0.3505782186985016, 0.35241496562957764, 0.34010687470436096, 0.3387279510498047, 0.3343537747859955, 0.3285624086856842, 0.32427793741226196, 0.319965660572052, 0.3122166097164154, 0.30889007449150085, 0.3045063316822052], "accuracy": [0.2694492042064667, 0.48870691657066345, 0.568220853805542, 0.6156386137008667, 0.6696605682373047, 0.6963412761688232, 0.7223616242408752, 0.7312111854553223, 0.750759482383728, 0.7600052952766418, 0.7696473598480225, 0.7761194109916687, 0.787082314491272, 0.7985734939575195, 0.7980451583862305, 0.8045172095298767, 0.8121780753135681, 0.8125742673873901, 0.8178576231002808, 0.8191784620285034, 0.8251221776008606, 0.8322546482086182, 0.8356888294219971, 0.8359529972076416, 0.8389908671379089, 0.846387505531311, 0.8451988101005554, 0.8454629778862, 0.848368763923645, 0.8531237840652466, 0.8598600029945374, 0.854708731174469, 0.8605204224586487, 0.8609166741371155, 0.86553955078125, 0.8639545440673828, 0.8689737319946289, 0.8706908226013184, 0.873860776424408, 0.872407853603363, 0.8710870146751404, 0.8776912093162537, 0.8792761564254761, 0.8824461698532104, 0.882710337638855, 0.8811253309249878, 0.887597382068634, 0.887597382068634, 0.8906353116035461, 0.8911636471748352], "val_loss": [2.0369274616241455, 1.5092171430587769, 1.0378726720809937, 0.8372371196746826, 0.7430018186569214, 0.693951427936554, 0.6459794044494629, 0.6065753698348999, 0.5836796760559082, 0.5591391324996948, 0.5475665926933289, 0.5286199450492859, 0.5111508965492249, 0.49807658791542053, 0.4888598918914795, 0.4807276725769043, 0.4732670187950134, 0.46291399002075195, 0.4651739001274109, 0.44972753524780273, 0.44051307439804077, 0.4300120174884796, 0.42833927273750305, 0.4226953983306885, 0.42076465487480164, 0.41008231043815613, 0.40701472759246826, 0.4087570011615753, 0.3987274467945099, 0.39754143357276917, 0.3908216655254364, 0.39351579546928406, 0.3876643180847168, 0.3835429251194, 0.3747929334640503, 0.37449854612350464, 0.3731365501880646, 0.3678072988986969, 0.3718084394931793, 0.3737613260746002, 0.36592888832092285, 0.3612542748451233, 0.3634853661060333, 0.3576800525188446, 0.35225361585617065, 0.35540124773979187, 0.35645702481269836, 0.3527815639972687, 0.3493586778640747, 0.349461168050766], "val_accuracy": [0.5453333258628845, 0.6666666865348816, 0.6899999976158142, 0.7136666774749756, 0.737666666507721, 0.7523333430290222, 0.765666663646698, 0.7816666960716248, 0.7886666655540466, 0.7976666688919067, 0.7953333258628845, 0.8090000152587891, 0.8193333148956299, 0.8209999799728394, 0.8233333230018616, 0.8309999704360962, 0.8243333101272583, 0.843666672706604, 0.8333333134651184, 0.840666651725769, 0.846666693687439, 0.8569999933242798, 0.8533333539962769, 0.8556666374206543, 0.8533333539962769, 0.8613333106040955, 0.8636666536331177, 0.8616666793823242, 0.8659999966621399, 0.862333357334137, 0.8683333396911621, 0.8663333058357239, 0.871999979019165, 0.8673333525657654, 0.8763333559036255, 0.878000020980835, 0.8756666779518127, 0.878000020980835, 0.8756666779518127, 0.8756666779518127, 0.8790000081062317, 0.8776666522026062, 0.8809999823570251, 0.8813333511352539, 0.8833333253860474, 0.8796666860580444, 0.8826666474342346, 0.8826666474342346, 0.8823333382606506, 0.8830000162124634]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8545714020729065, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223698377609253, 1.8681457042694092, 1.3967386484146118, 1.1012459993362427, 0.9462987184524536, 0.8285125494003296, 0.7605531215667725, 0.7191540598869324, 0.6885694265365601, 0.6681140661239624, 0.6339053511619568, 0.6152785420417786, 0.6037334203720093, 0.5795543193817139, 0.5616450905799866, 0.5544872283935547, 0.5364943146705627, 0.5257450342178345, 0.5096590518951416, 0.5106719732284546, 0.4934064745903015, 0.4850098490715027, 0.47484493255615234, 0.4673571288585663, 0.46034127473831177, 0.4598067104816437, 0.4464603364467621, 0.4290655255317688, 0.4274407923221588, 0.4230077266693115, 0.41219887137413025, 0.4069152772426605, 0.3994247317314148, 0.40089690685272217, 0.39534828066825867, 0.38916125893592834], "accuracy": [0.2654867172241211, 0.49068814516067505, 0.5597675442695618, 0.6145819425582886, 0.6576409935951233, 0.7045304179191589, 0.7232862114906311, 0.7408532500267029, 0.7485140562057495, 0.7556465268135071, 0.7705719470977783, 0.7779685854911804, 0.778232753276825, 0.7926297783851624, 0.7959318161010742, 0.7968564033508301, 0.8086118102073669, 0.809140145778656, 0.8219521641731262, 0.8215559124946594, 0.8244617581367493, 0.8222163319587708, 0.828292191028595, 0.833179235458374, 0.8362171649932861, 0.8330471515655518, 0.841500461101532, 0.8479725122451782, 0.8494254350662231, 0.8455950617790222, 0.8502179384231567, 0.8543124794960022, 0.8549728989601135, 0.8531237840652466, 0.8539162874221802, 0.8613129258155823], "val_loss": [2.0430238246917725, 1.5258561372756958, 1.0575419664382935, 0.8533436059951782, 0.7684431672096252, 0.7067230343818665, 0.6574252247810364, 0.6230486035346985, 0.6004741787910461, 0.5799342393875122, 0.5588739514350891, 0.5441584587097168, 0.5276878476142883, 0.5127940773963928, 0.5101521611213684, 0.49097850918769836, 0.48694172501564026, 0.4732191264629364, 0.4688662886619568, 0.47087401151657104, 0.4560549855232239, 0.449862539768219, 0.44513171911239624, 0.4413280487060547, 0.43629732728004456, 0.44195523858070374, 0.4232487678527832, 0.4206576347351074, 0.4193144142627716, 0.4161955714225769, 0.4119494557380676, 0.40819063782691956, 0.4064596891403198, 0.4058244526386261, 0.41151130199432373, 0.3971046507358551], "val_accuracy": [0.5609999895095825, 0.6413333415985107, 0.6726666688919067, 0.6996666789054871, 0.7153333425521851, 0.7279999852180481, 0.7383333444595337, 0.7586666941642761, 0.762333333492279, 0.781333327293396, 0.781333327293396, 0.7873333096504211, 0.8029999732971191, 0.8096666932106018, 0.8056666851043701, 0.8180000185966492, 0.8220000267028809, 0.824999988079071, 0.8323333263397217, 0.8243333101272583, 0.8366666436195374, 0.8416666388511658, 0.8423333168029785, 0.8423333168029785, 0.8446666598320007, 0.8336666822433472, 0.8463333249092102, 0.8456666469573975, 0.8473333120346069, 0.8396666646003723, 0.8519999980926514, 0.8500000238418579, 0.8486666679382324, 0.8476666808128357, 0.8433333039283752, 0.8500000238418579]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 1], [0], [0], [0], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8545714020729065, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.293553113937378, 2.18911075592041, 1.7681771516799927, 1.3219331502914429, 1.0787159204483032, 0.9223172068595886, 0.8658169507980347, 0.8275570273399353, 0.7665103077888489, 0.7477778792381287, 0.7170427441596985, 0.6926527619361877, 0.6531727910041809, 0.641191303730011, 0.6245043277740479, 0.6060866713523865, 0.6102813482284546, 0.5939633250236511, 0.5811641812324524, 0.5756200551986694, 0.5511259436607361, 0.546841025352478, 0.523197591304779, 0.5072266459465027, 0.49503153562545776, 0.48864686489105225, 0.4801148772239685, 0.46688205003738403, 0.466496080160141, 0.45447635650634766, 0.4505695402622223, 0.4487614333629608, 0.42583462595939636, 0.4295045733451843, 0.4168274998664856, 0.40690183639526367, 0.4118254780769348, 0.38528820872306824, 0.39315831661224365, 0.375772625207901, 0.36861497163772583, 0.3706376552581787, 0.3639560341835022, 0.36566710472106934, 0.3527044653892517, 0.34807848930358887, 0.3399747908115387, 0.33439749479293823, 0.3320613503456116, 0.3285645842552185, 0.3180047869682312, 0.3181573152542114, 0.3079143464565277, 0.3066101372241974, 0.31383436918258667], "accuracy": [0.12653546035289764, 0.3275656998157501, 0.4488178491592407, 0.5498613119125366, 0.637828528881073, 0.6618676781654358, 0.6843217611312866, 0.7025492191314697, 0.7030775547027588, 0.7199841737747192, 0.7327961921691895, 0.7388719916343689, 0.752212405204773, 0.7549861073493958, 0.7574957013130188, 0.7680623531341553, 0.7660810947418213, 0.7714964747428894, 0.7824593782424927, 0.7841764688491821, 0.7874785661697388, 0.7965922355651855, 0.796328067779541, 0.8020076751708984, 0.811649739742279, 0.8170651197433472, 0.8178576231002808, 0.8247259259223938, 0.8253863453865051, 0.8252542614936829, 0.8267071843147278, 0.8301413059234619, 0.8385946154594421, 0.837141752243042, 0.8385946154594421, 0.8449346423149109, 0.8453308939933777, 0.8562937378883362, 0.848368763923645, 0.8599920868873596, 0.857218325138092, 0.8607845902442932, 0.8588033318519592, 0.8605204224586487, 0.8628978729248047, 0.8648791313171387, 0.8688416481018066, 0.8709549307823181, 0.8684453964233398, 0.8676528930664062, 0.8725399374961853, 0.8739928603172302, 0.8754457831382751, 0.880729079246521, 0.8794082403182983], "val_loss": [2.245488405227661, 2.0193474292755127, 1.1288374662399292, 0.8446541428565979, 0.7294015288352966, 0.6967073678970337, 0.6395217776298523, 0.6235867738723755, 0.6126726269721985, 0.5913091897964478, 0.5380934476852417, 0.5174557566642761, 0.5273367166519165, 0.5062400102615356, 0.48937299847602844, 0.49293771386146545, 0.478475421667099, 0.4663516879081726, 0.4776896834373474, 0.46657702326774597, 0.4530964493751526, 0.4322333037853241, 0.43270984292030334, 0.42873919010162354, 0.42336559295654297, 0.43054232001304626, 0.42338427901268005, 0.4249822497367859, 0.4156573414802551, 0.4107958972454071, 0.3989051878452301, 0.3950541317462921, 0.3890226185321808, 0.39464071393013, 0.3889240324497223, 0.38735994696617126, 0.3816641867160797, 0.3862757980823517, 0.38445258140563965, 0.37414082884788513, 0.36883580684661865, 0.3644355535507202, 0.36927810311317444, 0.37349581718444824, 0.36644721031188965, 0.36695948243141174, 0.37710103392601013, 0.37104159593582153, 0.3679673671722412, 0.3738582730293274, 0.3844776749610901, 0.3676089346408844, 0.3588614761829376, 0.3868666887283325, 0.3864688277244568], "val_accuracy": [0.41866666078567505, 0.46700000762939453, 0.6639999747276306, 0.7120000123977661, 0.7369999885559082, 0.7516666650772095, 0.7543333172798157, 0.7609999775886536, 0.7710000276565552, 0.781000018119812, 0.781333327293396, 0.7963333129882812, 0.7910000085830688, 0.7979999780654907, 0.7993333339691162, 0.8016666769981384, 0.8173333406448364, 0.8143333196640015, 0.8076666593551636, 0.8153333067893982, 0.8270000219345093, 0.8286666870117188, 0.824999988079071, 0.8373333215713501, 0.8363333344459534, 0.8333333134651184, 0.8450000286102295, 0.8463333249092102, 0.8456666469573975, 0.8423333168029785, 0.846666693687439, 0.8556666374206543, 0.8536666631698608, 0.8550000190734863, 0.8573333621025085, 0.8560000061988831, 0.8553333282470703, 0.859000027179718, 0.8603333234786987, 0.8659999966621399, 0.8696666955947876, 0.8633333444595337, 0.8683333396911621, 0.8730000257492065, 0.8740000128746033, 0.8693333268165588, 0.875333309173584, 0.8686666488647461, 0.8679999709129333, 0.8776666522026062, 0.8743333220481873, 0.874666690826416, 0.8740000128746033, 0.874666690826416, 0.8776666522026062]}, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8328571319580078, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.4611575603485107, 0.7353202104568481, 0.6478005051612854, 0.572929322719574, 0.5226765871047974, 0.484009712934494, 0.4670998454093933, 0.46329668164253235, 0.46018195152282715, 0.44967684149742126, 0.4670863449573517, 0.4411703050136566], "accuracy": [0.47312110662460327, 0.7362303733825684, 0.7675340175628662, 0.7887993454933167, 0.809140145778656, 0.8228767514228821, 0.83119797706604, 0.8418967127799988, 0.8298771381378174, 0.8405758738517761, 0.8482366800308228, 0.8438779711723328], "val_loss": [0.6882516145706177, 0.6322449445724487, 0.554093599319458, 0.5091085433959961, 0.5061339139938354, 0.46283796429634094, 0.5204488635063171, 0.45451274514198303, 0.4891069233417511, 0.589310884475708, 0.5843095183372498, 0.5730722546577454], "val_accuracy": [0.7490000128746033, 0.7793333530426025, 0.8033333420753479, 0.8163333535194397, 0.8393333554267883, 0.8426666855812073, 0.8503333330154419, 0.831333339214325, 0.8426666855812073, 0.8500000238418579, 0.8323333263397217, 0.8456666469573975]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [5, 2, 3, 0, 2, 5, 3, 9, 8, 9, 7, 4, 3, 0], [0, 2, 3, 3, 1, 5], [0, 16, 61], [0, 1], [0], [0], [25], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 0, 0, 5], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [49, 99, 96, 99, 61, 1]], "fitness": -0.1071428582072258, "mapping_values": [1, 9, 5, 4, 2, 20, 14, 6, 3, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.pow(tf.math.multiply(grad, tf.math.negative(grad)), alpha))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, grad))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [231446.015625, 266372.5, 251619.0625, 233655.171875, 201284.390625, 158986.5625, 118687.375, 89414.7109375], "accuracy": [0.09721305221319199, 0.09959053993225098, 0.10566636174917221, 0.10289261490106583, 0.10328886657953262, 0.09338264167308807, 0.08625016361474991, 0.09060890227556229], "val_loss": [263000.90625, 253011.34375, 236464.078125, 209920.359375, 177079.890625, 125390.921875, 93025.5859375, 82520.7109375], "val_accuracy": [0.10000000149011612, 0.10166666656732559, 0.10466666519641876, 0.10400000214576721, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 1, 8, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [1, 0], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 8, 4, 2, 8], [0, 0, 4, 3, 0, 0, 3, 1, 2, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 2, 1, 0, 1, 1, 17, 9, 8, 4], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 8, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 1, 3, 1, 2, 0], [22, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 1, 2, 1, 1, 1, 11, 6, 5, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [2.3045480251312256, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 4, 6, 1, 5], [0, 1, 0, 2, 3, 0, 3], [74, 73, 3], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1], [6, 2, 3, 0, 3, 5, 7, 2, 5, 4, 9, 2, 8, 6, 3, 0, 0, 9, 4, 1, 9, 5, 3, 6, 8, 9], [0, 2, 0, 3, 3, 1, 1, 3, 3, 4, 2], [16, 16, 50, 44, 63, 85], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 8, 4, 1, 4, 2, 8, 3], [0, 0, 0, 4, 2, 4, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 9, 7, 3, 37, 26, 11, 6, 2, 1, 1, 1, 22, 12, 10, 4], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.pow(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.square(grad), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.add(tf.math.add(tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.sqrt(grad), tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.negative(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), alpha)))), tf.math.pow(tf.math.subtract(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), alpha), tf.math.square(tf.math.multiply(grad, grad)))))), tf.math.divide_no_nan(grad, tf.math.sqrt(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(grad, tf.math.add(beta, grad)), sigma)))), tf.math.sqrt(tf.math.multiply(alpha, beta))), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}]