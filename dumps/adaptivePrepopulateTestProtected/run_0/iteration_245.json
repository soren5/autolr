[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8805714249610901, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585988998413, 1.8659464120864868, 1.3939106464385986, 1.0966308116912842, 0.9349022507667542, 0.8419743776321411, 0.7695197463035583, 0.729751467704773, 0.6897091865539551, 0.6576535105705261, 0.6359990835189819, 0.6094067096710205, 0.589935839176178, 0.5596274733543396, 0.5528120398521423, 0.5393894910812378, 0.5281672477722168, 0.5202223062515259, 0.5057564377784729, 0.5040625333786011, 0.48261573910713196, 0.46983885765075684, 0.4574008584022522, 0.454408198595047, 0.4424269199371338, 0.42842501401901245, 0.42894208431243896, 0.42616719007492065, 0.41881483793258667, 0.4155913293361664, 0.4008829891681671, 0.39691162109375, 0.38997870683670044, 0.38351768255233765, 0.37681254744529724, 0.3729562759399414, 0.36148902773857117, 0.362969309091568, 0.3563940227031708, 0.3505782186985016, 0.35241496562957764, 0.34010687470436096, 0.3387279510498047, 0.3343537747859955, 0.3285624086856842, 0.32427793741226196, 0.319965660572052, 0.3122166097164154, 0.30889007449150085, 0.3045063316822052], "accuracy": [0.2694492042064667, 0.48870691657066345, 0.568220853805542, 0.6156386137008667, 0.6696605682373047, 0.6963412761688232, 0.7223616242408752, 0.7312111854553223, 0.750759482383728, 0.7600052952766418, 0.7696473598480225, 0.7761194109916687, 0.787082314491272, 0.7985734939575195, 0.7980451583862305, 0.8045172095298767, 0.8121780753135681, 0.8125742673873901, 0.8178576231002808, 0.8191784620285034, 0.8251221776008606, 0.8322546482086182, 0.8356888294219971, 0.8359529972076416, 0.8389908671379089, 0.846387505531311, 0.8451988101005554, 0.8454629778862, 0.848368763923645, 0.8531237840652466, 0.8598600029945374, 0.854708731174469, 0.8605204224586487, 0.8609166741371155, 0.86553955078125, 0.8639545440673828, 0.8689737319946289, 0.8706908226013184, 0.873860776424408, 0.872407853603363, 0.8710870146751404, 0.8776912093162537, 0.8792761564254761, 0.8824461698532104, 0.882710337638855, 0.8811253309249878, 0.887597382068634, 0.887597382068634, 0.8906353116035461, 0.8911636471748352], "val_loss": [2.0369274616241455, 1.5092171430587769, 1.0378726720809937, 0.8372371196746826, 0.7430018186569214, 0.693951427936554, 0.6459794044494629, 0.6065753698348999, 0.5836796760559082, 0.5591391324996948, 0.5475665926933289, 0.5286199450492859, 0.5111508965492249, 0.49807658791542053, 0.4888598918914795, 0.4807276725769043, 0.4732670187950134, 0.46291399002075195, 0.4651739001274109, 0.44972753524780273, 0.44051307439804077, 0.4300120174884796, 0.42833927273750305, 0.4226953983306885, 0.42076465487480164, 0.41008231043815613, 0.40701472759246826, 0.4087570011615753, 0.3987274467945099, 0.39754143357276917, 0.3908216655254364, 0.39351579546928406, 0.3876643180847168, 0.3835429251194, 0.3747929334640503, 0.37449854612350464, 0.3731365501880646, 0.3678072988986969, 0.3718084394931793, 0.3737613260746002, 0.36592888832092285, 0.3612542748451233, 0.3634853661060333, 0.3576800525188446, 0.35225361585617065, 0.35540124773979187, 0.35645702481269836, 0.3527815639972687, 0.3493586778640747, 0.349461168050766], "val_accuracy": [0.5453333258628845, 0.6666666865348816, 0.6899999976158142, 0.7136666774749756, 0.737666666507721, 0.7523333430290222, 0.765666663646698, 0.7816666960716248, 0.7886666655540466, 0.7976666688919067, 0.7953333258628845, 0.8090000152587891, 0.8193333148956299, 0.8209999799728394, 0.8233333230018616, 0.8309999704360962, 0.8243333101272583, 0.843666672706604, 0.8333333134651184, 0.840666651725769, 0.846666693687439, 0.8569999933242798, 0.8533333539962769, 0.8556666374206543, 0.8533333539962769, 0.8613333106040955, 0.8636666536331177, 0.8616666793823242, 0.8659999966621399, 0.862333357334137, 0.8683333396911621, 0.8663333058357239, 0.871999979019165, 0.8673333525657654, 0.8763333559036255, 0.878000020980835, 0.8756666779518127, 0.878000020980835, 0.8756666779518127, 0.8756666779518127, 0.8790000081062317, 0.8776666522026062, 0.8809999823570251, 0.8813333511352539, 0.8833333253860474, 0.8796666860580444, 0.8826666474342346, 0.8826666474342346, 0.8823333382606506, 0.8830000162124634]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8662857413291931, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2225470542907715, 1.864276647567749, 1.3921973705291748, 1.106906533241272, 0.9586500525474548, 0.8525015115737915, 0.7935206294059753, 0.737712562084198, 0.6983761191368103, 0.6663375496864319, 0.6473888158798218, 0.6312161684036255, 0.5989055037498474, 0.5799523591995239, 0.5689854025840759, 0.5571432709693909, 0.5416233539581299, 0.5269810557365417, 0.5086827278137207, 0.5095995664596558, 0.4930790960788727, 0.48684051632881165, 0.4701310396194458, 0.464947372674942, 0.45547598600387573, 0.44752663373947144, 0.4447886645793915, 0.43420037627220154, 0.4258051812648773, 0.41405537724494934, 0.4099329113960266, 0.40692293643951416, 0.3984857201576233, 0.3956395089626312, 0.39108794927597046, 0.38489100337028503, 0.3813569247722626, 0.3733304738998413, 0.3682882487773895, 0.36163678765296936, 0.35678133368492126, 0.35389575362205505, 0.3408060371875763, 0.33907169103622437, 0.33185455203056335], "accuracy": [0.28080835938453674, 0.4966318905353546, 0.5602958798408508, 0.6147140264511108, 0.6592260003089905, 0.694360077381134, 0.7143045663833618, 0.7300224304199219, 0.7495707273483276, 0.759080708026886, 0.7672698497772217, 0.7733456492424011, 0.7889314293861389, 0.7969884872436523, 0.7960638999938965, 0.8034605979919434, 0.8101968169212341, 0.8152159452438354, 0.8183859586715698, 0.8252542614936829, 0.8300092220306396, 0.8308017253875732, 0.8343679904937744, 0.8348963260650635, 0.8405758738517761, 0.8428213000297546, 0.8442742228507996, 0.8477083444595337, 0.8545766472816467, 0.8524633646011353, 0.8565579056739807, 0.86118084192276, 0.8613129258155823, 0.8627657890319824, 0.8621054291725159, 0.8685774803161621, 0.8688416481018066, 0.8709549307823181, 0.8729361891746521, 0.8716153502464294, 0.8725399374961853, 0.8754457831382751, 0.8790120482444763, 0.8815215826034546, 0.8786157965660095], "val_loss": [2.0396907329559326, 1.5145642757415771, 1.0473811626434326, 0.8465136885643005, 0.7554109692573547, 0.696097195148468, 0.6513389348983765, 0.6140865087509155, 0.5917348861694336, 0.5679305195808411, 0.5507379174232483, 0.5340253710746765, 0.5215686559677124, 0.5153356790542603, 0.49784618616104126, 0.4875275790691376, 0.484287828207016, 0.47021108865737915, 0.46997639536857605, 0.45585423707962036, 0.44981852173805237, 0.4429684281349182, 0.445682168006897, 0.4385754466056824, 0.43288347125053406, 0.431123286485672, 0.4199278950691223, 0.41380205750465393, 0.4100874066352844, 0.40723055601119995, 0.4065797030925751, 0.40329116582870483, 0.4010807275772095, 0.3993794023990631, 0.39173567295074463, 0.39519649744033813, 0.391510546207428, 0.3874892592430115, 0.38290104269981384, 0.3769749701023102, 0.37683984637260437, 0.37756627798080444, 0.3758074641227722, 0.37306925654411316, 0.37200936675071716], "val_accuracy": [0.5419999957084656, 0.6663333177566528, 0.6909999847412109, 0.7093333601951599, 0.734000027179718, 0.7480000257492065, 0.765666663646698, 0.7749999761581421, 0.7836666703224182, 0.7946666479110718, 0.8036666512489319, 0.8140000104904175, 0.8159999847412109, 0.815666675567627, 0.8209999799728394, 0.8293333053588867, 0.8306666612625122, 0.8413333296775818, 0.8316666483879089, 0.8450000286102295, 0.8460000157356262, 0.8510000109672546, 0.8450000286102295, 0.8476666808128357, 0.8523333072662354, 0.8476666808128357, 0.8573333621025085, 0.859333336353302, 0.8583333492279053, 0.8603333234786987, 0.8610000014305115, 0.8610000014305115, 0.8640000224113464, 0.8636666536331177, 0.8646666407585144, 0.8636666536331177, 0.8653333187103271, 0.8669999837875366, 0.8669999837875366, 0.8726666569709778, 0.871999979019165, 0.8723333477973938, 0.8713333606719971, 0.8726666569709778, 0.871999979019165]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1], [0, 1, 1, 5, 6, 0, 6, 0, 0, 5, 7, 7, 4, 8, 8], [0, 0, 2, 1, 2, 1, 0, 4], [0, 77, 46], [0, 0, 0, 1, 0, 1, 1, 1], [0, 4, 7, 2], [0, 1, 5, 6], [0], [0, 1], [0], [1], [0]], "fitness": -0.8551428318023682, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.divide_no_nan(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.negative(tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.add(beta, tf.math.pow(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))))))), tf.math.sqrt(tf.math.sqrt(grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2938332557678223, 2.1884801387786865, 1.763421893119812, 1.3539098501205444, 1.0722954273223877, 0.9167861342430115, 0.8350740075111389, 0.8003825545310974, 0.7456852197647095, 0.7215580940246582, 0.6833493709564209, 0.662988543510437, 0.6288473606109619, 0.6031460165977478, 0.5877907872200012, 0.5816270709037781, 0.5634947419166565, 0.5455774068832397, 0.5443084239959717, 0.5361340641975403, 0.5174970030784607, 0.5084945559501648, 0.5056082606315613, 0.49194398522377014, 0.4743610620498657, 0.47088950872421265, 0.4576053023338318, 0.45149752497673035, 0.4463050961494446, 0.43690168857574463, 0.4191325306892395, 0.41861170530319214, 0.4229688346385956, 0.40483102202415466, 0.40416303277015686, 0.3989911377429962, 0.3867194652557373, 0.3859620690345764, 0.3754231333732605, 0.3744310438632965, 0.35523170232772827, 0.3653266727924347, 0.35741743445396423, 0.33806225657463074, 0.33876416087150574, 0.3307441473007202, 0.33323654532432556], "accuracy": [0.13036586344242096, 0.33284902572631836, 0.43970412015914917, 0.5403513312339783, 0.6308281421661377, 0.6598864197731018, 0.6907938122749329, 0.7054550051689148, 0.707568347454071, 0.7293620109558105, 0.7372870445251465, 0.7470611333847046, 0.7535332441329956, 0.7640998363494873, 0.7638356685638428, 0.7790252566337585, 0.7823272943496704, 0.7903843522071838, 0.7931581139564514, 0.7979130744934082, 0.8024039268493652, 0.8034605979919434, 0.809140145778656, 0.8099326491355896, 0.8175934553146362, 0.819970965385437, 0.8216879963874817, 0.8234050869941711, 0.8257825970649719, 0.8348963260650635, 0.8401796221733093, 0.8425571322441101, 0.8366134166717529, 0.842028796672821, 0.8479725122451782, 0.8498216867446899, 0.8548408150672913, 0.8541803956031799, 0.8590674996376038, 0.8564258217811584, 0.8614450097084045, 0.8595958352088928, 0.8570862412452698, 0.872407853603363, 0.8668603897094727, 0.8737286925315857, 0.871879518032074], "val_loss": [2.2464516162872314, 2.018497943878174, 1.1232867240905762, 0.8940935730934143, 0.7789134383201599, 0.702444851398468, 0.6720093488693237, 0.6439283490180969, 0.6579238176345825, 0.6147246360778809, 0.5695515275001526, 0.569534182548523, 0.5438178181648254, 0.5254758596420288, 0.5231635570526123, 0.5056052803993225, 0.5087692737579346, 0.5094114542007446, 0.5016990303993225, 0.48564982414245605, 0.46423354744911194, 0.45985865592956543, 0.45529812574386597, 0.4533827602863312, 0.44716283679008484, 0.4461917281150818, 0.4435886740684509, 0.4325883686542511, 0.4344276487827301, 0.4480343461036682, 0.431234747171402, 0.4240344166755676, 0.43311837315559387, 0.4326062500476837, 0.4293239712715149, 0.44661861658096313, 0.424274206161499, 0.40892595052719116, 0.40935230255126953, 0.4143965542316437, 0.4169589579105377, 0.4214210510253906, 0.4139103293418884, 0.40657222270965576, 0.4046688675880432, 0.4000566303730011, 0.3896746039390564], "val_accuracy": [0.41200000047683716, 0.4703333377838135, 0.6520000100135803, 0.6800000071525574, 0.7120000123977661, 0.7350000143051147, 0.7393333315849304, 0.7416666746139526, 0.7490000128746033, 0.7580000162124634, 0.768666684627533, 0.7760000228881836, 0.7923333048820496, 0.7960000038146973, 0.8056666851043701, 0.8003333210945129, 0.7996666431427002, 0.8036666512489319, 0.8043333292007446, 0.8106666803359985, 0.8183333277702332, 0.8246666789054871, 0.82833331823349, 0.8360000252723694, 0.8363333344459534, 0.8376666903495789, 0.8336666822433472, 0.8416666388511658, 0.8416666388511658, 0.8429999947547913, 0.8486666679382324, 0.8486666679382324, 0.8429999947547913, 0.8476666808128357, 0.8516666889190674, 0.8529999852180481, 0.8619999885559082, 0.8583333492279053, 0.8550000190734863, 0.8586666584014893, 0.8613333106040955, 0.8676666617393494, 0.8613333106040955, 0.8640000224113464, 0.862666666507721, 0.862333357334137, 0.8643333315849304]}, "mapping_values": [1, 10, 5, 5, 3, 23, 15, 8, 3, 8, 4, 4, 1, 2, 1, 1, 0], "tree_depth": 26}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8342857360839844, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5321457386016846, 0.8307135701179504, 0.6766718626022339, 0.5978779196739197, 0.5853345394134521, 0.5448757410049438, 0.5422846674919128, 0.5355743169784546, 0.5158985257148743, 0.509080708026886, 0.5009166598320007, 0.5265887379646301, 0.5296785831451416, 0.5480568408966064, 0.523800253868103, 0.5817550420761108, 0.6200055480003357, 0.59943026304245, 0.5993346571922302], "accuracy": [0.471800297498703, 0.7174745798110962, 0.7515519857406616, 0.7804781198501587, 0.7878747582435608, 0.8061022162437439, 0.8136309385299683, 0.8074230551719666, 0.8161405324935913, 0.8241975903511047, 0.8108572363853455, 0.8265751004219055, 0.8284242749214172, 0.8178576231002808, 0.8165367841720581, 0.7940827012062073, 0.8125742673873901, 0.8099326491355896, 0.8203672170639038], "val_loss": [0.8721495866775513, 0.6141157150268555, 0.5565300583839417, 0.5393068194389343, 0.5305662155151367, 0.5288141369819641, 0.5179299116134644, 0.5344668626785278, 0.5742830634117126, 0.538109540939331, 0.5303859710693359, 0.6125296354293823, 0.5228160619735718, 0.569240152835846, 0.61029452085495, 0.5828713178634644, 0.6690905094146729, 0.6728556752204895, 0.7037400007247925], "val_accuracy": [0.7183333039283752, 0.7806666493415833, 0.8009999990463257, 0.8083333373069763, 0.8220000267028809, 0.8159999847412109, 0.8303333520889282, 0.8270000219345093, 0.8266666531562805, 0.8286666870117188, 0.8266666531562805, 0.8360000252723694, 0.8370000123977661, 0.8383333086967468, 0.8206666707992554, 0.8303333520889282, 0.8333333134651184, 0.8299999833106995, 0.812333345413208]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 2, 0, 3], [0, 1, 0, 2], [39, 15], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [8, 3, 3, 6, 8, 2, 4, 1, 4, 2, 8], [0, 1, 4, 3, 0, 0, 3, 4, 2, 0], [16, 99, 96, 1, 61, 31]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 7, 4, 3, 2, 2, 1, 1, 1, 15, 8, 7, 3], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.pow(grad, sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [5], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [4, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [2, 0, 4, 3, 0, 0, 1, 1, 2, 0], [16, 99, 64, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 4, 2, 2, 1, 2, 1, 1, 1, 20, 10, 10, 4], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), alpha)))), alpha), tf.math.add(beta, tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 1, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 97], [0, 1], [8], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 2, 3, 0, 6, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.09342857450246811, "mapping_values": [1, 9, 5, 4, 1, 6, 3, 3, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.divide_no_nan(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.310051202774048, 2.31069278717041, 2.3109681606292725, 2.310512065887451, 2.3100461959838867, 2.3090362548828125], "accuracy": [0.09668471664190292, 0.09311848133802414, 0.08928807079792023, 0.09219389408826828, 0.08889182657003403, 0.09509972482919693], "val_loss": [2.308864116668701, 2.308873176574707, 2.30887770652771, 2.3088796138763428, 2.3088810443878174, 2.3088815212249756], "val_accuracy": [0.09099999815225601, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09066666662693024, 0.09066666662693024]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [61, 16], [1, 1], [1], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 5, 5, 1, 4, 2, 2, 0], [0, 0, 0, 1, 0, 0, 3, 4, 2, 0], [16, 14, 96, 99, 61, 1]], "fitness": -0.08828571438789368, "mapping_values": [1, 9, 5, 4, 2, 2, 1, 1, 1, 1, 0, 1, 1, 21, 12, 9, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.square(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))), tf.math.square(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), alpha), tf.math.subtract(tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), sigma), tf.math.add(tf.math.negative(grad), beta)))", "other_info": {"loss": [2.310882568359375, 2.309220314025879, 2.310197591781616, 2.310218572616577, 2.3093302249908447, 2.30977725982666], "accuracy": [0.09219389408826828, 0.09285431355237961, 0.08902391046285629, 0.09232597798109055, 0.09457138925790787, 0.09140139818191528], "val_loss": [2.3089048862457275, 2.3089048862457275, 2.3089048862457275, 2.3089048862457275, 2.3089048862457275, 2.3089048862457275], "val_accuracy": [0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601]}}]