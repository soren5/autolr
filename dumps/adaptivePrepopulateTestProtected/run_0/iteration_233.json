[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8805714249610901, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585988998413, 1.8659464120864868, 1.3939106464385986, 1.0966308116912842, 0.9349022507667542, 0.8419743776321411, 0.7695197463035583, 0.729751467704773, 0.6897091865539551, 0.6576535105705261, 0.6359990835189819, 0.6094067096710205, 0.589935839176178, 0.5596274733543396, 0.5528120398521423, 0.5393894910812378, 0.5281672477722168, 0.5202223062515259, 0.5057564377784729, 0.5040625333786011, 0.48261573910713196, 0.46983885765075684, 0.4574008584022522, 0.454408198595047, 0.4424269199371338, 0.42842501401901245, 0.42894208431243896, 0.42616719007492065, 0.41881483793258667, 0.4155913293361664, 0.4008829891681671, 0.39691162109375, 0.38997870683670044, 0.38351768255233765, 0.37681254744529724, 0.3729562759399414, 0.36148902773857117, 0.362969309091568, 0.3563940227031708, 0.3505782186985016, 0.35241496562957764, 0.34010687470436096, 0.3387279510498047, 0.3343537747859955, 0.3285624086856842, 0.32427793741226196, 0.319965660572052, 0.3122166097164154, 0.30889007449150085, 0.3045063316822052], "accuracy": [0.2694492042064667, 0.48870691657066345, 0.568220853805542, 0.6156386137008667, 0.6696605682373047, 0.6963412761688232, 0.7223616242408752, 0.7312111854553223, 0.750759482383728, 0.7600052952766418, 0.7696473598480225, 0.7761194109916687, 0.787082314491272, 0.7985734939575195, 0.7980451583862305, 0.8045172095298767, 0.8121780753135681, 0.8125742673873901, 0.8178576231002808, 0.8191784620285034, 0.8251221776008606, 0.8322546482086182, 0.8356888294219971, 0.8359529972076416, 0.8389908671379089, 0.846387505531311, 0.8451988101005554, 0.8454629778862, 0.848368763923645, 0.8531237840652466, 0.8598600029945374, 0.854708731174469, 0.8605204224586487, 0.8609166741371155, 0.86553955078125, 0.8639545440673828, 0.8689737319946289, 0.8706908226013184, 0.873860776424408, 0.872407853603363, 0.8710870146751404, 0.8776912093162537, 0.8792761564254761, 0.8824461698532104, 0.882710337638855, 0.8811253309249878, 0.887597382068634, 0.887597382068634, 0.8906353116035461, 0.8911636471748352], "val_loss": [2.0369274616241455, 1.5092171430587769, 1.0378726720809937, 0.8372371196746826, 0.7430018186569214, 0.693951427936554, 0.6459794044494629, 0.6065753698348999, 0.5836796760559082, 0.5591391324996948, 0.5475665926933289, 0.5286199450492859, 0.5111508965492249, 0.49807658791542053, 0.4888598918914795, 0.4807276725769043, 0.4732670187950134, 0.46291399002075195, 0.4651739001274109, 0.44972753524780273, 0.44051307439804077, 0.4300120174884796, 0.42833927273750305, 0.4226953983306885, 0.42076465487480164, 0.41008231043815613, 0.40701472759246826, 0.4087570011615753, 0.3987274467945099, 0.39754143357276917, 0.3908216655254364, 0.39351579546928406, 0.3876643180847168, 0.3835429251194, 0.3747929334640503, 0.37449854612350464, 0.3731365501880646, 0.3678072988986969, 0.3718084394931793, 0.3737613260746002, 0.36592888832092285, 0.3612542748451233, 0.3634853661060333, 0.3576800525188446, 0.35225361585617065, 0.35540124773979187, 0.35645702481269836, 0.3527815639972687, 0.3493586778640747, 0.349461168050766], "val_accuracy": [0.5453333258628845, 0.6666666865348816, 0.6899999976158142, 0.7136666774749756, 0.737666666507721, 0.7523333430290222, 0.765666663646698, 0.7816666960716248, 0.7886666655540466, 0.7976666688919067, 0.7953333258628845, 0.8090000152587891, 0.8193333148956299, 0.8209999799728394, 0.8233333230018616, 0.8309999704360962, 0.8243333101272583, 0.843666672706604, 0.8333333134651184, 0.840666651725769, 0.846666693687439, 0.8569999933242798, 0.8533333539962769, 0.8556666374206543, 0.8533333539962769, 0.8613333106040955, 0.8636666536331177, 0.8616666793823242, 0.8659999966621399, 0.862333357334137, 0.8683333396911621, 0.8663333058357239, 0.871999979019165, 0.8673333525657654, 0.8763333559036255, 0.878000020980835, 0.8756666779518127, 0.878000020980835, 0.8756666779518127, 0.8756666779518127, 0.8790000081062317, 0.8776666522026062, 0.8809999823570251, 0.8813333511352539, 0.8833333253860474, 0.8796666860580444, 0.8826666474342346, 0.8826666474342346, 0.8823333382606506, 0.8830000162124634]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.854285717010498, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2231340408325195, 1.8701295852661133, 1.389931321144104, 1.08507239818573, 0.9294106960296631, 0.8325429558753967, 0.7660998106002808, 0.7101001739501953, 0.6731894612312317, 0.6534795761108398, 0.6211972832679749, 0.5979716777801514, 0.5874893069267273, 0.5701004266738892, 0.5588107705116272, 0.5318191647529602, 0.523679792881012, 0.5049064755439758, 0.5008072257041931, 0.4863891005516052, 0.47382238507270813, 0.45865824818611145, 0.46306756138801575, 0.45587196946144104, 0.4434799551963806, 0.42579424381256104, 0.42989128828048706, 0.4157578945159912, 0.4163719713687897, 0.40319061279296875, 0.4006745219230652, 0.390524297952652, 0.3805895447731018, 0.38468125462532043, 0.3691663444042206], "accuracy": [0.2661471366882324, 0.5008585453033447, 0.5760137438774109, 0.6260731816291809, 0.672698438167572, 0.6983225345611572, 0.724739134311676, 0.7395324110984802, 0.7464007139205933, 0.761590301990509, 0.7750627398490906, 0.7845727205276489, 0.7835160493850708, 0.7946110367774963, 0.798309326171875, 0.8080834746360779, 0.8083476424217224, 0.8175934553146362, 0.8206313848495483, 0.8265751004219055, 0.8294808864593506, 0.8342359066009521, 0.8388587832450867, 0.837537944316864, 0.8461233377456665, 0.8487650156021118, 0.8466516733169556, 0.8521991968154907, 0.8514066934585571, 0.8602562546730042, 0.8569541573524475, 0.8605204224586487, 0.8642187118530273, 0.8656716346740723, 0.8663320541381836], "val_loss": [2.039851665496826, 1.5137320756912231, 1.027841567993164, 0.8177521824836731, 0.7331814169883728, 0.6786412596702576, 0.6312309503555298, 0.5932424068450928, 0.5698325037956238, 0.5559864640235901, 0.5300759077072144, 0.5118887424468994, 0.5016136765480042, 0.49024537205696106, 0.4775143265724182, 0.4670758843421936, 0.4612518846988678, 0.44676902890205383, 0.44162246584892273, 0.4324348568916321, 0.42781633138656616, 0.42062288522720337, 0.42048555612564087, 0.4187661111354828, 0.4116986393928528, 0.4059295356273651, 0.3977810740470886, 0.3971283733844757, 0.3971553444862366, 0.3862898647785187, 0.3909972310066223, 0.3835606276988983, 0.38395166397094727, 0.38676923513412476, 0.3771471083164215], "val_accuracy": [0.531000018119812, 0.6579999923706055, 0.6926666498184204, 0.7103333473205566, 0.7316666841506958, 0.7523333430290222, 0.7636666893959045, 0.7743333578109741, 0.7876666784286499, 0.7933333516120911, 0.8029999732971191, 0.8143333196640015, 0.8209999799728394, 0.824999988079071, 0.8306666612625122, 0.8363333344459534, 0.8303333520889282, 0.8370000123977661, 0.8386666774749756, 0.843999981880188, 0.8456666469573975, 0.8503333330154419, 0.8486666679382324, 0.8460000157356262, 0.8500000238418579, 0.8550000190734863, 0.8579999804496765, 0.8483333587646484, 0.8560000061988831, 0.8610000014305115, 0.856333315372467, 0.859000027179718, 0.8586666584014893, 0.8533333539962769, 0.8573333621025085]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8214285969734192, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5411757230758667, 0.8511368632316589, 0.705970823764801, 0.6617735624313354, 0.6306321024894714, 0.605908989906311, 0.5904019474983215, 0.5487409830093384, 0.5513812899589539, 0.5537698268890381, 0.5669710636138916, 0.5658528804779053, 0.6092860698699951], "accuracy": [0.46849822998046875, 0.698190450668335, 0.7424382567405701, 0.7580240368843079, 0.7718927264213562, 0.7786290049552917, 0.7943468689918518, 0.8067626357078552, 0.8115176558494568, 0.8006868362426758, 0.8058380484580994, 0.8005547523498535, 0.8045172095298767], "val_loss": [0.8945236802101135, 0.59798663854599, 0.5630701184272766, 0.5487213730812073, 0.49799489974975586, 0.5018150806427002, 0.47789305448532104, 0.48877212405204773, 0.5005602240562439, 0.5136675238609314, 0.4993886351585388, 0.5886843204498291, 0.5638756155967712], "val_accuracy": [0.6940000057220459, 0.7816666960716248, 0.8009999990463257, 0.8026666641235352, 0.8159999847412109, 0.8119999766349792, 0.8296666741371155, 0.8339999914169312, 0.8196666836738586, 0.8236666917800903, 0.8243333101272583, 0.8240000009536743, 0.8223333358764648]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0, 1, 0, 1, 1], [0, 5, 3, 3], [0, 2, 5], [0], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8065714240074158, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2924740314483643, 2.1849143505096436, 1.7496089935302734, 1.3253978490829468, 1.0462640523910522, 0.8908133506774902, 0.8352081775665283, 0.8066121339797974, 0.7456626296043396, 0.7128528356552124, 0.6705460548400879, 0.6592622399330139, 0.6519402861595154, 0.6286554336547852, 0.6017700433731079, 0.5812875628471375, 0.5778993368148804, 0.5630818009376526, 0.5426567196846008, 0.5509106516838074], "accuracy": [0.13142253458499908, 0.3295469582080841, 0.43930789828300476, 0.5495971441268921, 0.6427156329154968, 0.6773213744163513, 0.707568347454071, 0.707568347454071, 0.7174745798110962, 0.7312111854553223, 0.7534011602401733, 0.748249888420105, 0.76106196641922, 0.7640998363494873, 0.7745344042778015, 0.7835160493850708, 0.7815347909927368, 0.7873464822769165, 0.8016114234924316, 0.7903843522071838], "val_loss": [2.2462821006774902, 2.014295816421509, 1.1357501745224, 0.9116147756576538, 0.7624000906944275, 0.6955382227897644, 0.6720852255821228, 0.6514543294906616, 0.615045964717865, 0.5870614647865295, 0.5616707801818848, 0.5500220656394958, 0.5289478898048401, 0.521349310874939, 0.4993698000907898, 0.48974624276161194, 0.5080076456069946, 0.4938886761665344, 0.4802681505680084, 0.4838290512561798], "val_accuracy": [0.41066667437553406, 0.42800000309944153, 0.6316666603088379, 0.6743333339691162, 0.7056666612625122, 0.7356666922569275, 0.7393333315849304, 0.7526666522026062, 0.7573333382606506, 0.7749999761581421, 0.7806666493415833, 0.7786666750907898, 0.8006666898727417, 0.8006666898727417, 0.8100000023841858, 0.8073333501815796, 0.8029999732971191, 0.8076666593551636, 0.8066666722297668, 0.8090000152587891]}, "mapping_values": [1, 10, 5, 5, 3, 7, 4, 3, 1, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 6, 3, 0, 3, 5], [0, 2, 2, 3], [79, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [16, 88, 46, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 1, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(beta, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(grad, tf.math.subtract(sigma, tf.math.pow(alpha, tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 2, 2], [0, 0, 0, 3, 0, 2], [16, 63, 54, 73], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 8, 4, 1, 4, 2, 8, 2, 0, 7, 1, 8, 3, 1, 7, 4, 5, 7, 7, 4, 4, 2, 4, 1, 2, 4, 0, 8, 4, 6, 2, 6, 9], [0, 0, 1, 3, 0, 0, 3, 1, 2, 0, 2, 3, 2, 2, 2, 0, 4, 1, 4, 5, 3, 3, 3, 1, 4, 3, 3, 5], [16, 99, 96, 99, 61, 1, 8]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 14, 8, 6, 4, 2, 1, 1, 1, 65, 37, 28, 7], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.sqrt(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(alpha, sigma)), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.add(tf.math.negative(sigma), alpha)))), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.sqrt(tf.math.multiply(tf.math.subtract(tf.math.add(tf.math.pow(beta, tf.math.square(tf.math.add(sigma, beta))), beta), beta), tf.math.add(tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(grad, alpha), tf.math.pow(grad, grad))), tf.math.subtract(tf.math.add(sigma, tf.math.pow(tf.math.negative(sigma), sigma)), tf.math.sqrt(tf.math.pow(alpha, tf.math.divide_no_nan(grad, tf.math.add(tf.math.divide_no_nan(sigma, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), sigma)))))))), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 20], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 3, 3, 3], [16, 16], [0, 1, 1], [6], [0, 4], [99], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [6, 3, 3, 5, 1, 1, 4, 1, 4, 2, 8, 9], [0, 0, 0, 3, 3, 0, 3, 1, 2, 0], [94, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 2, 1, 1, 0, 3, 1, 2, 1, 21, 12, 9, 5], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma), tf.math.subtract(sigma, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))))), tf.math.add(tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), alpha)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 4, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 2, 3, 0, 3, 3, 4, 0, 0], [0, 2, 0, 3, 0, 4], [16, 16, 39], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 5, 1, 8, 1, 4, 1, 4, 2, 8, 0], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 15, 9, 6, 3, 2, 1, 1, 1, 21, 12, 9, 5], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.negative(grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.math.subtract(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), sigma)), tf.math.sqrt(tf.math.negative(alpha))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133]}}]