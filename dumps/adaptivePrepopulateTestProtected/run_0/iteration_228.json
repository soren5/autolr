[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8805714249610901, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585988998413, 1.8659464120864868, 1.3939106464385986, 1.0966308116912842, 0.9349022507667542, 0.8419743776321411, 0.7695197463035583, 0.729751467704773, 0.6897091865539551, 0.6576535105705261, 0.6359990835189819, 0.6094067096710205, 0.589935839176178, 0.5596274733543396, 0.5528120398521423, 0.5393894910812378, 0.5281672477722168, 0.5202223062515259, 0.5057564377784729, 0.5040625333786011, 0.48261573910713196, 0.46983885765075684, 0.4574008584022522, 0.454408198595047, 0.4424269199371338, 0.42842501401901245, 0.42894208431243896, 0.42616719007492065, 0.41881483793258667, 0.4155913293361664, 0.4008829891681671, 0.39691162109375, 0.38997870683670044, 0.38351768255233765, 0.37681254744529724, 0.3729562759399414, 0.36148902773857117, 0.362969309091568, 0.3563940227031708, 0.3505782186985016, 0.35241496562957764, 0.34010687470436096, 0.3387279510498047, 0.3343537747859955, 0.3285624086856842, 0.32427793741226196, 0.319965660572052, 0.3122166097164154, 0.30889007449150085, 0.3045063316822052], "accuracy": [0.2694492042064667, 0.48870691657066345, 0.568220853805542, 0.6156386137008667, 0.6696605682373047, 0.6963412761688232, 0.7223616242408752, 0.7312111854553223, 0.750759482383728, 0.7600052952766418, 0.7696473598480225, 0.7761194109916687, 0.787082314491272, 0.7985734939575195, 0.7980451583862305, 0.8045172095298767, 0.8121780753135681, 0.8125742673873901, 0.8178576231002808, 0.8191784620285034, 0.8251221776008606, 0.8322546482086182, 0.8356888294219971, 0.8359529972076416, 0.8389908671379089, 0.846387505531311, 0.8451988101005554, 0.8454629778862, 0.848368763923645, 0.8531237840652466, 0.8598600029945374, 0.854708731174469, 0.8605204224586487, 0.8609166741371155, 0.86553955078125, 0.8639545440673828, 0.8689737319946289, 0.8706908226013184, 0.873860776424408, 0.872407853603363, 0.8710870146751404, 0.8776912093162537, 0.8792761564254761, 0.8824461698532104, 0.882710337638855, 0.8811253309249878, 0.887597382068634, 0.887597382068634, 0.8906353116035461, 0.8911636471748352], "val_loss": [2.0369274616241455, 1.5092171430587769, 1.0378726720809937, 0.8372371196746826, 0.7430018186569214, 0.693951427936554, 0.6459794044494629, 0.6065753698348999, 0.5836796760559082, 0.5591391324996948, 0.5475665926933289, 0.5286199450492859, 0.5111508965492249, 0.49807658791542053, 0.4888598918914795, 0.4807276725769043, 0.4732670187950134, 0.46291399002075195, 0.4651739001274109, 0.44972753524780273, 0.44051307439804077, 0.4300120174884796, 0.42833927273750305, 0.4226953983306885, 0.42076465487480164, 0.41008231043815613, 0.40701472759246826, 0.4087570011615753, 0.3987274467945099, 0.39754143357276917, 0.3908216655254364, 0.39351579546928406, 0.3876643180847168, 0.3835429251194, 0.3747929334640503, 0.37449854612350464, 0.3731365501880646, 0.3678072988986969, 0.3718084394931793, 0.3737613260746002, 0.36592888832092285, 0.3612542748451233, 0.3634853661060333, 0.3576800525188446, 0.35225361585617065, 0.35540124773979187, 0.35645702481269836, 0.3527815639972687, 0.3493586778640747, 0.349461168050766], "val_accuracy": [0.5453333258628845, 0.6666666865348816, 0.6899999976158142, 0.7136666774749756, 0.737666666507721, 0.7523333430290222, 0.765666663646698, 0.7816666960716248, 0.7886666655540466, 0.7976666688919067, 0.7953333258628845, 0.8090000152587891, 0.8193333148956299, 0.8209999799728394, 0.8233333230018616, 0.8309999704360962, 0.8243333101272583, 0.843666672706604, 0.8333333134651184, 0.840666651725769, 0.846666693687439, 0.8569999933242798, 0.8533333539962769, 0.8556666374206543, 0.8533333539962769, 0.8613333106040955, 0.8636666536331177, 0.8616666793823242, 0.8659999966621399, 0.862333357334137, 0.8683333396911621, 0.8663333058357239, 0.871999979019165, 0.8673333525657654, 0.8763333559036255, 0.878000020980835, 0.8756666779518127, 0.878000020980835, 0.8756666779518127, 0.8756666779518127, 0.8790000081062317, 0.8776666522026062, 0.8809999823570251, 0.8813333511352539, 0.8833333253860474, 0.8796666860580444, 0.8826666474342346, 0.8826666474342346, 0.8823333382606506, 0.8830000162124634]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8671428561210632, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2223174571990967, 1.8563350439071655, 1.390236258506775, 1.0855414867401123, 0.9327437877655029, 0.8295133709907532, 0.7576383948326111, 0.7186981439590454, 0.6773781776428223, 0.6482470035552979, 0.6189410090446472, 0.6046950221061707, 0.5834804773330688, 0.5646663904190063, 0.5488070249557495, 0.5423790216445923, 0.5207200646400452, 0.5157146453857422, 0.5042315125465393, 0.4830995202064514, 0.47278741002082825, 0.47082385420799255, 0.4616468548774719, 0.44871270656585693, 0.4443471133708954, 0.43458738923072815, 0.42712828516960144, 0.4205586910247803, 0.419389009475708, 0.40171873569488525, 0.40495771169662476, 0.3916196823120117, 0.38133418560028076, 0.3757408559322357, 0.3777608871459961, 0.3694303035736084, 0.3699004650115967, 0.3609028160572052, 0.35481929779052734, 0.3535456657409668, 0.34633997082710266], "accuracy": [0.26984545588493347, 0.5040285587310791, 0.5647866725921631, 0.6206578016281128, 0.6699247360229492, 0.7040021419525146, 0.7375511527061462, 0.7354378700256348, 0.754589855670929, 0.7638356685638428, 0.7725531458854675, 0.778232753276825, 0.7832518815994263, 0.7926297783851624, 0.8016114234924316, 0.8054417967796326, 0.8092722296714783, 0.8124422430992126, 0.8170651197433472, 0.8210275769233704, 0.8285563588142395, 0.8301413059234619, 0.8319904804229736, 0.8391229510307312, 0.8417646288871765, 0.8454629778862, 0.8477083444595337, 0.8519350290298462, 0.8535200357437134, 0.8540483713150024, 0.8527275323867798, 0.8581429123878479, 0.8605204224586487, 0.8613129258155823, 0.8632941246032715, 0.86553955078125, 0.8681812286376953, 0.8693699836730957, 0.8704266548156738, 0.8722757697105408, 0.8758420348167419], "val_loss": [2.03354549407959, 1.5099858045578003, 1.0413540601730347, 0.8390242457389832, 0.7527731657028198, 0.7012629508972168, 0.6561841368675232, 0.6219914555549622, 0.6020779609680176, 0.5707495808601379, 0.5565606951713562, 0.5473388433456421, 0.5319851636886597, 0.5176096558570862, 0.5061108469963074, 0.5012461543083191, 0.4866590201854706, 0.47763362526893616, 0.47571906447410583, 0.46296948194503784, 0.45618295669555664, 0.45271357893943787, 0.4477974772453308, 0.43861401081085205, 0.4380356967449188, 0.43284180760383606, 0.42854100465774536, 0.4213966429233551, 0.42032331228256226, 0.41654297709465027, 0.4134766757488251, 0.41215038299560547, 0.4081392288208008, 0.40187206864356995, 0.4036344289779663, 0.3973551392555237, 0.3938465118408203, 0.396200031042099, 0.3953231871128082, 0.3954083323478699, 0.3934382200241089], "val_accuracy": [0.5493333339691162, 0.6493333578109741, 0.6759999990463257, 0.7093333601951599, 0.7263333201408386, 0.7403333187103271, 0.7576666474342346, 0.7676666378974915, 0.7746666669845581, 0.7903333306312561, 0.7916666865348816, 0.7956666946411133, 0.8040000200271606, 0.8090000152587891, 0.8143333196640015, 0.8166666626930237, 0.8209999799728394, 0.8233333230018616, 0.8263333439826965, 0.8296666741371155, 0.8366666436195374, 0.8309999704360962, 0.8360000252723694, 0.8410000205039978, 0.8416666388511658, 0.8403333425521851, 0.8433333039283752, 0.8450000286102295, 0.847000002861023, 0.8473333120346069, 0.8496666550636292, 0.8496666550636292, 0.8523333072662354, 0.8500000238418579, 0.8543333411216736, 0.8586666584014893, 0.8569999933242798, 0.8573333621025085, 0.8556666374206543, 0.8556666374206543, 0.8550000190734863]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 1], [0], [0], [0], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8431428670883179, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.293915033340454, 2.1906230449676514, 1.7721260786056519, 1.3253809213638306, 1.0854036808013916, 0.9335435628890991, 0.8467693328857422, 0.8229473233222961, 0.7575989365577698, 0.7363492250442505, 0.719521164894104, 0.6717891097068787, 0.6442037224769592, 0.6219894886016846, 0.6096644401550293, 0.581770658493042, 0.5767728686332703, 0.5598281621932983, 0.5488178133964539, 0.5384948253631592, 0.5305226445198059, 0.5200858116149902, 0.4910377264022827, 0.5036140084266663, 0.479015052318573, 0.4839802384376526, 0.47204455733299255, 0.45270171761512756, 0.44982588291168213, 0.4410191774368286, 0.4399259090423584, 0.42067545652389526, 0.4286623001098633, 0.40415874123573303, 0.4161675274372101], "accuracy": [0.12323339283466339, 0.33086779713630676, 0.4497424364089966, 0.5481442213058472, 0.6353189945220947, 0.6560559868812561, 0.6909258961677551, 0.6950204968452454, 0.7108704447746277, 0.722229540348053, 0.7300224304199219, 0.7405890822410583, 0.7490423917770386, 0.7656848430633545, 0.7577598690986633, 0.7786290049552917, 0.7792893648147583, 0.7823272943496704, 0.7911768555641174, 0.7940827012062073, 0.7927618622779846, 0.7994980812072754, 0.8050455451011658, 0.8088759779930115, 0.8186501264572144, 0.8129705190658569, 0.8212917447090149, 0.8269713521003723, 0.8259146809577942, 0.8286884427070618, 0.8284242749214172, 0.8378021121025085, 0.8333113193511963, 0.8461233377456665, 0.8401796221733093], "val_loss": [2.2463736534118652, 2.020448923110962, 1.130645513534546, 0.8443679809570312, 0.7677210569381714, 0.7090215086936951, 0.666002094745636, 0.6401246786117554, 0.6338136792182922, 0.6028680801391602, 0.564876139163971, 0.5387879014015198, 0.5307651162147522, 0.5081270933151245, 0.5012293457984924, 0.4975390136241913, 0.4885411858558655, 0.4731653928756714, 0.4759581983089447, 0.47009700536727905, 0.45809757709503174, 0.4554559588432312, 0.468118816614151, 0.45117685198783875, 0.4535568356513977, 0.4380682110786438, 0.4398784041404724, 0.43665382266044617, 0.4258750081062317, 0.42394694685935974, 0.42750880122184753, 0.42072153091430664, 0.4248719811439514, 0.426812082529068, 0.41795268654823303], "val_accuracy": [0.4246666729450226, 0.5109999775886536, 0.643666684627533, 0.7046666741371155, 0.7116666436195374, 0.7426666617393494, 0.7413333058357239, 0.7609999775886536, 0.7643333077430725, 0.7753333449363708, 0.7703333497047424, 0.7979999780654907, 0.7889999747276306, 0.8059999942779541, 0.8013333082199097, 0.7996666431427002, 0.8086666464805603, 0.8183333277702332, 0.8180000185966492, 0.815666675567627, 0.8299999833106995, 0.8276666402816772, 0.8203333616256714, 0.8339999914169312, 0.8206666707992554, 0.8399999737739563, 0.8446666598320007, 0.8416666388511658, 0.847000002861023, 0.8506666421890259, 0.8393333554267883, 0.8453333377838135, 0.8379999995231628, 0.8429999947547913, 0.8506666421890259]}, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8291428685188293, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5491782426834106, 0.8299640417098999, 0.7034904956817627, 0.6497856974601746, 0.5975423455238342, 0.5614194273948669, 0.5513259172439575, 0.5265796780586243, 0.5646975636482239, 0.5378660559654236, 0.5230774879455566, 0.5137125253677368, 0.49083763360977173, 0.48073384165763855, 0.49341946840286255, 0.4940090477466583, 0.4728738069534302, 0.4853915572166443, 0.49040040373802185, 0.5124217867851257, 0.49994832277297974, 0.5295660495758057, 0.5754272937774658], "accuracy": [0.4799894392490387, 0.7074362635612488, 0.7450799345970154, 0.76106196641922, 0.7763835787773132, 0.7932901978492737, 0.7969884872436523, 0.8142913579940796, 0.8070268034934998, 0.8100647330284119, 0.8260467648506165, 0.8043851256370544, 0.8284242749214172, 0.8293488025665283, 0.8318583965301514, 0.8186501264572144, 0.8368775844573975, 0.8337075710296631, 0.8342359066009521, 0.8216879963874817, 0.8227446675300598, 0.8433496356010437, 0.8170651197433472], "val_loss": [0.8163418173789978, 0.6116449236869812, 0.5368812084197998, 0.5061394572257996, 0.4802793860435486, 0.488838791847229, 0.4951210916042328, 0.5128873586654663, 0.5232780575752258, 0.4742814600467682, 0.4754650890827179, 0.48241543769836426, 0.49725306034088135, 0.5014349818229675, 0.4752729535102844, 0.4847853183746338, 0.5267180800437927, 0.5299867391586304, 0.5423409938812256, 0.568446159362793, 0.6360707879066467, 0.5876073241233826, 0.509259819984436], "val_accuracy": [0.6976666450500488, 0.7749999761581421, 0.7919999957084656, 0.8056666851043701, 0.8230000138282776, 0.8273333311080933, 0.8343333601951599, 0.8360000252723694, 0.8316666483879089, 0.8413333296775818, 0.8443333506584167, 0.8403333425521851, 0.8429999947547913, 0.8500000238418579, 0.8299999833106995, 0.8393333554267883, 0.8393333554267883, 0.8510000109672546, 0.8353333473205566, 0.8149999976158142, 0.8496666550636292, 0.8270000219345093, 0.840666651725769]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0], [5, 8, 3, 3, 4, 5, 5, 9], [0, 0, 0, 3], [16, 16, 34, 51], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [6, 3, 3, 6, 8, 1, 0, 1, 4, 8, 8], [0, 0, 0, 3, 0, 0, 3, 4, 2, 0], [16, 99, 96, 99, 85, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 11, 8, 3, 4, 2, 1, 1, 0, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.sqrt(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.square(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), sigma)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), sigma))), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.11927089840173721, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1], [0, 1, 3, 7, 3, 8, 1], [0, 0, 1, 0, 2, 2], [39, 39, 5], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [0, 5, 3, 7, 7, 4], [0, 5, 5, 5, 4], [0], [1, 1], [5], [0], [99], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 5, 5], [1], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 7, 4, 3, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), grad))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3031842708587646, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 4, 2, 4, 0], [0, 1, 2, 1, 2, 3], [39, 39], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 1, 3, 5], [0, 2, 0, 3, 3], [16, 43], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 5, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [60, 99, 96, 48, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.add(tf.math.pow(grad, tf.math.negative(alpha)), grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(beta, tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.square(grad))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303074598312378, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}, "mapping_values": [1, 13, 7, 6, 1, 11, 6, 5, 2, 2, 1, 1, 1, 13, 7, 6, 5], "tree_depth": 15}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1], [4, 1, 3, 1, 3, 8, 2, 8], [0, 1, 0, 2, 2, 3, 2], [39, 39], [0, 1], [0, 2, 3, 0, 3, 5], [3], [81, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 2, 4, 5, 4, 6, 9], [1, 3, 3, 2], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 8, 7, 2, 2, 1, 1, 0, 2, 1, 1, 1, 11, 7, 4, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, grad)), tf.math.sqrt(tf.math.add(grad, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.pow(alpha, tf.math.square(tf.math.pow(tf.math.divide_no_nan(sigma, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), sigma))), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}]