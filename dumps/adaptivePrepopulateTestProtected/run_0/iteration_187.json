[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8805714249610901, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585988998413, 1.8659464120864868, 1.3939106464385986, 1.0966308116912842, 0.9349022507667542, 0.8419743776321411, 0.7695197463035583, 0.729751467704773, 0.6897091865539551, 0.6576535105705261, 0.6359990835189819, 0.6094067096710205, 0.589935839176178, 0.5596274733543396, 0.5528120398521423, 0.5393894910812378, 0.5281672477722168, 0.5202223062515259, 0.5057564377784729, 0.5040625333786011, 0.48261573910713196, 0.46983885765075684, 0.4574008584022522, 0.454408198595047, 0.4424269199371338, 0.42842501401901245, 0.42894208431243896, 0.42616719007492065, 0.41881483793258667, 0.4155913293361664, 0.4008829891681671, 0.39691162109375, 0.38997870683670044, 0.38351768255233765, 0.37681254744529724, 0.3729562759399414, 0.36148902773857117, 0.362969309091568, 0.3563940227031708, 0.3505782186985016, 0.35241496562957764, 0.34010687470436096, 0.3387279510498047, 0.3343537747859955, 0.3285624086856842, 0.32427793741226196, 0.319965660572052, 0.3122166097164154, 0.30889007449150085, 0.3045063316822052], "accuracy": [0.2694492042064667, 0.48870691657066345, 0.568220853805542, 0.6156386137008667, 0.6696605682373047, 0.6963412761688232, 0.7223616242408752, 0.7312111854553223, 0.750759482383728, 0.7600052952766418, 0.7696473598480225, 0.7761194109916687, 0.787082314491272, 0.7985734939575195, 0.7980451583862305, 0.8045172095298767, 0.8121780753135681, 0.8125742673873901, 0.8178576231002808, 0.8191784620285034, 0.8251221776008606, 0.8322546482086182, 0.8356888294219971, 0.8359529972076416, 0.8389908671379089, 0.846387505531311, 0.8451988101005554, 0.8454629778862, 0.848368763923645, 0.8531237840652466, 0.8598600029945374, 0.854708731174469, 0.8605204224586487, 0.8609166741371155, 0.86553955078125, 0.8639545440673828, 0.8689737319946289, 0.8706908226013184, 0.873860776424408, 0.872407853603363, 0.8710870146751404, 0.8776912093162537, 0.8792761564254761, 0.8824461698532104, 0.882710337638855, 0.8811253309249878, 0.887597382068634, 0.887597382068634, 0.8906353116035461, 0.8911636471748352], "val_loss": [2.0369274616241455, 1.5092171430587769, 1.0378726720809937, 0.8372371196746826, 0.7430018186569214, 0.693951427936554, 0.6459794044494629, 0.6065753698348999, 0.5836796760559082, 0.5591391324996948, 0.5475665926933289, 0.5286199450492859, 0.5111508965492249, 0.49807658791542053, 0.4888598918914795, 0.4807276725769043, 0.4732670187950134, 0.46291399002075195, 0.4651739001274109, 0.44972753524780273, 0.44051307439804077, 0.4300120174884796, 0.42833927273750305, 0.4226953983306885, 0.42076465487480164, 0.41008231043815613, 0.40701472759246826, 0.4087570011615753, 0.3987274467945099, 0.39754143357276917, 0.3908216655254364, 0.39351579546928406, 0.3876643180847168, 0.3835429251194, 0.3747929334640503, 0.37449854612350464, 0.3731365501880646, 0.3678072988986969, 0.3718084394931793, 0.3737613260746002, 0.36592888832092285, 0.3612542748451233, 0.3634853661060333, 0.3576800525188446, 0.35225361585617065, 0.35540124773979187, 0.35645702481269836, 0.3527815639972687, 0.3493586778640747, 0.349461168050766], "val_accuracy": [0.5453333258628845, 0.6666666865348816, 0.6899999976158142, 0.7136666774749756, 0.737666666507721, 0.7523333430290222, 0.765666663646698, 0.7816666960716248, 0.7886666655540466, 0.7976666688919067, 0.7953333258628845, 0.8090000152587891, 0.8193333148956299, 0.8209999799728394, 0.8233333230018616, 0.8309999704360962, 0.8243333101272583, 0.843666672706604, 0.8333333134651184, 0.840666651725769, 0.846666693687439, 0.8569999933242798, 0.8533333539962769, 0.8556666374206543, 0.8533333539962769, 0.8613333106040955, 0.8636666536331177, 0.8616666793823242, 0.8659999966621399, 0.862333357334137, 0.8683333396911621, 0.8663333058357239, 0.871999979019165, 0.8673333525657654, 0.8763333559036255, 0.878000020980835, 0.8756666779518127, 0.878000020980835, 0.8756666779518127, 0.8756666779518127, 0.8790000081062317, 0.8776666522026062, 0.8809999823570251, 0.8813333511352539, 0.8833333253860474, 0.8796666860580444, 0.8826666474342346, 0.8826666474342346, 0.8823333382606506, 0.8830000162124634]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8757143020629883, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224107027053833, 1.8765617609024048, 1.4045703411102295, 1.0901689529418945, 0.9498583078384399, 0.8400821685791016, 0.7786977887153625, 0.7247498631477356, 0.68012535572052, 0.6496087908744812, 0.6355088949203491, 0.5998173952102661, 0.5781683921813965, 0.5689959526062012, 0.5575170516967773, 0.5390497446060181, 0.5226916074752808, 0.5060963034629822, 0.49659010767936707, 0.4853905141353607, 0.4759540855884552, 0.4678068161010742, 0.45501652359962463, 0.4487238824367523, 0.4428735673427582, 0.43415167927742004, 0.4305269122123718, 0.41694068908691406, 0.40838173031806946, 0.4070965349674225, 0.3995324373245239, 0.38751521706581116, 0.38807618618011475, 0.3810051381587982, 0.36793625354766846, 0.3660885989665985, 0.36027809977531433, 0.3540295660495758, 0.35302120447158813, 0.3485170602798462, 0.3382296562194824, 0.34118708968162537, 0.33144325017929077, 0.31523260474205017, 0.3204071819782257, 0.31629037857055664, 0.3105996251106262, 0.3076738119125366, 0.30154791474342346, 0.2975030243396759, 0.2979033589363098, 0.2919563353061676, 0.28050267696380615, 0.2861594259738922, 0.2838294506072998, 0.27799102663993835, 0.2752229869365692, 0.26406505703926086, 0.25845983624458313, 0.2546379864215851, 0.26163238286972046, 0.25478988885879517, 0.2433328479528427, 0.24785004556179047, 0.23708133399486542, 0.22861652076244354, 0.2294454723596573, 0.23728731274604797, 0.23049750924110413, 0.22245801985263824, 0.2250748723745346, 0.21873052418231964, 0.21135540306568146], "accuracy": [0.2782987654209137, 0.4876502454280853, 0.5581825375556946, 0.6206578016281128, 0.6598864197731018, 0.7036058902740479, 0.7202483415603638, 0.7408532500267029, 0.7556465268135071, 0.7658169269561768, 0.7716285586357117, 0.7839123010635376, 0.7905164361000061, 0.7969884872436523, 0.7997622489929199, 0.8096684813499451, 0.8146876096725464, 0.8239334225654602, 0.8297450542449951, 0.8300092220306396, 0.8345000743865967, 0.8345000743865967, 0.8389908671379089, 0.8421608805656433, 0.8441421389579773, 0.8499537706375122, 0.8532558679580688, 0.8553691506385803, 0.8590674996376038, 0.8560295701026917, 0.8660678863525391, 0.86553955078125, 0.8672566413879395, 0.8640866279602051, 0.8697662353515625, 0.8689737319946289, 0.872407853603363, 0.8766345381736755, 0.8767666220664978, 0.8771628737449646, 0.8825782537460327, 0.8828424215316772, 0.8848236799240112, 0.889578640460968, 0.8858803510665894, 0.8887861371040344, 0.8903711438179016, 0.8920882344245911, 0.8899748921394348, 0.8923524022102356, 0.8914278149604797, 0.8967111110687256, 0.8989565372467041, 0.8977677822113037, 0.8973715305328369, 0.9025228023529053, 0.9031832218170166, 0.9066173434257507, 0.9083344340324402, 0.9115044474601746, 0.9043719172477722, 0.9111081957817078, 0.9126931428909302, 0.9103156924247742, 0.9162594079971313, 0.9134856462478638, 0.917580246925354, 0.9152027368545532, 0.91559898853302, 0.9225993752479553, 0.9204860925674438, 0.919561505317688, 0.9240522980690002], "val_loss": [2.03995418548584, 1.518715500831604, 1.044986605644226, 0.8289332389831543, 0.7404208779335022, 0.6856744885444641, 0.6423261165618896, 0.5995826125144958, 0.5744218826293945, 0.5547534823417664, 0.5376419425010681, 0.5187925100326538, 0.5049211978912354, 0.5051709413528442, 0.4869782626628876, 0.47842398285865784, 0.4634645879268646, 0.4589090645313263, 0.4515421688556671, 0.45037132501602173, 0.4390948414802551, 0.43136051297187805, 0.43338334560394287, 0.42774102091789246, 0.41766536235809326, 0.4246136546134949, 0.4114633798599243, 0.4107052683830261, 0.4028812646865845, 0.3987358510494232, 0.39975252747535706, 0.3976849913597107, 0.3898116946220398, 0.38728880882263184, 0.3877747058868408, 0.38573113083839417, 0.38612881302833557, 0.37690141797065735, 0.3838905394077301, 0.37505221366882324, 0.3695598840713501, 0.370106041431427, 0.375873327255249, 0.3689291179180145, 0.37027958035469055, 0.36666423082351685, 0.36830365657806396, 0.35730138421058655, 0.36380672454833984, 0.3600527346134186, 0.35878077149391174, 0.3593463599681854, 0.357829213142395, 0.35949838161468506, 0.3629343807697296, 0.35745397210121155, 0.35069718956947327, 0.35566362738609314, 0.3532693386077881, 0.3512240946292877, 0.3514707386493683, 0.34624239802360535, 0.3479383885860443, 0.34478938579559326, 0.3512521982192993, 0.3489874005317688, 0.34940022230148315, 0.34746336936950684, 0.34834957122802734, 0.3484278917312622, 0.34762808680534363, 0.34393712878227234, 0.3510412871837616], "val_accuracy": [0.5590000152587891, 0.6613333225250244, 0.6866666674613953, 0.7126666903495789, 0.7356666922569275, 0.7509999871253967, 0.762666642665863, 0.781000018119812, 0.7906666398048401, 0.7963333129882812, 0.8083333373069763, 0.8119999766349792, 0.8183333277702332, 0.8063333630561829, 0.8223333358764648, 0.8246666789054871, 0.8296666741371155, 0.8309999704360962, 0.8349999785423279, 0.8366666436195374, 0.8403333425521851, 0.8446666598320007, 0.8446666598320007, 0.843999981880188, 0.8516666889190674, 0.8450000286102295, 0.8536666631698608, 0.8510000109672546, 0.8543333411216736, 0.859666645526886, 0.8573333621025085, 0.8560000061988831, 0.8616666793823242, 0.862666666507721, 0.859333336353302, 0.8643333315849304, 0.8663333058357239, 0.8646666407585144, 0.8643333315849304, 0.8653333187103271, 0.8679999709129333, 0.8656666874885559, 0.8703333139419556, 0.8703333139419556, 0.8693333268165588, 0.8706666827201843, 0.8703333139419556, 0.871666669845581, 0.8730000257492065, 0.8733333349227905, 0.8759999871253967, 0.8763333559036255, 0.874666690826416, 0.8743333220481873, 0.875, 0.8769999742507935, 0.8763333559036255, 0.8763333559036255, 0.8790000081062317, 0.8790000081062317, 0.8796666860580444, 0.8776666522026062, 0.8830000162124634, 0.8796666860580444, 0.8809999823570251, 0.8833333253860474, 0.8813333511352539, 0.8840000033378601, 0.8799999952316284, 0.8813333511352539, 0.8826666474342346, 0.8833333253860474, 0.8826666474342346]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8425714373588562, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5067412853240967, 0.8669335842132568, 0.6889941096305847, 0.6295952200889587, 0.5775657892227173, 0.5694237947463989, 0.5264409184455872, 0.510797917842865, 0.5117887258529663, 0.49612823128700256, 0.49662303924560547, 0.495996356010437, 0.5134990811347961, 0.492390513420105, 0.500822901725769, 0.49808093905448914, 0.5110284686088562, 0.5530610084533691, 0.5884200930595398], "accuracy": [0.48091402649879456, 0.7033417224884033, 0.7465327978134155, 0.7646281719207764, 0.7840443849563599, 0.7836481332778931, 0.8045172095298767, 0.8148196935653687, 0.817989706993103, 0.8152159452438354, 0.8315942287445068, 0.8347642421722412, 0.8202351331710815, 0.8327829837799072, 0.8335754871368408, 0.8255184292793274, 0.8241975903511047, 0.8301413059234619, 0.8224804997444153], "val_loss": [0.8776244521141052, 0.6127127408981323, 0.5618829727172852, 0.5296076536178589, 0.5369590520858765, 0.5076490640640259, 0.5067086219787598, 0.5217638611793518, 0.5153506398200989, 0.5189264416694641, 0.5474316477775574, 0.5821179151535034, 0.563218891620636, 0.6053383946418762, 0.5814785957336426, 0.550799548625946, 0.6394522190093994, 0.5863870978355408, 0.6318452954292297], "val_accuracy": [0.6930000185966492, 0.7703333497047424, 0.7926666736602783, 0.8013333082199097, 0.8133333325386047, 0.8109999895095825, 0.8276666402816772, 0.8309999704360962, 0.8183333277702332, 0.8270000219345093, 0.8353333473205566, 0.8289999961853027, 0.828000009059906, 0.8396666646003723, 0.8376666903495789, 0.8276666402816772, 0.8276666402816772, 0.831333339214325, 0.8273333311080933]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 1], [0, 3], [0, 1], [0], [0, 0, 1], [0, 0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8374285697937012, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2928671836853027, 2.188411235809326, 1.7671077251434326, 1.3412322998046875, 1.069710373878479, 0.9052301645278931, 0.8270326256752014, 0.7996791005134583, 0.7619593143463135, 0.7504939436912537, 0.70826655626297, 0.6889112591743469, 0.6528569459915161, 0.6270692944526672, 0.6123238205909729, 0.6038428544998169, 0.5937638282775879, 0.5757830142974854, 0.5644199252128601, 0.5525895357131958, 0.5247023701667786, 0.5296112895011902, 0.5075291991233826, 0.49951550364494324, 0.49050965905189514, 0.47063612937927246, 0.47451940178871155, 0.45270198583602905, 0.43146926164627075, 0.4255213737487793, 0.41539332270622253, 0.40742582082748413, 0.39901313185691833, 0.3965795934200287, 0.38468292355537415, 0.3792659640312195, 0.3803481459617615, 0.37244486808776855], "accuracy": [0.12996962666511536, 0.33047154545783997, 0.4309866726398468, 0.5406154990196228, 0.633469820022583, 0.6651697158813477, 0.6911900639533997, 0.703209638595581, 0.7040021419525146, 0.7024171352386475, 0.7345132827758789, 0.7413815855979919, 0.7453441023826599, 0.7592127919197083, 0.7677981853485107, 0.7614582180976868, 0.7783648371696472, 0.78113853931427, 0.7817989587783813, 0.7909126877784729, 0.798309326171875, 0.7980451583862305, 0.8082155585289001, 0.8092722296714783, 0.811649739742279, 0.8191784620285034, 0.8219521641731262, 0.824329674243927, 0.8343679904937744, 0.8412362933158875, 0.8424250483512878, 0.8444063067436218, 0.8477083444595337, 0.8524633646011353, 0.8496896028518677, 0.8557654023170471, 0.8573504090309143, 0.8555012345314026], "val_loss": [2.244931221008301, 2.0178580284118652, 1.1410623788833618, 0.8884499669075012, 0.7711759209632874, 0.7253564596176147, 0.6835173964500427, 0.6583066582679749, 0.6278828382492065, 0.6150543093681335, 0.6205977201461792, 0.5791714787483215, 0.5542028546333313, 0.5494789481163025, 0.5391214489936829, 0.5212011337280273, 0.5187613368034363, 0.5060647130012512, 0.5120837688446045, 0.49047595262527466, 0.49116435647010803, 0.47571712732315063, 0.47997453808784485, 0.46988406777381897, 0.4629966914653778, 0.4637494385242462, 0.45515599846839905, 0.44646552205085754, 0.44032999873161316, 0.43554508686065674, 0.43484118580818176, 0.43380993604660034, 0.434634804725647, 0.43796125054359436, 0.42469918727874756, 0.4232627749443054, 0.4321434795856476, 0.4264633059501648], "val_accuracy": [0.4026666581630707, 0.44566667079925537, 0.6483333110809326, 0.6909999847412109, 0.7139999866485596, 0.7193333506584167, 0.7436666488647461, 0.7300000190734863, 0.7590000033378601, 0.7663333415985107, 0.7636666893959045, 0.7773333191871643, 0.7836666703224182, 0.7803333401679993, 0.7916666865348816, 0.7960000038146973, 0.8009999990463257, 0.8109999895095825, 0.8036666512489319, 0.8086666464805603, 0.8130000233650208, 0.8263333439826965, 0.828000009059906, 0.8320000171661377, 0.8289999961853027, 0.8339999914169312, 0.8376666903495789, 0.8389999866485596, 0.8433333039283752, 0.8453333377838135, 0.8496666550636292, 0.8489999771118164, 0.8546666502952576, 0.843666672706604, 0.8460000157356262, 0.8489999771118164, 0.8479999899864197, 0.8519999980926514]}, "mapping_values": [1, 10, 5, 5, 3, 4, 2, 2, 1, 3, 2, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 1, 2, 2, 0], [21, 99, 42], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 5, 2, 2, 2, 5, 0], [0, 0, 4, 3, 0, 0, 3, 1, 2, 0, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 10, 6, 4, 2, 2, 1, 1, 1, 25, 14, 11, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), alpha), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), grad)), tf.math.subtract(tf.math.square(sigma), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), sigma), tf.math.add(tf.math.add(alpha, beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.negative(grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1026284471154213, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 3, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 2, 9, 0, 6, 5], [0, 2, 0, 3], [43, 16], [0, 1, 0, 1, 1], [6, 6], [3, 7, 2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [9, 3, 3, 6, 8, 1, 4, 5, 4, 2, 8], [0, 0, 1, 3, 0, 0, 3, 1, 1, 0], [16, 31, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 2, 5, 4, 1, 2, 5, 2, 3, 0, 1, 1, 0, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(sigma, tf.math.divide_no_nan(grad, beta)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3038291931152344, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0], [9, 2, 3, 0, 3, 5], [0, 2, 0, 2], [16, 16], [0, 1], [0], [0], [82], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 5, 1, 4, 1, 4, 2, 8, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 52, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.square(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), sigma), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), sigma)), tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), alpha), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}, "mapping_values": [1, 9, 5, 4, 0, 1, 1, 0, 1, 2, 1, 1, 1, 21, 12, 9, 6], "tree_depth": 22}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 2, 3, 0, 3, 5, 6, 1, 3, 8, 4, 7, 6, 2, 2, 2, 7, 7, 1, 0, 8, 7, 9], [0, 3, 0, 3, 3, 4, 2, 3, 3, 3, 4, 5, 5, 2, 5, 4], [20, 16, 55], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 2, 6, 0, 3, 3, 0, 2, 8, 7, 0, 3, 7, 1, 8, 6, 0], [3, 4, 2, 7, 5, 2, 6, 3, 7, 2, 6], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 8, 1, 4, 2, 8, 6], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 45]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 39, 23, 16, 3, 28, 17, 11, 0, 22, 12, 10, 6], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.math.sqrt(tf.math.pow(tf.math.add(grad, grad), grad)), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(tf.math.add(grad, grad), grad))), tf.math.add(tf.math.add(grad, tf.math.subtract(grad, tf.math.negative(tf.math.sqrt(beta)))), grad)), tf.math.add(grad, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(sigma, tf.math.negative(tf.math.multiply(tf.math.multiply(grad, tf.math.negative(tf.math.add(tf.math.sqrt(beta), tf.math.add(tf.math.negative(tf.math.multiply(tf.math.add(grad, grad), tf.math.subtract(tf.math.sqrt(beta), tf.math.divide_no_nan(tf.math.negative(grad), sigma)))), grad)))), beta))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), sigma)), tf.math.subtract(tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), sigma), tf.math.sqrt(tf.math.divide_no_nan(alpha, beta)))), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925]}}]