[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8805714249610901, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585988998413, 1.8659464120864868, 1.3939106464385986, 1.0966308116912842, 0.9349022507667542, 0.8419743776321411, 0.7695197463035583, 0.729751467704773, 0.6897091865539551, 0.6576535105705261, 0.6359990835189819, 0.6094067096710205, 0.589935839176178, 0.5596274733543396, 0.5528120398521423, 0.5393894910812378, 0.5281672477722168, 0.5202223062515259, 0.5057564377784729, 0.5040625333786011, 0.48261573910713196, 0.46983885765075684, 0.4574008584022522, 0.454408198595047, 0.4424269199371338, 0.42842501401901245, 0.42894208431243896, 0.42616719007492065, 0.41881483793258667, 0.4155913293361664, 0.4008829891681671, 0.39691162109375, 0.38997870683670044, 0.38351768255233765, 0.37681254744529724, 0.3729562759399414, 0.36148902773857117, 0.362969309091568, 0.3563940227031708, 0.3505782186985016, 0.35241496562957764, 0.34010687470436096, 0.3387279510498047, 0.3343537747859955, 0.3285624086856842, 0.32427793741226196, 0.319965660572052, 0.3122166097164154, 0.30889007449150085, 0.3045063316822052], "accuracy": [0.2694492042064667, 0.48870691657066345, 0.568220853805542, 0.6156386137008667, 0.6696605682373047, 0.6963412761688232, 0.7223616242408752, 0.7312111854553223, 0.750759482383728, 0.7600052952766418, 0.7696473598480225, 0.7761194109916687, 0.787082314491272, 0.7985734939575195, 0.7980451583862305, 0.8045172095298767, 0.8121780753135681, 0.8125742673873901, 0.8178576231002808, 0.8191784620285034, 0.8251221776008606, 0.8322546482086182, 0.8356888294219971, 0.8359529972076416, 0.8389908671379089, 0.846387505531311, 0.8451988101005554, 0.8454629778862, 0.848368763923645, 0.8531237840652466, 0.8598600029945374, 0.854708731174469, 0.8605204224586487, 0.8609166741371155, 0.86553955078125, 0.8639545440673828, 0.8689737319946289, 0.8706908226013184, 0.873860776424408, 0.872407853603363, 0.8710870146751404, 0.8776912093162537, 0.8792761564254761, 0.8824461698532104, 0.882710337638855, 0.8811253309249878, 0.887597382068634, 0.887597382068634, 0.8906353116035461, 0.8911636471748352], "val_loss": [2.0369274616241455, 1.5092171430587769, 1.0378726720809937, 0.8372371196746826, 0.7430018186569214, 0.693951427936554, 0.6459794044494629, 0.6065753698348999, 0.5836796760559082, 0.5591391324996948, 0.5475665926933289, 0.5286199450492859, 0.5111508965492249, 0.49807658791542053, 0.4888598918914795, 0.4807276725769043, 0.4732670187950134, 0.46291399002075195, 0.4651739001274109, 0.44972753524780273, 0.44051307439804077, 0.4300120174884796, 0.42833927273750305, 0.4226953983306885, 0.42076465487480164, 0.41008231043815613, 0.40701472759246826, 0.4087570011615753, 0.3987274467945099, 0.39754143357276917, 0.3908216655254364, 0.39351579546928406, 0.3876643180847168, 0.3835429251194, 0.3747929334640503, 0.37449854612350464, 0.3731365501880646, 0.3678072988986969, 0.3718084394931793, 0.3737613260746002, 0.36592888832092285, 0.3612542748451233, 0.3634853661060333, 0.3576800525188446, 0.35225361585617065, 0.35540124773979187, 0.35645702481269836, 0.3527815639972687, 0.3493586778640747, 0.349461168050766], "val_accuracy": [0.5453333258628845, 0.6666666865348816, 0.6899999976158142, 0.7136666774749756, 0.737666666507721, 0.7523333430290222, 0.765666663646698, 0.7816666960716248, 0.7886666655540466, 0.7976666688919067, 0.7953333258628845, 0.8090000152587891, 0.8193333148956299, 0.8209999799728394, 0.8233333230018616, 0.8309999704360962, 0.8243333101272583, 0.843666672706604, 0.8333333134651184, 0.840666651725769, 0.846666693687439, 0.8569999933242798, 0.8533333539962769, 0.8556666374206543, 0.8533333539962769, 0.8613333106040955, 0.8636666536331177, 0.8616666793823242, 0.8659999966621399, 0.862333357334137, 0.8683333396911621, 0.8663333058357239, 0.871999979019165, 0.8673333525657654, 0.8763333559036255, 0.878000020980835, 0.8756666779518127, 0.878000020980835, 0.8756666779518127, 0.8756666779518127, 0.8790000081062317, 0.8776666522026062, 0.8809999823570251, 0.8813333511352539, 0.8833333253860474, 0.8796666860580444, 0.8826666474342346, 0.8826666474342346, 0.8823333382606506, 0.8830000162124634]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8705714344978333, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2234668731689453, 1.863288402557373, 1.3931849002838135, 1.1008023023605347, 0.9368121027946472, 0.8335974216461182, 0.7679713368415833, 0.7167215943336487, 0.6838635802268982, 0.6592334508895874, 0.6326451301574707, 0.6007758975028992, 0.5905230045318604, 0.5693749785423279, 0.5469419360160828, 0.5426573157310486, 0.5216020941734314, 0.5049896836280823, 0.49491241574287415, 0.48568153381347656, 0.48005974292755127, 0.46931031346321106, 0.45358672738075256, 0.45708736777305603, 0.4397726058959961, 0.4372451603412628, 0.4219643771648407, 0.4210772216320038, 0.41981154680252075, 0.41322076320648193, 0.40391308069229126, 0.4004772901535034, 0.39077746868133545, 0.3775469958782196, 0.3779465854167938, 0.3692006468772888, 0.36933454871177673, 0.3561807870864868, 0.3552958369255066, 0.3541223704814911, 0.3453609347343445, 0.34210067987442017, 0.3356368839740753, 0.3284553289413452, 0.32856225967407227, 0.31957903504371643], "accuracy": [0.25901466608047485, 0.49610355496406555, 0.5650508403778076, 0.6156386137008667, 0.663848876953125, 0.7043983340263367, 0.7240787148475647, 0.7436270117759705, 0.7440232634544373, 0.7589486241340637, 0.7721568942070007, 0.7790252566337585, 0.787082314491272, 0.7957997918128967, 0.802800178527832, 0.8021397590637207, 0.8109893202781677, 0.8193105459213257, 0.8197067975997925, 0.8265751004219055, 0.8278959393501282, 0.828820526599884, 0.8412362933158875, 0.8392550349235535, 0.8436138033866882, 0.8477083444595337, 0.8551049828529358, 0.8466516733169556, 0.8521991968154907, 0.8545766472816467, 0.8562937378883362, 0.8581429123878479, 0.86118084192276, 0.8631620407104492, 0.8627657890319824, 0.8660678863525391, 0.8646149635314941, 0.8759741187095642, 0.8765024542808533, 0.874389111995697, 0.878879964351654, 0.8778232932090759, 0.8804649114608765, 0.8833707571029663, 0.8854840993881226, 0.887597382068634], "val_loss": [2.0413527488708496, 1.5211331844329834, 1.0578525066375732, 0.8543555736541748, 0.7668163180351257, 0.7115092873573303, 0.6682714223861694, 0.6360593438148499, 0.6147934794425964, 0.5908877849578857, 0.5735966563224792, 0.5535456538200378, 0.5435287356376648, 0.5298662781715393, 0.515997052192688, 0.5140067338943481, 0.4965168535709381, 0.48519861698150635, 0.48024097084999084, 0.4723846912384033, 0.46524372696876526, 0.4606025815010071, 0.4509330093860626, 0.451589435338974, 0.44101980328559875, 0.43699923157691956, 0.42953622341156006, 0.4331795573234558, 0.42214828729629517, 0.41969770193099976, 0.41619783639907837, 0.416260689496994, 0.41040894389152527, 0.40601375699043274, 0.404938668012619, 0.4032075107097626, 0.40100428462028503, 0.3944743573665619, 0.3941444456577301, 0.39211076498031616, 0.38920095562934875, 0.3868449032306671, 0.38845980167388916, 0.3866804242134094, 0.38272541761398315, 0.37660515308380127], "val_accuracy": [0.5246666669845581, 0.6323333382606506, 0.67166668176651, 0.6913333535194397, 0.718999981880188, 0.7369999885559082, 0.753000020980835, 0.7609999775886536, 0.765333354473114, 0.7886666655540466, 0.7940000295639038, 0.796999990940094, 0.8013333082199097, 0.8113333582878113, 0.8066666722297668, 0.8096666932106018, 0.8180000185966492, 0.8266666531562805, 0.8243333101272583, 0.8273333311080933, 0.8296666741371155, 0.8370000123977661, 0.8386666774749756, 0.8396666646003723, 0.8429999947547913, 0.8410000205039978, 0.8483333587646484, 0.8450000286102295, 0.8489999771118164, 0.8486666679382324, 0.8523333072662354, 0.8503333330154419, 0.8533333539962769, 0.8569999933242798, 0.856333315372467, 0.8573333621025085, 0.8569999933242798, 0.8576666712760925, 0.8586666584014893, 0.8569999933242798, 0.8640000224113464, 0.8616666793823242, 0.8606666922569275, 0.8606666922569275, 0.862333357334137, 0.8636666536331177]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 1], [0], [0], [0], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.8185714483261108, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2933349609375, 2.188413143157959, 1.760054588317871, 1.3312147855758667, 1.078851342201233, 0.9324796199798584, 0.8363996744155884, 0.7993408441543579, 0.7512104511260986, 0.7389505505561829, 0.6934685111045837, 0.6766915917396545, 0.6444418430328369, 0.6245626211166382, 0.6113657355308533, 0.585038423538208, 0.571141242980957, 0.5620537400245667, 0.5469419360160828, 0.5313357710838318, 0.5240057706832886, 0.505263090133667, 0.5029783248901367, 0.4955063462257385, 0.475982666015625, 0.4672088623046875, 0.463962584733963, 0.447795033454895, 0.44325417280197144, 0.4445303976535797, 0.43765002489089966, 0.42198148369789124, 0.4105108082294464, 0.40162816643714905, 0.39125484228134155, 0.40153348445892334, 0.3884207010269165, 0.3761961758136749, 0.3614097237586975, 0.3625957667827606, 0.36118990182876587, 0.3454528748989105, 0.3341169059276581], "accuracy": [0.13221503794193268, 0.3214899003505707, 0.4407607913017273, 0.5443138480186462, 0.6318848133087158, 0.6572447419166565, 0.6951525807380676, 0.709549605846405, 0.713379979133606, 0.7121912837028503, 0.7395324110984802, 0.7380794882774353, 0.7547219395637512, 0.7642319202423096, 0.7631752490997314, 0.7765156626701355, 0.7781006693840027, 0.7778365015983582, 0.7895918488502502, 0.7951393723487854, 0.8020076751708984, 0.8062343001365662, 0.8084797263145447, 0.8045172095298767, 0.8148196935653687, 0.8216879963874817, 0.8240655064582825, 0.8273676037788391, 0.8289526104927063, 0.8305375576019287, 0.8297450542449951, 0.8393871188163757, 0.8490291833877563, 0.8466516733169556, 0.8486329317092896, 0.8446704745292664, 0.8556333184242249, 0.858671247959137, 0.8614450097084045, 0.8627657890319824, 0.8589354157447815, 0.8628978729248047, 0.8664641380310059], "val_loss": [2.2443065643310547, 2.010967493057251, 1.1229534149169922, 0.8676730394363403, 0.7438470125198364, 0.715201199054718, 0.6638089418411255, 0.6325963735580444, 0.6399627923965454, 0.6134229898452759, 0.5617935061454773, 0.535420835018158, 0.5354922413825989, 0.5296304821968079, 0.5061882138252258, 0.49027445912361145, 0.4813685715198517, 0.48310139775276184, 0.47633451223373413, 0.46541067957878113, 0.4699764847755432, 0.46614110469818115, 0.4550594985485077, 0.44396382570266724, 0.4410960376262665, 0.424370676279068, 0.4150731563568115, 0.42426952719688416, 0.41501757502555847, 0.4073803722858429, 0.41300126910209656, 0.39690980315208435, 0.38712748885154724, 0.39199918508529663, 0.38431355357170105, 0.38148200511932373, 0.3826659023761749, 0.3820759654045105, 0.38081541657447815, 0.38411563634872437, 0.37591975927352905, 0.3790234923362732, 0.3721911609172821], "val_accuracy": [0.4243333339691162, 0.4663333296775818, 0.656333327293396, 0.7039999961853027, 0.7293333411216736, 0.7426666617393494, 0.7350000143051147, 0.749666690826416, 0.7490000128746033, 0.765666663646698, 0.7773333191871643, 0.7833333611488342, 0.7799999713897705, 0.8006666898727417, 0.800000011920929, 0.8056666851043701, 0.8113333582878113, 0.8206666707992554, 0.8140000104904175, 0.8199999928474426, 0.8256666660308838, 0.8266666531562805, 0.8330000042915344, 0.8393333554267883, 0.8353333473205566, 0.8456666469573975, 0.8516666889190674, 0.8460000157356262, 0.8479999899864197, 0.8510000109672546, 0.8493333458900452, 0.8546666502952576, 0.8606666922569275, 0.8633333444595337, 0.8640000224113464, 0.8600000143051147, 0.8653333187103271, 0.8676666617393494, 0.8666666746139526, 0.8663333058357239, 0.8669999837875366, 0.8636666536331177, 0.8656666874885559]}, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1], [0, 7, 9], [0], [0, 63], [1], [0], [2], [0]], "fitness": -0.8174285888671875, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.6593016386032104, 0.8998677134513855, 0.7170001864433289, 0.6650513410568237, 0.6470180749893188, 0.6100552678108215, 0.7883886098861694, 0.7244728803634644, 0.6272634863853455, 0.6768292188644409], "accuracy": [0.47906485199928284, 0.6892088055610657, 0.7510236501693726, 0.7560427784919739, 0.7663452625274658, 0.785101056098938, 0.772288978099823, 0.77677983045578, 0.7755910754203796, 0.7821952104568481], "val_loss": [1.0422182083129883, 0.6373980045318604, 0.6168825626373291, 0.5826534032821655, 0.4987945854663849, 0.6115229725837708, 0.6496233940124512, 0.5443135499954224, 0.6004803776741028, 0.5716784000396729], "val_accuracy": [0.6380000114440918, 0.768666684627533, 0.7756666541099548, 0.7903333306312561, 0.8173333406448364, 0.8056666851043701, 0.8080000281333923, 0.8100000023841858, 0.8116666674613953, 0.8056666851043701]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 4, 3, 1, 2, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [49], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 2, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 2, 2, 1, 1, 1, 10, 5, 5, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3035576343536377, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [52, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 4, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 1, 0, 3, 1, 2, 0], [16, 99, 96, 99, 91, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 0, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(alpha, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.274652793165264e+25, 2.3737375736236572, 2.364485263824463, 2.3699212074279785, 2.378378391265869, 2.384573459625244], "accuracy": [0.20155857503414154, 0.10249637067317963, 0.10130762308835983, 0.1010434553027153, 0.09813763201236725, 0.10051512718200684], "val_loss": [2.3876047134399414, 2.348287343978882, 2.3365368843078613, 2.3501102924346924, 2.32704496383667, 2.366844654083252], "val_accuracy": [0.10266666859388351, 0.09966666996479034, 0.10266666859388351, 0.09966666996479034, 0.09700000286102295, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 0, 3, 5], [0, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 2, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 4, 0, 3, 4, 4, 3], [16, 41, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 2, 2, 1, 1, 1, 2, 1, 1, 1, 21, 11, 10, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), grad), tf.math.add(tf.math.sqrt(grad), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 4], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 9, 2], [0, 3, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0], [68, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 7, 5, 2, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}]