[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8765714168548584, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223011016845703, 1.865624189376831, 1.3909275531768799, 1.0906970500946045, 0.9346197843551636, 0.8316051959991455, 0.7765270471572876, 0.7175954580307007, 0.689998984336853, 0.6539434790611267, 0.6345682740211487, 0.6125860214233398, 0.5929545760154724, 0.5741943120956421, 0.5605514049530029, 0.5450935363769531, 0.5290834307670593, 0.5135375261306763, 0.5038453936576843, 0.49123626947402954, 0.4824116826057434, 0.47230637073516846, 0.46095383167266846, 0.45251646637916565, 0.4567464590072632, 0.44120994210243225, 0.42931798100471497, 0.4283377230167389, 0.41460976004600525, 0.403716117143631, 0.39799705147743225, 0.38751497864723206, 0.39453190565109253, 0.3867490887641907, 0.3738558888435364, 0.37420085072517395, 0.36704206466674805, 0.35887202620506287, 0.3570341169834137, 0.35280492901802063, 0.34396079182624817, 0.3353290259838104, 0.3330399990081787, 0.33638864755630493, 0.33185482025146484, 0.31505221128463745, 0.3144376277923584, 0.31331920623779297, 0.30786311626434326, 0.30375027656555176, 0.3012574315071106, 0.2957165539264679, 0.29118576645851135, 0.28823795914649963, 0.2842210531234741, 0.2840941250324249, 0.27437901496887207, 0.27262750267982483, 0.2716067135334015, 0.27041494846343994, 0.2598229944705963, 0.251598984003067, 0.2570091187953949, 0.24883396923542023, 0.24945122003555298, 0.23872071504592896, 0.23352831602096558, 0.2393052726984024, 0.23676493763923645, 0.22705252468585968, 0.22216331958770752, 0.2274605929851532, 0.21139736473560333, 0.21167641878128052, 0.21031971275806427, 0.21228449046611786, 0.21343117952346802, 0.20817655324935913], "accuracy": [0.26337340474128723, 0.4963677227497101, 0.5735041499137878, 0.6207898855209351, 0.6701889038085938, 0.7073041796684265, 0.7268524765968323, 0.737947404384613, 0.7526086568832397, 0.7652885913848877, 0.7687227725982666, 0.7729493975639343, 0.7816668748855591, 0.7891955971717834, 0.7973847389221191, 0.802800178527832, 0.8125742673873901, 0.816008448600769, 0.8175934553146362, 0.8210275769233704, 0.826310932636261, 0.8241975903511047, 0.8359529972076416, 0.8367455005645752, 0.8352925777435303, 0.8426892161369324, 0.8450667262077332, 0.8467837572097778, 0.854708731174469, 0.8551049828529358, 0.8584070801734924, 0.8615770936012268, 0.8576145768165588, 0.8610487580299377, 0.8651432991027832, 0.867520809173584, 0.8697662353515625, 0.8708229064941406, 0.8702945709228516, 0.8689737319946289, 0.8737286925315857, 0.8767666220664978, 0.8813894987106323, 0.8805969953536987, 0.883238673210144, 0.889578640460968, 0.884691596031189, 0.8878615498542786, 0.8891823887825012, 0.8905032277107239, 0.8893144726753235, 0.8951261639595032, 0.8968431949615479, 0.896446943283081, 0.8953903317451477, 0.8988244533538818, 0.900409460067749, 0.9006736278533936, 0.902390718460083, 0.9026548862457275, 0.9056927561759949, 0.9101836085319519, 0.9038436412811279, 0.9076740145683289, 0.906749427318573, 0.9137498140335083, 0.9177123308181763, 0.9158631563186646, 0.9129573106765747, 0.9161273241043091, 0.9207502603530884, 0.9183727502822876, 0.9251089692115784, 0.9240522980690002, 0.9294676780700684, 0.9216747879981995, 0.9225993752479553, 0.9266939759254456], "val_loss": [2.0393662452697754, 1.5163432359695435, 1.052855372428894, 0.84853595495224, 0.7553724646568298, 0.7027198672294617, 0.6598775386810303, 0.623932957649231, 0.5951581597328186, 0.575713574886322, 0.5536686778068542, 0.5429341793060303, 0.5218592286109924, 0.5090736746788025, 0.4945620000362396, 0.4894779324531555, 0.4822985827922821, 0.47780728340148926, 0.4668852686882019, 0.4535849690437317, 0.45237162709236145, 0.44523975253105164, 0.44240477681159973, 0.4442044198513031, 0.43248072266578674, 0.43423476815223694, 0.4240863025188446, 0.41704243421554565, 0.4154031574726105, 0.41071370244026184, 0.4096387028694153, 0.4056234061717987, 0.406754732131958, 0.3978225886821747, 0.40128466486930847, 0.39493536949157715, 0.39047834277153015, 0.3979533016681671, 0.38745030760765076, 0.3896806538105011, 0.3836043179035187, 0.38053128123283386, 0.3809419870376587, 0.3778983950614929, 0.3761148154735565, 0.3765009343624115, 0.37689653038978577, 0.3764803409576416, 0.3714219927787781, 0.37403666973114014, 0.36849063634872437, 0.3699629008769989, 0.3696681261062622, 0.3686944246292114, 0.36859026551246643, 0.36190205812454224, 0.3709731996059418, 0.3621075749397278, 0.36187833547592163, 0.36555323004722595, 0.35909056663513184, 0.35743677616119385, 0.3601115345954895, 0.3594057261943817, 0.36111798882484436, 0.3632054030895233, 0.3720882833003998, 0.35455289483070374, 0.3622690737247467, 0.3586713969707489, 0.36113065481185913, 0.3577309548854828, 0.3616664707660675, 0.3606627881526947, 0.3581937551498413, 0.37010177969932556, 0.3561130464076996, 0.35808277130126953], "val_accuracy": [0.5336666703224182, 0.6470000147819519, 0.6696666479110718, 0.6926666498184204, 0.7243333458900452, 0.737666666507721, 0.7490000128746033, 0.765333354473114, 0.7696666717529297, 0.7803333401679993, 0.7933333516120911, 0.7979999780654907, 0.8009999990463257, 0.8119999766349792, 0.8183333277702332, 0.812666654586792, 0.8213333487510681, 0.8226666450500488, 0.8293333053588867, 0.831333339214325, 0.8293333053588867, 0.8366666436195374, 0.8349999785423279, 0.8330000042915344, 0.8363333344459534, 0.8376666903495789, 0.8433333039283752, 0.8446666598320007, 0.8473333120346069, 0.8526666760444641, 0.8496666550636292, 0.8496666550636292, 0.8489999771118164, 0.8539999723434448, 0.8533333539962769, 0.8576666712760925, 0.8576666712760925, 0.8550000190734863, 0.859666645526886, 0.8569999933242798, 0.8606666922569275, 0.8619999885559082, 0.8610000014305115, 0.8650000095367432, 0.8646666407585144, 0.862333357334137, 0.8659999966621399, 0.8666666746139526, 0.8650000095367432, 0.8629999756813049, 0.8659999966621399, 0.8686666488647461, 0.8673333525657654, 0.8666666746139526, 0.8683333396911621, 0.8723333477973938, 0.871666669845581, 0.8696666955947876, 0.8723333477973938, 0.8686666488647461, 0.8730000257492065, 0.8766666650772095, 0.8736666440963745, 0.8736666440963745, 0.8733333349227905, 0.8769999742507935, 0.8683333396911621, 0.8773333430290222, 0.878000020980835, 0.8769999742507935, 0.8796666860580444, 0.8809999823570251, 0.8820000290870667, 0.8773333430290222, 0.8773333430290222, 0.8736666440963745, 0.8820000290870667, 0.8806666731834412]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.868571400642395, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.225827693939209, 1.876783847808838, 1.4057869911193848, 1.1092133522033691, 0.9465270042419434, 0.8566573858261108, 0.7854130268096924, 0.7435532212257385, 0.6921278238296509, 0.6597235798835754, 0.6409379839897156, 0.6250501275062561, 0.6036694049835205, 0.5859087705612183, 0.5669069290161133, 0.5562646389007568, 0.5355386137962341, 0.5260870456695557, 0.517137348651886, 0.49775856733322144, 0.4968482553958893, 0.48908117413520813, 0.4748559296131134, 0.47264519333839417, 0.45956316590309143, 0.4483141601085663, 0.4499269723892212, 0.44093945622444153, 0.43074339628219604, 0.43024930357933044, 0.41515809297561646, 0.41302767395973206, 0.4074338674545288, 0.3999478220939636, 0.4000508189201355, 0.39339548349380493, 0.38008537888526917, 0.3759271800518036, 0.3684767186641693, 0.3635720908641815, 0.3597998321056366, 0.3675019443035126, 0.35665974020957947, 0.35253891348838806, 0.344736248254776, 0.34160542488098145, 0.3350600004196167, 0.3365694284439087, 0.3261185884475708, 0.31943169236183167, 0.30919408798217773, 0.31421640515327454, 0.31096377968788147, 0.30501964688301086, 0.30064842104911804, 0.29596030712127686, 0.2916874587535858, 0.28982365131378174, 0.28336337208747864, 0.2858279049396515, 0.2717721462249756, 0.27826714515686035, 0.27433234453201294], "accuracy": [0.26720380783081055, 0.48672565817832947, 0.5634658336639404, 0.6120724081993103, 0.6590939164161682, 0.6894729733467102, 0.7141724824905396, 0.7285695672035217, 0.7489103078842163, 0.7552502751350403, 0.7638356685638428, 0.7701756954193115, 0.7832518815994263, 0.7795535326004028, 0.7930260300636292, 0.7984414100646973, 0.8055738806724548, 0.8101968169212341, 0.8141592741012573, 0.822348415851593, 0.8214238286018372, 0.8260467648506165, 0.8323867321014404, 0.8293488025665283, 0.8354246616363525, 0.839519202709198, 0.8381983637809753, 0.8437458872795105, 0.8445383906364441, 0.8451988101005554, 0.8515387773513794, 0.8519350290298462, 0.8545766472816467, 0.8597279191017151, 0.856689989566803, 0.8597279191017151, 0.8622375130653381, 0.8644828796386719, 0.8705587387084961, 0.8689737319946289, 0.8717474341392517, 0.8687095642089844, 0.870030403137207, 0.8708229064941406, 0.8734645247459412, 0.8766345381736755, 0.8786157965660095, 0.8811253309249878, 0.8808611631393433, 0.8887861371040344, 0.8912957310676575, 0.887597382068634, 0.886672854423523, 0.8874653577804565, 0.8912957310676575, 0.8926165699958801, 0.8927486538887024, 0.8922203183174133, 0.9012019634246826, 0.8981640338897705, 0.9008057117462158, 0.8973715305328369, 0.9022586345672607], "val_loss": [2.0465643405914307, 1.5236316919326782, 1.0504746437072754, 0.8420917391777039, 0.7497240304946899, 0.6975857615470886, 0.6574253439903259, 0.624764621257782, 0.5968856811523438, 0.5775246024131775, 0.5591604113578796, 0.5431207418441772, 0.5315335392951965, 0.5143581628799438, 0.5082176923751831, 0.4926287829875946, 0.4846523702144623, 0.47675421833992004, 0.46770980954170227, 0.46083199977874756, 0.45009487867355347, 0.4452817440032959, 0.44002267718315125, 0.43384990096092224, 0.42704296112060547, 0.42856839299201965, 0.41920313239097595, 0.413316011428833, 0.410948783159256, 0.407698392868042, 0.4056984782218933, 0.3999386429786682, 0.3972732424736023, 0.3900909721851349, 0.3866432309150696, 0.3862088620662689, 0.3814084827899933, 0.3829153776168823, 0.37698331475257874, 0.37581363320350647, 0.3778356909751892, 0.3820611238479614, 0.3785867393016815, 0.37292203307151794, 0.37057721614837646, 0.36491134762763977, 0.36104923486709595, 0.3609185516834259, 0.3587266504764557, 0.3558397889137268, 0.357880562543869, 0.3608124256134033, 0.35154202580451965, 0.35592028498649597, 0.35268309712409973, 0.35601183772087097, 0.3555953800678253, 0.34738680720329285, 0.35068053007125854, 0.3435201942920685, 0.3521885573863983, 0.34806355834007263, 0.351108193397522], "val_accuracy": [0.5606666803359985, 0.6516666412353516, 0.6769999861717224, 0.7023333311080933, 0.7319999933242798, 0.7429999709129333, 0.7583333253860474, 0.762333333492279, 0.7706666588783264, 0.7806666493415833, 0.7889999747276306, 0.7916666865348816, 0.8006666898727417, 0.8143333196640015, 0.8053333163261414, 0.8136666417121887, 0.8186666369438171, 0.8253333568572998, 0.8299999833106995, 0.8366666436195374, 0.8386666774749756, 0.8346666693687439, 0.8416666388511658, 0.8426666855812073, 0.8433333039283752, 0.8393333554267883, 0.8493333458900452, 0.8463333249092102, 0.8483333587646484, 0.8526666760444641, 0.8513333201408386, 0.8556666374206543, 0.8553333282470703, 0.8573333621025085, 0.8619999885559082, 0.8633333444595337, 0.8640000224113464, 0.8629999756813049, 0.8629999756813049, 0.8666666746139526, 0.8656666874885559, 0.8613333106040955, 0.8669999837875366, 0.8659999966621399, 0.8693333268165588, 0.8713333606719971, 0.8759999871253967, 0.8759999871253967, 0.875333309173584, 0.8759999871253967, 0.8773333430290222, 0.8713333606719971, 0.8790000081062317, 0.8790000081062317, 0.8790000081062317, 0.8759999871253967, 0.8769999742507935, 0.8809999823570251, 0.8790000081062317, 0.8803333044052124, 0.8793333172798157, 0.874666690826416, 0.8790000081062317]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 1], [0], [0], [0], [0, 1], [0], [0], [0], [0, 1], [0], [1], [0]], "fitness": -0.852571427822113, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2938268184661865, 2.192472457885742, 1.7901124954223633, 1.3521459102630615, 1.0695399045944214, 0.9035178422927856, 0.8434333801269531, 0.8053984045982361, 0.7541791796684265, 0.7298115491867065, 0.6935425400733948, 0.6799368858337402, 0.6478267312049866, 0.6222012639045715, 0.5875731706619263, 0.5883988738059998, 0.5751591920852661, 0.5674051642417908, 0.5489880442619324, 0.5366795659065247, 0.5342593789100647, 0.5250751972198486, 0.5126218199729919, 0.5029724836349487, 0.49993863701820374, 0.48123395442962646, 0.4693497121334076, 0.4591061770915985, 0.44594767689704895, 0.44162875413894653, 0.4360600709915161, 0.42531171441078186, 0.4158925414085388, 0.41143733263015747, 0.4006592631340027, 0.39965692162513733, 0.3870655596256256, 0.39271658658981323, 0.38266658782958984, 0.3699682354927063, 0.3696824610233307, 0.36827802658081055, 0.3666481673717499, 0.34687018394470215, 0.3587835431098938, 0.3545801043510437, 0.3483160734176636, 0.3436591923236847, 0.3473818302154541, 0.33511748909950256, 0.3198370933532715, 0.3267000913619995, 0.3310116231441498, 0.3130817413330078, 0.3158299922943115, 0.3056018650531769, 0.30385518074035645, 0.29682281613349915, 0.3134918808937073], "accuracy": [0.12468630075454712, 0.31898030638694763, 0.4325716495513916, 0.5410117506980896, 0.6370360851287842, 0.667811393737793, 0.6857746839523315, 0.6985867023468018, 0.7013604640960693, 0.7215691208839417, 0.7375511527061462, 0.7395324110984802, 0.7535332441329956, 0.7605336308479309, 0.7687227725982666, 0.7705719470977783, 0.7773081660270691, 0.7786290049552917, 0.7872143983840942, 0.7936864495277405, 0.7977809906005859, 0.805177628993988, 0.800290584564209, 0.8013472557067871, 0.811649739742279, 0.8148196935653687, 0.8150838613510132, 0.8197067975997925, 0.8277638554573059, 0.829216718673706, 0.8305375576019287, 0.8325188159942627, 0.8341038227081299, 0.8392550349235535, 0.8418967127799988, 0.8397833704948425, 0.8477083444595337, 0.845859169960022, 0.8560295701026917, 0.8584070801734924, 0.8605204224586487, 0.856689989566803, 0.8585391640663147, 0.8643507957458496, 0.857218325138092, 0.8625016212463379, 0.8642187118530273, 0.8672566413879395, 0.8677849769592285, 0.8733324408531189, 0.8768987059593201, 0.872407853603363, 0.867520809173584, 0.8753136992454529, 0.8753136992454529, 0.8820499181747437, 0.8794082403182983, 0.8823140859603882, 0.8820499181747437], "val_loss": [2.245485782623291, 2.023951768875122, 1.144474983215332, 0.8614224195480347, 0.7537392377853394, 0.7083948850631714, 0.6542553305625916, 0.6417360901832581, 0.6131304502487183, 0.5865402817726135, 0.5732929110527039, 0.5474550127983093, 0.5326894521713257, 0.5298035740852356, 0.5142961740493774, 0.5136725306510925, 0.5073017477989197, 0.5004681348800659, 0.49371662735939026, 0.4821489155292511, 0.4818175137042999, 0.47570711374282837, 0.4617250859737396, 0.4572162330150604, 0.4561925530433655, 0.44541260600090027, 0.44805029034614563, 0.44949978590011597, 0.4403213560581207, 0.4294711947441101, 0.44365307688713074, 0.4199388921260834, 0.4144546687602997, 0.42255938053131104, 0.42300111055374146, 0.4195968806743622, 0.4107622802257538, 0.4162554442882538, 0.42334115505218506, 0.4270074963569641, 0.4080624580383301, 0.4091668426990509, 0.41474443674087524, 0.42132291197776794, 0.40761151909828186, 0.43066585063934326, 0.4123869240283966, 0.43051522970199585, 0.42667585611343384, 0.4236713945865631, 0.4322914183139801, 0.4140380918979645, 0.4260300397872925, 0.43750831484794617, 0.43218672275543213, 0.4237341582775116, 0.42832982540130615, 0.4472438097000122, 0.4552844762802124], "val_accuracy": [0.41366666555404663, 0.44999998807907104, 0.656000018119812, 0.7013333439826965, 0.718666672706604, 0.7379999756813049, 0.7396666407585144, 0.7476666569709778, 0.7680000066757202, 0.7726666927337646, 0.7770000100135803, 0.7836666703224182, 0.7913333177566528, 0.7943333387374878, 0.8013333082199097, 0.7946666479110718, 0.8013333082199097, 0.8046666383743286, 0.8063333630561829, 0.8193333148956299, 0.8199999928474426, 0.8166666626930237, 0.8256666660308838, 0.8253333568572998, 0.8303333520889282, 0.8326666951179504, 0.8346666693687439, 0.8389999866485596, 0.8393333554267883, 0.8443333506584167, 0.8330000042915344, 0.8463333249092102, 0.8453333377838135, 0.847000002861023, 0.8473333120346069, 0.8443333506584167, 0.8460000157356262, 0.8496666550636292, 0.8493333458900452, 0.856333315372467, 0.8560000061988831, 0.856333315372467, 0.8546666502952576, 0.859000027179718, 0.8579999804496765, 0.862666666507721, 0.8600000143051147, 0.859666645526886, 0.8613333106040955, 0.8646666407585144, 0.8650000095367432, 0.8683333396911621, 0.8703333139419556, 0.8740000128746033, 0.8650000095367432, 0.8713333606719971, 0.8740000128746033, 0.8726666569709778, 0.871666669845581]}, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 1], [0, 0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8302857279777527, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.6709403991699219, 0.9903046488761902, 0.7828609347343445, 0.6731141209602356, 0.6181005835533142, 0.5841363072395325, 0.5380715727806091, 0.5292967557907104, 0.49509739875793457, 0.4813654124736786, 0.48270049691200256, 0.5288704633712769, 0.5492274761199951], "accuracy": [0.4757627844810486, 0.6676793098449707, 0.7326641082763672, 0.7600052952766418, 0.7711002230644226, 0.7872143983840942, 0.8016114234924316, 0.8033285140991211, 0.822348415851593, 0.8206313848495483, 0.8343679904937744, 0.8251221776008606, 0.8121780753135681], "val_loss": [1.0793190002441406, 0.6883901357650757, 0.6131751537322998, 0.553819477558136, 0.5201253890991211, 0.4947713315486908, 0.4782242476940155, 0.47608691453933716, 0.5085002183914185, 0.5034394860267639, 0.5257242321968079, 0.5411579012870789, 0.6133038997650146], "val_accuracy": [0.6340000033378601, 0.7476666569709778, 0.7730000019073486, 0.7856666445732117, 0.7996666431427002, 0.8173333406448364, 0.8259999752044678, 0.8330000042915344, 0.8233333230018616, 0.8306666612625122, 0.8246666789054871, 0.8266666531562805, 0.8193333148956299]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 3, 2, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 6, 3, 0, 3], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 3, 0, 3], [16, 16], [0, 0, 1, 1], [0, 2], [0, 4], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 6, 8, 9], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0], [16, 41, 96, 41, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 4, 2, 2, 1, 21, 12, 9, 6], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(sigma, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.pow(alpha, tf.math.divide_no_nan(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 4, 4], [0, 1, 0, 2, 1], [39, 8], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 29], [0, 1], [5], [0], [13], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 2, 6, 8, 6, 4, 1, 4, 3, 8], [0, 0, 0, 3, 4, 0, 3, 1, 4, 1], [16, 99, 96, 99, 53, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.pow(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(beta), tf.math.multiply(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.square(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.multiply(tf.math.sqrt(grad), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0944393053650856, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], [1, 1, 3, 0, 3, 1, 4, 8, 5, 8, 7, 9], [0, 1, 0, 2, 1, 3, 3], [39, 52, 13], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0], [0, 2, 3, 2, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [44], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 8, 8, 9, 0], [4, 0, 0, 0, 0, 2, 3, 1, 2, 0], [16, 99, 96, 99, 4, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 12, 7, 3, 6, 3, 3, 2, 2, 1, 1, 1, 24, 15, 9, 5], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.subtract(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(tf.math.pow(tf.math.sqrt(tf.math.square(tf.math.sqrt(alpha))), tf.math.add(grad, grad)), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32)), beta)), tf.math.sqrt(tf.math.sqrt(sigma)))), alpha)), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.math.negative(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [9, 2, 3, 0, 3, 5], [0, 2, 0, 0], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 6, 1, 4, 1, 4, 2, 8], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.09057142585515976, "mapping_values": [1, 9, 5, 4, 2, 1, 1, 0, 1, 2, 1, 1, 1, 17, 8, 9, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), sigma)), alpha), beta)", "other_info": {"loss": [2.3086447715759277, 2.310086965560913, 2.3097147941589355, 2.311084747314453, 2.3093230724334717, 2.3114356994628906], "accuracy": [0.09166556596755981, 0.09259014576673508, 0.0948355570435524, 0.09417514503002167, 0.09153348207473755, 0.08770307898521423], "val_loss": [2.3091349601745605, 2.3091349601745605, 2.3091349601745605, 2.3091349601745605, 2.3091349601745605, 2.3091349601745605], "val_accuracy": [0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816]}}]