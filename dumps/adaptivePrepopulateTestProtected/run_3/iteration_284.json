[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8677142858505249, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2227659225463867, 1.865133285522461, 1.3886593580245972, 1.0825011730194092, 0.9075250029563904, 0.8242046236991882, 0.7648361921310425, 0.7155890464782715, 0.6749016642570496, 0.6467775106430054, 0.6211401224136353, 0.5987377166748047, 0.5880353450775146, 0.5602506995201111, 0.5486589670181274, 0.5283075571060181, 0.5232754945755005, 0.5038179159164429, 0.4994078278541565, 0.48460155725479126, 0.4763931632041931, 0.45899835228919983, 0.4592960774898529, 0.4497697651386261, 0.4407486319541931, 0.4359573721885681, 0.42094138264656067, 0.4153159558773041, 0.4116072952747345, 0.40989768505096436, 0.39847061038017273, 0.3975270986557007, 0.3822517693042755, 0.38410842418670654, 0.3734899163246155, 0.3663223385810852, 0.3622700572013855, 0.3649343252182007, 0.3567436635494232, 0.346426784992218, 0.33614760637283325, 0.3422712981700897, 0.33878543972969055, 0.3282603323459625, 0.3283666670322418, 0.3193953037261963, 0.31484857201576233, 0.31342726945877075, 0.3124431371688843, 0.2960224449634552, 0.30335861444473267, 0.29643237590789795, 0.29282814264297485, 0.2823666036128998, 0.2825208008289337, 0.27141228318214417, 0.2804265320301056, 0.2687745690345764, 0.2704564332962036, 0.2660732865333557, 0.2651406228542328, 0.256440669298172, 0.24518853425979614, 0.24747778475284576, 0.24671252071857452, 0.2380235493183136, 0.24469292163848877], "accuracy": [0.2716946303844452, 0.48289525508880615, 0.5690133571624756, 0.6198652982711792, 0.6799629926681519, 0.7065116763114929, 0.7275128960609436, 0.7417778372764587, 0.759609043598175, 0.76106196641922, 0.7791573405265808, 0.7878747582435608, 0.7880068421363831, 0.8004226684570312, 0.8053097128868103, 0.8074230551719666, 0.8084797263145447, 0.8207634687423706, 0.8219521641731262, 0.8265751004219055, 0.8273676037788391, 0.837537944316864, 0.8408400416374207, 0.8396512866020203, 0.8430854678153992, 0.8462554216384888, 0.8525954484939575, 0.8502179384231567, 0.8539162874221802, 0.8525954484939575, 0.8626337051391602, 0.8607845902442932, 0.8632941246032715, 0.8618412613868713, 0.8652753829956055, 0.869502067565918, 0.8671245574951172, 0.8661999702453613, 0.867520809173584, 0.8741249442100525, 0.8782195448875427, 0.8753136992454529, 0.8778232932090759, 0.8809932470321655, 0.8804649114608765, 0.883238673210144, 0.8878615498542786, 0.887201189994812, 0.884691596031189, 0.8931449055671692, 0.8914278149604797, 0.8931449055671692, 0.8920882344245911, 0.8939374089241028, 0.895918607711792, 0.902390718460083, 0.8982961177825928, 0.9009377956390381, 0.8997490406036377, 0.9056927561759949, 0.9030511379241943, 0.9035794734954834, 0.9095231890678406, 0.9084665179252625, 0.9108440279960632, 0.9099194407463074, 0.9108440279960632], "val_loss": [2.0396525859832764, 1.515119194984436, 1.0414334535598755, 0.827987551689148, 0.7379446029663086, 0.6811739206314087, 0.6490073204040527, 0.6080073118209839, 0.5808480381965637, 0.5572808384895325, 0.5396855473518372, 0.5337308049201965, 0.5140345692634583, 0.5030007362365723, 0.4993012547492981, 0.47861605882644653, 0.47094500064849854, 0.459440678358078, 0.4594212770462036, 0.448447585105896, 0.4392619729042053, 0.4382942020893097, 0.42852240800857544, 0.4228154718875885, 0.41918066143989563, 0.4183817207813263, 0.41185641288757324, 0.4077437222003937, 0.4063038229942322, 0.40026992559432983, 0.40020671486854553, 0.39531180262565613, 0.39325016736984253, 0.39151978492736816, 0.3833858370780945, 0.3831121325492859, 0.381197988986969, 0.380429208278656, 0.378596693277359, 0.37150052189826965, 0.3773811161518097, 0.3734951913356781, 0.3698848485946655, 0.3718900680541992, 0.36555778980255127, 0.3652459979057312, 0.3659266233444214, 0.36141544580459595, 0.3589831590652466, 0.3650660812854767, 0.35611093044281006, 0.35527074337005615, 0.36109644174575806, 0.3526126742362976, 0.35595181584358215, 0.3577266335487366, 0.35071784257888794, 0.3556346297264099, 0.3548828065395355, 0.35487377643585205, 0.3573072850704193, 0.3505192995071411, 0.3542095422744751, 0.3468465209007263, 0.3509393036365509, 0.3581085205078125, 0.3436545431613922], "val_accuracy": [0.5490000247955322, 0.6629999876022339, 0.6790000200271606, 0.7173333168029785, 0.7426666617393494, 0.7580000162124634, 0.7613333463668823, 0.7773333191871643, 0.7893333435058594, 0.800000011920929, 0.8016666769981384, 0.800000011920929, 0.809333324432373, 0.8186666369438171, 0.8149999976158142, 0.8213333487510681, 0.8309999704360962, 0.8333333134651184, 0.8299999833106995, 0.8403333425521851, 0.8399999737739563, 0.8396666646003723, 0.843999981880188, 0.8460000157356262, 0.8426666855812073, 0.8463333249092102, 0.8503333330154419, 0.8460000157356262, 0.8493333458900452, 0.8513333201408386, 0.8503333330154419, 0.8560000061988831, 0.8519999980926514, 0.856333315372467, 0.8606666922569275, 0.859333336353302, 0.862666666507721, 0.859666645526886, 0.8640000224113464, 0.8636666536331177, 0.859666645526886, 0.862333357334137, 0.8650000095367432, 0.8636666536331177, 0.8673333525657654, 0.8653333187103271, 0.8673333525657654, 0.8676666617393494, 0.8693333268165588, 0.8646666407585144, 0.8693333268165588, 0.8709999918937683, 0.8706666827201843, 0.8733333349227905, 0.8726666569709778, 0.871999979019165, 0.874666690826416, 0.875333309173584, 0.8700000047683716, 0.871999979019165, 0.8733333349227905, 0.8766666650772095, 0.874666690826416, 0.875333309173584, 0.875333309173584, 0.8740000128746033, 0.8756666779518127]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 2, 3, 0, 5], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 4, 0, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0], [6, 3, 3, 6, 8, 8, 4, 1, 4, 2, 8, 2, 9], [0, 0, 2, 3, 4, 0, 3, 1, 2, 1], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 10, 6, 4, 2, 2, 1, 1, 1, 22, 13, 9, 4], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.sqrt(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), beta)))), tf.math.pow(sigma, tf.math.add(grad, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), sigma), tf.math.sqrt(tf.math.add(alpha, beta))), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3038125038146973, 2.3024160861968994, 2.3023955821990967, 2.302499294281006, 2.3046112060546875, 2.3182897567749023], "accuracy": [0.09959053993225098, 0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.302600622177124, 2.3025684356689453, 2.3026206493377686, 2.3032047748565674, 2.307825803756714, 2.3457162380218506], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 0, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 3], [0, 2, 0, 3, 2], [6, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 4, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 1, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 11, 6, 5, 2, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(alpha, tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 0], [20, 39, 67], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 1, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [9], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 3, 4, 1, 4, 4, 8], [0, 0, 0, 3, 1, 0, 3, 1, 2, 0], [16, 99, 96, 26, 61, 4]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 10, 6, 4, 2, 1, 1, 0, 1, 21, 11, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(alpha, tf.math.pow(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.pow(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 3, 0, 3, 1, 1, 8, 1, 2, 5, 0, 6, 8], [0, 1, 1, 2, 1, 3, 0, 1, 2], [39, 59], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5, 6, 3, 1, 4, 9, 9, 4, 2, 5], [0, 2, 0, 3, 4, 4, 5, 3], [16, 8, 35, 56], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 0, 8, 1, 4, 1, 4, 2, 5], [4, 0, 0, 2, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 14, 9, 2, 23, 15, 8, 4, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.subtract(tf.math.subtract(alpha, tf.math.sqrt(alpha)), tf.math.subtract(grad, alpha)), tf.math.add(tf.math.square(grad), tf.math.negative(tf.math.divide_no_nan(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), alpha))))), tf.math.sqrt(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.math.pow(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), grad), tf.math.pow(grad, grad)))), tf.math.add(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), beta))))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}]