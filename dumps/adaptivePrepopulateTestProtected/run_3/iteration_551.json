[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8822857141494751, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585750579834, 1.8655762672424316, 1.394430160522461, 1.0773245096206665, 0.9378393888473511, 0.8425824046134949, 0.7776632308959961, 0.736241340637207, 0.6971188187599182, 0.6732122302055359, 0.644855797290802, 0.6276965141296387, 0.6100340485572815, 0.5899673104286194, 0.5746485590934753, 0.5484329462051392, 0.5425268411636353, 0.5357900857925415, 0.5214410424232483, 0.5127171874046326, 0.4895091950893402, 0.4932740032672882, 0.48551443219184875, 0.47113916277885437, 0.46571049094200134, 0.450914591550827, 0.438728004693985, 0.4414178729057312, 0.4245515465736389, 0.4182806611061096, 0.4126766324043274, 0.41352686285972595, 0.4031256139278412, 0.40064555406570435, 0.3982388377189636, 0.38566267490386963, 0.38400527834892273, 0.3741128146648407, 0.36422181129455566, 0.36170411109924316, 0.35991787910461426, 0.35666367411613464, 0.3521813750267029, 0.34583958983421326, 0.34736087918281555, 0.34181836247444153, 0.33650368452072144, 0.33141741156578064, 0.3230496346950531, 0.3225416839122772, 0.315096914768219, 0.3059031665325165, 0.3058394491672516, 0.3017319440841675, 0.29568877816200256, 0.2933836281299591, 0.28774771094322205, 0.2856961190700531, 0.2802303731441498, 0.2779994010925293, 0.274711549282074, 0.2719985842704773, 0.2586328387260437, 0.2598455548286438, 0.2622571289539337, 0.25739434361457825, 0.2502012252807617, 0.2544722855091095, 0.24556587636470795, 0.24580754339694977, 0.23948103189468384, 0.23949603736400604, 0.23484042286872864, 0.22871272265911102, 0.2256491780281067, 0.22479403018951416, 0.21744707226753235, 0.21390178799629211, 0.21272219717502594], "accuracy": [0.2785629332065582, 0.49451854825019836, 0.559899628162384, 0.6215823292732239, 0.6654338836669922, 0.6950204968452454, 0.7181349992752075, 0.7322678565979004, 0.7441553473472595, 0.7483819723129272, 0.7627789974212646, 0.7717606425285339, 0.7728173136711121, 0.78113853931427, 0.7882710099220276, 0.7993659973144531, 0.7976489067077637, 0.8074230551719666, 0.8128384351730347, 0.8198388814926147, 0.8212917447090149, 0.819970965385437, 0.8272355198860168, 0.8350284099578857, 0.8305375576019287, 0.8387266993522644, 0.846387505531311, 0.8433496356010437, 0.8504821062088013, 0.8524633646011353, 0.8535200357437134, 0.854708731174469, 0.856689989566803, 0.8551049828529358, 0.8593316674232483, 0.8615770936012268, 0.8628978729248047, 0.8702945709228516, 0.8691058158874512, 0.871879518032074, 0.8722757697105408, 0.8691058158874512, 0.8733324408531189, 0.8800686597824097, 0.8795403242111206, 0.8755778670310974, 0.8768987059593201, 0.8829745054244995, 0.8824461698532104, 0.8823140859603882, 0.887201189994812, 0.8897107243537903, 0.8889182209968567, 0.8927486538887024, 0.8902390599250793, 0.8953903317451477, 0.8980319499969482, 0.8976356983184814, 0.900409460067749, 0.89552241563797, 0.9025228023529053, 0.8989565372467041, 0.9056927561759949, 0.9085986018180847, 0.9030511379241943, 0.9066173434257507, 0.9101836085319519, 0.9083344340324402, 0.909259021282196, 0.9099194407463074, 0.9126931428909302, 0.9140139818191528, 0.9119006991386414, 0.9171839952468872, 0.9169198274612427, 0.9185048341751099, 0.9218068718910217, 0.9185048341751099, 0.9196935892105103], "val_loss": [2.033445358276367, 1.5042319297790527, 1.0271512269973755, 0.8147247433662415, 0.7278039455413818, 0.68117356300354, 0.6306353211402893, 0.5966841578483582, 0.5751398801803589, 0.5460951328277588, 0.5314993858337402, 0.509799063205719, 0.4957965612411499, 0.4792602062225342, 0.46671679615974426, 0.45267683267593384, 0.4441072940826416, 0.4356139600276947, 0.42943108081817627, 0.4255247414112091, 0.41811680793762207, 0.4163394272327423, 0.39929893612861633, 0.3969916105270386, 0.39089226722717285, 0.387652188539505, 0.3844633102416992, 0.3824205696582794, 0.3749690353870392, 0.3701930642127991, 0.36967378854751587, 0.36689504981040955, 0.3585263788700104, 0.3587398827075958, 0.36267170310020447, 0.3561091423034668, 0.35379692912101746, 0.3499273955821991, 0.34701839089393616, 0.3467637896537781, 0.3424672484397888, 0.33951225876808167, 0.3386255204677582, 0.34044384956359863, 0.33945050835609436, 0.33684298396110535, 0.3322163224220276, 0.33181649446487427, 0.32827115058898926, 0.3312568664550781, 0.3297465741634369, 0.3256674110889435, 0.3234780728816986, 0.32119208574295044, 0.3232716917991638, 0.3209094703197479, 0.31944912672042847, 0.3157532513141632, 0.3144265413284302, 0.31676045060157776, 0.31425556540489197, 0.3131799101829529, 0.3147056996822357, 0.3154993951320648, 0.31771615147590637, 0.31545644998550415, 0.3127000629901886, 0.31382524967193604, 0.31026333570480347, 0.3147730529308319, 0.30829918384552, 0.3107443153858185, 0.31316936016082764, 0.30297672748565674, 0.30325081944465637, 0.30436232686042786, 0.3072424829006195, 0.30681705474853516, 0.3061434030532837], "val_accuracy": [0.5526666641235352, 0.6666666865348816, 0.687333345413208, 0.7083333134651184, 0.731333315372467, 0.7446666955947876, 0.7606666684150696, 0.762666642665863, 0.7873333096504211, 0.7889999747276306, 0.7973333597183228, 0.8056666851043701, 0.8193333148956299, 0.8259999752044678, 0.8289999961853027, 0.8410000205039978, 0.8453333377838135, 0.8450000286102295, 0.8489999771118164, 0.847000002861023, 0.8516666889190674, 0.856333315372467, 0.859333336353302, 0.856333315372467, 0.8633333444595337, 0.8640000224113464, 0.8656666874885559, 0.8646666407585144, 0.8679999709129333, 0.8696666955947876, 0.8640000224113464, 0.8686666488647461, 0.8713333606719971, 0.8709999918937683, 0.8703333139419556, 0.8723333477973938, 0.871999979019165, 0.874666690826416, 0.8723333477973938, 0.8759999871253967, 0.8726666569709778, 0.875333309173584, 0.8790000081062317, 0.8756666779518127, 0.8726666569709778, 0.8769999742507935, 0.8796666860580444, 0.8796666860580444, 0.8806666731834412, 0.8793333172798157, 0.8813333511352539, 0.8840000033378601, 0.8840000033378601, 0.8843333125114441, 0.8809999823570251, 0.8856666684150696, 0.8866666555404663, 0.8833333253860474, 0.8866666555404663, 0.8843333125114441, 0.8856666684150696, 0.8880000114440918, 0.887333333492279, 0.8883333206176758, 0.8866666555404663, 0.8896666765213013, 0.8863333463668823, 0.8853333592414856, 0.890999972820282, 0.8870000243186951, 0.8883333206176758, 0.8883333206176758, 0.8916666507720947, 0.8939999938011169, 0.8896666765213013, 0.8916666507720947, 0.890999972820282, 0.8926666378974915, 0.8913333415985107]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8619999885559082, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.225172281265259, 1.8733272552490234, 1.402034878730774, 1.0855194330215454, 0.9329840540885925, 0.8397919535636902, 0.7743600606918335, 0.7195873260498047, 0.6925386786460876, 0.6529445648193359, 0.6316922307014465, 0.6128427982330322, 0.5828408598899841, 0.5689331293106079, 0.5538454651832581, 0.5441323518753052, 0.5234991312026978, 0.519152045249939, 0.5020298361778259, 0.4908560514450073, 0.48220136761665344, 0.4692785441875458, 0.4628423750400543, 0.45477062463760376, 0.45142099261283875, 0.43923643231391907, 0.4253246486186981, 0.42924728989601135, 0.4202779531478882, 0.406402051448822, 0.40610969066619873, 0.3960226774215698, 0.39959344267845154, 0.38392695784568787, 0.3882691264152527, 0.3756794035434723, 0.36307382583618164, 0.3659680485725403, 0.3491394817829132, 0.35489869117736816, 0.35091736912727356, 0.33664315938949585, 0.32945290207862854, 0.33255404233932495, 0.32628944516181946, 0.3246912360191345, 0.30993834137916565, 0.3097640573978424, 0.3030136227607727, 0.30339816212654114, 0.30272606015205383, 0.2967160642147064, 0.2969776391983032, 0.28707897663116455, 0.2887499928474426, 0.2782802879810333, 0.271392285823822, 0.2763940691947937, 0.2693847715854645, 0.2676825523376465, 0.2613152265548706, 0.2551578879356384, 0.255534291267395, 0.2550654113292694, 0.24388936161994934, 0.24321140348911285, 0.23790480196475983, 0.23412783443927765, 0.22923293709754944, 0.2285519391298294, 0.2242455780506134, 0.21982170641422272, 0.2178148329257965, 0.2139163762331009, 0.21253399550914764, 0.2069941759109497, 0.20838214457035065], "accuracy": [0.2731475234031677, 0.4928014874458313, 0.563730001449585, 0.6205257177352905, 0.6713775992393494, 0.6944921612739563, 0.7206445932388306, 0.7423061728477478, 0.7495707273483276, 0.7656848430633545, 0.767401933670044, 0.7779685854911804, 0.7877426743507385, 0.7922335267066956, 0.7969884872436523, 0.8029322624206543, 0.8104609847068787, 0.8123101592063904, 0.821820080280304, 0.8267071843147278, 0.8285563588142395, 0.8330471515655518, 0.8347642421722412, 0.8411042094230652, 0.8366134166717529, 0.8393871188163757, 0.8488970994949341, 0.8474441766738892, 0.8451988101005554, 0.8576145768165588, 0.8552370667457581, 0.8590674996376038, 0.8548408150672913, 0.8654074668884277, 0.8623695969581604, 0.8671245574951172, 0.8692378997802734, 0.8692378997802734, 0.8735966086387634, 0.8721436858177185, 0.8730682730674744, 0.8784837126731873, 0.8799365758895874, 0.8749174475669861, 0.8823140859603882, 0.8833707571029663, 0.8848236799240112, 0.8894465565681458, 0.8893144726753235, 0.8850878477096558, 0.8894465565681458, 0.891559898853302, 0.8878615498542786, 0.8990886211395264, 0.8969752788543701, 0.9005415439605713, 0.9008057117462158, 0.89988112449646, 0.9027869701385498, 0.9052965044975281, 0.9070135951042175, 0.9052965044975281, 0.9117686152458191, 0.9070135951042175, 0.9134856462478638, 0.9120327830314636, 0.9116365313529968, 0.9165235757827759, 0.9148064851760864, 0.9157310724258423, 0.9192973375320435, 0.9214106202125549, 0.919561505317688, 0.9229956269264221, 0.9252410531044006, 0.9235239624977112, 0.9248448014259338], "val_loss": [2.0481810569763184, 1.5277900695800781, 1.0516743659973145, 0.8407738208770752, 0.7510034441947937, 0.6925177574157715, 0.6447477340698242, 0.6072474122047424, 0.5783228278160095, 0.5549341440200806, 0.5396503210067749, 0.5219987630844116, 0.5037288665771484, 0.5015859603881836, 0.4821048080921173, 0.46942204236984253, 0.46150511503219604, 0.44901102781295776, 0.4420648515224457, 0.4335426092147827, 0.43190401792526245, 0.42172861099243164, 0.4170474112033844, 0.41651204228401184, 0.41555941104888916, 0.40600863099098206, 0.4002351760864258, 0.4017062187194824, 0.3882286846637726, 0.3897850811481476, 0.3825615644454956, 0.3820326328277588, 0.37485143542289734, 0.3776018023490906, 0.37788304686546326, 0.3684389591217041, 0.37301331758499146, 0.36645084619522095, 0.3665597438812256, 0.3639522194862366, 0.36169642210006714, 0.3553597331047058, 0.35500508546829224, 0.35431116819381714, 0.35209333896636963, 0.3534216284751892, 0.3488958477973938, 0.3443778455257416, 0.34593465924263, 0.3444272577762604, 0.3425350487232208, 0.34821566939353943, 0.34371235966682434, 0.3393007516860962, 0.33902913331985474, 0.33757567405700684, 0.3351343274116516, 0.33540889620780945, 0.3355131447315216, 0.336642324924469, 0.3354443907737732, 0.34036844968795776, 0.3383709490299225, 0.33109238743782043, 0.3297559320926666, 0.33128854632377625, 0.33399954438209534, 0.32972288131713867, 0.3327076733112335, 0.32839152216911316, 0.3257819414138794, 0.32995593547821045, 0.3285866975784302, 0.32353106141090393, 0.32163187861442566, 0.3319375514984131, 0.3217190206050873], "val_accuracy": [0.534333348274231, 0.6650000214576721, 0.6899999976158142, 0.7166666388511658, 0.737666666507721, 0.7476666569709778, 0.7639999985694885, 0.7739999890327454, 0.7786666750907898, 0.7893333435058594, 0.7929999828338623, 0.8063333630561829, 0.8109999895095825, 0.8066666722297668, 0.812333345413208, 0.8209999799728394, 0.8243333101272583, 0.8323333263397217, 0.831333339214325, 0.8339999914169312, 0.8410000205039978, 0.8366666436195374, 0.8426666855812073, 0.8420000076293945, 0.8396666646003723, 0.8496666550636292, 0.843666672706604, 0.8473333120346069, 0.8546666502952576, 0.8539999723434448, 0.8586666584014893, 0.8536666631698608, 0.859666645526886, 0.8603333234786987, 0.8603333234786987, 0.8610000014305115, 0.859000027179718, 0.8633333444595337, 0.8619999885559082, 0.8653333187103271, 0.8653333187103271, 0.8640000224113464, 0.8690000176429749, 0.8673333525657654, 0.8703333139419556, 0.8683333396911621, 0.8693333268165588, 0.8709999918937683, 0.8703333139419556, 0.8756666779518127, 0.875333309173584, 0.8709999918937683, 0.875, 0.8726666569709778, 0.878333330154419, 0.8776666522026062, 0.8766666650772095, 0.8769999742507935, 0.8790000081062317, 0.8763333559036255, 0.878333330154419, 0.8796666860580444, 0.878333330154419, 0.8790000081062317, 0.8816666603088379, 0.8843333125114441, 0.8823333382606506, 0.8836666941642761, 0.8809999823570251, 0.8836666941642761, 0.8846666812896729, 0.8863333463668823, 0.8806666731834412, 0.8840000033378601, 0.8796666860580444, 0.8803333044052124, 0.8836666941642761]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [0, 2, 3, 0, 3, 7, 7, 3, 5, 2, 3, 7, 3, 5, 1, 3, 5, 0, 8, 9], [0, 1, 2, 2, 3, 1, 2, 2, 1, 2, 3, 3], [82, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 2, 2, 6, 0, 0, 7, 0, 6, 8, 9], [0, 0, 0, 3, 0, 0, 1, 1, 0, 0, 0, 6], [16, 22, 96, 4, 61, 74, 30, 33, 50]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 20, 12, 2, 10, 6, 4, 2, 2, 1, 1, 1, 30, 18, 12, 9], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.add(tf.math.multiply(tf.math.square(grad), grad), alpha)), tf.math.add(tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.square(grad), tf.math.subtract(tf.math.multiply(grad, tf.math.square(tf.math.negative(alpha))), grad)), tf.math.sqrt(grad)), grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(sigma, tf.math.add(tf.math.divide_no_nan(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.negative(alpha)))), alpha)))), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.divide_no_nan(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [3, 2, 3, 0, 2, 8], [2, 1, 0, 2, 1], [39, 31], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0], [0, 4, 3, 0, 3, 5, 9, 7, 4, 5, 6, 7, 9, 9], [0, 2, 0, 3, 4], [16, 69, 82, 25, 15], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 4, 0, 3, 0, 0, 3, 2, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 1, 19, 14, 5, 5, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.add(tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(grad, tf.math.sqrt(alpha))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.square(tf.math.divide_no_nan(beta, tf.math.add(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), grad))), grad)))), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), sigma), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 34], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 4, 5, 7, 9], [0, 0, 1, 3, 0, 0, 3, 2, 2, 0, 1], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 3, 3, 2, 2, 1, 1, 1, 25, 14, 11, 6], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(alpha, sigma))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), beta)), tf.math.add(tf.math.pow(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), alpha))))", "other_info": {"loss": [2.303429365158081, 2.3025853633880615, 2.3025853633880615, 2.3025851249694824, 2.3025853633880615, 2.3025851249694824], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025875091552734, 2.3025879859924316, 2.3025877475738525, 2.3025877475738525, 2.3025877475738525, 2.3025877475738525], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 2, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1], [2, 2, 3, 0, 3, 5, 0, 2], [3, 2, 3, 3, 4, 4], [54, 96], [0, 1, 0, 1, 1], [1, 7], [0, 4, 0], [99, 19], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1], [6, 2, 3, 2, 8, 1, 4, 1, 4, 0, 8], [0, 0, 0, 3, 3, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 14, 8, 6, 0, 5, 2, 3, 2, 1, 0, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(grad, tf.math.square(grad))), tf.math.negative(tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3038105964660645, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}]