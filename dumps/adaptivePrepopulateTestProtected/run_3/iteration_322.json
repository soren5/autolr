[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8485714197158813, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2235233783721924, 1.8739006519317627, 1.4063705205917358, 1.109588623046875, 0.9517717957496643, 0.8487300872802734, 0.7847857475280762, 0.7387319207191467, 0.6935200095176697, 0.670160174369812, 0.6522462368011475, 0.6299604773521423, 0.609350323677063, 0.5848378539085388, 0.5664569139480591, 0.5551430583000183, 0.5367432832717896, 0.5304081439971924, 0.5210921168327332, 0.5066485404968262, 0.49331793189048767, 0.489754319190979, 0.47167152166366577, 0.4704449772834778, 0.4598861336708069, 0.44079557061195374, 0.4351821839809418, 0.4367881119251251, 0.42372187972068787, 0.4249272346496582, 0.412990003824234, 0.4117836356163025, 0.406516969203949, 0.39913520216941833, 0.3931700587272644, 0.38607120513916016, 0.3736691474914551, 0.37379133701324463, 0.3707427680492401, 0.36258670687675476, 0.3485565781593323, 0.3508839011192322, 0.3427695035934448, 0.3415950536727905, 0.3339255750179291, 0.32960212230682373, 0.3243274986743927, 0.3202703297138214, 0.31455036997795105, 0.315252423286438, 0.309115469455719, 0.3101365268230438, 0.29520756006240845, 0.29996106028556824, 0.29467689990997314, 0.28544533252716064, 0.28500550985336304, 0.27491337060928345, 0.2806365489959717, 0.26964470744132996], "accuracy": [0.27724209427833557, 0.48170650005340576, 0.5596354603767395, 0.6174877882003784, 0.6664905548095703, 0.6977941989898682, 0.7154933214187622, 0.7341170310974121, 0.7474573850631714, 0.755118191242218, 0.7656848430633545, 0.7757231593132019, 0.7791573405265808, 0.7922335267066956, 0.7956677079200745, 0.8021397590637207, 0.8098005652427673, 0.8092722296714783, 0.8104609847068787, 0.8178576231002808, 0.8198388814926147, 0.8202351331710815, 0.8280280232429504, 0.83119797706604, 0.8421608805656433, 0.8424250483512878, 0.8385946154594421, 0.8441421389579773, 0.8448025584220886, 0.8502179384231567, 0.8519350290298462, 0.8540483713150024, 0.8581429123878479, 0.8593316674232483, 0.8610487580299377, 0.86118084192276, 0.8663320541381836, 0.8636903762817383, 0.8702945709228516, 0.8692378997802734, 0.8747853636741638, 0.8714832663536072, 0.8745211958885193, 0.8771628737449646, 0.8799365758895874, 0.8815215826034546, 0.8850878477096558, 0.883238673210144, 0.8891823887825012, 0.8891823887825012, 0.8877294659614563, 0.8927486538887024, 0.8932769894599915, 0.8922203183174133, 0.8972394466400146, 0.9002773761749268, 0.8992207050323486, 0.90423983335495, 0.8977677822113037, 0.9025228023529053], "val_loss": [2.048771381378174, 1.536197543144226, 1.0772857666015625, 0.8664054274559021, 0.7746127247810364, 0.7115713953971863, 0.6666451096534729, 0.6323893070220947, 0.6031311750411987, 0.585404634475708, 0.5712838768959045, 0.5532246828079224, 0.5358338952064514, 0.5185480713844299, 0.5105604529380798, 0.4983847141265869, 0.49094367027282715, 0.48055848479270935, 0.47765421867370605, 0.46881574392318726, 0.45452845096588135, 0.4498714208602905, 0.44314128160476685, 0.43798792362213135, 0.4309215545654297, 0.4291636645793915, 0.4232400357723236, 0.4272744953632355, 0.4141654372215271, 0.41147860884666443, 0.40844815969467163, 0.4069121479988098, 0.4099159240722656, 0.3991237282752991, 0.39596235752105713, 0.3912336826324463, 0.38992875814437866, 0.3869747817516327, 0.38831010460853577, 0.38052400946617126, 0.3762926161289215, 0.3838095963001251, 0.37846639752388, 0.3718627989292145, 0.37361809611320496, 0.36969295144081116, 0.3687438666820526, 0.364012211561203, 0.36834391951560974, 0.36261042952537537, 0.36416691541671753, 0.36736059188842773, 0.3682047128677368, 0.35362938046455383, 0.35423368215560913, 0.35630571842193604, 0.36072924733161926, 0.3614887297153473, 0.35678914189338684, 0.34850063920021057], "val_accuracy": [0.5220000147819519, 0.6433333158493042, 0.6673333048820496, 0.6940000057220459, 0.722000002861023, 0.7419999837875366, 0.7580000162124634, 0.765999972820282, 0.7773333191871643, 0.7913333177566528, 0.7943333387374878, 0.8053333163261414, 0.8109999895095825, 0.8199999928474426, 0.8223333358764648, 0.828000009059906, 0.8276666402816772, 0.8333333134651184, 0.828000009059906, 0.8370000123977661, 0.8433333039283752, 0.843999981880188, 0.843999981880188, 0.843999981880188, 0.8460000157356262, 0.8500000238418579, 0.8536666631698608, 0.8500000238418579, 0.8513333201408386, 0.8516666889190674, 0.8573333621025085, 0.8539999723434448, 0.8560000061988831, 0.8633333444595337, 0.8610000014305115, 0.8600000143051147, 0.8650000095367432, 0.8663333058357239, 0.8640000224113464, 0.8709999918937683, 0.8713333606719971, 0.8673333525657654, 0.8673333525657654, 0.8703333139419556, 0.8713333606719971, 0.8740000128746033, 0.8713333606719971, 0.8759999871253967, 0.8693333268165588, 0.8769999742507935, 0.8723333477973938, 0.8723333477973938, 0.8696666955947876, 0.8743333220481873, 0.8786666393280029, 0.8766666650772095, 0.8756666779518127, 0.874666690826416, 0.8740000128746033, 0.878333330154419]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 1], [0, 1, 0, 2], [39, 65], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 6, 5, 8, 8, 1, 3, 1, 6, 1, 2, 1, 4, 2], [0, 2, 0, 3, 3, 0, 1, 1, 2, 5, 2, 0, 4], [16, 16, 57, 38], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [4, 7, 2, 5, 3, 1, 4, 0, 2, 2], [0, 3, 5, 3, 7, 4, 0, 4, 4], [99, 58], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 1, 2, 8], [2, 0, 4, 3, 0, 0, 3, 1, 4, 0], [16, 99, 75, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 30, 17, 13, 4, 19, 10, 9, 2, 16, 8, 8, 3], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.subtract(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.square(tf.math.sqrt(tf.math.sqrt(beta))), tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(grad, grad)), tf.math.add(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(alpha, alpha), tf.math.add(beta, grad)))), beta), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.add(tf.math.square(tf.math.multiply(tf.math.subtract(tf.math.pow(tf.math.negative(grad), sigma), grad), grad)), tf.math.add(tf.math.add(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), grad), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))), sigma), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0948355570435524, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 3, 2, 0, 2, 5, 4, 4, 6, 8], [0, 1, 0, 1, 1, 3, 3, 1, 1, 3], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 5, 5], [0, 3, 1, 3], [16, 16], [0, 1], [0], [2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 3, 3, 1, 8, 1, 4, 1, 2, 4, 8, 5, 0, 9, 7, 4], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0, 6], [16, 99, 45, 99, 61, 1, 45]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 14, 10, 2, 8, 5, 3, 1, 2, 1, 1, 0, 27, 16, 11, 7], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.negative(tf.math.add(tf.math.square(alpha), tf.math.pow(alpha, tf.math.pow(grad, tf.math.divide_no_nan(grad, tf.math.sqrt(alpha)))))), alpha))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.square(alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), sigma)))), tf.math.sqrt(tf.math.square(tf.math.negative(alpha))))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 4, 4, 4, 9, 7, 4, 1, 2, 6, 7, 6, 1], [0, 2, 0, 2, 0, 1, 2, 3, 0, 2, 2, 2, 3], [39, 39, 91, 35, 72], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 3, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [6, 3, 3, 6, 1, 6, 4, 1, 4, 2, 8, 3], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 4, 1], [16, 34, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 28, 15, 13, 5, 10, 6, 4, 2, 2, 1, 1, 1, 24, 12, 12, 6], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.pow(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.pow(tf.math.subtract(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.divide_no_nan(alpha, grad), grad)), tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), grad), grad), grad)))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.subtract(tf.math.divide_no_nan(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma), tf.math.sqrt(tf.math.multiply(alpha, beta))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 2, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 3, 0, 3, 5], [0, 2, 0, 3], [18, 86], [0, 0], [0, 9], [0], [99], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 0, 2, 2, 8], [0, 4, 0, 2, 0, 2, 3, 1, 2, 0], [71, 99, 27, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), beta), tf.math.negative(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, sigma)), alpha)", "other_info": {"loss": [8358277632.0, 57010.9609375, 51699.83203125, 52136.69921875, 51760.80859375, 51564.86328125], "accuracy": [0.09589222073554993, 0.10157178342342377, 0.09919429570436478, 0.1022322028875351, 0.10342095047235489, 0.09747721254825592], "val_loss": [41225.109375, 42795.88671875, 41737.359375, 41732.0390625, 41732.01171875, 41732.01171875], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}, "mapping_values": [1, 9, 5, 4, 2, 6, 4, 2, 1, 2, 2, 0, 1, 17, 9, 8, 3], "tree_depth": 18}]