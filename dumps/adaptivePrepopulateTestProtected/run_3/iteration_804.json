[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8822857141494751, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585750579834, 1.8655762672424316, 1.394430160522461, 1.0773245096206665, 0.9378393888473511, 0.8425824046134949, 0.7776632308959961, 0.736241340637207, 0.6971188187599182, 0.6732122302055359, 0.644855797290802, 0.6276965141296387, 0.6100340485572815, 0.5899673104286194, 0.5746485590934753, 0.5484329462051392, 0.5425268411636353, 0.5357900857925415, 0.5214410424232483, 0.5127171874046326, 0.4895091950893402, 0.4932740032672882, 0.48551443219184875, 0.47113916277885437, 0.46571049094200134, 0.450914591550827, 0.438728004693985, 0.4414178729057312, 0.4245515465736389, 0.4182806611061096, 0.4126766324043274, 0.41352686285972595, 0.4031256139278412, 0.40064555406570435, 0.3982388377189636, 0.38566267490386963, 0.38400527834892273, 0.3741128146648407, 0.36422181129455566, 0.36170411109924316, 0.35991787910461426, 0.35666367411613464, 0.3521813750267029, 0.34583958983421326, 0.34736087918281555, 0.34181836247444153, 0.33650368452072144, 0.33141741156578064, 0.3230496346950531, 0.3225416839122772, 0.315096914768219, 0.3059031665325165, 0.3058394491672516, 0.3017319440841675, 0.29568877816200256, 0.2933836281299591, 0.28774771094322205, 0.2856961190700531, 0.2802303731441498, 0.2779994010925293, 0.274711549282074, 0.2719985842704773, 0.2586328387260437, 0.2598455548286438, 0.2622571289539337, 0.25739434361457825, 0.2502012252807617, 0.2544722855091095, 0.24556587636470795, 0.24580754339694977, 0.23948103189468384, 0.23949603736400604, 0.23484042286872864, 0.22871272265911102, 0.2256491780281067, 0.22479403018951416, 0.21744707226753235, 0.21390178799629211, 0.21272219717502594], "accuracy": [0.2785629332065582, 0.49451854825019836, 0.559899628162384, 0.6215823292732239, 0.6654338836669922, 0.6950204968452454, 0.7181349992752075, 0.7322678565979004, 0.7441553473472595, 0.7483819723129272, 0.7627789974212646, 0.7717606425285339, 0.7728173136711121, 0.78113853931427, 0.7882710099220276, 0.7993659973144531, 0.7976489067077637, 0.8074230551719666, 0.8128384351730347, 0.8198388814926147, 0.8212917447090149, 0.819970965385437, 0.8272355198860168, 0.8350284099578857, 0.8305375576019287, 0.8387266993522644, 0.846387505531311, 0.8433496356010437, 0.8504821062088013, 0.8524633646011353, 0.8535200357437134, 0.854708731174469, 0.856689989566803, 0.8551049828529358, 0.8593316674232483, 0.8615770936012268, 0.8628978729248047, 0.8702945709228516, 0.8691058158874512, 0.871879518032074, 0.8722757697105408, 0.8691058158874512, 0.8733324408531189, 0.8800686597824097, 0.8795403242111206, 0.8755778670310974, 0.8768987059593201, 0.8829745054244995, 0.8824461698532104, 0.8823140859603882, 0.887201189994812, 0.8897107243537903, 0.8889182209968567, 0.8927486538887024, 0.8902390599250793, 0.8953903317451477, 0.8980319499969482, 0.8976356983184814, 0.900409460067749, 0.89552241563797, 0.9025228023529053, 0.8989565372467041, 0.9056927561759949, 0.9085986018180847, 0.9030511379241943, 0.9066173434257507, 0.9101836085319519, 0.9083344340324402, 0.909259021282196, 0.9099194407463074, 0.9126931428909302, 0.9140139818191528, 0.9119006991386414, 0.9171839952468872, 0.9169198274612427, 0.9185048341751099, 0.9218068718910217, 0.9185048341751099, 0.9196935892105103], "val_loss": [2.033445358276367, 1.5042319297790527, 1.0271512269973755, 0.8147247433662415, 0.7278039455413818, 0.68117356300354, 0.6306353211402893, 0.5966841578483582, 0.5751398801803589, 0.5460951328277588, 0.5314993858337402, 0.509799063205719, 0.4957965612411499, 0.4792602062225342, 0.46671679615974426, 0.45267683267593384, 0.4441072940826416, 0.4356139600276947, 0.42943108081817627, 0.4255247414112091, 0.41811680793762207, 0.4163394272327423, 0.39929893612861633, 0.3969916105270386, 0.39089226722717285, 0.387652188539505, 0.3844633102416992, 0.3824205696582794, 0.3749690353870392, 0.3701930642127991, 0.36967378854751587, 0.36689504981040955, 0.3585263788700104, 0.3587398827075958, 0.36267170310020447, 0.3561091423034668, 0.35379692912101746, 0.3499273955821991, 0.34701839089393616, 0.3467637896537781, 0.3424672484397888, 0.33951225876808167, 0.3386255204677582, 0.34044384956359863, 0.33945050835609436, 0.33684298396110535, 0.3322163224220276, 0.33181649446487427, 0.32827115058898926, 0.3312568664550781, 0.3297465741634369, 0.3256674110889435, 0.3234780728816986, 0.32119208574295044, 0.3232716917991638, 0.3209094703197479, 0.31944912672042847, 0.3157532513141632, 0.3144265413284302, 0.31676045060157776, 0.31425556540489197, 0.3131799101829529, 0.3147056996822357, 0.3154993951320648, 0.31771615147590637, 0.31545644998550415, 0.3127000629901886, 0.31382524967193604, 0.31026333570480347, 0.3147730529308319, 0.30829918384552, 0.3107443153858185, 0.31316936016082764, 0.30297672748565674, 0.30325081944465637, 0.30436232686042786, 0.3072424829006195, 0.30681705474853516, 0.3061434030532837], "val_accuracy": [0.5526666641235352, 0.6666666865348816, 0.687333345413208, 0.7083333134651184, 0.731333315372467, 0.7446666955947876, 0.7606666684150696, 0.762666642665863, 0.7873333096504211, 0.7889999747276306, 0.7973333597183228, 0.8056666851043701, 0.8193333148956299, 0.8259999752044678, 0.8289999961853027, 0.8410000205039978, 0.8453333377838135, 0.8450000286102295, 0.8489999771118164, 0.847000002861023, 0.8516666889190674, 0.856333315372467, 0.859333336353302, 0.856333315372467, 0.8633333444595337, 0.8640000224113464, 0.8656666874885559, 0.8646666407585144, 0.8679999709129333, 0.8696666955947876, 0.8640000224113464, 0.8686666488647461, 0.8713333606719971, 0.8709999918937683, 0.8703333139419556, 0.8723333477973938, 0.871999979019165, 0.874666690826416, 0.8723333477973938, 0.8759999871253967, 0.8726666569709778, 0.875333309173584, 0.8790000081062317, 0.8756666779518127, 0.8726666569709778, 0.8769999742507935, 0.8796666860580444, 0.8796666860580444, 0.8806666731834412, 0.8793333172798157, 0.8813333511352539, 0.8840000033378601, 0.8840000033378601, 0.8843333125114441, 0.8809999823570251, 0.8856666684150696, 0.8866666555404663, 0.8833333253860474, 0.8866666555404663, 0.8843333125114441, 0.8856666684150696, 0.8880000114440918, 0.887333333492279, 0.8883333206176758, 0.8866666555404663, 0.8896666765213013, 0.8863333463668823, 0.8853333592414856, 0.890999972820282, 0.8870000243186951, 0.8883333206176758, 0.8883333206176758, 0.8916666507720947, 0.8939999938011169, 0.8896666765213013, 0.8916666507720947, 0.890999972820282, 0.8926666378974915, 0.8913333415985107]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8651428818702698, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2224340438842773, 1.8663147687911987, 1.3911519050598145, 1.0857294797897339, 0.9349547624588013, 0.8383846879005432, 0.77385413646698, 0.7363317608833313, 0.7007826566696167, 0.6677463054656982, 0.6384137272834778, 0.6238428950309753, 0.5997458696365356, 0.576424241065979, 0.5587317943572998, 0.5491034984588623, 0.5382677316665649, 0.5267224907875061, 0.5042222142219543, 0.5038671493530273, 0.4966084063053131, 0.4812542498111725, 0.4761354923248291, 0.46512874960899353, 0.4524364769458771, 0.4491196274757385, 0.4493858218193054, 0.4364369809627533, 0.4281739890575409, 0.4181888997554779, 0.4178379774093628, 0.40855544805526733, 0.4057326912879944, 0.39152395725250244, 0.3870410919189453, 0.3883959650993347, 0.3794279992580414, 0.37524545192718506, 0.3678319454193115, 0.36340898275375366, 0.36050713062286377, 0.34603995084762573, 0.3402516543865204, 0.3394618332386017, 0.33975011110305786, 0.3322047293186188, 0.3212869465351105, 0.3226480484008789, 0.3270745575428009, 0.31963053345680237, 0.31087803840637207, 0.3057178854942322, 0.30137279629707336, 0.29297396540641785, 0.29173052310943604, 0.2926529347896576, 0.28434279561042786, 0.2829642593860626, 0.27661994099617004, 0.27254247665405273], "accuracy": [0.2744683623313904, 0.4908202290534973, 0.5678246021270752, 0.6227710843086243, 0.6705851554870605, 0.6964733600616455, 0.720380425453186, 0.7318716049194336, 0.743891179561615, 0.7589486241340637, 0.7622507214546204, 0.7712323069572449, 0.7798177003860474, 0.7895918488502502, 0.7979130744934082, 0.8001585006713867, 0.8054417967796326, 0.8108572363853455, 0.8152159452438354, 0.8168009519577026, 0.8219521641731262, 0.8300092220306396, 0.8296129703521729, 0.8347642421722412, 0.8380662798881531, 0.8383304476737976, 0.8363492488861084, 0.8433496356010437, 0.8488970994949341, 0.8473120927810669, 0.8482366800308228, 0.8486329317092896, 0.8508783578872681, 0.8605204224586487, 0.8593316674232483, 0.8605204224586487, 0.8647470474243164, 0.8651432991027832, 0.8652753829956055, 0.8728041052818298, 0.8710870146751404, 0.878351628780365, 0.8776912093162537, 0.8762382864952087, 0.8768987059593201, 0.8824461698532104, 0.8849557638168335, 0.8854840993881226, 0.8837670087814331, 0.8862766027450562, 0.8850878477096558, 0.8919561505317688, 0.8898428082466125, 0.8951261639595032, 0.8906353116035461, 0.8938053250312805, 0.9009377956390381, 0.8965790271759033, 0.9005415439605713, 0.9037115573883057], "val_loss": [2.0374157428741455, 1.5078136920928955, 1.0321130752563477, 0.822473406791687, 0.737416684627533, 0.6816253066062927, 0.6353104114532471, 0.6088557839393616, 0.5781340003013611, 0.5510874390602112, 0.5287163853645325, 0.520304262638092, 0.4982466995716095, 0.4938977062702179, 0.47503694891929626, 0.465065598487854, 0.45337218046188354, 0.44592976570129395, 0.4375780522823334, 0.430562287569046, 0.42748546600341797, 0.420956552028656, 0.41414880752563477, 0.41116848587989807, 0.405215322971344, 0.39900171756744385, 0.3974122703075409, 0.40394365787506104, 0.39310774207115173, 0.3872319757938385, 0.3873993754386902, 0.37991437315940857, 0.37527140974998474, 0.3730311989784241, 0.3789927661418915, 0.3664493262767792, 0.36350664496421814, 0.36276915669441223, 0.3609883189201355, 0.3602537512779236, 0.3568449318408966, 0.35168448090553284, 0.3530600666999817, 0.3510626256465912, 0.34975939989089966, 0.34441179037094116, 0.3483339846134186, 0.34462055563926697, 0.34092482924461365, 0.34323224425315857, 0.3392658233642578, 0.33550286293029785, 0.335789293050766, 0.33783841133117676, 0.33874037861824036, 0.3310301899909973, 0.3360176086425781, 0.3294239640235901, 0.33217957615852356, 0.32882383465766907], "val_accuracy": [0.5263333320617676, 0.6683333516120911, 0.6923333406448364, 0.7200000286102295, 0.7390000224113464, 0.753000020980835, 0.7649999856948853, 0.7703333497047424, 0.7846666574478149, 0.7943333387374878, 0.8083333373069763, 0.8103333115577698, 0.8220000267028809, 0.8183333277702332, 0.8246666789054871, 0.8336666822433472, 0.8336666822433472, 0.8383333086967468, 0.8429999947547913, 0.8453333377838135, 0.847000002861023, 0.8460000157356262, 0.8506666421890259, 0.8533333539962769, 0.856333315372467, 0.8546666502952576, 0.8560000061988831, 0.8546666502952576, 0.8603333234786987, 0.8610000014305115, 0.8616666793823242, 0.859666645526886, 0.8666666746139526, 0.8683333396911621, 0.8603333234786987, 0.8686666488647461, 0.8666666746139526, 0.8700000047683716, 0.8690000176429749, 0.8696666955947876, 0.8703333139419556, 0.8709999918937683, 0.8709999918937683, 0.8733333349227905, 0.8726666569709778, 0.8763333559036255, 0.8723333477973938, 0.8733333349227905, 0.8733333349227905, 0.8769999742507935, 0.8756666779518127, 0.8790000081062317, 0.8806666731834412, 0.8740000128746033, 0.8826666474342346, 0.8799999952316284, 0.875, 0.8820000290870667, 0.878333330154419, 0.8806666731834412]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 1], [0, 6, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 1, 0], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [0, 3, 3, 6, 8, 4, 4, 1, 4, 2, 8], [0, 0, 0, 4, 0, 0, 3, 1, 4, 0], [16, 99, 96, 33, 61, 54]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 2, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(alpha, tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma), alpha)))", "other_info": {"loss": [17442.3515625, 148478.953125, 307572.09375, 421612.6875, 478974.59375, 512510.25], "accuracy": [0.1018359512090683, 0.1010434553027153, 0.10619468986988068, 0.1006472036242485, 0.09509972482919693, 0.10276053100824356], "val_loss": [59943.66796875, 190795.140625, 291427.3125, 349413.96875, 379365.25, 394125.15625], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 8, 1, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 2, 3, 0, 3, 5], [0, 2, 0, 3, 4], [82, 16], [0, 1, 1], [2], [0, 5], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 3, 3, 6, 8, 1, 4, 1, 4, 9, 8], [0, 2, 0, 3, 0, 0, 1, 1, 2, 2], [16, 99, 96, 94, 84, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 3, 2, 1, 11, 6, 5, 2, 3, 1, 2, 1, 17, 9, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(beta, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), alpha)))), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 1, 3, 7, 0, 6, 2, 8, 2], [0, 1, 0, 2, 0, 3, 3, 3, 3, 1], [39, 39, 48], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], [0, 2, 3, 4, 3, 5, 6, 9], [2, 2, 0, 3, 3], [16, 16], [0, 1], [0], [4], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 0, 1, 2, 1, 4, 4, 1], [0, 0, 0, 3, 0, 0, 3, 4, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 13, 10, 3, 13, 8, 5, 2, 2, 1, 1, 0, 16, 8, 8, 5], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(grad, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(grad, grad), tf.math.sqrt(tf.math.add(grad, grad))))), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.pow(beta, beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.divide_no_nan(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.negative(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, grad)))))", "other_info": {"loss": [2.303398847579956, 2.302582025527954, 2.3025829792022705, 2.3025832176208496, 2.3025827407836914, 2.302583694458008, 2.302583694458008, 2.3025851249694824], "accuracy": [0.10302469879388809, 0.10394927859306335, 0.10513802617788315, 0.09998679161071777, 0.09998679161071777, 0.09959053993225098, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025832176208496, 2.302582025527954, 2.3025827407836914, 2.3025829792022705, 2.3025834560394287, 2.3025858402252197, 2.302588939666748, 2.302591562271118], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [1, 2, 3, 0, 3, 0], [1, 1, 0, 2, 1], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 6], [0, 2, 0, 3, 5], [53, 40], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 1, 8, 1, 9, 3, 1, 8, 3, 4, 1, 4, 0, 0, 7, 4, 7, 7, 6, 6, 3, 7, 1, 3, 8, 5, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4, 4, 7, 7, 3, 5, 0, 3, 4, 3, 0, 0, 6, 7, 0, 2], [16, 99, 32, 85, 61, 1, 5, 29, 76, 68, 51]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 1, 12, 7, 5, 2, 2, 1, 1, 1, 60, 35, 25, 11], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.negative(alpha), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.negative(alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.divide_no_nan(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, tf.math.subtract(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), sigma)))), tf.math.sqrt(tf.math.subtract(alpha, beta)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.subtract(tf.math.sqrt(grad), tf.math.multiply(grad, tf.math.pow(tf.math.subtract(tf.math.pow(tf.math.negative(tf.math.negative(tf.math.add(grad, tf.math.pow(grad, sigma)))), grad), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.math.add(grad, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.math.subtract(sigma, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.sqrt(tf.math.square(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), grad)), grad), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), beta)))))), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}]