[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.878000020980835, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223759174346924, 1.8681567907333374, 1.3971633911132812, 1.1021500825881958, 0.9438490867614746, 0.8268281817436218, 0.7700234055519104, 0.7182450890541077, 0.6839274764060974, 0.655160665512085, 0.6316797733306885, 0.6046612858772278, 0.586663544178009, 0.5732303261756897, 0.5552444458007812, 0.5382086634635925, 0.5205084085464478, 0.5141545534133911, 0.49866363406181335, 0.4905571937561035, 0.48713892698287964, 0.4630949795246124, 0.46493759751319885, 0.4510720372200012, 0.4456666111946106, 0.4411585330963135, 0.43109801411628723, 0.4194287657737732, 0.41647717356681824, 0.4177640676498413, 0.39898860454559326, 0.3982110619544983, 0.3941095173358917, 0.3838343918323517, 0.38270825147628784, 0.38132011890411377, 0.3706604242324829, 0.3630581796169281, 0.35970449447631836, 0.3585955500602722, 0.3488880693912506, 0.3406795859336853, 0.3434852361679077, 0.34305644035339355, 0.32770219445228577, 0.3274216949939728, 0.3164256513118744, 0.31487780809402466, 0.31453031301498413, 0.3020377457141876, 0.3013147711753845, 0.29238083958625793, 0.30650538206100464, 0.2886098325252533, 0.28784143924713135, 0.28922179341316223, 0.27991431951522827, 0.27731093764305115, 0.27029022574424744, 0.2677718997001648, 0.2672445476055145], "accuracy": [0.27182671427726746, 0.4913485646247864, 0.5609562993049622, 0.6095628142356873, 0.6618676781654358, 0.6997754573822021, 0.7215691208839417, 0.7407211661338806, 0.7508915662765503, 0.7592127919197083, 0.7656848430633545, 0.7798177003860474, 0.7849689722061157, 0.789459764957428, 0.7991018295288086, 0.806630551815033, 0.81112140417099, 0.8088759779930115, 0.8210275769233704, 0.8181217908859253, 0.826310932636261, 0.8333113193511963, 0.8294808864593506, 0.8401796221733093, 0.8409721255302429, 0.8436138033866882, 0.8459912538528442, 0.8519350290298462, 0.8485008478164673, 0.8490291833877563, 0.856689989566803, 0.8573504090309143, 0.8615770936012268, 0.8644828796386719, 0.8605204224586487, 0.8614450097084045, 0.8671245574951172, 0.8726720213890076, 0.8732003569602966, 0.8689737319946289, 0.8762382864952087, 0.8798044919967651, 0.8717474341392517, 0.8825782537460327, 0.8840311765670776, 0.8845595121383667, 0.8885219693183899, 0.8865407705307007, 0.8887861371040344, 0.894069492816925, 0.8918240666389465, 0.8953903317451477, 0.8860124349594116, 0.8988244533538818, 0.8992207050323486, 0.8956544995307922, 0.9014661312103271, 0.89988112449646, 0.900409460067749, 0.9046360850334167, 0.9033153057098389], "val_loss": [2.0386126041412354, 1.5089809894561768, 1.0396978855133057, 0.8277255296707153, 0.7414798736572266, 0.6867381930351257, 0.6452507376670837, 0.6096968054771423, 0.5920496582984924, 0.5695558786392212, 0.550778865814209, 0.5315823554992676, 0.5166425704956055, 0.5040237307548523, 0.4927339255809784, 0.48035380244255066, 0.4752146899700165, 0.4640548527240753, 0.45926037430763245, 0.4498494863510132, 0.44989997148513794, 0.43486902117729187, 0.4302854835987091, 0.42699891328811646, 0.4222937822341919, 0.4179273545742035, 0.4156407117843628, 0.40615877509117126, 0.40567347407341003, 0.40483561158180237, 0.4008205533027649, 0.3957735300064087, 0.3910598158836365, 0.39842313528060913, 0.38378071784973145, 0.3824272155761719, 0.37983548641204834, 0.3832281529903412, 0.37993335723876953, 0.37290528416633606, 0.37028563022613525, 0.3697679340839386, 0.369826078414917, 0.3630952835083008, 0.3613884747028351, 0.3612003028392792, 0.3630628287792206, 0.35836127400398254, 0.35707563161849976, 0.3544061779975891, 0.35439038276672363, 0.35541149973869324, 0.34793493151664734, 0.355723112821579, 0.3566884696483612, 0.3480426073074341, 0.35176366567611694, 0.34468159079551697, 0.3469727337360382, 0.34757280349731445, 0.34379008412361145], "val_accuracy": [0.546999990940094, 0.6536666750907898, 0.6856666803359985, 0.7066666483879089, 0.7366666793823242, 0.7536666393280029, 0.7599999904632568, 0.7720000147819519, 0.7706666588783264, 0.7926666736602783, 0.7963333129882812, 0.7956666946411133, 0.8103333115577698, 0.809333324432373, 0.8220000267028809, 0.8226666450500488, 0.8243333101272583, 0.8330000042915344, 0.8349999785423279, 0.8370000123977661, 0.8333333134651184, 0.8429999947547913, 0.8463333249092102, 0.8446666598320007, 0.8476666808128357, 0.8479999899864197, 0.8450000286102295, 0.8506666421890259, 0.8496666550636292, 0.8529999852180481, 0.8556666374206543, 0.8556666374206543, 0.8586666584014893, 0.8526666760444641, 0.8576666712760925, 0.8610000014305115, 0.859000027179718, 0.8616666793823242, 0.8653333187103271, 0.8673333525657654, 0.8673333525657654, 0.8659999966621399, 0.8693333268165588, 0.8690000176429749, 0.8726666569709778, 0.8726666569709778, 0.8740000128746033, 0.8730000257492065, 0.871999979019165, 0.8759999871253967, 0.874666690826416, 0.871999979019165, 0.8806666731834412, 0.8776666522026062, 0.8706666827201843, 0.8820000290870667, 0.878333330154419, 0.878000020980835, 0.8806666731834412, 0.8793333172798157, 0.878333330154419]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8757143020629883, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224522590637207, 1.8712162971496582, 1.392285704612732, 1.0807040929794312, 0.9370682239532471, 0.8359973430633545, 0.7719967365264893, 0.7229107618331909, 0.6906619071960449, 0.6541134119033813, 0.6232247352600098, 0.612237811088562, 0.5932718515396118, 0.5732536911964417, 0.5630121231079102, 0.5453683733940125, 0.5321422815322876, 0.5177462100982666, 0.5100680589675903, 0.4944051206111908, 0.4905032217502594, 0.47557753324508667, 0.4705406129360199, 0.4578903317451477, 0.4482099115848541, 0.4453411102294922, 0.43532776832580566, 0.4255237281322479, 0.4240562617778778, 0.4178861379623413, 0.40810874104499817, 0.40307947993278503, 0.4044787883758545, 0.3863990306854248, 0.382683664560318, 0.3753361403942108, 0.37443724274635315, 0.37149477005004883, 0.36892789602279663, 0.36029472947120667, 0.35160040855407715, 0.3479130268096924, 0.34602707624435425, 0.3442952334880829, 0.3376624882221222, 0.3331505060195923, 0.3203105032444, 0.3249434232711792, 0.3158569037914276, 0.3107500672340393, 0.30006441473960876, 0.29656392335891724, 0.2933600842952728, 0.2986547648906708, 0.29466554522514343, 0.2857576906681061, 0.27740147709846497, 0.2724214792251587, 0.27084070444107056, 0.26228201389312744, 0.2693575918674469, 0.26808610558509827, 0.26196160912513733, 0.2583022117614746, 0.25401175022125244, 0.24449369311332703, 0.2502577304840088, 0.2450566589832306, 0.2407606542110443, 0.23015500605106354, 0.22855670750141144], "accuracy": [0.2591467499732971, 0.4839519262313843, 0.5676925182342529, 0.6259410977363586, 0.6643772125244141, 0.7024171352386475, 0.7239466309547424, 0.7304186820983887, 0.7515519857406616, 0.7607977986335754, 0.7730814814567566, 0.776251494884491, 0.7853652238845825, 0.7922335267066956, 0.7987055778503418, 0.8030643463134766, 0.806630551815033, 0.8161405324935913, 0.8157442808151245, 0.8228767514228821, 0.8244617581367493, 0.8305375576019287, 0.8302733898162842, 0.8372738361358643, 0.8430854678153992, 0.8384625315666199, 0.8479725122451782, 0.8467837572097778, 0.8504821062088013, 0.8471800088882446, 0.852859616279602, 0.8556333184242249, 0.8545766472816467, 0.8599920868873596, 0.8626337051391602, 0.8689737319946289, 0.8626337051391602, 0.8664641380310059, 0.8702945709228516, 0.8669924736022949, 0.8717474341392517, 0.8755778670310974, 0.8759741187095642, 0.8734645247459412, 0.8812574148178101, 0.884691596031189, 0.887597382068634, 0.8817857503890991, 0.8868049383163452, 0.8887861371040344, 0.8877294659614563, 0.8898428082466125, 0.8932769894599915, 0.8883898854255676, 0.894069492816925, 0.8975036144256592, 0.898428201675415, 0.9035794734954834, 0.9015982151031494, 0.9068815112113953, 0.9009377956390381, 0.9005415439605713, 0.9030511379241943, 0.9063531756401062, 0.9108440279960632, 0.9129573106765747, 0.9096552729606628, 0.9101836085319519, 0.9105798602104187, 0.9134856462478638, 0.9154669046401978], "val_loss": [2.038992166519165, 1.5114034414291382, 1.0310208797454834, 0.8114697933197021, 0.722886860370636, 0.6653716564178467, 0.6234614849090576, 0.5912237763404846, 0.5667771697044373, 0.5471993684768677, 0.5222620964050293, 0.5175300240516663, 0.5051325559616089, 0.4844531714916229, 0.4756154716014862, 0.4660848081111908, 0.45481815934181213, 0.4462583065032959, 0.441201776266098, 0.43326303362846375, 0.42542731761932373, 0.41823190450668335, 0.4148516356945038, 0.4055802524089813, 0.4088278114795685, 0.40195056796073914, 0.3911588490009308, 0.38724687695503235, 0.3835718631744385, 0.3787708282470703, 0.3766416311264038, 0.3779096305370331, 0.37151283025741577, 0.36747387051582336, 0.36566153168678284, 0.35721156001091003, 0.3623761534690857, 0.3563748300075531, 0.3544265031814575, 0.3493087887763977, 0.3492506444454193, 0.3468971848487854, 0.34760424494743347, 0.3381568491458893, 0.3398714065551758, 0.3379781246185303, 0.33964207768440247, 0.33804503083229065, 0.3329031467437744, 0.335211843252182, 0.3313090205192566, 0.33253902196884155, 0.3269065022468567, 0.32728829979896545, 0.3259190320968628, 0.3271450102329254, 0.3243548274040222, 0.3258184790611267, 0.32553213834762573, 0.3266303837299347, 0.32741227746009827, 0.3243665099143982, 0.32175883650779724, 0.31972941756248474, 0.32071182131767273, 0.3185793161392212, 0.3215060234069824, 0.32025980949401855, 0.3294214606285095, 0.32116031646728516, 0.3220849931240082], "val_accuracy": [0.5529999732971191, 0.6733333468437195, 0.6930000185966492, 0.7253333330154419, 0.7403333187103271, 0.7616666555404663, 0.7703333497047424, 0.777999997138977, 0.7950000166893005, 0.7950000166893005, 0.8106666803359985, 0.815666675567627, 0.8130000233650208, 0.8270000219345093, 0.8240000009536743, 0.8346666693687439, 0.8399999737739563, 0.8356666564941406, 0.8383333086967468, 0.8453333377838135, 0.8493333458900452, 0.8513333201408386, 0.8476666808128357, 0.8529999852180481, 0.8526666760444641, 0.8556666374206543, 0.8566666841506958, 0.856333315372467, 0.8586666584014893, 0.862333357334137, 0.8633333444595337, 0.8643333315849304, 0.8656666874885559, 0.8629999756813049, 0.8669999837875366, 0.8713333606719971, 0.8646666407585144, 0.8673333525657654, 0.8686666488647461, 0.8740000128746033, 0.8673333525657654, 0.8700000047683716, 0.871666669845581, 0.8769999742507935, 0.8743333220481873, 0.8736666440963745, 0.8759999871253967, 0.8769999742507935, 0.878000020980835, 0.878000020980835, 0.878333330154419, 0.8766666650772095, 0.8813333511352539, 0.8806666731834412, 0.8790000081062317, 0.8786666393280029, 0.8806666731834412, 0.8830000162124634, 0.8786666393280029, 0.8840000033378601, 0.8823333382606506, 0.8799999952316284, 0.8846666812896729, 0.8799999952316284, 0.8830000162124634, 0.8859999775886536, 0.8836666941642761, 0.8836666941642761, 0.8799999952316284, 0.8843333125114441, 0.8833333253860474]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 4, 9], [2, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 1], [6], [0, 1], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1], [1, 3, 6, 6, 8, 4, 4, 1, 4, 2, 8, 7, 4, 6, 6, 0, 6, 1, 1, 7, 0, 4, 7, 5, 2, 3, 8, 0, 8, 8, 6, 5], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 4, 5, 4, 6, 1, 0, 4, 7, 4, 4, 1, 5, 0], [16, 99, 96, 99, 61, 1, 17, 81]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.math.pow(tf.math.add(tf.math.sqrt(tf.math.add(alpha, beta)), tf.math.pow(tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad), tf.math.divide_no_nan(tf.math.negative(grad), tf.math.divide_no_nan(tf.math.subtract(tf.math.subtract(tf.math.add(grad, tf.math.negative(grad)), alpha), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.add(tf.math.square(tf.math.add(grad, tf.math.multiply(tf.math.sqrt(tf.math.negative(grad)), grad))), tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(alpha, tf.math.square(grad)))))))))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}, "mapping_values": [1, 11, 7, 4, 2, 2, 1, 1, 1, 3, 1, 2, 1, 55, 32, 23, 8], "tree_depth": 35}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 5, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1], [0, 2, 2, 0, 3, 5, 7, 1, 6, 8, 6], [0, 2, 0, 1, 0, 4, 3, 1], [16, 16, 30], [0, 1], [0], [4], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [6, 3, 4, 6, 8, 1, 4, 1, 4, 2, 8, 0, 6, 8, 4, 4, 6, 9, 2, 9, 3], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4, 7, 3, 2, 1], [16, 99, 42, 99, 61, 1, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 19, 11, 8, 3, 2, 1, 1, 0, 35, 21, 14, 7], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(grad, tf.math.sqrt(tf.math.divide_no_nan(grad, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), sigma), tf.math.sqrt(tf.math.negative(alpha))), tf.math.divide_no_nan(tf.math.sqrt(tf.math.pow(beta, tf.math.pow(tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, grad))), sigma))), beta)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [61, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 2, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 0, 1, 0, 0, 0], [1, 2, 4, 9, 9], [0, 5], [99, 4, 26], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 6, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 4, 0, 0, 4, 1, 2, 0], [16, 99, 96, 64, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 2, 7, 5, 2, 3, 16, 8, 8, 5], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.pow(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(grad, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, alpha)))", "other_info": {"loss": [4.849234580993652, 8.431192398071289, 8.526717185974121, 8.438255310058594, 8.519577980041504, 8.453706741333008], "accuracy": [0.09840179979801178, 0.09985470771789551, 0.10130762308835983, 0.09985470771789551, 0.10500594228506088, 0.09760929644107819], "val_loss": [5.951611518859863, 5.96087646484375, 5.96087646484375, 5.96087646484375, 5.96087646484375, 5.96087646484375], "val_accuracy": [0.10499999672174454, 0.10499999672174454, 0.10499999672174454, 0.10499999672174454, 0.10499999672174454, 0.10499999672174454]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 1, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 4, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 6, 3, 6, 8, 1, 9, 1, 4, 2, 1], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.09000000357627869, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 2, 2, 1, 1, 1, 16, 9, 7, 6], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma), tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [2.3099496364593506, 2.3097305297851562, 2.3087515830993652, 2.309813976287842, 2.310262441635132, 2.3096253871917725], "accuracy": [0.09417514503002167, 0.09060890227556229, 0.09496764093637466, 0.08572183549404144, 0.08928807079792023, 0.08875974267721176], "val_loss": [2.3083221912384033, 2.3082451820373535, 2.3081953525543213, 2.308159112930298, 2.308131217956543, 2.30810809135437], "val_accuracy": [0.08666666597127914, 0.08533333241939545, 0.0846666693687439, 0.08500000089406967, 0.0860000029206276, 0.0860000029206276]}}]