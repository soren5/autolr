[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8862857222557068, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222418785095215, 1.8632627725601196, 1.3950724601745605, 1.0979150533676147, 0.9474178552627563, 0.8543937802314758, 0.7783248424530029, 0.7376496195793152, 0.7006842494010925, 0.6746688485145569, 0.647553563117981, 0.6295329928398132, 0.6112891435623169, 0.58865886926651, 0.5667527914047241, 0.5575993657112122, 0.5467248558998108, 0.5289703011512756, 0.5205997824668884, 0.5110849142074585, 0.5064045786857605, 0.4867391884326935, 0.4731372892856598, 0.47443822026252747, 0.46410614252090454, 0.4545186161994934, 0.445819616317749, 0.4367676079273224, 0.4321127235889435, 0.4275900721549988, 0.4177286922931671, 0.40700381994247437, 0.40491974353790283, 0.3923063576221466, 0.38597339391708374, 0.37638187408447266, 0.3749813437461853, 0.3708414137363434, 0.369646281003952, 0.3635149896144867, 0.3594855070114136, 0.3503628671169281, 0.3338625133037567, 0.3396199643611908, 0.33679017424583435, 0.3303111493587494, 0.3275522291660309, 0.3153315782546997, 0.3093845844268799, 0.31660354137420654, 0.313541054725647, 0.3128948211669922, 0.2977619469165802, 0.30230653285980225, 0.298944890499115, 0.28947505354881287, 0.2822195291519165, 0.2778712213039398, 0.2668195366859436, 0.26853811740875244, 0.26283398270606995, 0.2662760019302368, 0.2576100528240204, 0.25102800130844116, 0.2539205849170685, 0.25087955594062805, 0.24508193135261536], "accuracy": [0.280940443277359, 0.48685774207115173, 0.5665037631988525, 0.616299033164978, 0.6625280380249023, 0.6930392384529114, 0.7169462442398071, 0.7320036888122559, 0.7375511527061462, 0.7491744756698608, 0.7672698497772217, 0.7670056819915771, 0.7745344042778015, 0.7876105904579163, 0.7906485199928284, 0.7994980812072754, 0.802800178527832, 0.8068947196006775, 0.8117818236351013, 0.8153480291366577, 0.8181217908859253, 0.829216718673706, 0.8300092220306396, 0.8238013386726379, 0.8325188159942627, 0.8385946154594421, 0.8372738361358643, 0.842028796672821, 0.8451988101005554, 0.8481045961380005, 0.8515387773513794, 0.8549728989601135, 0.8516708612442017, 0.8603883385658264, 0.8598600029945374, 0.8667283058166504, 0.8636903762817383, 0.8636903762817383, 0.8677849769592285, 0.8704266548156738, 0.8758420348167419, 0.8739928603172302, 0.8790120482444763, 0.8768987059593201, 0.8751816153526306, 0.8794082403182983, 0.8813894987106323, 0.8860124349594116, 0.8874653577804565, 0.8856161832809448, 0.8838990926742554, 0.8877294659614563, 0.8918240666389465, 0.8918240666389465, 0.8922203183174133, 0.8953903317451477, 0.89552241563797, 0.9002773761749268, 0.9049002528190613, 0.9034473896026611, 0.9035794734954834, 0.9038436412811279, 0.9085986018180847, 0.9095231890678406, 0.9095231890678406, 0.909259021282196, 0.910711944103241], "val_loss": [2.0414316654205322, 1.5168657302856445, 1.0494927167892456, 0.8396123051643372, 0.7532041668891907, 0.6975494027137756, 0.6532282829284668, 0.6188269853591919, 0.5909113883972168, 0.5747429728507996, 0.5562715530395508, 0.5392115712165833, 0.5226473808288574, 0.5080817937850952, 0.49551260471343994, 0.4949219524860382, 0.48097461462020874, 0.46894019842147827, 0.4645398259162903, 0.4554585814476013, 0.44845467805862427, 0.44272810220718384, 0.4365209937095642, 0.4303407371044159, 0.42757970094680786, 0.42137086391448975, 0.4158954322338104, 0.4094981253147125, 0.40614867210388184, 0.40746310353279114, 0.39686036109924316, 0.39440515637397766, 0.39069101214408875, 0.3898474872112274, 0.3889416456222534, 0.3833497166633606, 0.387736976146698, 0.3792175352573395, 0.3778442442417145, 0.37528878450393677, 0.3729557991027832, 0.37016138434410095, 0.36690768599510193, 0.36455467343330383, 0.36386409401893616, 0.3628668487071991, 0.365796834230423, 0.36076274514198303, 0.3599783480167389, 0.35867130756378174, 0.35705167055130005, 0.35411083698272705, 0.3552299737930298, 0.3651564121246338, 0.36276260018348694, 0.34837988018989563, 0.34821584820747375, 0.3528410792350769, 0.3496720790863037, 0.3506317138671875, 0.34951722621917725, 0.3443804085254669, 0.345913290977478, 0.3461855351924896, 0.3431210517883301, 0.348863810300827, 0.3426092565059662], "val_accuracy": [0.5373333096504211, 0.6570000052452087, 0.6759999990463257, 0.7110000252723694, 0.7286666631698608, 0.7419999837875366, 0.7590000033378601, 0.7616666555404663, 0.7836666703224182, 0.7903333306312561, 0.7886666655540466, 0.8006666898727417, 0.809333324432373, 0.8183333277702332, 0.8146666884422302, 0.8140000104904175, 0.8233333230018616, 0.8289999961853027, 0.8326666951179504, 0.8363333344459534, 0.8389999866485596, 0.8366666436195374, 0.8363333344459534, 0.8489999771118164, 0.847000002861023, 0.8519999980926514, 0.8533333539962769, 0.8560000061988831, 0.8573333621025085, 0.8539999723434448, 0.8619999885559082, 0.862666666507721, 0.8656666874885559, 0.8629999756813049, 0.8646666407585144, 0.8636666536331177, 0.8603333234786987, 0.8659999966621399, 0.8673333525657654, 0.8673333525657654, 0.8713333606719971, 0.8703333139419556, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8730000257492065, 0.871999979019165, 0.874666690826416, 0.875333309173584, 0.874666690826416, 0.875, 0.8786666393280029, 0.8776666522026062, 0.8743333220481873, 0.8723333477973938, 0.8833333253860474, 0.8826666474342346, 0.8790000081062317, 0.8836666941642761, 0.878333330154419, 0.8820000290870667, 0.887666642665863, 0.8820000290870667, 0.8803333044052124, 0.8830000162124634, 0.8846666812896729, 0.8856666684150696]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8677142858505249, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223175287246704, 1.867149829864502, 1.396203875541687, 1.0903486013412476, 0.9491342902183533, 0.8442468643188477, 0.7708896994590759, 0.7303770184516907, 0.6886012554168701, 0.6589380502700806, 0.6316072344779968, 0.6032829880714417, 0.5833789110183716, 0.5734729170799255, 0.5520872473716736, 0.539544939994812, 0.53061443567276, 0.5158694386482239, 0.5030222535133362, 0.4883095920085907, 0.48530060052871704, 0.46995627880096436, 0.4640764892101288, 0.4542418420314789, 0.43925905227661133, 0.43429598212242126, 0.43220266699790955, 0.4186679720878601, 0.4156392812728882, 0.41225284337997437, 0.40354591608047485, 0.3972362279891968, 0.39254769682884216, 0.3834495544433594, 0.38372504711151123, 0.3718363046646118, 0.3724938929080963, 0.362242728471756, 0.3530094027519226, 0.347820907831192, 0.3432234227657318, 0.34102460741996765, 0.34136754274368286, 0.3390669524669647, 0.32898280024528503, 0.32124194502830505, 0.3164585530757904, 0.31572601199150085, 0.3061430752277374, 0.30755630135536194, 0.2983512580394745, 0.2965705394744873, 0.29544883966445923, 0.29158815741539, 0.28773364424705505, 0.2761344015598297, 0.2807557284832001, 0.2763456702232361, 0.2694946229457855, 0.2672041356563568, 0.26797032356262207, 0.2564147412776947, 0.25178685784339905, 0.2590870261192322, 0.25119441747665405, 0.24260489642620087, 0.2393222600221634, 0.22857016324996948, 0.22840368747711182, 0.23038049042224884, 0.225650817155838, 0.22366812825202942, 0.21990598738193512, 0.21580801904201508, 0.22779452800750732, 0.21848544478416443, 0.2130659520626068, 0.19985228776931763, 0.19902527332305908], "accuracy": [0.26878878474235535, 0.4935939908027649, 0.564258337020874, 0.6214502453804016, 0.6609430909156799, 0.6954167485237122, 0.7230220437049866, 0.7316074371337891, 0.7433628439903259, 0.7602694630622864, 0.7740060687065125, 0.77677983045578, 0.7872143983840942, 0.7940827012062073, 0.8000264167785645, 0.8050455451011658, 0.8086118102073669, 0.8165367841720581, 0.8207634687423706, 0.8245938420295715, 0.8257825970649719, 0.8310658931732178, 0.834632158279419, 0.8368775844573975, 0.8467837572097778, 0.8467837572097778, 0.8494254350662231, 0.8486329317092896, 0.8525954484939575, 0.852859616279602, 0.8589354157447815, 0.8598600029945374, 0.860652506351471, 0.8621054291725159, 0.8652753829956055, 0.8692378997802734, 0.8663320541381836, 0.8697662353515625, 0.8741249442100525, 0.8762382864952087, 0.8757099509239197, 0.8753136992454529, 0.8802007436752319, 0.8784837126731873, 0.8835028409957886, 0.8833707571029663, 0.8833707571029663, 0.884691596031189, 0.8883898854255676, 0.887201189994812, 0.893541157245636, 0.8914278149604797, 0.8920882344245911, 0.8931449055671692, 0.8971073627471924, 0.9006736278533936, 0.8957865834236145, 0.8963148593902588, 0.902390718460083, 0.9001452922821045, 0.901862382888794, 0.9056927561759949, 0.9075419306755066, 0.906749427318573, 0.909259021282196, 0.9113723635673523, 0.9117686152458191, 0.9181085824966431, 0.9144102334976196, 0.9158631563186646, 0.9182406663894653, 0.9181085824966431, 0.9179764986038208, 0.9207502603530884, 0.913617730140686, 0.9192973375320435, 0.9203540086746216, 0.9292035102844238, 0.928411066532135], "val_loss": [2.0415401458740234, 1.514278531074524, 1.0444594621658325, 0.8377933502197266, 0.7457063794136047, 0.6948344707489014, 0.6475259065628052, 0.6050069332122803, 0.5876548886299133, 0.5640326142311096, 0.5407324433326721, 0.5278055667877197, 0.5140793323516846, 0.500415027141571, 0.49057868123054504, 0.4828694760799408, 0.47121280431747437, 0.46671029925346375, 0.4578634798526764, 0.4494471549987793, 0.4427385628223419, 0.43532267212867737, 0.43313929438591003, 0.42775699496269226, 0.4226733446121216, 0.4174145460128784, 0.4189872145652771, 0.41027823090553284, 0.40436670184135437, 0.4059444069862366, 0.40149229764938354, 0.39768457412719727, 0.3983415961265564, 0.39466431736946106, 0.38865870237350464, 0.3884246349334717, 0.38548776507377625, 0.38311052322387695, 0.3802202045917511, 0.384121835231781, 0.3787888288497925, 0.37785518169403076, 0.37304824590682983, 0.3755466341972351, 0.3715006411075592, 0.3695217967033386, 0.36790522933006287, 0.36343684792518616, 0.3649498224258423, 0.3643757998943329, 0.3612540364265442, 0.36386188864707947, 0.3598962426185608, 0.3598869740962982, 0.3580760955810547, 0.36021408438682556, 0.35783863067626953, 0.35695573687553406, 0.3571608364582062, 0.36005377769470215, 0.3541591465473175, 0.35408028960227966, 0.3602735102176666, 0.353335976600647, 0.3536498248577118, 0.3468605577945709, 0.347262978553772, 0.34817004203796387, 0.35252904891967773, 0.34643131494522095, 0.3500765860080719, 0.34911710023880005, 0.34427666664123535, 0.3507387638092041, 0.34999898076057434, 0.3501594364643097, 0.3455301821231842, 0.34429362416267395, 0.34479060769081116], "val_accuracy": [0.5146666765213013, 0.643666684627533, 0.6713333129882812, 0.6936666369438171, 0.7289999723434448, 0.749666690826416, 0.7596666812896729, 0.7763333320617676, 0.784333348274231, 0.7879999876022339, 0.8029999732971191, 0.8023333549499512, 0.8146666884422302, 0.8259999752044678, 0.8190000057220459, 0.8259999752044678, 0.8316666483879089, 0.8343333601951599, 0.8360000252723694, 0.8403333425521851, 0.8446666598320007, 0.8503333330154419, 0.8506666421890259, 0.8446666598320007, 0.8456666469573975, 0.8529999852180481, 0.8513333201408386, 0.8550000190734863, 0.8566666841506958, 0.8586666584014893, 0.8603333234786987, 0.859333336353302, 0.856333315372467, 0.8653333187103271, 0.862666666507721, 0.8636666536331177, 0.8633333444595337, 0.8676666617393494, 0.8659999966621399, 0.8646666407585144, 0.8690000176429749, 0.8650000095367432, 0.8696666955947876, 0.8693333268165588, 0.8726666569709778, 0.8730000257492065, 0.871666669845581, 0.8730000257492065, 0.875333309173584, 0.8759999871253967, 0.8733333349227905, 0.8763333559036255, 0.874666690826416, 0.8776666522026062, 0.8736666440963745, 0.875, 0.8803333044052124, 0.875, 0.8756666779518127, 0.8766666650772095, 0.8813333511352539, 0.8799999952316284, 0.8776666522026062, 0.8763333559036255, 0.8826666474342346, 0.8823333382606506, 0.8843333125114441, 0.8849999904632568, 0.8849999904632568, 0.8853333592414856, 0.8773333430290222, 0.8793333172798157, 0.8843333125114441, 0.8886666893959045, 0.8823333382606506, 0.8846666812896729, 0.8853333592414856, 0.8853333592414856, 0.8856666684150696]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 1, 0, 3, 5], [0, 2, 0, 0], [16, 48, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 7, 4, 2, 3, 1, 1, 9, 1, 7, 2, 2, 1, 5, 7, 0, 7, 3, 5, 2, 2, 1, 5, 9, 4, 4, 6, 4, 3, 8, 7, 1, 9, 2, 7, 3, 7, 9, 7, 3, 2, 2, 0, 5, 9, 8, 4, 0, 8, 3, 4, 2, 8, 2, 7, 5, 3, 1, 3, 7, 5, 3, 3, 0, 2, 8, 5, 1, 1, 9, 1, 5, 9, 0, 4, 8, 4, 8, 5, 9], [0, 0, 0, 3, 0, 0, 3, 4, 2, 0, 7, 7, 4, 7, 4, 0, 2, 2, 0, 7, 4, 0, 4, 2, 6, 1, 4, 1, 7, 2, 7, 7, 7, 2, 7, 7, 1, 1, 3, 7, 5, 4, 2, 7, 1, 5, 0, 3, 0, 0, 5, 4], [16, 99, 96, 99, 61, 1, 74, 65, 95, 79, 47, 64, 33, 40, 98, 94, 50, 88, 4, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 10, 6, 4, 3, 2, 1, 1, 0, 142, 90, 52, 20], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), grad), tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad), tf.math.subtract(grad, tf.math.subtract(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(tf.math.add(tf.math.add(tf.math.subtract(grad, grad), tf.math.square(tf.math.add(grad, tf.math.negative(tf.math.add(tf.math.multiply(tf.math.square(tf.math.add(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), beta)), tf.math.add(tf.math.subtract(beta, tf.math.square(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(tf.math.sqrt(tf.math.add(tf.math.subtract(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, grad)), tf.math.add(tf.math.multiply(tf.math.add(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), grad)), tf.math.multiply(tf.math.add(tf.math.add(tf.math.negative(beta), grad), alpha), grad)), alpha))), tf.math.square(grad)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(beta)), tf.math.pow(grad, tf.math.negative(tf.math.sqrt(grad)))), tf.math.multiply(tf.math.pow(tf.math.add(grad, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(grad, alpha)), alpha))))))), sigma), tf.math.square(grad)), tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.math.add(grad, tf.math.square(tf.math.multiply(tf.math.multiply(tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.square(grad)), beta)), tf.math.subtract(tf.math.subtract(grad, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), alpha)), grad))), tf.math.subtract(tf.math.square(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), sigma)), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), tf.math.negative(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))))), tf.math.pow(grad, tf.math.sqrt(tf.math.pow(grad, tf.math.sqrt(tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10196803510189056, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 5, 0, 0, 3, 6], [0, 2, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [4, 3, 3, 6, 8, 1, 2, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 0, 1, 2, 0], [16, 99, 96, 99, 61, 1, 20]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 5, 4, 1, 1, 2, 1, 1, 1, 21, 11, 10, 7], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.square(tf.math.negative(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 3, 0, 3], [1, 1, 0, 2], [39, 51], [0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 0, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0], [6, 6, 9, 6, 8, 1, 4, 1, 4, 2, 8, 9], [0, 3, 0, 3, 0, 0, 3, 3, 2, 0], [43, 88, 16, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.negative(alpha), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(sigma, tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [2.3040547370910645, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}, "mapping_values": [1, 9, 5, 4, 1, 5, 3, 2, 1, 2, 1, 1, 1, 19, 12, 7, 6], "tree_depth": 16}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 2], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [0, 2, 3, 2, 3, 5], [0, 2, 3, 3, 5], [16, 16], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 2, 2, 9, 3, 5, 2, 9], [0, 0, 3], [21, 59, 31, 53], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 2, 3, 8, 0, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 1, 0], [16, 99, 96, 99, 82, 1]], "fitness": -0.08857142925262451, "mapping_values": [1, 9, 5, 4, 2, 11, 6, 5, 1, 11, 8, 3, 4, 11, 6, 5, 4], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta)), grad), grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(sigma, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.negative(sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.304405450820923, 2.3038392066955566, 2.3036558628082275, 2.3036372661590576, 2.303584575653076, 2.303666591644287], "accuracy": [0.09840179979801178, 0.09140139818191528, 0.09734513610601425, 0.09113723784685135, 0.09192973375320435, 0.0936468094587326], "val_loss": [2.303389549255371, 2.303389549255371, 2.303389549255371, 2.303389549255371, 2.303389549255371, 2.303389549255371], "val_accuracy": [0.08533333241939545, 0.08533333241939545, 0.08533333241939545, 0.08533333241939545, 0.08533333241939545, 0.08533333241939545]}}]