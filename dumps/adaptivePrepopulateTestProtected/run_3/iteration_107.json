[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.878000020980835, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223759174346924, 1.8681567907333374, 1.3971633911132812, 1.1021500825881958, 0.9438490867614746, 0.8268281817436218, 0.7700234055519104, 0.7182450890541077, 0.6839274764060974, 0.655160665512085, 0.6316797733306885, 0.6046612858772278, 0.586663544178009, 0.5732303261756897, 0.5552444458007812, 0.5382086634635925, 0.5205084085464478, 0.5141545534133911, 0.49866363406181335, 0.4905571937561035, 0.48713892698287964, 0.4630949795246124, 0.46493759751319885, 0.4510720372200012, 0.4456666111946106, 0.4411585330963135, 0.43109801411628723, 0.4194287657737732, 0.41647717356681824, 0.4177640676498413, 0.39898860454559326, 0.3982110619544983, 0.3941095173358917, 0.3838343918323517, 0.38270825147628784, 0.38132011890411377, 0.3706604242324829, 0.3630581796169281, 0.35970449447631836, 0.3585955500602722, 0.3488880693912506, 0.3406795859336853, 0.3434852361679077, 0.34305644035339355, 0.32770219445228577, 0.3274216949939728, 0.3164256513118744, 0.31487780809402466, 0.31453031301498413, 0.3020377457141876, 0.3013147711753845, 0.29238083958625793, 0.30650538206100464, 0.2886098325252533, 0.28784143924713135, 0.28922179341316223, 0.27991431951522827, 0.27731093764305115, 0.27029022574424744, 0.2677718997001648, 0.2672445476055145], "accuracy": [0.27182671427726746, 0.4913485646247864, 0.5609562993049622, 0.6095628142356873, 0.6618676781654358, 0.6997754573822021, 0.7215691208839417, 0.7407211661338806, 0.7508915662765503, 0.7592127919197083, 0.7656848430633545, 0.7798177003860474, 0.7849689722061157, 0.789459764957428, 0.7991018295288086, 0.806630551815033, 0.81112140417099, 0.8088759779930115, 0.8210275769233704, 0.8181217908859253, 0.826310932636261, 0.8333113193511963, 0.8294808864593506, 0.8401796221733093, 0.8409721255302429, 0.8436138033866882, 0.8459912538528442, 0.8519350290298462, 0.8485008478164673, 0.8490291833877563, 0.856689989566803, 0.8573504090309143, 0.8615770936012268, 0.8644828796386719, 0.8605204224586487, 0.8614450097084045, 0.8671245574951172, 0.8726720213890076, 0.8732003569602966, 0.8689737319946289, 0.8762382864952087, 0.8798044919967651, 0.8717474341392517, 0.8825782537460327, 0.8840311765670776, 0.8845595121383667, 0.8885219693183899, 0.8865407705307007, 0.8887861371040344, 0.894069492816925, 0.8918240666389465, 0.8953903317451477, 0.8860124349594116, 0.8988244533538818, 0.8992207050323486, 0.8956544995307922, 0.9014661312103271, 0.89988112449646, 0.900409460067749, 0.9046360850334167, 0.9033153057098389], "val_loss": [2.0386126041412354, 1.5089809894561768, 1.0396978855133057, 0.8277255296707153, 0.7414798736572266, 0.6867381930351257, 0.6452507376670837, 0.6096968054771423, 0.5920496582984924, 0.5695558786392212, 0.550778865814209, 0.5315823554992676, 0.5166425704956055, 0.5040237307548523, 0.4927339255809784, 0.48035380244255066, 0.4752146899700165, 0.4640548527240753, 0.45926037430763245, 0.4498494863510132, 0.44989997148513794, 0.43486902117729187, 0.4302854835987091, 0.42699891328811646, 0.4222937822341919, 0.4179273545742035, 0.4156407117843628, 0.40615877509117126, 0.40567347407341003, 0.40483561158180237, 0.4008205533027649, 0.3957735300064087, 0.3910598158836365, 0.39842313528060913, 0.38378071784973145, 0.3824272155761719, 0.37983548641204834, 0.3832281529903412, 0.37993335723876953, 0.37290528416633606, 0.37028563022613525, 0.3697679340839386, 0.369826078414917, 0.3630952835083008, 0.3613884747028351, 0.3612003028392792, 0.3630628287792206, 0.35836127400398254, 0.35707563161849976, 0.3544061779975891, 0.35439038276672363, 0.35541149973869324, 0.34793493151664734, 0.355723112821579, 0.3566884696483612, 0.3480426073074341, 0.35176366567611694, 0.34468159079551697, 0.3469727337360382, 0.34757280349731445, 0.34379008412361145], "val_accuracy": [0.546999990940094, 0.6536666750907898, 0.6856666803359985, 0.7066666483879089, 0.7366666793823242, 0.7536666393280029, 0.7599999904632568, 0.7720000147819519, 0.7706666588783264, 0.7926666736602783, 0.7963333129882812, 0.7956666946411133, 0.8103333115577698, 0.809333324432373, 0.8220000267028809, 0.8226666450500488, 0.8243333101272583, 0.8330000042915344, 0.8349999785423279, 0.8370000123977661, 0.8333333134651184, 0.8429999947547913, 0.8463333249092102, 0.8446666598320007, 0.8476666808128357, 0.8479999899864197, 0.8450000286102295, 0.8506666421890259, 0.8496666550636292, 0.8529999852180481, 0.8556666374206543, 0.8556666374206543, 0.8586666584014893, 0.8526666760444641, 0.8576666712760925, 0.8610000014305115, 0.859000027179718, 0.8616666793823242, 0.8653333187103271, 0.8673333525657654, 0.8673333525657654, 0.8659999966621399, 0.8693333268165588, 0.8690000176429749, 0.8726666569709778, 0.8726666569709778, 0.8740000128746033, 0.8730000257492065, 0.871999979019165, 0.8759999871253967, 0.874666690826416, 0.871999979019165, 0.8806666731834412, 0.8776666522026062, 0.8706666827201843, 0.8820000290870667, 0.878333330154419, 0.878000020980835, 0.8806666731834412, 0.8793333172798157, 0.878333330154419]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8668571710586548, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2238986492156982, 1.8701400756835938, 1.3903334140777588, 1.0912201404571533, 0.9328544735908508, 0.8412778377532959, 0.7648769617080688, 0.725471019744873, 0.691697359085083, 0.6612961292266846, 0.6363285183906555, 0.6161298155784607, 0.5974366068840027, 0.5759249329566956, 0.5608522295951843, 0.5408812165260315, 0.5345463156700134, 0.5229988694190979, 0.5112372040748596, 0.5037803649902344, 0.49367788434028625, 0.4882689416408539, 0.47450143098831177, 0.46568092703819275, 0.4551321566104889, 0.447872519493103, 0.43617939949035645, 0.4282142221927643, 0.4292452037334442, 0.4192405045032501, 0.41280922293663025, 0.396714448928833, 0.40602734684944153, 0.39163801074028015, 0.3872373104095459, 0.38706499338150024, 0.37299641966819763, 0.37195131182670593, 0.3685917258262634, 0.36426302790641785, 0.3525007665157318, 0.352287620306015, 0.3481099009513855, 0.3402160406112671, 0.3376060128211975, 0.3316034972667694, 0.32993778586387634, 0.32610124349594116, 0.32421746850013733, 0.3109738528728485, 0.31787964701652527, 0.3003312647342682], "accuracy": [0.2690529525279999, 0.486989825963974, 0.5646545886993408, 0.6190727949142456, 0.6616035103797913, 0.6954167485237122, 0.7219653725624084, 0.7326641082763672, 0.7449478507041931, 0.7584202885627747, 0.7614582180976868, 0.7746664881706238, 0.7812706232070923, 0.7922335267066956, 0.7950072884559631, 0.8037247657775879, 0.8105930685997009, 0.8119139075279236, 0.8189142942428589, 0.8181217908859253, 0.8222163319587708, 0.8193105459213257, 0.832650899887085, 0.8358209133148193, 0.8364813327789307, 0.8376700282096863, 0.8438779711723328, 0.8474441766738892, 0.8459912538528442, 0.8482366800308228, 0.8518029451370239, 0.8552370667457581, 0.8560295701026917, 0.8577466607093811, 0.8595958352088928, 0.8617091774940491, 0.8672566413879395, 0.8619733452796936, 0.867520809173584, 0.8654074668884277, 0.8770307898521423, 0.8712190985679626, 0.8768987059593201, 0.8757099509239197, 0.8768987059593201, 0.8787478804588318, 0.8821820020675659, 0.8813894987106323, 0.8835028409957886, 0.889578640460968, 0.8812574148178101, 0.8901069760322571], "val_loss": [2.0387747287750244, 1.5081207752227783, 1.033116340637207, 0.8296293020248413, 0.73934006690979, 0.6892921328544617, 0.6446036100387573, 0.6097348928451538, 0.58534836769104, 0.5651957988739014, 0.5514942407608032, 0.5323726534843445, 0.5204291343688965, 0.5042722225189209, 0.49215632677078247, 0.4814358651638031, 0.4737827479839325, 0.4669960141181946, 0.45702654123306274, 0.44977298378944397, 0.44576582312583923, 0.43956291675567627, 0.4357684850692749, 0.43092870712280273, 0.42473912239074707, 0.4239646792411804, 0.4129566252231598, 0.4167333245277405, 0.4086075723171234, 0.4053029716014862, 0.3998069167137146, 0.3926808536052704, 0.39506950974464417, 0.3911415636539459, 0.3856709897518158, 0.38531526923179626, 0.3813289701938629, 0.3771350085735321, 0.378445029258728, 0.375631183385849, 0.37529224157333374, 0.37397199869155884, 0.37101882696151733, 0.3673800528049469, 0.3648509383201599, 0.363863080739975, 0.367388516664505, 0.3586603105068207, 0.35660046339035034, 0.3599127233028412, 0.35404086112976074, 0.36073389649391174], "val_accuracy": [0.5263333320617676, 0.6663333177566528, 0.687333345413208, 0.7080000042915344, 0.7390000224113464, 0.7583333253860474, 0.7663333415985107, 0.7826666831970215, 0.7900000214576721, 0.79666668176651, 0.7996666431427002, 0.8116666674613953, 0.8159999847412109, 0.8236666917800903, 0.8293333053588867, 0.8316666483879089, 0.8349999785423279, 0.840666651725769, 0.8420000076293945, 0.8463333249092102, 0.8483333587646484, 0.8526666760444641, 0.8536666631698608, 0.8553333282470703, 0.8556666374206543, 0.8506666421890259, 0.859333336353302, 0.8600000143051147, 0.8619999885559082, 0.859333336353302, 0.8663333058357239, 0.8650000095367432, 0.8659999966621399, 0.8673333525657654, 0.8663333058357239, 0.8683333396911621, 0.8713333606719971, 0.8706666827201843, 0.8679999709129333, 0.875, 0.8759999871253967, 0.8743333220481873, 0.8766666650772095, 0.8763333559036255, 0.8726666569709778, 0.8776666522026062, 0.8799999952316284, 0.8763333559036255, 0.8793333172798157, 0.8763333559036255, 0.8786666393280029, 0.8796666860580444]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [2, 2, 3, 0, 3, 8], [0, 1, 0, 2, 1], [9, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0], [0, 2, 3, 0, 3, 2], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [6], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 2, 3, 6, 8, 1, 4, 1, 4, 2, 8], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 14]], "fitness": -0.7940000295639038, "mapping_values": [1, 11, 6, 5, 2, 1, 0, 1, 1, 2, 1, 1, 1, 10, 5, 5, 3], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.sqrt(alpha)), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(grad, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), sigma), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.30859112739563, 2.308271884918213, 2.304863691329956, 2.2998335361480713, 2.293390989303589, 2.2852189540863037, 2.2754480838775635, 2.26391339302063, 2.2500102519989014, 2.230018377304077, 2.202495574951172, 2.161581516265869, 2.102191925048828, 2.0093495845794678, 1.8710975646972656, 1.6908328533172607, 1.5011601448059082, 1.3494189977645874, 1.2219388484954834, 1.1422476768493652, 1.0628268718719482, 1.0149401426315308, 0.9717217087745667, 0.9387408494949341, 0.9029631614685059, 0.8678141236305237, 0.8412858843803406, 0.8311064839363098, 0.8112627267837524, 0.7947017550468445, 0.7770140767097473, 0.770230770111084, 0.752456545829773, 0.7396963834762573, 0.7213102579116821, 0.7241178154945374, 0.7129353284835815, 0.7034563422203064, 0.7005304098129272, 0.6927506923675537, 0.6874117255210876, 0.6853259205818176, 0.6770247220993042, 0.6537629961967468, 0.6672239303588867, 0.6433512568473816, 0.6430739760398865, 0.6362946033477783, 0.6216025352478027, 0.6311540603637695, 0.6094911694526672, 0.6141268014907837, 0.6185005307197571], "accuracy": [0.09232597798109055, 0.09245806187391281, 0.09893012791872025, 0.10500594228506088, 0.12442214041948318, 0.14278165996074677, 0.1706511676311493, 0.19640734791755676, 0.2285034954547882, 0.27922335267066956, 0.30682867765426636, 0.3481706380844116, 0.3875313699245453, 0.4073438048362732, 0.4523840844631195, 0.4791969358921051, 0.5178972482681274, 0.5439175963401794, 0.581429123878479, 0.6013736724853516, 0.6268656849861145, 0.6346585750579834, 0.6532822847366333, 0.665830135345459, 0.6745476126670837, 0.6890767216682434, 0.6947563290596008, 0.6942279934883118, 0.7045304179191589, 0.711530864238739, 0.7124554514884949, 0.7191916704177856, 0.7257958054542542, 0.7308149337768555, 0.7309470176696777, 0.7363624572753906, 0.7374191284179688, 0.7409853339195251, 0.7341170310974121, 0.7403249144554138, 0.7429665923118591, 0.7423061728477478, 0.7543256878852844, 0.7573636174201965, 0.7504953145980835, 0.7692511081695557, 0.7577598690986633, 0.7629110813140869, 0.769911527633667, 0.7724210619926453, 0.7766477465629578, 0.7729493975639343, 0.7685906887054443], "val_loss": [2.307502508163452, 2.3044815063476562, 2.2996551990509033, 2.2931275367736816, 2.285067319869995, 2.2754945755004883, 2.2638814449310303, 2.24946665763855, 2.2307114601135254, 2.2048733234405518, 2.167630434036255, 2.112180709838867, 2.0278563499450684, 1.8971333503723145, 1.7071706056594849, 1.478173851966858, 1.2667561769485474, 1.1134568452835083, 1.0053770542144775, 0.9303756356239319, 0.8758551478385925, 0.8284319639205933, 0.797682523727417, 0.774165689945221, 0.7517408728599548, 0.7296384572982788, 0.7117151618003845, 0.7118380665779114, 0.6811702251434326, 0.667834460735321, 0.6599301695823669, 0.6495786309242249, 0.6420335173606873, 0.6307474970817566, 0.6264227628707886, 0.6203189492225647, 0.6083642840385437, 0.6047759056091309, 0.6161118745803833, 0.6010169386863708, 0.5833285450935364, 0.5853655934333801, 0.5834851264953613, 0.5759599804878235, 0.6053187847137451, 0.5769829750061035, 0.5852190852165222, 0.5613430142402649, 0.5577735304832458, 0.5610876083374023, 0.5509979724884033, 0.5513639450073242, 0.5450301170349121], "val_accuracy": [0.08833333104848862, 0.08966666460037231, 0.09833333641290665, 0.11800000071525574, 0.15199999511241913, 0.20933333039283752, 0.289000004529953, 0.39399999380111694, 0.4410000145435333, 0.46033334732055664, 0.47066667675971985, 0.5046666860580444, 0.5336666703224182, 0.5756666660308838, 0.6060000061988831, 0.6286666393280029, 0.6510000228881836, 0.6683333516120911, 0.6783333420753479, 0.6883333325386047, 0.7020000219345093, 0.7110000252723694, 0.7173333168029785, 0.7193333506584167, 0.7260000109672546, 0.734666645526886, 0.737333357334137, 0.7326666712760925, 0.7486666440963745, 0.7379999756813049, 0.7476666569709778, 0.7549999952316284, 0.7590000033378601, 0.7636666893959045, 0.7573333382606506, 0.7710000276565552, 0.777999997138977, 0.7743333578109741, 0.7616666555404663, 0.7736666798591614, 0.7826666831970215, 0.7786666750907898, 0.7786666750907898, 0.7836666703224182, 0.7633333206176758, 0.7786666750907898, 0.7786666750907898, 0.7973333597183228, 0.7946666479110718, 0.7829999923706055, 0.7923333048820496, 0.7863333225250244, 0.7866666913032532]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 4, 6, 7, 7, 0, 2, 1, 0], [0, 1, 0, 2, 0, 1, 2, 3, 1, 1], [70, 39, 70], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 4, 7, 7, 5, 4, 5], [0, 3, 2, 5, 6], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 5, 4, 2, 8], [1, 0, 0, 3, 0, 0, 3, 4, 2, 1], [92, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 13, 10, 3, 10, 6, 4, 2, 12, 7, 5, 1, 17, 9, 8, 4], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(grad, tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.subtract(grad, grad))), alpha)))), tf.math.negative(alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.add(tf.math.add(tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)), sigma), beta), tf.math.pow(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.square(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 0, 8, 3, 5, 0, 8, 0], [0, 1, 0, 2, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 6, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 12, 5, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))), tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.square(tf.math.negative(tf.math.sqrt(grad))), tf.math.negative(alpha)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), sigma)), alpha)), beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 6, 6, 0, 3], [0, 1, 0, 2], [83, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 3, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 2, 3, 6, 8, 1, 4, 1, 0, 2, 8, 9], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0], [16, 99, 96, 99, 61, 48]], "fitness": -0.09399999678134918, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 2, 2, 1, 1, 1, 20, 12, 8, 6], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))))))), tf.math.sqrt(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), alpha)", "other_info": {"loss": [2.310253143310547, 2.3101038932800293, 2.3102059364318848, 2.309752941131592, 2.310178518295288, 2.3098082542419434], "accuracy": [0.08915598690509796, 0.09377889335155487, 0.08849557489156723, 0.09153348207473755, 0.09668471664190292, 0.09351472556591034], "val_loss": [2.308607816696167, 2.308607816696167, 2.308607816696167, 2.308607816696167, 2.308607816696167, 2.308607816696167], "val_accuracy": [0.08733333647251129, 0.08733333647251129, 0.08733333647251129, 0.08733333647251129, 0.08733333647251129, 0.08733333647251129]}}]