[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8757143020629883, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2224490642547607, 1.8675343990325928, 1.3939836025238037, 1.0927708148956299, 0.9404754638671875, 0.843849241733551, 0.7721466422080994, 0.7262260317802429, 0.6833308339118958, 0.6551293134689331, 0.6342591643333435, 0.6063357591629028, 0.5894114971160889, 0.5630450248718262, 0.5653029680252075, 0.5470729470252991, 0.5323475003242493, 0.5214682221412659, 0.5072728991508484, 0.4921358525753021, 0.4860784709453583, 0.4787559509277344, 0.4597107470035553, 0.4659897983074188, 0.4577959179878235, 0.4413664937019348, 0.4400829076766968, 0.42729705572128296, 0.42480337619781494, 0.4147000014781952, 0.4078267216682434, 0.40303489565849304, 0.39573609828948975, 0.3881356716156006, 0.3801533281803131, 0.3769753575325012, 0.37094807624816895, 0.36736586689949036, 0.37323513627052307, 0.36098161339759827, 0.34507474303245544, 0.34743914008140564, 0.34368041157722473, 0.33095982670783997, 0.32870543003082275, 0.32367658615112305, 0.32409581542015076, 0.3211810886859894, 0.3120701313018799, 0.31045442819595337, 0.3032769560813904, 0.30337560176849365, 0.29582297801971436, 0.29006415605545044, 0.2880508303642273, 0.28300508856773376, 0.2801433503627777, 0.2763940989971161, 0.2741786241531372, 0.26906004548072815, 0.2651638984680176, 0.2566206157207489, 0.26367518305778503, 0.2519575357437134], "accuracy": [0.27658170461654663, 0.49385812878608704, 0.5719191431999207, 0.6159027814865112, 0.6682076454162598, 0.6946242451667786, 0.7185312509536743, 0.733060359954834, 0.7493065595626831, 0.7617223858833313, 0.7683265209197998, 0.7799497842788696, 0.7829877138137817, 0.7980451583862305, 0.7992339134216309, 0.804649293422699, 0.8092722296714783, 0.8104609847068787, 0.8193105459213257, 0.8228767514228821, 0.8272355198860168, 0.8252542614936829, 0.8376700282096863, 0.8348963260650635, 0.8422929644584656, 0.8424250483512878, 0.8444063067436218, 0.8512746095657349, 0.8488970994949341, 0.8491612672805786, 0.8557654023170471, 0.8536521196365356, 0.8539162874221802, 0.8628978729248047, 0.8634262084960938, 0.8638224601745605, 0.8673887252807617, 0.870030403137207, 0.8684453964233398, 0.8704266548156738, 0.8747853636741638, 0.8750495314598083, 0.8746532797813416, 0.8787478804588318, 0.8829745054244995, 0.8828424215316772, 0.8833707571029663, 0.8842953443527222, 0.8841632604598999, 0.8882578015327454, 0.8903711438179016, 0.8894465565681458, 0.891559898853302, 0.8948619961738586, 0.8968431949615479, 0.8988244533538818, 0.8960506916046143, 0.9017302989959717, 0.9019944667816162, 0.89988112449646, 0.9017302989959717, 0.9071456789970398, 0.9039757251739502, 0.9082023501396179], "val_loss": [2.036843776702881, 1.5161906480789185, 1.0445137023925781, 0.8340126872062683, 0.7392319440841675, 0.6852213740348816, 0.6332608461380005, 0.5959271192550659, 0.5714350342750549, 0.549830973148346, 0.5222745537757874, 0.5133263468742371, 0.49633684754371643, 0.4777461290359497, 0.4722379446029663, 0.4595833718776703, 0.45239517092704773, 0.4480498731136322, 0.43859392404556274, 0.4262703061103821, 0.42883649468421936, 0.4152919054031372, 0.41032952070236206, 0.4077501893043518, 0.3949292004108429, 0.39100560545921326, 0.3824780285358429, 0.3815884590148926, 0.37856918573379517, 0.372124582529068, 0.37195006012916565, 0.3686104416847229, 0.3633952736854553, 0.3569556474685669, 0.35764214396476746, 0.35445699095726013, 0.35251298546791077, 0.3492286503314972, 0.3514643609523773, 0.34624624252319336, 0.34437841176986694, 0.3405534625053406, 0.3368695080280304, 0.3358098268508911, 0.33687594532966614, 0.3372238874435425, 0.34350210428237915, 0.32805559039115906, 0.33228394389152527, 0.32754582166671753, 0.33014562726020813, 0.3276408612728119, 0.3226785361766815, 0.325215607881546, 0.3204743564128876, 0.3180955946445465, 0.318777471780777, 0.3154444694519043, 0.31414422392845154, 0.32395991683006287, 0.3196926712989807, 0.319996178150177, 0.31522229313850403, 0.3184100091457367], "val_accuracy": [0.5546666383743286, 0.6629999876022339, 0.6823333501815796, 0.7110000252723694, 0.737333357334137, 0.7473333477973938, 0.762666642665863, 0.7816666960716248, 0.7850000262260437, 0.7983333468437195, 0.8059999942779541, 0.8096666932106018, 0.8116666674613953, 0.8259999752044678, 0.8330000042915344, 0.8309999704360962, 0.8303333520889282, 0.8336666822433472, 0.8360000252723694, 0.846666693687439, 0.8493333458900452, 0.8553333282470703, 0.847000002861023, 0.8463333249092102, 0.8606666922569275, 0.8629999756813049, 0.8613333106040955, 0.8633333444595337, 0.8636666536331177, 0.8666666746139526, 0.8663333058357239, 0.8659999966621399, 0.8700000047683716, 0.8736666440963745, 0.8736666440963745, 0.8740000128746033, 0.8730000257492065, 0.8766666650772095, 0.8776666522026062, 0.8740000128746033, 0.878333330154419, 0.8776666522026062, 0.8830000162124634, 0.8806666731834412, 0.8803333044052124, 0.8820000290870667, 0.8809999823570251, 0.8863333463668823, 0.8799999952316284, 0.8826666474342346, 0.8833333253860474, 0.8849999904632568, 0.8893333077430725, 0.8846666812896729, 0.8896666765213013, 0.8893333077430725, 0.8856666684150696, 0.890333354473114, 0.8923333287239075, 0.8896666765213013, 0.890666663646698, 0.887333333492279, 0.8916666507720947, 0.8880000114440918]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8679999709129333, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224673271179199, 1.8664151430130005, 1.3936666250228882, 1.0963269472122192, 0.9444754719734192, 0.8494019508361816, 0.7734361886978149, 0.740014910697937, 0.6988380551338196, 0.6689932942390442, 0.6412967443466187, 0.6230144500732422, 0.5943765044212341, 0.5839453935623169, 0.5681117177009583, 0.5570546984672546, 0.5401024222373962, 0.5197504758834839, 0.5114045143127441, 0.5050563812255859, 0.49164730310440063, 0.4875231683254242, 0.4738045334815979, 0.45877236127853394, 0.4539029896259308, 0.44302818179130554, 0.43457919359207153, 0.4238929748535156, 0.4308668375015259, 0.4188839793205261, 0.41382113099098206, 0.3991853892803192, 0.39863041043281555, 0.38919761776924133, 0.39047175645828247, 0.3786420226097107, 0.36438581347465515, 0.36677902936935425, 0.3656066656112671, 0.3550947904586792, 0.3525334596633911, 0.34991616010665894, 0.34131884574890137, 0.3477430045604706, 0.3380444049835205, 0.32745233178138733, 0.3287280797958374, 0.3261706829071045, 0.3240090608596802, 0.31698769330978394, 0.3085615038871765, 0.29618242383003235, 0.29651230573654175, 0.3052612245082855, 0.29683658480644226, 0.28451550006866455, 0.28718462586402893], "accuracy": [0.2615242302417755, 0.4934619069099426, 0.5670320987701416, 0.6188086271286011, 0.6593580842018127, 0.6948884129524231, 0.7218332886695862, 0.7293620109558105, 0.7449478507041931, 0.7534011602401733, 0.7648923397064209, 0.7724210619926453, 0.7868181467056274, 0.7884030938148499, 0.7977809906005859, 0.7988376617431641, 0.8035926818847656, 0.8115176558494568, 0.8170651197433472, 0.8162726163864136, 0.8273676037788391, 0.8277638554573059, 0.8265751004219055, 0.8403117060661316, 0.8397833704948425, 0.8429533839225769, 0.8487650156021118, 0.8490291833877563, 0.8490291833877563, 0.8520671129226685, 0.8569541573524475, 0.8613129258155823, 0.8574824929237366, 0.8622375130653381, 0.8661999702453613, 0.8659358024597168, 0.8728041052818298, 0.8720116019248962, 0.8709549307823181, 0.8758420348167419, 0.8751816153526306, 0.8779553771018982, 0.8825782537460327, 0.8778232932090759, 0.8817857503890991, 0.884691596031189, 0.8838990926742554, 0.8854840993881226, 0.8854840993881226, 0.8897107243537903, 0.8894465565681458, 0.8960506916046143, 0.8963148593902588, 0.8919561505317688, 0.8949940800666809, 0.900409460067749, 0.895918607711792], "val_loss": [2.0346412658691406, 1.5019793510437012, 1.0290024280548096, 0.8214789032936096, 0.7346783876419067, 0.6825780272483826, 0.6342864632606506, 0.6118898987770081, 0.583457350730896, 0.5570129156112671, 0.5420807003974915, 0.5265317559242249, 0.5110141634941101, 0.4980033338069916, 0.4994140565395355, 0.4783990979194641, 0.4673967957496643, 0.4654788374900818, 0.45270174741744995, 0.45092153549194336, 0.4419267475605011, 0.4376288652420044, 0.43101727962493896, 0.4246436059474945, 0.41964778304100037, 0.41605353355407715, 0.4143654406070709, 0.41261759400367737, 0.40296465158462524, 0.406046986579895, 0.4014797806739807, 0.39765894412994385, 0.3951115608215332, 0.3935609459877014, 0.38860681653022766, 0.389516681432724, 0.38681456446647644, 0.3825518786907196, 0.3843836188316345, 0.38742363452911377, 0.3836846649646759, 0.38080981373786926, 0.38226962089538574, 0.3817305862903595, 0.37477654218673706, 0.37663111090660095, 0.37658390402793884, 0.37518155574798584, 0.37335294485092163, 0.3728899657726288, 0.3668602705001831, 0.36741170287132263, 0.3703669309616089, 0.367125540971756, 0.3690078854560852, 0.3705345094203949, 0.3654634654521942], "val_accuracy": [0.5189999938011169, 0.6570000052452087, 0.6909999847412109, 0.7086666822433472, 0.7336666584014893, 0.7490000128746033, 0.7666666507720947, 0.7649999856948853, 0.7876666784286499, 0.7916666865348816, 0.7979999780654907, 0.8073333501815796, 0.8136666417121887, 0.8190000057220459, 0.8180000185966492, 0.8293333053588867, 0.8320000171661377, 0.8336666822433472, 0.8403333425521851, 0.8393333554267883, 0.843666672706604, 0.8413333296775818, 0.8463333249092102, 0.8493333458900452, 0.8506666421890259, 0.8496666550636292, 0.8500000238418579, 0.8516666889190674, 0.8543333411216736, 0.8550000190734863, 0.8539999723434448, 0.8533333539962769, 0.8539999723434448, 0.8560000061988831, 0.8586666584014893, 0.859000027179718, 0.8583333492279053, 0.8616666793823242, 0.8566666841506958, 0.8579999804496765, 0.8636666536331177, 0.8610000014305115, 0.8643333315849304, 0.8616666793823242, 0.8636666536331177, 0.8643333315849304, 0.8629999756813049, 0.8666666746139526, 0.8679999709129333, 0.8659999966621399, 0.8686666488647461, 0.8703333139419556, 0.8676666617393494, 0.8679999709129333, 0.8686666488647461, 0.8673333525657654, 0.8686666488647461]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1], [0, 2, 3, 0, 3, 5, 6, 2, 7, 8, 8, 7, 3, 0, 5, 7, 0, 8, 3, 2, 9], [3, 2, 0, 3, 3, 0, 5, 0, 5, 3, 4], [16, 16, 67, 10], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4], [16, 5, 30, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(grad, tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.math.square(tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.math.sqrt(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad), grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.math.multiply(tf.math.negative(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(tf.math.negative(tf.math.sqrt(grad)), tf.math.multiply(tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), grad), grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(beta, grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}, "mapping_values": [1, 6, 3, 3, 1, 32, 21, 11, 4, 2, 1, 1, 1, 20, 10, 10, 5], "tree_depth": 22}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 3, 0, 3], [0, 1, 1, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 6, 0], [0, 2, 0, 3, 0], [72, 16, 21], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [9, 3, 3, 6, 8, 1, 4, 1, 4, 2, 5], [4, 0, 0, 3, 0, 2, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(grad)))), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303356647491455, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}, "mapping_values": [1, 6, 4, 2, 1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 0, 1], "tree_depth": 15}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], [3, 2, 3, 0, 3, 5, 6, 1, 6, 9, 7, 2, 7, 6, 1, 4, 2, 3, 5], [0, 2, 0, 3, 2, 2, 5, 4, 2, 4, 5, 0, 3, 3, 4], [16, 16, 62, 69], [1, 1], [0], [1], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 39, 99, 54, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 34, 19, 15, 4, 1, 0, 1, 0, 21, 11, 10, 5], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.divide_no_nan(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(tf.math.add(beta, beta), tf.math.divide_no_nan(tf.math.subtract(tf.math.pow(grad, tf.math.add(grad, beta)), grad), tf.math.multiply(grad, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))), grad)))))), tf.math.square(grad)), grad), lambda shape,  alpha, beta, sigma, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 0, 0, 0], [16, 80, 50, 64], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 3, 2, 7, 9, 8, 2, 5], [0, 0, 5, 6], [99, 81, 4], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [6, 0, 3, 6, 8, 1, 4, 1, 4, 2, 8, 3, 5], [0, 0, 0, 3, 0, 0, 1, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.add(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.square(grad), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), alpha))), tf.math.sqrt(tf.math.multiply(alpha, beta))))), tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}, "mapping_values": [1, 1, 0, 1, 1, 10, 6, 4, 4, 12, 8, 4, 3, 23, 13, 10, 6], "tree_depth": 24}]