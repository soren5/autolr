[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8705714344978333, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2257895469665527, 1.871448278427124, 1.3919174671173096, 1.1038023233413696, 0.9374769926071167, 0.8375400900840759, 0.7776703238487244, 0.731372058391571, 0.6954748034477234, 0.6612890362739563, 0.6264585256576538, 0.6094756722450256, 0.5995368361473083, 0.577862560749054, 0.5598711371421814, 0.5436519384384155, 0.5275701284408569, 0.5284510254859924, 0.5077624320983887, 0.49812185764312744, 0.4843873679637909, 0.4729529023170471, 0.45984265208244324, 0.4593915343284607, 0.44520705938339233, 0.43977677822113037, 0.4284482002258301, 0.4273470938205719, 0.4155234098434448, 0.4153466522693634, 0.40455880761146545, 0.39544007182121277, 0.39725062251091003, 0.3937545716762543, 0.3797975182533264, 0.37180256843566895, 0.36971813440322876, 0.36449795961380005, 0.36725544929504395, 0.35283589363098145, 0.34612637758255005, 0.3532394766807556, 0.33718422055244446, 0.33703452348709106, 0.3281859755516052, 0.33514609932899475, 0.32579195499420166, 0.3150646388530731, 0.3096526563167572, 0.3067939877510071, 0.3020070493221283, 0.3000498414039612, 0.2965972125530243, 0.28979989886283875, 0.2813948094844818, 0.28162434697151184, 0.28200918436050415, 0.27612370252609253, 0.27706378698349, 0.2666231393814087, 0.2589799165725708, 0.25419285893440247, 0.2529458999633789, 0.25397729873657227, 0.24914899468421936, 0.2436460256576538, 0.23996374011039734, 0.2357635349035263, 0.23519092798233032, 0.22598706185817719, 0.2248615175485611, 0.2313942313194275, 0.2206556349992752, 0.2195991426706314, 0.21434952318668365, 0.21324864029884338, 0.20703652501106262, 0.20678891241550446], "accuracy": [0.2661471366882324, 0.49266940355300903, 0.5569937825202942, 0.6169594526290894, 0.6639809608459473, 0.7034738063812256, 0.7180029153823853, 0.7342491149902344, 0.7470611333847046, 0.755118191242218, 0.774798572063446, 0.7786290049552917, 0.778761088848114, 0.789459764957428, 0.7992339134216309, 0.8038568496704102, 0.8072909712791443, 0.8108572363853455, 0.8178576231002808, 0.8232730031013489, 0.8255184292793274, 0.8335754871368408, 0.8388587832450867, 0.8379341959953308, 0.8399154543876648, 0.8424250483512878, 0.8446704745292664, 0.8453308939933777, 0.848368763923645, 0.8543124794960022, 0.8595958352088928, 0.8576145768165588, 0.8598600029945374, 0.8593316674232483, 0.863029956817627, 0.8650112152099609, 0.868049144744873, 0.8709549307823181, 0.8709549307823181, 0.8720116019248962, 0.8754457831382751, 0.8775591254234314, 0.8821820020675659, 0.8792761564254761, 0.8798044919967651, 0.8815215826034546, 0.8805969953536987, 0.8838990926742554, 0.8849557638168335, 0.8885219693183899, 0.8906353116035461, 0.8912957310676575, 0.8957865834236145, 0.8976356983184814, 0.9017302989959717, 0.8988244533538818, 0.8989565372467041, 0.9009377956390381, 0.897899866104126, 0.9035794734954834, 0.9050323367118835, 0.9076740145683289, 0.9105798602104187, 0.9085986018180847, 0.9080702662467957, 0.910711944103241, 0.9117686152458191, 0.9178444147109985, 0.9104477763175964, 0.9162594079971313, 0.9194294214248657, 0.9162594079971313, 0.9165235757827759, 0.9159952402114868, 0.919561505317688, 0.9216747879981995, 0.9235239624977112, 0.9256373047828674], "val_loss": [2.0405070781707764, 1.5092344284057617, 1.0275460481643677, 0.8147035837173462, 0.7294890880584717, 0.672760009765625, 0.6244462132453918, 0.5942168831825256, 0.5780441164970398, 0.5459625720977783, 0.5260655879974365, 0.5108266472816467, 0.5019035935401917, 0.48963451385498047, 0.4767508804798126, 0.46476390957832336, 0.46127989888191223, 0.46016979217529297, 0.45004549622535706, 0.4352378845214844, 0.4280799925327301, 0.41928020119667053, 0.41596558690071106, 0.41262000799179077, 0.4098929166793823, 0.3997231125831604, 0.4026441276073456, 0.3982006907463074, 0.3897055685520172, 0.3890247344970703, 0.38471320271492004, 0.3859395384788513, 0.38390737771987915, 0.381369948387146, 0.3744189739227295, 0.37088003754615784, 0.36925944685935974, 0.3670801520347595, 0.368205189704895, 0.3602595627307892, 0.3705413341522217, 0.35759949684143066, 0.35613924264907837, 0.35412678122520447, 0.35065576434135437, 0.3476940095424652, 0.3613082766532898, 0.349842369556427, 0.3445912301540375, 0.35416358709335327, 0.3389343321323395, 0.34534913301467896, 0.34100672602653503, 0.34466150403022766, 0.3395983576774597, 0.33641090989112854, 0.3369145393371582, 0.34792613983154297, 0.3380358815193176, 0.33368057012557983, 0.33231407403945923, 0.3316009044647217, 0.34108835458755493, 0.33698686957359314, 0.32864075899124146, 0.3379650115966797, 0.3357591927051544, 0.3381660282611847, 0.32886016368865967, 0.33162781596183777, 0.3319767713546753, 0.32895439863204956, 0.3402482569217682, 0.3269796371459961, 0.3328883647918701, 0.3308275640010834, 0.34040746092796326, 0.33187219500541687], "val_accuracy": [0.5183333158493042, 0.6656666398048401, 0.6859999895095825, 0.7173333168029785, 0.7350000143051147, 0.7516666650772095, 0.762666642665863, 0.7799999713897705, 0.781000018119812, 0.7916666865348816, 0.8053333163261414, 0.8100000023841858, 0.8130000233650208, 0.8163333535194397, 0.8256666660308838, 0.8333333134651184, 0.831333339214325, 0.831333339214325, 0.8379999995231628, 0.8389999866485596, 0.8473333120346069, 0.8450000286102295, 0.8446666598320007, 0.8453333377838135, 0.8489999771118164, 0.8503333330154419, 0.8500000238418579, 0.8553333282470703, 0.8560000061988831, 0.8536666631698608, 0.862333357334137, 0.859000027179718, 0.859666645526886, 0.8606666922569275, 0.862333357334137, 0.8653333187103271, 0.8636666536331177, 0.8676666617393494, 0.8666666746139526, 0.8669999837875366, 0.8676666617393494, 0.8709999918937683, 0.8703333139419556, 0.8713333606719971, 0.875333309173584, 0.874666690826416, 0.8700000047683716, 0.8733333349227905, 0.8763333559036255, 0.8743333220481873, 0.8776666522026062, 0.8763333559036255, 0.8776666522026062, 0.878000020980835, 0.8793333172798157, 0.8803333044052124, 0.8803333044052124, 0.8759999871253967, 0.8793333172798157, 0.8813333511352539, 0.8796666860580444, 0.8809999823570251, 0.8803333044052124, 0.8796666860580444, 0.8820000290870667, 0.8806666731834412, 0.8809999823570251, 0.8823333382606506, 0.8840000033378601, 0.8846666812896729, 0.8806666731834412, 0.8833333253860474, 0.8853333592414856, 0.8843333125114441, 0.8840000033378601, 0.8849999904632568, 0.8846666812896729, 0.8853333592414856]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [6, 2, 3, 0, 3], [2, 1, 0, 2], [39, 6], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 2, 3, 0, 2, 5, 6, 0, 6, 4, 1, 1, 7, 9, 3, 4], [0, 3, 3, 3, 1, 5, 1, 0, 0, 4, 4], [16, 16, 5, 61], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 2, 8, 1, 9, 8, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 1, 27, 16, 11, 4, 2, 1, 1, 1, 17, 10, 7, 6], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.square(grad), tf.math.divide_no_nan(grad, tf.math.negative(grad)))), tf.math.divide_no_nan(alpha, tf.math.pow(tf.math.subtract(tf.math.subtract(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.multiply(alpha, tf.math.pow(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), grad), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma), tf.math.sqrt(tf.math.pow(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), sigma)))", "other_info": {"loss": [2.303523540496826, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 2], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 2, 3, 0, 3, 5, 8, 5], [0, 2, 0, 3], [16, 16], [0, 0, 1], [6, 9], [0], [99, 55], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 5, 2, 8, 2], [0, 0, 4, 3, 0, 0, 3, 1, 2, 0], [40, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 12, 8, 4, 2, 3, 2, 1, 2, 22, 12, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.sqrt(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))))), tf.math.sqrt(tf.math.add(alpha, beta))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09457138925790787, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1], [2, 2, 3, 0, 6, 6, 9, 5, 5], [0, 1, 0, 2, 1], [39, 39, 8], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 9, 0, 3, 5], [0, 2, 0, 3], [16, 16], [1, 1], [0], [0], [72], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 2, 4, 1, 4, 2, 8], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0], [16, 99, 96, 15, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 9, 5, 3, 4, 3, 1, 2, 1, 0, 1, 1, 21, 11, 10, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.square(alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(grad, tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), sigma)))), tf.math.sqrt(alpha))), beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 4], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 9, 3, 0, 3, 5], [0, 2, 0, 3], [47, 16], [0, 1, 0, 1, 0, 1, 0, 0, 1], [3, 2, 2, 3, 9], [0, 3, 7, 5], [99, 45], [0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0], [6, 3, 3, 6, 8, 1, 3, 1, 4, 1, 8], [0, 0, 0, 3, 4, 0, 3, 1, 3, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 2, 2, 0, 1, 9, 5, 4, 2, 3, 1, 2, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.pow(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.add(grad, tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3030099868774414, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}]