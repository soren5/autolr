[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8765714168548584, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224578619003296, 1.8718746900558472, 1.3909363746643066, 1.0973390340805054, 0.9470980167388916, 0.8425300121307373, 0.7836830615997314, 0.7399820685386658, 0.6921222805976868, 0.6612842082977295, 0.645167887210846, 0.6255054473876953, 0.6041874289512634, 0.5845173001289368, 0.5581257939338684, 0.5609857439994812, 0.5421401858329773, 0.5232114791870117, 0.5185996890068054, 0.5027848482131958, 0.49751073122024536, 0.4806492030620575, 0.4718722105026245, 0.4656344950199127, 0.461124986410141, 0.451652854681015, 0.4393123388290405, 0.4397777318954468, 0.42916449904441833, 0.4225771725177765, 0.41622743010520935, 0.41113078594207764, 0.40103569626808167, 0.3996448516845703, 0.3925231993198395, 0.38176509737968445, 0.37716060876846313, 0.38259968161582947, 0.36528223752975464, 0.3614184558391571, 0.3611595034599304, 0.3615754544734955, 0.3501736521720886, 0.35111427307128906, 0.33657148480415344, 0.3397059738636017, 0.32936549186706543, 0.3223755359649658, 0.3248979449272156, 0.3106647729873657, 0.3188290297985077, 0.3093152940273285, 0.3040502965450287, 0.3004668951034546, 0.29384833574295044, 0.28895097970962524, 0.2912839949131012, 0.28951093554496765, 0.2828143239021301, 0.2754732668399811, 0.27042481303215027, 0.27113085985183716, 0.26677778363227844, 0.2591800391674042, 0.25866666436195374, 0.24312254786491394, 0.24878644943237305], "accuracy": [0.26218464970588684, 0.4892352521419525, 0.5672962665557861, 0.6115440726280212, 0.6641130447387695, 0.7020208835601807, 0.7174745798110962, 0.7358341217041016, 0.7471932172775269, 0.7594769597053528, 0.7605336308479309, 0.769911527633667, 0.7778365015983582, 0.7926297783851624, 0.7973847389221191, 0.7950072884559631, 0.8045172095298767, 0.8148196935653687, 0.8129705190658569, 0.8202351331710815, 0.8231409192085266, 0.8261788487434387, 0.8348963260650635, 0.8322546482086182, 0.8347642421722412, 0.8401796221733093, 0.842028796672821, 0.8453308939933777, 0.8467837572097778, 0.8491612672805786, 0.8479725122451782, 0.8495575189590454, 0.8539162874221802, 0.8573504090309143, 0.8610487580299377, 0.8628978729248047, 0.8632941246032715, 0.8643507957458496, 0.8679170608520508, 0.8710870146751404, 0.8706908226013184, 0.867520809173584, 0.8721436858177185, 0.8706908226013184, 0.8766345381736755, 0.8750495314598083, 0.8790120482444763, 0.882710337638855, 0.8833707571029663, 0.8856161832809448, 0.880729079246521, 0.8891823887825012, 0.8891823887825012, 0.8922203183174133, 0.8944657444953918, 0.8953903317451477, 0.8899748921394348, 0.8952582478523254, 0.8986923694610596, 0.901862382888794, 0.9039757251739502, 0.9019944667816162, 0.9059569239616394, 0.9056927561759949, 0.9068815112113953, 0.9095231890678406, 0.9079381823539734], "val_loss": [2.0369322299957275, 1.5113515853881836, 1.0399373769760132, 0.8301172852516174, 0.7340660691261292, 0.6838696002960205, 0.6345822215080261, 0.6021590232849121, 0.5815736651420593, 0.5585773587226868, 0.5376315712928772, 0.5221272110939026, 0.5126317739486694, 0.496490478515625, 0.4808005392551422, 0.47399502992630005, 0.46519115567207336, 0.4547199606895447, 0.4468437135219574, 0.4424077570438385, 0.43547892570495605, 0.4311610162258148, 0.4251111149787903, 0.4178133010864258, 0.4113234877586365, 0.4134349226951599, 0.40126246213912964, 0.4051530063152313, 0.3920465409755707, 0.3916521370410919, 0.3866598308086395, 0.38257235288619995, 0.37886929512023926, 0.38751691579818726, 0.373098760843277, 0.37507331371307373, 0.36676982045173645, 0.3673664927482605, 0.3620372414588928, 0.3608294129371643, 0.3613632321357727, 0.3647315800189972, 0.355506956577301, 0.36023569107055664, 0.3535858988761902, 0.3516593873500824, 0.35233956575393677, 0.34731820225715637, 0.34386542439460754, 0.3485662341117859, 0.3422684669494629, 0.3394172787666321, 0.3409792482852936, 0.33753088116645813, 0.33580049872398376, 0.33426669239997864, 0.33434364199638367, 0.33626627922058105, 0.3337748646736145, 0.3353462815284729, 0.33482277393341064, 0.32789143919944763, 0.33091434836387634, 0.3311872184276581, 0.3401179015636444, 0.3355695903301239, 0.3277587890625], "val_accuracy": [0.5213333368301392, 0.6576666831970215, 0.6903333067893982, 0.7116666436195374, 0.7296666502952576, 0.7486666440963745, 0.7716666460037231, 0.7789999842643738, 0.7749999761581421, 0.7923333048820496, 0.8013333082199097, 0.8066666722297668, 0.8113333582878113, 0.812333345413208, 0.8223333358764648, 0.8273333311080933, 0.8299999833106995, 0.8309999704360962, 0.8333333134651184, 0.8353333473205566, 0.8410000205039978, 0.8413333296775818, 0.843999981880188, 0.8486666679382324, 0.843999981880188, 0.8443333506584167, 0.8503333330154419, 0.8523333072662354, 0.8566666841506958, 0.8533333539962769, 0.8576666712760925, 0.856333315372467, 0.8546666502952576, 0.8553333282470703, 0.8619999885559082, 0.859666645526886, 0.8629999756813049, 0.8629999756813049, 0.8666666746139526, 0.8669999837875366, 0.8633333444595337, 0.862666666507721, 0.8669999837875366, 0.8663333058357239, 0.8706666827201843, 0.8666666746139526, 0.8679999709129333, 0.8693333268165588, 0.8730000257492065, 0.8706666827201843, 0.8713333606719971, 0.875333309173584, 0.874666690826416, 0.875333309173584, 0.8736666440963745, 0.8763333559036255, 0.8759999871253967, 0.8756666779518127, 0.8736666440963745, 0.8763333559036255, 0.8766666650772095, 0.8806666731834412, 0.878000020980835, 0.8736666440963745, 0.8733333349227905, 0.8756666779518127, 0.8799999952316284]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1], [0, 2, 3, 8, 3, 3, 8, 5, 8, 5, 8, 4, 3, 8, 6, 2, 7, 0, 3], [0, 1, 0, 2, 2, 3, 2, 3, 1, 2, 0], [93, 39, 27], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [2, 0, 0, 3], [91, 16], [0, 1], [0], [0], [99], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 0, 1, 4, 2, 8], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 45, 61, 1]], "fitness": -0.30485713481903076, "mapping_values": [1, 30, 19, 11, 3, 10, 6, 4, 2, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.multiply(tf.math.sqrt(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.square(tf.math.sqrt(grad)))), tf.math.pow(tf.math.multiply(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(grad, grad), grad)), tf.math.add(tf.math.negative(tf.math.multiply(grad, alpha)), grad)), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(beta), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.3152644634246826, 2.1889007091522217, 2.449843645095825, 2.310117721557617, 2.3420064449310303, 2.3035929203033447], "accuracy": [0.18253862857818604, 0.1896711140871048, 0.2024831622838974, 0.10566636174917221, 0.149649977684021, 0.09893012791872025], "val_loss": [2.257582426071167, 2.3002588748931885, 2.3310322761535645, 2.267646312713623, 2.3043482303619385, 2.3031065464019775], "val_accuracy": [0.3033333420753479, 0.10266666859388351, 0.10266666859388351, 0.11533333361148834, 0.0949999988079071, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [88, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [6, 3, 2, 6, 8, 1, 4, 5, 4, 2, 8, 2, 4, 2, 9, 4, 6, 4, 7, 7, 0, 7, 1, 3, 7, 8, 4, 1, 1, 6, 8, 7, 8, 7, 8, 6, 0, 8, 8, 5], [0, 3, 0, 3, 0, 0, 3, 1, 2, 0, 5, 7, 4, 7, 4, 5, 7, 0, 3, 6, 3, 7, 3, 6, 2, 2, 7], [16, 99, 96, 99, 61, 1, 63]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 67, 40, 27, 7], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(sigma, tf.math.pow(tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))))), sigma)), tf.math.sqrt(tf.math.add(alpha, beta))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.math.add(grad, tf.math.add(tf.math.negative(tf.math.add(tf.math.subtract(tf.math.multiply(grad, grad), tf.math.add(tf.math.sqrt(grad), tf.math.pow(tf.math.subtract(tf.math.subtract(tf.math.divide_no_nan(grad, grad), grad), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(tf.math.sqrt(sigma), grad))))), tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(sigma, tf.math.negative(grad))), tf.math.sqrt(sigma)))), tf.math.sqrt(grad))), beta), tf.math.square(beta)), grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 9, 3, 0, 3], [0, 1, 0, 2], [50, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 30], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 5, 2, 6, 3, 5, 8, 2, 9, 6], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 5, 7, 6, 0], [16, 99, 96, 89, 61, 1, 50, 4]], "fitness": -0.09342857450246811, "mapping_values": [1, 2, 2, 0, 1, 10, 6, 4, 2, 1, 0, 1, 1, 34, 20, 14, 8], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.sqrt(tf.math.square(tf.math.add(alpha, beta)))))))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.square(tf.math.sqrt(tf.math.add(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, grad))))), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.342500686645508, 2.3457767963409424, 2.3422133922576904, 2.347902536392212, 2.3463330268859863, 2.3412091732025146, 2.3464367389678955], "accuracy": [0.107647605240345, 0.10315678268671036, 0.10447761416435242, 0.10355303436517715, 0.10989301651716232, 0.11134592443704605, 0.10487385839223862], "val_loss": [2.3017420768737793, 2.301715135574341, 2.3017263412475586, 2.30173921585083, 2.3017470836639404, 2.301748752593994, 2.301755905151367], "val_accuracy": [0.0949999988079071, 0.09600000083446503, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 6, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 1, 1, 4, 2, 5, 4, 9, 6], [0, 4, 0, 4, 0, 0, 3, 1, 2, 0, 0], [16, 99, 96, 99, 20, 58, 16]], "fitness": -0.09228571504354477, "mapping_values": [1, 6, 4, 2, 1, 10, 6, 4, 2, 2, 1, 1, 1, 25, 14, 11, 7], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.subtract(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), sigma))), tf.math.square(tf.math.pow(alpha, beta)))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3093888759613037, 2.310676336288452, 2.310107707977295, 2.3094446659088135, 2.3110435009002686, 2.3101766109466553], "accuracy": [0.09219389408826828, 0.09113723784685135, 0.09060890227556229, 0.09576013684272766, 0.09060890227556229, 0.09589222073554993], "val_loss": [2.3087122440338135, 2.3087122440338135, 2.3087122440338135, 2.3087122440338135, 2.3087122440338135, 2.3087122440338135], "val_accuracy": [0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918]}}]