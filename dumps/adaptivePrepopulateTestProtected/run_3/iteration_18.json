[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8757143020629883, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2224490642547607, 1.8675343990325928, 1.3939836025238037, 1.0927708148956299, 0.9404754638671875, 0.843849241733551, 0.7721466422080994, 0.7262260317802429, 0.6833308339118958, 0.6551293134689331, 0.6342591643333435, 0.6063357591629028, 0.5894114971160889, 0.5630450248718262, 0.5653029680252075, 0.5470729470252991, 0.5323475003242493, 0.5214682221412659, 0.5072728991508484, 0.4921358525753021, 0.4860784709453583, 0.4787559509277344, 0.4597107470035553, 0.4659897983074188, 0.4577959179878235, 0.4413664937019348, 0.4400829076766968, 0.42729705572128296, 0.42480337619781494, 0.4147000014781952, 0.4078267216682434, 0.40303489565849304, 0.39573609828948975, 0.3881356716156006, 0.3801533281803131, 0.3769753575325012, 0.37094807624816895, 0.36736586689949036, 0.37323513627052307, 0.36098161339759827, 0.34507474303245544, 0.34743914008140564, 0.34368041157722473, 0.33095982670783997, 0.32870543003082275, 0.32367658615112305, 0.32409581542015076, 0.3211810886859894, 0.3120701313018799, 0.31045442819595337, 0.3032769560813904, 0.30337560176849365, 0.29582297801971436, 0.29006415605545044, 0.2880508303642273, 0.28300508856773376, 0.2801433503627777, 0.2763940989971161, 0.2741786241531372, 0.26906004548072815, 0.2651638984680176, 0.2566206157207489, 0.26367518305778503, 0.2519575357437134], "accuracy": [0.27658170461654663, 0.49385812878608704, 0.5719191431999207, 0.6159027814865112, 0.6682076454162598, 0.6946242451667786, 0.7185312509536743, 0.733060359954834, 0.7493065595626831, 0.7617223858833313, 0.7683265209197998, 0.7799497842788696, 0.7829877138137817, 0.7980451583862305, 0.7992339134216309, 0.804649293422699, 0.8092722296714783, 0.8104609847068787, 0.8193105459213257, 0.8228767514228821, 0.8272355198860168, 0.8252542614936829, 0.8376700282096863, 0.8348963260650635, 0.8422929644584656, 0.8424250483512878, 0.8444063067436218, 0.8512746095657349, 0.8488970994949341, 0.8491612672805786, 0.8557654023170471, 0.8536521196365356, 0.8539162874221802, 0.8628978729248047, 0.8634262084960938, 0.8638224601745605, 0.8673887252807617, 0.870030403137207, 0.8684453964233398, 0.8704266548156738, 0.8747853636741638, 0.8750495314598083, 0.8746532797813416, 0.8787478804588318, 0.8829745054244995, 0.8828424215316772, 0.8833707571029663, 0.8842953443527222, 0.8841632604598999, 0.8882578015327454, 0.8903711438179016, 0.8894465565681458, 0.891559898853302, 0.8948619961738586, 0.8968431949615479, 0.8988244533538818, 0.8960506916046143, 0.9017302989959717, 0.9019944667816162, 0.89988112449646, 0.9017302989959717, 0.9071456789970398, 0.9039757251739502, 0.9082023501396179], "val_loss": [2.036843776702881, 1.5161906480789185, 1.0445137023925781, 0.8340126872062683, 0.7392319440841675, 0.6852213740348816, 0.6332608461380005, 0.5959271192550659, 0.5714350342750549, 0.549830973148346, 0.5222745537757874, 0.5133263468742371, 0.49633684754371643, 0.4777461290359497, 0.4722379446029663, 0.4595833718776703, 0.45239517092704773, 0.4480498731136322, 0.43859392404556274, 0.4262703061103821, 0.42883649468421936, 0.4152919054031372, 0.41032952070236206, 0.4077501893043518, 0.3949292004108429, 0.39100560545921326, 0.3824780285358429, 0.3815884590148926, 0.37856918573379517, 0.372124582529068, 0.37195006012916565, 0.3686104416847229, 0.3633952736854553, 0.3569556474685669, 0.35764214396476746, 0.35445699095726013, 0.35251298546791077, 0.3492286503314972, 0.3514643609523773, 0.34624624252319336, 0.34437841176986694, 0.3405534625053406, 0.3368695080280304, 0.3358098268508911, 0.33687594532966614, 0.3372238874435425, 0.34350210428237915, 0.32805559039115906, 0.33228394389152527, 0.32754582166671753, 0.33014562726020813, 0.3276408612728119, 0.3226785361766815, 0.325215607881546, 0.3204743564128876, 0.3180955946445465, 0.318777471780777, 0.3154444694519043, 0.31414422392845154, 0.32395991683006287, 0.3196926712989807, 0.319996178150177, 0.31522229313850403, 0.3184100091457367], "val_accuracy": [0.5546666383743286, 0.6629999876022339, 0.6823333501815796, 0.7110000252723694, 0.737333357334137, 0.7473333477973938, 0.762666642665863, 0.7816666960716248, 0.7850000262260437, 0.7983333468437195, 0.8059999942779541, 0.8096666932106018, 0.8116666674613953, 0.8259999752044678, 0.8330000042915344, 0.8309999704360962, 0.8303333520889282, 0.8336666822433472, 0.8360000252723694, 0.846666693687439, 0.8493333458900452, 0.8553333282470703, 0.847000002861023, 0.8463333249092102, 0.8606666922569275, 0.8629999756813049, 0.8613333106040955, 0.8633333444595337, 0.8636666536331177, 0.8666666746139526, 0.8663333058357239, 0.8659999966621399, 0.8700000047683716, 0.8736666440963745, 0.8736666440963745, 0.8740000128746033, 0.8730000257492065, 0.8766666650772095, 0.8776666522026062, 0.8740000128746033, 0.878333330154419, 0.8776666522026062, 0.8830000162124634, 0.8806666731834412, 0.8803333044052124, 0.8820000290870667, 0.8809999823570251, 0.8863333463668823, 0.8799999952316284, 0.8826666474342346, 0.8833333253860474, 0.8849999904632568, 0.8893333077430725, 0.8846666812896729, 0.8896666765213013, 0.8893333077430725, 0.8856666684150696, 0.890333354473114, 0.8923333287239075, 0.8896666765213013, 0.890666663646698, 0.887333333492279, 0.8916666507720947, 0.8880000114440918]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8560000061988831, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2235307693481445, 1.8651123046875, 1.3927327394485474, 1.086981177330017, 0.9384364485740662, 0.8410317301750183, 0.7645180821418762, 0.7219659090042114, 0.6806097626686096, 0.6498224139213562, 0.6277957558631897, 0.6083074808120728, 0.5839918851852417, 0.5784280300140381, 0.5624092817306519, 0.5441311597824097, 0.5237932205200195, 0.5119208097457886, 0.5065101385116577, 0.49132969975471497, 0.48132145404815674, 0.47319841384887695, 0.4751165807247162, 0.4536099135875702, 0.45107531547546387, 0.4417678117752075, 0.44315847754478455, 0.42021042108535767, 0.4149984121322632, 0.40799814462661743, 0.4020518958568573, 0.3941057026386261, 0.3946246802806854, 0.38965708017349243, 0.3919040262699127, 0.3787875473499298, 0.37021493911743164, 0.3615451455116272, 0.3588205873966217, 0.3611864149570465, 0.34849756956100464, 0.34132447838783264, 0.3430235683917999, 0.33517879247665405, 0.32600903511047363, 0.32369935512542725, 0.3290194869041443, 0.31837642192840576, 0.31005164980888367, 0.31060656905174255, 0.3071253001689911, 0.29409947991371155, 0.29806336760520935], "accuracy": [0.27578920125961304, 0.4888390004634857, 0.5602958798408508, 0.6186765432357788, 0.6715096831321716, 0.6940959095954895, 0.7259278893470764, 0.7407211661338806, 0.7481178045272827, 0.7629110813140869, 0.7724210619926453, 0.7804781198501587, 0.7862898111343384, 0.7907806038856506, 0.8004226684570312, 0.8024039268493652, 0.809140145778656, 0.816008448600769, 0.817461371421814, 0.8261788487434387, 0.829216718673706, 0.8339717388153076, 0.8325188159942627, 0.8350284099578857, 0.8424250483512878, 0.8421608805656433, 0.8404437899589539, 0.8492933511734009, 0.8529917001724243, 0.8573504090309143, 0.854708731174469, 0.8588033318519592, 0.8593316674232483, 0.8603883385658264, 0.8615770936012268, 0.8638224601745605, 0.8673887252807617, 0.8667283058166504, 0.8768987059593201, 0.8691058158874512, 0.876370370388031, 0.8794082403182983, 0.8784837126731873, 0.8742570281028748, 0.8837670087814331, 0.8812574148178101, 0.8820499181747437, 0.8854840993881226, 0.8894465565681458, 0.8873332738876343, 0.8898428082466125, 0.8939374089241028, 0.8862766027450562], "val_loss": [2.036773681640625, 1.5099668502807617, 1.036254644393921, 0.8251813054084778, 0.7324360609054565, 0.681227445602417, 0.634441077709198, 0.5982615351676941, 0.5718246698379517, 0.5491569638252258, 0.5305863618850708, 0.5150556564331055, 0.49819135665893555, 0.49106523394584656, 0.4771539568901062, 0.46875643730163574, 0.45483720302581787, 0.44963619112968445, 0.4411507844924927, 0.4292214810848236, 0.42739811539649963, 0.423992395401001, 0.4159400165081024, 0.41107168793678284, 0.4025251865386963, 0.40031975507736206, 0.39394497871398926, 0.3864744007587433, 0.384974867105484, 0.3857651352882385, 0.3764989972114563, 0.3734285831451416, 0.37334316968917847, 0.3766931891441345, 0.36714231967926025, 0.36499327421188354, 0.36068934202194214, 0.3553778827190399, 0.36033812165260315, 0.35323628783226013, 0.3522888123989105, 0.349173903465271, 0.3519291877746582, 0.3430419862270355, 0.3434261977672577, 0.3402842879295349, 0.3458983600139618, 0.3422577381134033, 0.3399910032749176, 0.33954957127571106, 0.3399832546710968, 0.33797869086265564, 0.3334602117538452], "val_accuracy": [0.5270000100135803, 0.656000018119812, 0.6833333373069763, 0.7183333039283752, 0.7356666922569275, 0.7490000128746033, 0.7676666378974915, 0.7749999761581421, 0.7860000133514404, 0.8016666769981384, 0.8019999861717224, 0.8096666932106018, 0.8140000104904175, 0.8196666836738586, 0.8339999914169312, 0.8293333053588867, 0.8306666612625122, 0.8360000252723694, 0.8363333344459534, 0.8476666808128357, 0.8450000286102295, 0.840666651725769, 0.8500000238418579, 0.8450000286102295, 0.8556666374206543, 0.8543333411216736, 0.8573333621025085, 0.862666666507721, 0.8560000061988831, 0.862333357334137, 0.8629999756813049, 0.8633333444595337, 0.8633333444595337, 0.862333357334137, 0.8663333058357239, 0.8663333058357239, 0.8679999709129333, 0.8690000176429749, 0.8709999918937683, 0.871999979019165, 0.8686666488647461, 0.8763333559036255, 0.8740000128746033, 0.8759999871253967, 0.8759999871253967, 0.8773333430290222, 0.871666669845581, 0.8813333511352539, 0.8769999742507935, 0.8763333559036255, 0.8796666860580444, 0.8766666650772095, 0.878333330154419]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 0, 0, 3], [16, 16, 36], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 6, 1, 0, 2, 8], [0, 0, 0, 3, 0, 0, 4, 1, 2, 1], [16, 99, 96, 99, 58, 1]], "fitness": -0.17914286255836487, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 3, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))), grad), alpha)", "other_info": {"loss": [14.479467391967773, 68.02307891845703, 254.45535278320312, 588.7657470703125, 1786.482421875, 8138.74853515625, 14655.923828125], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.1026284471154213, 0.08717474341392517, 0.09192973375320435, 0.08717474341392517, 0.11781799048185349], "val_loss": [47.286354064941406, 37.85005187988281, 256.9317932128906, 1482.6429443359375, 1327.379638671875, 10284.6103515625, 9494.4443359375], "val_accuracy": [0.11566666513681412, 0.1809999942779541, 0.09000000357627869, 0.07000000029802322, 0.06499999761581421, 0.14166666567325592, 0.11266666650772095]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 2, 6, 8, 1, 4, 1, 5, 2, 8], [0, 4, 0, 1, 0, 0, 3, 4, 2, 0], [0, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), alpha))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), sigma), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 2, 2, 0, 3, 5, 9], [0, 2, 0, 3], [16, 16, 27], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 0, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [62, 5, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 10, 7, 3, 3, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.math.negative(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09272222965955734, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 3, 6, 3], [0, 1, 0, 2], [88, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1], [8, 0, 3, 0, 3, 4], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 8, 6, 2, 1, 4, 1, 8, 2, 8], [0, 1, 0, 3, 0, 0, 3, 1, 4, 0], [16, 99, 96, 57, 61, 1]], "fitness": -0.09314285963773727, "mapping_values": [1, 9, 5, 4, 2, 6, 4, 2, 1, 2, 1, 1, 1, 20, 11, 9, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.divide_no_nan(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.math.pow(tf.math.subtract(alpha, tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.sqrt(sigma)), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), sigma), tf.math.sqrt(alpha))), grad)", "other_info": {"loss": [2.309419870376587, 2.3099617958068848, 2.3098762035369873, 2.3086133003234863, 2.3097972869873047, 2.30962872505188], "accuracy": [0.09140139818191528, 0.09192973375320435, 0.0952318087220192, 0.09602430462837219, 0.09179764986038208, 0.09166556596755981], "val_loss": [2.3085591793060303, 2.3085591793060303, 2.3085591793060303, 2.3085591793060303, 2.3085591793060303, 2.3085591793060303], "val_accuracy": [0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869]}}]