[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8734285831451416, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2255282402038574, 1.8721107244491577, 1.4010379314422607, 1.1106735467910767, 0.940341055393219, 0.8359335660934448, 0.7731297612190247, 0.7296580672264099, 0.6895313262939453, 0.6571158170700073, 0.633295476436615, 0.6155224442481995, 0.5889805555343628, 0.5725106596946716, 0.556487500667572, 0.5408687591552734, 0.5278533697128296, 0.5128424763679504, 0.512872576713562, 0.4899774193763733, 0.4817979633808136, 0.47892409563064575, 0.46546685695648193, 0.4566666781902313, 0.451609343290329, 0.43633145093917847, 0.4428727924823761, 0.42452678084373474, 0.42050766944885254, 0.4092382490634918, 0.40380609035491943, 0.39615246653556824, 0.39049798250198364, 0.38757410645484924, 0.37997010350227356, 0.3791789710521698, 0.3691047430038452, 0.36647623777389526, 0.362128347158432, 0.35865068435668945, 0.34899047017097473, 0.34528470039367676, 0.34164324402809143, 0.3404218256473541, 0.329362154006958, 0.32548993825912476, 0.3200454115867615, 0.319357693195343, 0.3098825216293335, 0.3054966330528259], "accuracy": [0.2689208686351776, 0.48368775844573975, 0.5597675442695618, 0.6098269820213318, 0.6647734642028809, 0.7030775547027588, 0.7220974564552307, 0.7411174178123474, 0.7464007139205933, 0.763967752456665, 0.7684586048126221, 0.7718927264213562, 0.7889314293861389, 0.7909126877784729, 0.7968564033508301, 0.8092722296714783, 0.81112140417099, 0.8166688680648804, 0.8145555257797241, 0.8244617581367493, 0.8317263126373291, 0.8261788487434387, 0.8339717388153076, 0.8411042094230652, 0.8413683772087097, 0.8438779711723328, 0.8467837572097778, 0.846387505531311, 0.8527275323867798, 0.8576145768165588, 0.8529917001724243, 0.8617091774940491, 0.8622375130653381, 0.8621054291725159, 0.8650112152099609, 0.8644828796386719, 0.8721436858177185, 0.8687095642089844, 0.8734645247459412, 0.8747853636741638, 0.8800686597824097, 0.8786157965660095, 0.882710337638855, 0.8792761564254761, 0.8811253309249878, 0.885219931602478, 0.8856161832809448, 0.886672854423523, 0.886672854423523, 0.8899748921394348], "val_loss": [2.046873092651367, 1.5288923978805542, 1.0626829862594604, 0.856019914150238, 0.7606016993522644, 0.7008227705955505, 0.6582002639770508, 0.6210333704948425, 0.5941072702407837, 0.5707116723060608, 0.5571823120117188, 0.5361080169677734, 0.5217938423156738, 0.5068894624710083, 0.49441617727279663, 0.4871320128440857, 0.47810932993888855, 0.47213321924209595, 0.4643647372722626, 0.4517059624195099, 0.4470732808113098, 0.44019225239753723, 0.4363744854927063, 0.43239396810531616, 0.42653128504753113, 0.4212285280227661, 0.41591763496398926, 0.4089317321777344, 0.40691429376602173, 0.4042397439479828, 0.39867520332336426, 0.4001860022544861, 0.38896405696868896, 0.3901083469390869, 0.3860934376716614, 0.38403454422950745, 0.3824399709701538, 0.3795788884162903, 0.37650981545448303, 0.37731820344924927, 0.3719942271709442, 0.37503206729888916, 0.3734400272369385, 0.3695981800556183, 0.3660171627998352, 0.36835432052612305, 0.3619896173477173, 0.36234453320503235, 0.36134591698646545, 0.3571830987930298], "val_accuracy": [0.5239999890327454, 0.6553333401679993, 0.6856666803359985, 0.7023333311080933, 0.7279999852180481, 0.7490000128746033, 0.762333333492279, 0.7716666460037231, 0.7816666960716248, 0.7889999747276306, 0.7993333339691162, 0.8040000200271606, 0.8073333501815796, 0.8183333277702332, 0.8243333101272583, 0.8226666450500488, 0.8220000267028809, 0.8273333311080933, 0.8326666951179504, 0.8353333473205566, 0.8360000252723694, 0.8389999866485596, 0.8379999995231628, 0.8420000076293945, 0.8403333425521851, 0.8489999771118164, 0.8493333458900452, 0.8483333587646484, 0.8500000238418579, 0.8503333330154419, 0.8543333411216736, 0.8493333458900452, 0.8546666502952576, 0.8550000190734863, 0.8579999804496765, 0.8566666841506958, 0.8576666712760925, 0.8606666922569275, 0.8603333234786987, 0.8576666712760925, 0.862666666507721, 0.8583333492279053, 0.8616666793823242, 0.8606666922569275, 0.8679999709129333, 0.862333357334137, 0.8650000095367432, 0.8663333058357239, 0.8663333058357239, 0.8663333058357239]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8711428642272949, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221435546875, 1.8698753118515015, 1.3922802209854126, 1.090341329574585, 0.9330459237098694, 0.8428293466567993, 0.7652971744537354, 0.7174314856529236, 0.6811255812644958, 0.6590501070022583, 0.6305440664291382, 0.6099057197570801, 0.5932890176773071, 0.5822108387947083, 0.5679294466972351, 0.5399585962295532, 0.5410933494567871, 0.5180675387382507, 0.5080308318138123, 0.4919053614139557, 0.4886344373226166, 0.47068333625793457, 0.46289727091789246, 0.44795915484428406, 0.4489210247993469, 0.43725043535232544, 0.43091803789138794, 0.42362698912620544, 0.41710200905799866, 0.40694063901901245, 0.4037512242794037, 0.39124149084091187, 0.3907339572906494, 0.3936706781387329, 0.3749241232872009, 0.3645568788051605, 0.36473703384399414, 0.3690248727798462, 0.35955458879470825, 0.3462212085723877, 0.3442736268043518, 0.33692410588264465, 0.33122575283050537, 0.3265213072299957, 0.31860530376434326, 0.33195921778678894, 0.31489554047584534, 0.3156296908855438, 0.3147468566894531, 0.3052849769592285, 0.3002038598060608, 0.30003005266189575, 0.289510041475296, 0.2908064126968384, 0.28163066506385803, 0.27749428153038025, 0.27419227361679077], "accuracy": [0.2681283950805664, 0.4826310873031616, 0.5568616986274719, 0.6201294660568237, 0.6610751748085022, 0.6973979473114014, 0.719852089881897, 0.7360982894897461, 0.7504953145980835, 0.7560427784919739, 0.7642319202423096, 0.7724210619926453, 0.7845727205276489, 0.7857614755630493, 0.7902522683143616, 0.8006868362426758, 0.8035926818847656, 0.8133667707443237, 0.8128384351730347, 0.8198388814926147, 0.8230088353157043, 0.8273676037788391, 0.8304054737091064, 0.8399154543876648, 0.8360850811004639, 0.837537944316864, 0.8412362933158875, 0.8422929644584656, 0.8524633646011353, 0.852331280708313, 0.8543124794960022, 0.8543124794960022, 0.8582749962806702, 0.8544445633888245, 0.8632941246032715, 0.8684453964233398, 0.8691058158874512, 0.8650112152099609, 0.8693699836730957, 0.8717474341392517, 0.8751816153526306, 0.8753136992454529, 0.878879964351654, 0.8805969953536987, 0.8873332738876343, 0.8787478804588318, 0.8808611631393433, 0.8838990926742554, 0.8842953443527222, 0.8878615498542786, 0.8853520154953003, 0.8874653577804565, 0.8901069760322571, 0.8956544995307922, 0.8945978283882141, 0.9019944667816162, 0.8997490406036377], "val_loss": [2.0406112670898438, 1.515655755996704, 1.0487326383590698, 0.844619631767273, 0.7572783827781677, 0.7028329372406006, 0.6518741846084595, 0.6200889348983765, 0.596686601638794, 0.5724100470542908, 0.5598145127296448, 0.5417919754981995, 0.5230984687805176, 0.5121062994003296, 0.5022481083869934, 0.4899086058139801, 0.49062833189964294, 0.47029033303260803, 0.46370258927345276, 0.4509509205818176, 0.4571765065193176, 0.4456453323364258, 0.4364469349384308, 0.42915087938308716, 0.4240007996559143, 0.4220655560493469, 0.4127596914768219, 0.413675993680954, 0.40726718306541443, 0.40766260027885437, 0.40490055084228516, 0.39651647210121155, 0.3943045139312744, 0.3908737897872925, 0.39131250977516174, 0.38451334834098816, 0.38531583547592163, 0.3859482705593109, 0.3825796842575073, 0.3772204518318176, 0.3784513473510742, 0.3742050230503082, 0.37619495391845703, 0.37695688009262085, 0.36908218264579773, 0.3777272403240204, 0.36981678009033203, 0.3665004074573517, 0.36888858675956726, 0.3675926923751831, 0.3694516718387604, 0.36198690533638, 0.3624829947948456, 0.36024630069732666, 0.3555811047554016, 0.3610399663448334, 0.3597642779350281], "val_accuracy": [0.5483333468437195, 0.6496666669845581, 0.6833333373069763, 0.70333331823349, 0.7223333120346069, 0.7490000128746033, 0.7596666812896729, 0.7703333497047424, 0.7796666622161865, 0.7910000085830688, 0.7960000038146973, 0.8053333163261414, 0.812666654586792, 0.8109999895095825, 0.8216666579246521, 0.8240000009536743, 0.8270000219345093, 0.8366666436195374, 0.8343333601951599, 0.8389999866485596, 0.8383333086967468, 0.8426666855812073, 0.8396666646003723, 0.8503333330154419, 0.847000002861023, 0.8493333458900452, 0.8519999980926514, 0.8556666374206543, 0.8569999933242798, 0.8553333282470703, 0.8566666841506958, 0.8579999804496765, 0.859666645526886, 0.8613333106040955, 0.862333357334137, 0.8643333315849304, 0.8586666584014893, 0.8650000095367432, 0.8669999837875366, 0.8669999837875366, 0.8666666746139526, 0.8686666488647461, 0.8679999709129333, 0.8650000095367432, 0.8713333606719971, 0.8669999837875366, 0.8703333139419556, 0.8726666569709778, 0.871999979019165, 0.8696666955947876, 0.8686666488647461, 0.8790000081062317, 0.8723333477973938, 0.8763333559036255, 0.878333330154419, 0.8743333220481873, 0.8790000081062317]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [8, 2, 3, 0, 3], [0, 1, 0, 2], [70, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 8, 0, 3, 5], [0, 2, 2, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 2, 3, 3, 5, 5, 2, 7, 5, 2, 7, 0, 5, 9], [0, 2, 0, 3, 0, 0, 3, 4, 2, 0, 3, 5, 2, 6, 0, 0], [16, 99, 96, 99, 69, 1, 59, 82]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 4, 2, 1, 2, 1, 1, 1, 39, 23, 16, 8], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(beta, tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), sigma))), tf.math.add(tf.math.multiply(grad, beta), tf.math.multiply(tf.math.square(tf.math.square(tf.math.add(tf.math.add(tf.math.square(tf.math.add(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), sigma))), grad), beta))), grad)))), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 5, 3], [1, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 8], [3, 2, 0, 3], [63, 31], [0, 1], [0], [0], [90], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [1, 3, 3, 5, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 4, 0, 0, 3, 1, 2, 3], [16, 51, 96, 99, 22, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 1, 2, 1, 1, 1, 11, 6, 5, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.square(alpha), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(grad, tf.constant(1.0, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.303774356842041, 2.3022282123565674, 2.3024044036865234, 2.303845167160034, 2.3092870712280273, 2.334707736968994, 2.461740732192993], "accuracy": [0.10394927859306335, 0.10593052208423615, 0.10328886657953262, 0.1026284471154213, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.302597999572754, 2.302621841430664, 2.3031270503997803, 2.3055925369262695, 2.317639112472534, 2.3739750385284424, 2.6890361309051514], "val_accuracy": [0.0976666659116745, 0.10499999672174454, 0.10499999672174454, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1], [0, 2, 3, 0, 3, 9], [0, 1, 0, 2], [39, 70, 10], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [9, 2, 3, 6, 8, 1, 5, 1, 5, 2, 2], [0, 0, 0, 3, 2, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 6, 3, 3, 1, 0, 1, 1, 2, 1, 1, 1, 1, 1, 0, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3038229942321777, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 1], [3, 2, 8, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [4, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 6, 3, 3, 2, 2, 1, 1, 1, 10, 5, 5, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)), tf.math.sqrt(grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}]