[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8619999885559082, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2271599769592285, 1.8726491928100586, 1.4016094207763672, 1.0950844287872314, 0.9275152087211609, 0.8167669773101807, 0.7546356916427612, 0.7131537795066833, 0.6780666708946228, 0.6454569697380066, 0.6203464865684509, 0.5935378074645996, 0.5762771368026733, 0.5563811659812927, 0.5462685823440552, 0.5233840942382812, 0.5237960815429688, 0.5009864568710327, 0.48256322741508484, 0.48444944620132446, 0.4754852056503296, 0.46179959177970886, 0.4551933705806732, 0.4478755593299866, 0.4315350353717804, 0.4187570810317993, 0.41583630442619324, 0.41618216037750244, 0.40560877323150635, 0.40128931403160095, 0.39884936809539795, 0.3918505012989044, 0.37760263681411743, 0.3763464391231537, 0.3633449375629425, 0.3642309904098511, 0.3598761260509491, 0.3428926467895508, 0.35173478722572327, 0.34135112166404724, 0.34046676754951477, 0.3345101475715637, 0.3257067799568176, 0.32164669036865234, 0.3186364471912384, 0.31604036688804626, 0.30252978205680847, 0.3019523322582245, 0.3002455532550812, 0.2932722866535187, 0.2947746813297272, 0.28397437930107117, 0.2899945080280304, 0.2819182872772217, 0.27833789587020874, 0.2680812478065491, 0.26898396015167236, 0.2597462832927704, 0.25971919298171997, 0.2584441006183624, 0.254912406206131, 0.24750278890132904, 0.2456609159708023, 0.23680393397808075, 0.2371702641248703, 0.22833754122257233, 0.23408599197864532, 0.2276517003774643, 0.23018914461135864, 0.2172253429889679], "accuracy": [0.2779025137424469, 0.49332982301712036, 0.5634658336639404, 0.6124686598777771, 0.6660943031311035, 0.7079645991325378, 0.7268524765968323, 0.7401928305625916, 0.7549861073493958, 0.76542067527771, 0.7721568942070007, 0.7882710099220276, 0.7930260300636292, 0.7997622489929199, 0.8076872229576111, 0.8107251524925232, 0.8144234418869019, 0.8219521641731262, 0.8260467648506165, 0.8257825970649719, 0.8308017253875732, 0.8354246616363525, 0.8450667262077332, 0.8422929644584656, 0.8512746095657349, 0.8544445633888245, 0.8555012345314026, 0.8569541573524475, 0.8560295701026917, 0.8580108284950256, 0.8621054291725159, 0.8647470474243164, 0.8692378997802734, 0.8705587387084961, 0.8688416481018066, 0.8720116019248962, 0.8689737319946289, 0.8794082403182983, 0.878879964351654, 0.8786157965660095, 0.8808611631393433, 0.8790120482444763, 0.8877294659614563, 0.8840311765670776, 0.8902390599250793, 0.8912957310676575, 0.8918240666389465, 0.8924844861030579, 0.8914278149604797, 0.89552241563797, 0.8943336606025696, 0.901862382888794, 0.8975036144256592, 0.9009377956390381, 0.9005415439605713, 0.9056927561759949, 0.9056927561759949, 0.9083344340324402, 0.908730685710907, 0.909259021282196, 0.9074098467826843, 0.913089394569397, 0.9134856462478638, 0.9186369180679321, 0.915070652961731, 0.9178444147109985, 0.9158631563186646, 0.9196935892105103, 0.9132214784622192, 0.9223352074623108], "val_loss": [2.047553777694702, 1.52479088306427, 1.0434297323226929, 0.8330528140068054, 0.7419226169586182, 0.6892879009246826, 0.641674280166626, 0.6053315997123718, 0.5805736780166626, 0.5598111748695374, 0.5381558537483215, 0.5252514481544495, 0.5049723386764526, 0.49963435530662537, 0.4845343828201294, 0.47667139768600464, 0.467960923910141, 0.45714208483695984, 0.4473957121372223, 0.44340670108795166, 0.43636760115623474, 0.4279489815235138, 0.4217046797275543, 0.41640496253967285, 0.40772444009780884, 0.40171337127685547, 0.4007318615913391, 0.3962867856025696, 0.39362484216690063, 0.38710758090019226, 0.38248497247695923, 0.38130903244018555, 0.37910202145576477, 0.37219303846359253, 0.37108340859413147, 0.36945128440856934, 0.36724409461021423, 0.36358755826950073, 0.3614460825920105, 0.36242207884788513, 0.36398446559906006, 0.3557794690132141, 0.35230258107185364, 0.35126423835754395, 0.3485170602798462, 0.3480381667613983, 0.34769192337989807, 0.3418440818786621, 0.33814191818237305, 0.33646345138549805, 0.33798012137413025, 0.3369194269180298, 0.3313571810722351, 0.33352208137512207, 0.3320184648036957, 0.3281475007534027, 0.32398733496665955, 0.3263430595397949, 0.32246968150138855, 0.32601964473724365, 0.3271157741546631, 0.3177228569984436, 0.32346686720848083, 0.32305771112442017, 0.32268989086151123, 0.3209719657897949, 0.32447829842567444, 0.32113856077194214, 0.3193393647670746, 0.3184608817100525], "val_accuracy": [0.5323333144187927, 0.6656666398048401, 0.6880000233650208, 0.7176666855812073, 0.7329999804496765, 0.7543333172798157, 0.7680000066757202, 0.7846666574478149, 0.7846666574478149, 0.7996666431427002, 0.8043333292007446, 0.8109999895095825, 0.815666675567627, 0.8220000267028809, 0.8246666789054871, 0.8370000123977661, 0.8366666436195374, 0.843666672706604, 0.8486666679382324, 0.843999981880188, 0.8489999771118164, 0.8536666631698608, 0.8553333282470703, 0.8550000190734863, 0.8616666793823242, 0.8616666793823242, 0.8616666793823242, 0.8640000224113464, 0.8636666536331177, 0.8640000224113464, 0.8679999709129333, 0.8683333396911621, 0.8693333268165588, 0.8726666569709778, 0.8703333139419556, 0.8706666827201843, 0.8693333268165588, 0.8730000257492065, 0.8733333349227905, 0.8713333606719971, 0.871666669845581, 0.8730000257492065, 0.871999979019165, 0.8786666393280029, 0.8766666650772095, 0.8766666650772095, 0.8806666731834412, 0.8790000081062317, 0.8816666603088379, 0.8776666522026062, 0.878333330154419, 0.8833333253860474, 0.8813333511352539, 0.8843333125114441, 0.8836666941642761, 0.8809999823570251, 0.8840000033378601, 0.8846666812896729, 0.8866666555404663, 0.8806666731834412, 0.8853333592414856, 0.8893333077430725, 0.8880000114440918, 0.8880000114440918, 0.890999972820282, 0.8899999856948853, 0.8893333077430725, 0.8893333077430725, 0.8870000243186951, 0.890999972820282]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 0, 0, 2], [39, 39, 71], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [1, 2, 0, 3], [16, 16], [0, 1, 1], [6], [4, 1], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 1, 3, 6, 8, 1, 4, 9, 8, 5, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [16, 99, 23, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(grad, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))), tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.sqrt(sigma)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}, "mapping_values": [1, 9, 5, 4, 3, 10, 6, 4, 1, 3, 1, 2, 0, 17, 11, 6, 5], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 2, 3, 0, 3], [0, 1, 0, 2, 1], [39, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0], [0, 2, 3, 0, 3, 5], [0, 2, 2, 3], [53, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 3, 9], [0, 2, 0, 3, 0, 4, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 1, 0, 1, 1, 2, 1, 1, 1, 23, 13, 10, 5], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), alpha), lambda shape,  alpha, beta, grad: tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(beta, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(grad))), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))))), alpha)), beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [2, 2, 3, 0, 3, 1, 0], [0, 1, 0, 2, 3, 3], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 9, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [1, 1], [3], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 7, 6, 2, 2, 2, 0, 1, 1, 0, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.negative(grad)))), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 1], [0, 0, 0, 2], [39, 39, 42], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 6, 2, 5], [0, 2, 3, 0, 0], [16, 16, 81], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 9, 1, 4, 1, 4, 2, 8], [0, 0, 4, 4, 0, 1, 3, 1, 2, 0], [16, 99, 96, 26, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 11, 6, 5, 3, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.add(grad, tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, grad)))), tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.pow(alpha, sigma))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}]