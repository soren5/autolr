[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8757143020629883, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2224490642547607, 1.8675343990325928, 1.3939836025238037, 1.0927708148956299, 0.9404754638671875, 0.843849241733551, 0.7721466422080994, 0.7262260317802429, 0.6833308339118958, 0.6551293134689331, 0.6342591643333435, 0.6063357591629028, 0.5894114971160889, 0.5630450248718262, 0.5653029680252075, 0.5470729470252991, 0.5323475003242493, 0.5214682221412659, 0.5072728991508484, 0.4921358525753021, 0.4860784709453583, 0.4787559509277344, 0.4597107470035553, 0.4659897983074188, 0.4577959179878235, 0.4413664937019348, 0.4400829076766968, 0.42729705572128296, 0.42480337619781494, 0.4147000014781952, 0.4078267216682434, 0.40303489565849304, 0.39573609828948975, 0.3881356716156006, 0.3801533281803131, 0.3769753575325012, 0.37094807624816895, 0.36736586689949036, 0.37323513627052307, 0.36098161339759827, 0.34507474303245544, 0.34743914008140564, 0.34368041157722473, 0.33095982670783997, 0.32870543003082275, 0.32367658615112305, 0.32409581542015076, 0.3211810886859894, 0.3120701313018799, 0.31045442819595337, 0.3032769560813904, 0.30337560176849365, 0.29582297801971436, 0.29006415605545044, 0.2880508303642273, 0.28300508856773376, 0.2801433503627777, 0.2763940989971161, 0.2741786241531372, 0.26906004548072815, 0.2651638984680176, 0.2566206157207489, 0.26367518305778503, 0.2519575357437134], "accuracy": [0.27658170461654663, 0.49385812878608704, 0.5719191431999207, 0.6159027814865112, 0.6682076454162598, 0.6946242451667786, 0.7185312509536743, 0.733060359954834, 0.7493065595626831, 0.7617223858833313, 0.7683265209197998, 0.7799497842788696, 0.7829877138137817, 0.7980451583862305, 0.7992339134216309, 0.804649293422699, 0.8092722296714783, 0.8104609847068787, 0.8193105459213257, 0.8228767514228821, 0.8272355198860168, 0.8252542614936829, 0.8376700282096863, 0.8348963260650635, 0.8422929644584656, 0.8424250483512878, 0.8444063067436218, 0.8512746095657349, 0.8488970994949341, 0.8491612672805786, 0.8557654023170471, 0.8536521196365356, 0.8539162874221802, 0.8628978729248047, 0.8634262084960938, 0.8638224601745605, 0.8673887252807617, 0.870030403137207, 0.8684453964233398, 0.8704266548156738, 0.8747853636741638, 0.8750495314598083, 0.8746532797813416, 0.8787478804588318, 0.8829745054244995, 0.8828424215316772, 0.8833707571029663, 0.8842953443527222, 0.8841632604598999, 0.8882578015327454, 0.8903711438179016, 0.8894465565681458, 0.891559898853302, 0.8948619961738586, 0.8968431949615479, 0.8988244533538818, 0.8960506916046143, 0.9017302989959717, 0.9019944667816162, 0.89988112449646, 0.9017302989959717, 0.9071456789970398, 0.9039757251739502, 0.9082023501396179], "val_loss": [2.036843776702881, 1.5161906480789185, 1.0445137023925781, 0.8340126872062683, 0.7392319440841675, 0.6852213740348816, 0.6332608461380005, 0.5959271192550659, 0.5714350342750549, 0.549830973148346, 0.5222745537757874, 0.5133263468742371, 0.49633684754371643, 0.4777461290359497, 0.4722379446029663, 0.4595833718776703, 0.45239517092704773, 0.4480498731136322, 0.43859392404556274, 0.4262703061103821, 0.42883649468421936, 0.4152919054031372, 0.41032952070236206, 0.4077501893043518, 0.3949292004108429, 0.39100560545921326, 0.3824780285358429, 0.3815884590148926, 0.37856918573379517, 0.372124582529068, 0.37195006012916565, 0.3686104416847229, 0.3633952736854553, 0.3569556474685669, 0.35764214396476746, 0.35445699095726013, 0.35251298546791077, 0.3492286503314972, 0.3514643609523773, 0.34624624252319336, 0.34437841176986694, 0.3405534625053406, 0.3368695080280304, 0.3358098268508911, 0.33687594532966614, 0.3372238874435425, 0.34350210428237915, 0.32805559039115906, 0.33228394389152527, 0.32754582166671753, 0.33014562726020813, 0.3276408612728119, 0.3226785361766815, 0.325215607881546, 0.3204743564128876, 0.3180955946445465, 0.318777471780777, 0.3154444694519043, 0.31414422392845154, 0.32395991683006287, 0.3196926712989807, 0.319996178150177, 0.31522229313850403, 0.3184100091457367], "val_accuracy": [0.5546666383743286, 0.6629999876022339, 0.6823333501815796, 0.7110000252723694, 0.737333357334137, 0.7473333477973938, 0.762666642665863, 0.7816666960716248, 0.7850000262260437, 0.7983333468437195, 0.8059999942779541, 0.8096666932106018, 0.8116666674613953, 0.8259999752044678, 0.8330000042915344, 0.8309999704360962, 0.8303333520889282, 0.8336666822433472, 0.8360000252723694, 0.846666693687439, 0.8493333458900452, 0.8553333282470703, 0.847000002861023, 0.8463333249092102, 0.8606666922569275, 0.8629999756813049, 0.8613333106040955, 0.8633333444595337, 0.8636666536331177, 0.8666666746139526, 0.8663333058357239, 0.8659999966621399, 0.8700000047683716, 0.8736666440963745, 0.8736666440963745, 0.8740000128746033, 0.8730000257492065, 0.8766666650772095, 0.8776666522026062, 0.8740000128746033, 0.878333330154419, 0.8776666522026062, 0.8830000162124634, 0.8806666731834412, 0.8803333044052124, 0.8820000290870667, 0.8809999823570251, 0.8863333463668823, 0.8799999952316284, 0.8826666474342346, 0.8833333253860474, 0.8849999904632568, 0.8893333077430725, 0.8846666812896729, 0.8896666765213013, 0.8893333077430725, 0.8856666684150696, 0.890333354473114, 0.8923333287239075, 0.8896666765213013, 0.890666663646698, 0.887333333492279, 0.8916666507720947, 0.8880000114440918]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8614285588264465, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2238996028900146, 1.8746321201324463, 1.4000719785690308, 1.101393222808838, 0.9459242224693298, 0.8451797962188721, 0.7827199101448059, 0.7324716448783875, 0.6954677104949951, 0.6691519021987915, 0.6390812993049622, 0.6300367116928101, 0.5975311398506165, 0.589038074016571, 0.5612819790840149, 0.559845507144928, 0.5422189235687256, 0.5269250869750977, 0.523550271987915, 0.4990582764148712, 0.4916921854019165, 0.49925389885902405, 0.47413140535354614, 0.4636457562446594, 0.46077993512153625, 0.4558686912059784, 0.44386062026023865, 0.43587538599967957, 0.43255484104156494, 0.41899293661117554, 0.41986119747161865, 0.4113032817840576, 0.39854559302330017, 0.398878276348114, 0.390659362077713, 0.38929471373558044, 0.3824445307254791, 0.3743257224559784, 0.3709973692893982, 0.3664161264896393, 0.36180785298347473, 0.35185879468917847, 0.3462080955505371, 0.34030795097351074, 0.3467860817909241, 0.33627140522003174, 0.33862659335136414], "accuracy": [0.27143046259880066, 0.4908202290534973, 0.5680887699127197, 0.6210539937019348, 0.6666226387023926, 0.6947563290596008, 0.7168141603469849, 0.7376832365989685, 0.7474573850631714, 0.7627789974212646, 0.7691190242767334, 0.7721568942070007, 0.7781006693840027, 0.7882710099220276, 0.7997622489929199, 0.7973847389221191, 0.805177628993988, 0.8100647330284119, 0.8127063512802124, 0.8240655064582825, 0.8274996876716614, 0.8245938420295715, 0.8329150676727295, 0.8352925777435303, 0.8380662798881531, 0.8314621448516846, 0.8408400416374207, 0.843481719493866, 0.8454629778862, 0.8491612672805786, 0.8516708612442017, 0.8564258217811584, 0.8598600029945374, 0.8578787446022034, 0.8619733452796936, 0.8628978729248047, 0.8683133125305176, 0.8688416481018066, 0.8687095642089844, 0.8654074668884277, 0.8725399374961853, 0.8766345381736755, 0.876370370388031, 0.8833707571029663, 0.8757099509239197, 0.884691596031189, 0.8820499181747437], "val_loss": [2.041959285736084, 1.5182057619094849, 1.0427018404006958, 0.8377832174301147, 0.7485083937644958, 0.6934201717376709, 0.6492384076118469, 0.6165128350257874, 0.5908504128456116, 0.5655505657196045, 0.5479964017868042, 0.5364558696746826, 0.5168938636779785, 0.5053474307060242, 0.4974842667579651, 0.492317795753479, 0.4865553379058838, 0.4720824658870697, 0.4601620137691498, 0.4587961435317993, 0.4485674202442169, 0.4434303939342499, 0.43206754326820374, 0.425779789686203, 0.43369489908218384, 0.42392995953559875, 0.41252806782722473, 0.4134764075279236, 0.4140246510505676, 0.40523019433021545, 0.40282493829727173, 0.39643195271492004, 0.39617106318473816, 0.3886091411113739, 0.38572362065315247, 0.38294288516044617, 0.3836429715156555, 0.38114169239997864, 0.3767627775669098, 0.37150153517723083, 0.3718664050102234, 0.370584636926651, 0.3720371127128601, 0.36394715309143066, 0.3608057498931885, 0.36781877279281616, 0.36464372277259827], "val_accuracy": [0.546999990940094, 0.6579999923706055, 0.684333324432373, 0.7106666564941406, 0.7319999933242798, 0.7546666860580444, 0.7673333287239075, 0.7743333578109741, 0.7903333306312561, 0.7876666784286499, 0.7979999780654907, 0.8003333210945129, 0.8146666884422302, 0.8106666803359985, 0.8233333230018616, 0.8220000267028809, 0.8196666836738586, 0.8276666402816772, 0.8316666483879089, 0.8393333554267883, 0.8393333554267883, 0.8410000205039978, 0.8483333587646484, 0.8489999771118164, 0.846666693687439, 0.8489999771118164, 0.8550000190734863, 0.8533333539962769, 0.8493333458900452, 0.8576666712760925, 0.8583333492279053, 0.8650000095367432, 0.859666645526886, 0.8640000224113464, 0.8659999966621399, 0.8656666874885559, 0.8640000224113464, 0.8663333058357239, 0.8666666746139526, 0.8696666955947876, 0.8676666617393494, 0.8733333349227905, 0.8669999837875366, 0.8706666827201843, 0.8730000257492065, 0.8696666955947876, 0.8659999966621399]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [9, 2, 3, 1, 3], [1, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5, 8, 1, 1, 8], [0, 2, 0, 3, 3, 3], [16, 16], [0, 1], [0], [0], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 9, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 16, 10, 6, 2, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.subtract(grad, grad), tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3033978939056396, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 1, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 8, 4, 0, 4, 7, 9, 9], [0, 0, 0, 1, 4, 0, 3, 1, 2, 0, 7], [16, 67, 96, 99, 61, 1, 72]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 10, 6, 4, 2, 2, 1, 1, 1, 29, 18, 11, 7], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(alpha, tf.math.add(grad, tf.constant(1.0, shape=shape, dtype=tf.float32)))), sigma)), tf.math.sqrt(tf.math.sqrt(alpha)))), beta), tf.math.pow(tf.math.negative(tf.math.pow(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad)), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3], [0, 2, 0, 2], [79, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 4, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 3, 6, 8, 1, 4, 1, 2, 2, 8], [1, 0, 0, 3, 0, 0, 3, 4, 2, 0], [80, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 10, 6, 4, 1, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3036813735961914, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09932637959718704, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 4, 0, 0, 3], [0, 1, 2, 2], [39, 39], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 8, 4, 2, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [16, 99, 28, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1, 1, 0, 17, 9, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), sigma))), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(grad, sigma)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}]