[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8617143034934998, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2241365909576416, 1.86257004737854, 1.3782589435577393, 1.0884147882461548, 0.919746994972229, 0.8226781487464905, 0.7611107230186462, 0.717647135257721, 0.6812469959259033, 0.6484376788139343, 0.6306748986244202, 0.603742778301239, 0.5907233357429504, 0.571560263633728, 0.5595690608024597, 0.5377159714698792, 0.5255268812179565, 0.5154326558113098, 0.5040693879127502, 0.497633159160614, 0.4854367673397064, 0.47856009006500244, 0.4697231650352478, 0.463142991065979, 0.44850486516952515, 0.4381684362888336, 0.4400741159915924, 0.429067999124527, 0.41718238592147827, 0.412394642829895, 0.40629154443740845, 0.4074847400188446, 0.3941667377948761, 0.3917374908924103, 0.3817872703075409, 0.3799935579299927, 0.3728961944580078, 0.36529257893562317, 0.3632209897041321, 0.3495687246322632, 0.3504093885421753, 0.34687209129333496, 0.34175777435302734, 0.3268393278121948, 0.33953237533569336, 0.32371237874031067, 0.3197232782840729, 0.3211207389831543, 0.3172571361064911, 0.3122667074203491, 0.3049641251564026, 0.30011099576950073, 0.2998952865600586, 0.2863994240760803, 0.28617244958877563, 0.2815028727054596, 0.27902528643608093, 0.278067022562027, 0.2704644799232483, 0.26442959904670715, 0.2645829916000366, 0.26849132776260376, 0.2570205330848694, 0.2543841600418091, 0.2540127635002136, 0.2455068975687027, 0.23881766200065613, 0.23656785488128662, 0.23478609323501587, 0.23171189427375793, 0.2240675687789917, 0.22816871106624603, 0.22564926743507385, 0.2223370224237442, 0.21564260125160217, 0.22058440744876862, 0.2142808437347412, 0.2109406292438507, 0.20970776677131653], "accuracy": [0.27565711736679077, 0.49887728691101074, 0.5765420794487, 0.6193369626998901, 0.6757363677024841, 0.705058753490448, 0.7210407853126526, 0.7405890822410583, 0.7541936039924622, 0.7671377658843994, 0.7758552432060242, 0.7819310426712036, 0.7881389260292053, 0.7973847389221191, 0.7971205711364746, 0.8080834746360779, 0.8119139075279236, 0.8150838613510132, 0.8187822103500366, 0.819970965385437, 0.8293488025665283, 0.8329150676727295, 0.8302733898162842, 0.8313300609588623, 0.8437458872795105, 0.844010055065155, 0.8379341959953308, 0.852859616279602, 0.8524633646011353, 0.8561616539955139, 0.8584070801734924, 0.8541803956031799, 0.8625016212463379, 0.8619733452796936, 0.8627657890319824, 0.8650112152099609, 0.8688416481018066, 0.8709549307823181, 0.8726720213890076, 0.8753136992454529, 0.8698983192443848, 0.8787478804588318, 0.8804649114608765, 0.8837670087814331, 0.8753136992454529, 0.8850878477096558, 0.8887861371040344, 0.8841632604598999, 0.8883898854255676, 0.8898428082466125, 0.8912957310676575, 0.897899866104126, 0.8967111110687256, 0.898428201675415, 0.8975036144256592, 0.8965790271759033, 0.9029190540313721, 0.9029190540313721, 0.9063531756401062, 0.9066173434257507, 0.9052965044975281, 0.9015982151031494, 0.9083344340324402, 0.908730685710907, 0.91124027967453, 0.9125610589981079, 0.913617730140686, 0.9173160791397095, 0.9137498140335083, 0.9181085824966431, 0.9210143685340881, 0.9212785363197327, 0.9187690019607544, 0.9202219247817993, 0.9222031235694885, 0.9215427041053772, 0.9222031235694885, 0.9251089692115784, 0.9232597947120667], "val_loss": [2.0399434566497803, 1.5102607011795044, 1.0377744436264038, 0.834483802318573, 0.7399610877037048, 0.6777163147926331, 0.6373760104179382, 0.5988204479217529, 0.5747098922729492, 0.5508854985237122, 0.5321643352508545, 0.5178999900817871, 0.5022101998329163, 0.48896855115890503, 0.4781127870082855, 0.4672057330608368, 0.45830655097961426, 0.44834473729133606, 0.44217294454574585, 0.4369736313819885, 0.42562344670295715, 0.4243738055229187, 0.4169381856918335, 0.4168449640274048, 0.40211474895477295, 0.40239718556404114, 0.3960057497024536, 0.39383822679519653, 0.38719743490219116, 0.38232412934303284, 0.382184237241745, 0.37822628021240234, 0.37716007232666016, 0.37246251106262207, 0.3692989945411682, 0.36890169978141785, 0.36317723989486694, 0.35980045795440674, 0.3607567548751831, 0.35477474331855774, 0.35668790340423584, 0.35224413871765137, 0.3489678204059601, 0.3541318476200104, 0.34811121225357056, 0.34745150804519653, 0.34293824434280396, 0.33743149042129517, 0.33915430307388306, 0.33923375606536865, 0.33871957659721375, 0.3365558385848999, 0.33716413378715515, 0.3374668061733246, 0.330847829580307, 0.3323993682861328, 0.33603230118751526, 0.33617833256721497, 0.33057644963264465, 0.33671537041664124, 0.3306931257247925, 0.32760685682296753, 0.32544684410095215, 0.3212021589279175, 0.32656538486480713, 0.3265116512775421, 0.3214649558067322, 0.324981689453125, 0.32311907410621643, 0.3215906023979187, 0.3200687766075134, 0.31993207335472107, 0.3219923973083496, 0.3187011182308197, 0.3161235451698303, 0.3215532898902893, 0.3208860456943512, 0.3204174339771271, 0.3236585557460785], "val_accuracy": [0.578000009059906, 0.6496666669845581, 0.6793333292007446, 0.7039999961853027, 0.734000027179718, 0.7576666474342346, 0.7666666507720947, 0.7766666412353516, 0.7886666655540466, 0.7946666479110718, 0.8019999861717224, 0.8029999732971191, 0.8149999976158142, 0.8190000057220459, 0.8236666917800903, 0.8253333568572998, 0.8330000042915344, 0.8316666483879089, 0.8379999995231628, 0.8370000123977661, 0.8443333506584167, 0.847000002861023, 0.8486666679382324, 0.8423333168029785, 0.8550000190734863, 0.8479999899864197, 0.8586666584014893, 0.856333315372467, 0.8610000014305115, 0.8610000014305115, 0.8610000014305115, 0.8636666536331177, 0.8603333234786987, 0.8646666407585144, 0.8666666746139526, 0.8673333525657654, 0.8659999966621399, 0.871666669845581, 0.8679999709129333, 0.8686666488647461, 0.8690000176429749, 0.871666669845581, 0.8723333477973938, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8736666440963745, 0.8769999742507935, 0.8756666779518127, 0.878333330154419, 0.8736666440963745, 0.8786666393280029, 0.8763333559036255, 0.8756666779518127, 0.8790000081062317, 0.8790000081062317, 0.8786666393280029, 0.878333330154419, 0.875333309173584, 0.8796666860580444, 0.8796666860580444, 0.8796666860580444, 0.878333330154419, 0.8840000033378601, 0.8840000033378601, 0.8836666941642761, 0.8856666684150696, 0.8809999823570251, 0.8863333463668823, 0.8820000290870667, 0.8806666731834412, 0.887333333492279, 0.8823333382606506, 0.8896666765213013, 0.8853333592414856, 0.8826666474342346, 0.8856666684150696, 0.8856666684150696, 0.8849999904632568]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 5, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 0, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 0, 8], [0, 0, 0, 3, 0, 0, 2, 1, 2, 0], [16, 99, 96, 99, 61, 99]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 8, 5, 3, 2, 2, 1, 1, 1, 20, 11, 9, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), beta)))), tf.math.sqrt(alpha)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 0, 0, 2], [39, 39, 30], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 1], [0, 8], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 0, 8, 1, 4, 1, 4, 2, 2], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 10, 6, 4, 2, 3, 2, 1, 1, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [2.30580735206604, 2.302586793899536, 2.3025851249694824, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "accuracy": [0.08968432247638702, 0.09985470771789551, 0.09338264167308807, 0.09998679161071777, 0.09642054885625839, 0.10011887550354004], "val_loss": [2.3025848865509033, 2.3025848865509033, 2.3025848865509033, 2.3025853633880615, 2.3025848865509033, 2.3025853633880615], "val_accuracy": [0.10366666316986084, 0.09933333098888397, 0.0989999994635582, 0.0989999994635582, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 1, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 8, 1, 4, 2, 8], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 99, 96, 74, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(grad, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))), sigma)), tf.math.sqrt(alpha)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}, "mapping_values": [1, 6, 3, 3, 1, 7, 4, 3, 2, 2, 1, 1, 1, 20, 11, 9, 4], "tree_depth": 20}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [0, 2, 3, 0, 3, 0, 2, 2, 2, 7, 3, 1, 6, 2, 7, 6, 3, 8, 3, 1, 5, 3, 5, 2, 7, 2, 4, 6, 1, 7, 6, 2, 8, 6, 1, 9, 6, 5, 1, 6, 9, 8, 3, 4, 3, 1, 3, 7, 8, 7, 5, 0, 7], [2, 1, 0, 2, 0, 2, 2, 2, 0, 2, 2, 2, 3, 3, 3, 2, 2, 0, 1, 0, 0, 0, 0, 3, 2, 0, 2, 1, 3, 1, 2, 1, 3, 1, 2, 0, 1, 1], [39, 39, 99, 64, 84, 34, 27, 95, 89, 19, 18, 30], [0, 0, 1, 0, 1, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [1, 1], [0], [0], [98], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 5, 9, 3, 8, 9], [4, 0, 0, 2, 0, 0, 3, 1, 2, 4], [16, 99, 93, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 91, 53, 38, 12, 10, 6, 4, 2, 1, 0, 1, 1, 25, 16, 9, 6], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(tf.math.add(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.math.multiply(tf.math.subtract(grad, tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.sqrt(grad)), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, grad)), tf.math.subtract(grad, tf.math.square(grad))), tf.math.multiply(tf.math.square(tf.math.add(grad, grad)), grad))), tf.math.add(tf.math.add(grad, tf.math.pow(tf.math.divide_no_nan(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.subtract(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.subtract(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))))), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.multiply(tf.math.pow(grad, grad), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), grad), alpha)), tf.math.multiply(tf.math.subtract(grad, tf.math.multiply(tf.math.add(tf.math.sqrt(alpha), grad), alpha)), tf.math.add(tf.math.square(grad), alpha)))), tf.math.negative(tf.math.add(grad, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))), alpha), alpha)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(beta, tf.math.add(tf.math.sqrt(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha)), tf.math.sqrt(beta)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908]}}]