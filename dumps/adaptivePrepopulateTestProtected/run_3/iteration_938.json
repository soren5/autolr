[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8862857222557068, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222418785095215, 1.8632627725601196, 1.3950724601745605, 1.0979150533676147, 0.9474178552627563, 0.8543937802314758, 0.7783248424530029, 0.7376496195793152, 0.7006842494010925, 0.6746688485145569, 0.647553563117981, 0.6295329928398132, 0.6112891435623169, 0.58865886926651, 0.5667527914047241, 0.5575993657112122, 0.5467248558998108, 0.5289703011512756, 0.5205997824668884, 0.5110849142074585, 0.5064045786857605, 0.4867391884326935, 0.4731372892856598, 0.47443822026252747, 0.46410614252090454, 0.4545186161994934, 0.445819616317749, 0.4367676079273224, 0.4321127235889435, 0.4275900721549988, 0.4177286922931671, 0.40700381994247437, 0.40491974353790283, 0.3923063576221466, 0.38597339391708374, 0.37638187408447266, 0.3749813437461853, 0.3708414137363434, 0.369646281003952, 0.3635149896144867, 0.3594855070114136, 0.3503628671169281, 0.3338625133037567, 0.3396199643611908, 0.33679017424583435, 0.3303111493587494, 0.3275522291660309, 0.3153315782546997, 0.3093845844268799, 0.31660354137420654, 0.313541054725647, 0.3128948211669922, 0.2977619469165802, 0.30230653285980225, 0.298944890499115, 0.28947505354881287, 0.2822195291519165, 0.2778712213039398, 0.2668195366859436, 0.26853811740875244, 0.26283398270606995, 0.2662760019302368, 0.2576100528240204, 0.25102800130844116, 0.2539205849170685, 0.25087955594062805, 0.24508193135261536], "accuracy": [0.280940443277359, 0.48685774207115173, 0.5665037631988525, 0.616299033164978, 0.6625280380249023, 0.6930392384529114, 0.7169462442398071, 0.7320036888122559, 0.7375511527061462, 0.7491744756698608, 0.7672698497772217, 0.7670056819915771, 0.7745344042778015, 0.7876105904579163, 0.7906485199928284, 0.7994980812072754, 0.802800178527832, 0.8068947196006775, 0.8117818236351013, 0.8153480291366577, 0.8181217908859253, 0.829216718673706, 0.8300092220306396, 0.8238013386726379, 0.8325188159942627, 0.8385946154594421, 0.8372738361358643, 0.842028796672821, 0.8451988101005554, 0.8481045961380005, 0.8515387773513794, 0.8549728989601135, 0.8516708612442017, 0.8603883385658264, 0.8598600029945374, 0.8667283058166504, 0.8636903762817383, 0.8636903762817383, 0.8677849769592285, 0.8704266548156738, 0.8758420348167419, 0.8739928603172302, 0.8790120482444763, 0.8768987059593201, 0.8751816153526306, 0.8794082403182983, 0.8813894987106323, 0.8860124349594116, 0.8874653577804565, 0.8856161832809448, 0.8838990926742554, 0.8877294659614563, 0.8918240666389465, 0.8918240666389465, 0.8922203183174133, 0.8953903317451477, 0.89552241563797, 0.9002773761749268, 0.9049002528190613, 0.9034473896026611, 0.9035794734954834, 0.9038436412811279, 0.9085986018180847, 0.9095231890678406, 0.9095231890678406, 0.909259021282196, 0.910711944103241], "val_loss": [2.0414316654205322, 1.5168657302856445, 1.0494927167892456, 0.8396123051643372, 0.7532041668891907, 0.6975494027137756, 0.6532282829284668, 0.6188269853591919, 0.5909113883972168, 0.5747429728507996, 0.5562715530395508, 0.5392115712165833, 0.5226473808288574, 0.5080817937850952, 0.49551260471343994, 0.4949219524860382, 0.48097461462020874, 0.46894019842147827, 0.4645398259162903, 0.4554585814476013, 0.44845467805862427, 0.44272810220718384, 0.4365209937095642, 0.4303407371044159, 0.42757970094680786, 0.42137086391448975, 0.4158954322338104, 0.4094981253147125, 0.40614867210388184, 0.40746310353279114, 0.39686036109924316, 0.39440515637397766, 0.39069101214408875, 0.3898474872112274, 0.3889416456222534, 0.3833497166633606, 0.387736976146698, 0.3792175352573395, 0.3778442442417145, 0.37528878450393677, 0.3729557991027832, 0.37016138434410095, 0.36690768599510193, 0.36455467343330383, 0.36386409401893616, 0.3628668487071991, 0.365796834230423, 0.36076274514198303, 0.3599783480167389, 0.35867130756378174, 0.35705167055130005, 0.35411083698272705, 0.3552299737930298, 0.3651564121246338, 0.36276260018348694, 0.34837988018989563, 0.34821584820747375, 0.3528410792350769, 0.3496720790863037, 0.3506317138671875, 0.34951722621917725, 0.3443804085254669, 0.345913290977478, 0.3461855351924896, 0.3431210517883301, 0.348863810300827, 0.3426092565059662], "val_accuracy": [0.5373333096504211, 0.6570000052452087, 0.6759999990463257, 0.7110000252723694, 0.7286666631698608, 0.7419999837875366, 0.7590000033378601, 0.7616666555404663, 0.7836666703224182, 0.7903333306312561, 0.7886666655540466, 0.8006666898727417, 0.809333324432373, 0.8183333277702332, 0.8146666884422302, 0.8140000104904175, 0.8233333230018616, 0.8289999961853027, 0.8326666951179504, 0.8363333344459534, 0.8389999866485596, 0.8366666436195374, 0.8363333344459534, 0.8489999771118164, 0.847000002861023, 0.8519999980926514, 0.8533333539962769, 0.8560000061988831, 0.8573333621025085, 0.8539999723434448, 0.8619999885559082, 0.862666666507721, 0.8656666874885559, 0.8629999756813049, 0.8646666407585144, 0.8636666536331177, 0.8603333234786987, 0.8659999966621399, 0.8673333525657654, 0.8673333525657654, 0.8713333606719971, 0.8703333139419556, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8730000257492065, 0.871999979019165, 0.874666690826416, 0.875333309173584, 0.874666690826416, 0.875, 0.8786666393280029, 0.8776666522026062, 0.8743333220481873, 0.8723333477973938, 0.8833333253860474, 0.8826666474342346, 0.8790000081062317, 0.8836666941642761, 0.878333330154419, 0.8820000290870667, 0.887666642665863, 0.8820000290870667, 0.8803333044052124, 0.8830000162124634, 0.8846666812896729, 0.8856666684150696]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8688571453094482, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2243826389312744, 1.872206687927246, 1.4020439386367798, 1.1089451313018799, 0.942646861076355, 0.8422914147377014, 0.7670508027076721, 0.7275686264038086, 0.6930763125419617, 0.668015718460083, 0.6336230635643005, 0.6140139698982239, 0.6006709337234497, 0.5821025967597961, 0.5653904676437378, 0.5542377233505249, 0.5396223068237305, 0.5244798064231873, 0.5145756006240845, 0.5026853084564209, 0.4902785122394562, 0.4789845943450928, 0.4709124267101288, 0.4692329168319702, 0.4604799151420593, 0.4567045569419861, 0.4382798671722412, 0.43589165806770325, 0.4330892860889435, 0.4302777647972107, 0.41492870450019836, 0.4100426733493805, 0.41282764077186584, 0.3984296917915344, 0.3943159282207489, 0.38791507482528687, 0.3876056373119354, 0.37714409828186035, 0.3752172291278839, 0.37421825528144836, 0.3622940182685852, 0.3582737147808075, 0.35631439089775085, 0.35235175490379333, 0.34259018301963806, 0.3397255837917328, 0.3389356732368469, 0.3352680504322052, 0.3265877962112427, 0.3224552273750305, 0.31686851382255554, 0.31413304805755615, 0.31262916326522827, 0.30561646819114685, 0.30294519662857056, 0.29841148853302, 0.29324260354042053, 0.292746901512146, 0.2917685806751251, 0.27700552344322205, 0.27655360102653503, 0.27144673466682434, 0.27224335074424744, 0.2627567946910858, 0.25915077328681946, 0.26081159710884094, 0.2669348418712616, 0.25606948137283325, 0.25513458251953125, 0.24167943000793457], "accuracy": [0.27724209427833557, 0.4896314740180969, 0.5655791759490967, 0.6152423620223999, 0.6688680648803711, 0.695813000202179, 0.7290979027748108, 0.7386078238487244, 0.7540615797042847, 0.759609043598175, 0.7751948237419128, 0.7825914621353149, 0.7872143983840942, 0.7931581139564514, 0.8018755912780762, 0.8033285140991211, 0.8121780753135681, 0.8144234418869019, 0.817461371421814, 0.8245938420295715, 0.8286884427070618, 0.835160493850708, 0.8329150676727295, 0.8397833704948425, 0.8426892161369324, 0.8392550349235535, 0.8466516733169556, 0.8481045961380005, 0.8524633646011353, 0.852331280708313, 0.8574824929237366, 0.8578787446022034, 0.8558974862098694, 0.8650112152099609, 0.8644828796386719, 0.8619733452796936, 0.8669924736022949, 0.8712190985679626, 0.8660678863525391, 0.8691058158874512, 0.8696341514587402, 0.8751816153526306, 0.8755778670310974, 0.8762382864952087, 0.8779553771018982, 0.8809932470321655, 0.8804649114608765, 0.8845595121383667, 0.8879936337471008, 0.8865407705307007, 0.8910315632820129, 0.8894465565681458, 0.8948619961738586, 0.895918607711792, 0.8932769894599915, 0.896446943283081, 0.893541157245636, 0.9000132083892822, 0.8968431949615479, 0.9009377956390381, 0.9029190540313721, 0.9026548862457275, 0.9017302989959717, 0.9083344340324402, 0.9055606722831726, 0.9080702662467957, 0.9070135951042175, 0.9095231890678406, 0.9108440279960632, 0.9111081957817078], "val_loss": [2.0423455238342285, 1.5295342206954956, 1.0708719491958618, 0.861829936504364, 0.7674304246902466, 0.7107690572738647, 0.6634515523910522, 0.629119873046875, 0.6067852973937988, 0.5826921463012695, 0.5606903433799744, 0.5481531023979187, 0.5344982147216797, 0.518099308013916, 0.5109434127807617, 0.5012428164482117, 0.4865095317363739, 0.4822278916835785, 0.47045519948005676, 0.4632413387298584, 0.45794931054115295, 0.4518755376338959, 0.4459349513053894, 0.44202426075935364, 0.43540850281715393, 0.4311768412590027, 0.42969775199890137, 0.42173701524734497, 0.4223933815956116, 0.41322022676467896, 0.40867123007774353, 0.4102306663990021, 0.40395742654800415, 0.41127848625183105, 0.3952667713165283, 0.3979359567165375, 0.39262959361076355, 0.39106452465057373, 0.3893262445926666, 0.38561880588531494, 0.38181546330451965, 0.37995752692222595, 0.37761327624320984, 0.37798190116882324, 0.37239545583724976, 0.3756335377693176, 0.37122291326522827, 0.36904606223106384, 0.36936891078948975, 0.3684692084789276, 0.3620770573616028, 0.36207112669944763, 0.367190957069397, 0.36281460523605347, 0.36331552267074585, 0.36109378933906555, 0.3561875820159912, 0.3567294776439667, 0.35468789935112, 0.3556285500526428, 0.35048550367355347, 0.35788509249687195, 0.3565746247768402, 0.3509331941604614, 0.3543575704097748, 0.3532320261001587, 0.352385550737381, 0.35098040103912354, 0.3568343222141266, 0.34912246465682983], "val_accuracy": [0.5316666960716248, 0.6473333239555359, 0.6656666398048401, 0.6890000104904175, 0.7160000205039978, 0.7333333492279053, 0.7403333187103271, 0.7616666555404663, 0.765333354473114, 0.7823333144187927, 0.7883333563804626, 0.793666660785675, 0.7993333339691162, 0.8036666512489319, 0.8086666464805603, 0.8119999766349792, 0.8243333101272583, 0.8259999752044678, 0.8270000219345093, 0.8333333134651184, 0.8309999704360962, 0.8393333554267883, 0.8349999785423279, 0.8403333425521851, 0.8330000042915344, 0.8413333296775818, 0.8426666855812073, 0.8483333587646484, 0.8420000076293945, 0.8489999771118164, 0.8456666469573975, 0.8513333201408386, 0.8493333458900452, 0.8519999980926514, 0.8526666760444641, 0.8529999852180481, 0.8519999980926514, 0.8560000061988831, 0.8586666584014893, 0.8566666841506958, 0.8566666841506958, 0.8583333492279053, 0.8573333621025085, 0.8613333106040955, 0.8629999756813049, 0.8613333106040955, 0.8633333444595337, 0.8640000224113464, 0.8640000224113464, 0.8659999966621399, 0.8656666874885559, 0.8653333187103271, 0.8650000095367432, 0.8633333444595337, 0.8700000047683716, 0.8653333187103271, 0.8666666746139526, 0.8666666746139526, 0.8669999837875366, 0.8713333606719971, 0.871666669845581, 0.8700000047683716, 0.8690000176429749, 0.8700000047683716, 0.871999979019165, 0.8673333525657654, 0.8666666746139526, 0.871666669845581, 0.8709999918937683, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 2, 0, 1, 3, 5, 3, 3, 3, 3, 6, 5, 8, 5], [0, 1, 0, 2, 3, 3, 0, 0, 0], [39, 39, 33, 40, 4], [0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [9, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1, 0, 1], [6, 8], [0, 6], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 3, 2, 8, 1, 4, 9, 4, 2, 8, 8], [0, 4, 0, 1, 0, 0, 3, 1, 2, 4], [16, 99, 96, 99, 61, 86]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 14, 9, 5, 1, 1, 0, 1, 4, 2, 2, 1, 20, 12, 8, 5], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.square(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), grad)), tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.square(tf.math.sqrt(tf.math.square(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(alpha, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), sigma), tf.math.sqrt(tf.math.sqrt(alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 1, 3, 5, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 4, 2], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 2, 2, 1, 1, 1, 13, 7, 6, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))))), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1482310528.0, 28459982848.0, 132476264448.0, 367880110080.0, 789697527808.0, 1452900220928.0], "accuracy": [0.10117553919553757, 0.10130762308835983, 0.09972262382507324, 0.10328886657953262, 0.10289261490106583, 0.09813763201236725], "val_loss": [6847860736.0, 54776324096.0, 184862490624.0, 438186082304.0, 855816732672.0, 1478872268800.0], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 4, 0, 0], [1, 1, 0, 2], [39, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 5, 5], [0, 2, 0, 3], [12, 16], [0, 1], [0], [0], [69], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 4, 0, 3, 3, 2, 0], [16, 99, 96, 99, 61, 70]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 1, 0, 1, 1, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.pow(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3030149936676025, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 0, 3, 0, 1], [0, 1, 2, 2], [39, 77], [0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 1, 1], [8, 4], [0, 1], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0], [6, 3, 3, 6, 2, 1, 4, 1, 4, 2, 8, 7, 4, 1, 2, 3, 8, 6, 0, 9], [0, 0, 0, 3, 0, 0, 3, 2, 2, 0, 7, 4, 0, 0, 7, 4], [16, 99, 96, 99, 61, 34, 69, 49, 18]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 2, 1, 1, 6, 3, 3, 2, 4, 2, 2, 1, 36, 20, 16, 9], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, beta)))), tf.math.pow(tf.math.add(tf.math.sqrt(beta), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.pow(grad, grad), tf.math.subtract(tf.math.add(tf.math.multiply(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), grad), tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.negative(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}]