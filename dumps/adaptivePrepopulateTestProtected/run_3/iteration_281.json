[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8622857332229614, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2236037254333496, 1.8623403310775757, 1.382888674736023, 1.0812708139419556, 0.9230926036834717, 0.835037887096405, 0.7617000937461853, 0.70888352394104, 0.6771342158317566, 0.6462311744689941, 0.6205004453659058, 0.5997464656829834, 0.5774868130683899, 0.5676079988479614, 0.5507988929748535, 0.5382093787193298, 0.5166857838630676, 0.5026654601097107, 0.4959096908569336, 0.48508647084236145, 0.47109562158584595, 0.45777803659439087, 0.4577903747558594, 0.4493216574192047, 0.4357164800167084, 0.43087902665138245, 0.4264056086540222, 0.41478949785232544, 0.40913838148117065, 0.40457406640052795, 0.3962855935096741, 0.39037376642227173, 0.3821249306201935, 0.3792065978050232, 0.37139371037483215, 0.37726765871047974, 0.37111976742744446, 0.3604672849178314, 0.35556986927986145, 0.34852439165115356, 0.3447881042957306, 0.33947116136550903, 0.34103816747665405, 0.3336639702320099, 0.3254169225692749, 0.32019737362861633, 0.31733232736587524, 0.30757617950439453, 0.30383649468421936, 0.3052320182323456, 0.29858317971229553, 0.29652974009513855, 0.2933257222175598, 0.2894607484340668, 0.2852296829223633, 0.28339195251464844, 0.28046733140945435, 0.2751810550689697, 0.27220767736434937, 0.2593636214733124, 0.2633384168148041, 0.25937461853027344, 0.25656089186668396, 0.2513503134250641, 0.24800238013267517, 0.24606852233409882, 0.24503012001514435, 0.23909728229045868, 0.23891681432724, 0.2336820513010025, 0.2283981889486313], "accuracy": [0.27922335267066956, 0.5003302097320557, 0.5711266398429871, 0.6254127621650696, 0.6622639298439026, 0.6997754573822021, 0.7231541275978088, 0.7392682433128357, 0.7519482374191284, 0.7642319202423096, 0.7693831920623779, 0.7821952104568481, 0.793422281742096, 0.7930260300636292, 0.793422281742096, 0.8013472557067871, 0.8145555257797241, 0.8203672170639038, 0.8202351331710815, 0.8239334225654602, 0.8280280232429504, 0.835160493850708, 0.8338396549224854, 0.8408400416374207, 0.8455950617790222, 0.8455950617790222, 0.8467837572097778, 0.8494254350662231, 0.8510104417800903, 0.8544445633888245, 0.8551049828529358, 0.8578787446022034, 0.8621054291725159, 0.8668603897094727, 0.8685774803161621, 0.8634262084960938, 0.8640866279602051, 0.8684453964233398, 0.869502067565918, 0.8751816153526306, 0.8754457831382751, 0.8812574148178101, 0.8776912093162537, 0.8799365758895874, 0.8841632604598999, 0.8837670087814331, 0.885219931602478, 0.8886540532112122, 0.8912957310676575, 0.887597382068634, 0.8885219693183899, 0.8916919827461243, 0.8938053250312805, 0.8975036144256592, 0.8943336606025696, 0.8993527889251709, 0.8952582478523254, 0.8996169567108154, 0.8996169567108154, 0.9041078090667725, 0.9041078090667725, 0.9017302989959717, 0.9062210917472839, 0.9103156924247742, 0.9079381823539734, 0.9091269373893738, 0.9072777628898621, 0.9126931428909302, 0.913089394569397, 0.9141460657119751, 0.9166556596755981], "val_loss": [2.037654161453247, 1.5102053880691528, 1.0392988920211792, 0.8354171514511108, 0.7552100419998169, 0.6977850794792175, 0.652452290058136, 0.6243716478347778, 0.5942052602767944, 0.5762503147125244, 0.5623274445533752, 0.5439620018005371, 0.5292206406593323, 0.5188648104667664, 0.5103350281715393, 0.5013087391853333, 0.49288293719291687, 0.48337307572364807, 0.47689393162727356, 0.4670928120613098, 0.460455983877182, 0.45343974232673645, 0.45009371638298035, 0.4442320466041565, 0.4436047673225403, 0.4396410584449768, 0.43082502484321594, 0.4307069182395935, 0.4334372282028198, 0.4205147325992584, 0.4196641445159912, 0.41426417231559753, 0.41123273968696594, 0.4087631106376648, 0.4175749123096466, 0.4111393988132477, 0.4052044153213501, 0.40042415261268616, 0.3958876132965088, 0.395751416683197, 0.39737439155578613, 0.39210930466651917, 0.39184725284576416, 0.3885077238082886, 0.3919556140899658, 0.38526368141174316, 0.3837653398513794, 0.3841327428817749, 0.3854694962501526, 0.3844802677631378, 0.37971794605255127, 0.3775472044944763, 0.38246119022369385, 0.3794029653072357, 0.37698355317115784, 0.3771543502807617, 0.37165501713752747, 0.3726431429386139, 0.3740541934967041, 0.3694884479045868, 0.3718746304512024, 0.3695320188999176, 0.3632349371910095, 0.3657573163509369, 0.37034741044044495, 0.36656954884529114, 0.36330705881118774, 0.3669069707393646, 0.3702187240123749, 0.3698295056819916, 0.37004849314689636], "val_accuracy": [0.5556666851043701, 0.6690000295639038, 0.687333345413208, 0.7129999995231628, 0.7333333492279053, 0.7516666650772095, 0.7616666555404663, 0.7683333158493042, 0.7760000228881836, 0.7856666445732117, 0.7929999828338623, 0.7996666431427002, 0.8069999814033508, 0.809333324432373, 0.8109999895095825, 0.8196666836738586, 0.8233333230018616, 0.8303333520889282, 0.8316666483879089, 0.8353333473205566, 0.8386666774749756, 0.8416666388511658, 0.8453333377838135, 0.8456666469573975, 0.8410000205039978, 0.843999981880188, 0.8493333458900452, 0.8473333120346069, 0.8460000157356262, 0.8536666631698608, 0.8533333539962769, 0.8556666374206543, 0.8576666712760925, 0.8600000143051147, 0.8539999723434448, 0.8576666712760925, 0.859000027179718, 0.8610000014305115, 0.8613333106040955, 0.8629999756813049, 0.8633333444595337, 0.8606666922569275, 0.8650000095367432, 0.8640000224113464, 0.8616666793823242, 0.8646666407585144, 0.8666666746139526, 0.8673333525657654, 0.8633333444595337, 0.8650000095367432, 0.8673333525657654, 0.8659999966621399, 0.8683333396911621, 0.8659999966621399, 0.8690000176429749, 0.8700000047683716, 0.8696666955947876, 0.8713333606719971, 0.8706666827201843, 0.8703333139419556, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8736666440963745, 0.8706666827201843, 0.8740000128746033, 0.8723333477973938, 0.8736666440963745, 0.8706666827201843, 0.8736666440963745, 0.8676666617393494]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 6, 3], [2, 1, 2, 2], [39, 47], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [2, 2, 8, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 0, 4, 8], [4, 0, 0, 3, 0, 0, 3, 1, 1, 0], [16, 8, 96, 39, 61, 1]], "fitness": -0.3434285819530487, "mapping_values": [1, 2, 1, 1, 0, 7, 4, 3, 2, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.sqrt(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.319993734359741, 2.401111364364624, 2.3058536052703857, 2.3024914264678955, 2.568747043609619, 2.305215358734131], "accuracy": [0.19191652536392212, 0.2413155436515808, 0.09734513610601425, 0.10315678268671036, 0.16140536963939667, 0.1022322028875351], "val_loss": [2.1980156898498535, 2.3078269958496094, 2.3028600215911865, 2.2861580848693848, 2.307670831680298, 2.303558349609375], "val_accuracy": [0.33533334732055664, 0.10166666656732559, 0.10166666656732559, 0.1993333399295807, 0.10166666656732559, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 6, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 0, 1], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 4, 1, 0, 4, 1, 4, 2, 8], [0, 0, 0, 4, 2, 0, 3, 1, 3, 0], [16, 30, 96, 99, 58, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 3, 3, 1, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(grad, beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.math.negative(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(beta, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(sigma), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1022322028875351, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 2, 3, 0, 3, 7, 2, 4, 5, 9], [0, 1, 0, 2, 0, 2], [39, 39, 20, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 2, 3, 2, 3, 5, 4, 3, 6], [0, 2, 0, 3, 0, 5, 2, 1], [16, 16, 60], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 2, 6, 5, 1, 8, 0, 2, 3, 8], [0, 0, 2, 1, 5, 5, 2], [99, 59], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 5, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 10, 6, 4, 17, 9, 8, 3, 17, 10, 7, 2, 1, 0, 1, 1], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(grad, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta)), tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.divide_no_nan(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), grad)))), beta), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.divide_no_nan(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.subtract(tf.math.sqrt(beta), alpha))), tf.math.negative(tf.math.add(grad, tf.math.multiply(tf.math.sqrt(grad), beta))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303753137588501, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 6, 0, 3, 5], [2, 3, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1], [2, 3, 3, 6, 8, 1, 2, 1, 4, 5, 8, 9, 8, 6, 5, 8], [0, 0, 0, 3, 0, 0, 3, 1, 3, 0], [16, 99, 96, 99, 2, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(beta), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma)), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), sigma))), alpha), tf.math.square(tf.math.sqrt(sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 1, 2, 1, 1, 1, 25, 16, 9, 6], "tree_depth": 26}]