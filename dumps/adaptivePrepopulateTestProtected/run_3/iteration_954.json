[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8862857222557068, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222418785095215, 1.8632627725601196, 1.3950724601745605, 1.0979150533676147, 0.9474178552627563, 0.8543937802314758, 0.7783248424530029, 0.7376496195793152, 0.7006842494010925, 0.6746688485145569, 0.647553563117981, 0.6295329928398132, 0.6112891435623169, 0.58865886926651, 0.5667527914047241, 0.5575993657112122, 0.5467248558998108, 0.5289703011512756, 0.5205997824668884, 0.5110849142074585, 0.5064045786857605, 0.4867391884326935, 0.4731372892856598, 0.47443822026252747, 0.46410614252090454, 0.4545186161994934, 0.445819616317749, 0.4367676079273224, 0.4321127235889435, 0.4275900721549988, 0.4177286922931671, 0.40700381994247437, 0.40491974353790283, 0.3923063576221466, 0.38597339391708374, 0.37638187408447266, 0.3749813437461853, 0.3708414137363434, 0.369646281003952, 0.3635149896144867, 0.3594855070114136, 0.3503628671169281, 0.3338625133037567, 0.3396199643611908, 0.33679017424583435, 0.3303111493587494, 0.3275522291660309, 0.3153315782546997, 0.3093845844268799, 0.31660354137420654, 0.313541054725647, 0.3128948211669922, 0.2977619469165802, 0.30230653285980225, 0.298944890499115, 0.28947505354881287, 0.2822195291519165, 0.2778712213039398, 0.2668195366859436, 0.26853811740875244, 0.26283398270606995, 0.2662760019302368, 0.2576100528240204, 0.25102800130844116, 0.2539205849170685, 0.25087955594062805, 0.24508193135261536], "accuracy": [0.280940443277359, 0.48685774207115173, 0.5665037631988525, 0.616299033164978, 0.6625280380249023, 0.6930392384529114, 0.7169462442398071, 0.7320036888122559, 0.7375511527061462, 0.7491744756698608, 0.7672698497772217, 0.7670056819915771, 0.7745344042778015, 0.7876105904579163, 0.7906485199928284, 0.7994980812072754, 0.802800178527832, 0.8068947196006775, 0.8117818236351013, 0.8153480291366577, 0.8181217908859253, 0.829216718673706, 0.8300092220306396, 0.8238013386726379, 0.8325188159942627, 0.8385946154594421, 0.8372738361358643, 0.842028796672821, 0.8451988101005554, 0.8481045961380005, 0.8515387773513794, 0.8549728989601135, 0.8516708612442017, 0.8603883385658264, 0.8598600029945374, 0.8667283058166504, 0.8636903762817383, 0.8636903762817383, 0.8677849769592285, 0.8704266548156738, 0.8758420348167419, 0.8739928603172302, 0.8790120482444763, 0.8768987059593201, 0.8751816153526306, 0.8794082403182983, 0.8813894987106323, 0.8860124349594116, 0.8874653577804565, 0.8856161832809448, 0.8838990926742554, 0.8877294659614563, 0.8918240666389465, 0.8918240666389465, 0.8922203183174133, 0.8953903317451477, 0.89552241563797, 0.9002773761749268, 0.9049002528190613, 0.9034473896026611, 0.9035794734954834, 0.9038436412811279, 0.9085986018180847, 0.9095231890678406, 0.9095231890678406, 0.909259021282196, 0.910711944103241], "val_loss": [2.0414316654205322, 1.5168657302856445, 1.0494927167892456, 0.8396123051643372, 0.7532041668891907, 0.6975494027137756, 0.6532282829284668, 0.6188269853591919, 0.5909113883972168, 0.5747429728507996, 0.5562715530395508, 0.5392115712165833, 0.5226473808288574, 0.5080817937850952, 0.49551260471343994, 0.4949219524860382, 0.48097461462020874, 0.46894019842147827, 0.4645398259162903, 0.4554585814476013, 0.44845467805862427, 0.44272810220718384, 0.4365209937095642, 0.4303407371044159, 0.42757970094680786, 0.42137086391448975, 0.4158954322338104, 0.4094981253147125, 0.40614867210388184, 0.40746310353279114, 0.39686036109924316, 0.39440515637397766, 0.39069101214408875, 0.3898474872112274, 0.3889416456222534, 0.3833497166633606, 0.387736976146698, 0.3792175352573395, 0.3778442442417145, 0.37528878450393677, 0.3729557991027832, 0.37016138434410095, 0.36690768599510193, 0.36455467343330383, 0.36386409401893616, 0.3628668487071991, 0.365796834230423, 0.36076274514198303, 0.3599783480167389, 0.35867130756378174, 0.35705167055130005, 0.35411083698272705, 0.3552299737930298, 0.3651564121246338, 0.36276260018348694, 0.34837988018989563, 0.34821584820747375, 0.3528410792350769, 0.3496720790863037, 0.3506317138671875, 0.34951722621917725, 0.3443804085254669, 0.345913290977478, 0.3461855351924896, 0.3431210517883301, 0.348863810300827, 0.3426092565059662], "val_accuracy": [0.5373333096504211, 0.6570000052452087, 0.6759999990463257, 0.7110000252723694, 0.7286666631698608, 0.7419999837875366, 0.7590000033378601, 0.7616666555404663, 0.7836666703224182, 0.7903333306312561, 0.7886666655540466, 0.8006666898727417, 0.809333324432373, 0.8183333277702332, 0.8146666884422302, 0.8140000104904175, 0.8233333230018616, 0.8289999961853027, 0.8326666951179504, 0.8363333344459534, 0.8389999866485596, 0.8366666436195374, 0.8363333344459534, 0.8489999771118164, 0.847000002861023, 0.8519999980926514, 0.8533333539962769, 0.8560000061988831, 0.8573333621025085, 0.8539999723434448, 0.8619999885559082, 0.862666666507721, 0.8656666874885559, 0.8629999756813049, 0.8646666407585144, 0.8636666536331177, 0.8603333234786987, 0.8659999966621399, 0.8673333525657654, 0.8673333525657654, 0.8713333606719971, 0.8703333139419556, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8730000257492065, 0.871999979019165, 0.874666690826416, 0.875333309173584, 0.874666690826416, 0.875, 0.8786666393280029, 0.8776666522026062, 0.8743333220481873, 0.8723333477973938, 0.8833333253860474, 0.8826666474342346, 0.8790000081062317, 0.8836666941642761, 0.878333330154419, 0.8820000290870667, 0.887666642665863, 0.8820000290870667, 0.8803333044052124, 0.8830000162124634, 0.8846666812896729, 0.8856666684150696]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8560000061988831, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2225191593170166, 1.86201810836792, 1.392190933227539, 1.0886017084121704, 0.9358825087547302, 0.8325604796409607, 0.7695373892784119, 0.7244126796722412, 0.690304160118103, 0.6596124768257141, 0.635628879070282, 0.6090219020843506, 0.5892308950424194, 0.5770915150642395, 0.5731465220451355, 0.5479556918144226, 0.5464615225791931, 0.5245234370231628, 0.5178951025009155, 0.501704216003418, 0.49570971727371216, 0.4806233048439026, 0.48074033856391907, 0.4728861153125763, 0.46534502506256104, 0.4541080892086029, 0.4460221529006958, 0.43538346886634827, 0.4321252107620239, 0.4268535077571869, 0.41322535276412964, 0.4127102494239807, 0.4061124324798584, 0.3997168242931366, 0.3991306722164154, 0.3882097899913788, 0.37947800755500793, 0.37988945841789246, 0.37295249104499817, 0.36646971106529236, 0.3628523051738739, 0.3557957410812378, 0.35004258155822754, 0.3514050841331482, 0.34910279512405396, 0.34454914927482605, 0.34099987149238586, 0.33118364214897156, 0.32842159271240234, 0.3217143416404724, 0.3143059313297272, 0.3128642141819, 0.30885249376296997, 0.30862152576446533, 0.2968541979789734, 0.2997381091117859, 0.2927027642726898, 0.295486181974411, 0.2858056128025055, 0.2843206822872162, 0.2778626084327698, 0.28004494309425354, 0.2728130519390106, 0.26659756898880005, 0.26719969511032104, 0.25892865657806396, 0.254281610250473, 0.25231266021728516], "accuracy": [0.2561088502407074, 0.49068814516067505, 0.5606921315193176, 0.618280291557312, 0.6701889038085938, 0.7009642124176025, 0.7231541275978088, 0.7346453666687012, 0.7495707273483276, 0.7568352818489075, 0.7724210619926453, 0.7744023203849792, 0.7843085527420044, 0.7882710099220276, 0.7881389260292053, 0.7996301651000977, 0.7987055778503418, 0.8055738806724548, 0.8146876096725464, 0.8206313848495483, 0.8189142942428589, 0.8277638554573059, 0.8248580098152161, 0.8305375576019287, 0.8309338092803955, 0.8359529972076416, 0.8397833704948425, 0.8429533839225769, 0.8441421389579773, 0.8455950617790222, 0.8544445633888245, 0.8485008478164673, 0.8539162874221802, 0.8580108284950256, 0.8540483713150024, 0.8601241707801819, 0.8647470474243164, 0.8667283058166504, 0.8638224601745605, 0.8672566413879395, 0.8652753829956055, 0.8716153502464294, 0.8746532797813416, 0.8717474341392517, 0.874389111995697, 0.878351628780365, 0.8758420348167419, 0.8739928603172302, 0.8787478804588318, 0.885219931602478, 0.8861445188522339, 0.8854840993881226, 0.8861445188522339, 0.884691596031189, 0.889578640460968, 0.8916919827461243, 0.8938053250312805, 0.8923524022102356, 0.8976356983184814, 0.896446943283081, 0.897899866104126, 0.8960506916046143, 0.8977677822113037, 0.9027869701385498, 0.9000132083892822, 0.9037115573883057, 0.9066173434257507, 0.9122969508171082], "val_loss": [2.0393528938293457, 1.510623812675476, 1.0511155128479004, 0.8477035164833069, 0.7671213150024414, 0.7011778950691223, 0.666167140007019, 0.6290053725242615, 0.6061387658119202, 0.5853266716003418, 0.5638377070426941, 0.5497820377349854, 0.5341386198997498, 0.5347727537155151, 0.5146334171295166, 0.5039451718330383, 0.4957537353038788, 0.48759159445762634, 0.4786826968193054, 0.4720380902290344, 0.4635092318058014, 0.45421403646469116, 0.4534844160079956, 0.4454995393753052, 0.4428063929080963, 0.437752366065979, 0.43193531036376953, 0.4304371476173401, 0.428802490234375, 0.42108845710754395, 0.4189988076686859, 0.4160742461681366, 0.4131738245487213, 0.4121370017528534, 0.4048806130886078, 0.40294763445854187, 0.40300101041793823, 0.39565780758857727, 0.3974934220314026, 0.395260214805603, 0.39470788836479187, 0.3895473778247833, 0.3879939019680023, 0.3838241398334503, 0.39183923602104187, 0.3846372365951538, 0.3806118071079254, 0.37811973690986633, 0.37869641184806824, 0.38420572876930237, 0.37456217408180237, 0.3814959228038788, 0.3740769326686859, 0.3776240944862366, 0.3770194351673126, 0.37231576442718506, 0.37271618843078613, 0.36951348185539246, 0.3674156963825226, 0.3680039346218109, 0.3637217581272125, 0.36815592646598816, 0.3663884997367859, 0.36248257756233215, 0.3627619743347168, 0.3595464825630188, 0.35936033725738525, 0.36124858260154724], "val_accuracy": [0.5249999761581421, 0.6476666927337646, 0.6736666560173035, 0.7023333311080933, 0.7206666469573975, 0.7413333058357239, 0.7536666393280029, 0.762666642665863, 0.7756666541099548, 0.7829999923706055, 0.7913333177566528, 0.8019999861717224, 0.8066666722297668, 0.8003333210945129, 0.8146666884422302, 0.8183333277702332, 0.8206666707992554, 0.8216666579246521, 0.8320000171661377, 0.8320000171661377, 0.8356666564941406, 0.8410000205039978, 0.8399999737739563, 0.8399999737739563, 0.8429999947547913, 0.8463333249092102, 0.8460000157356262, 0.8473333120346069, 0.8476666808128357, 0.8523333072662354, 0.8519999980926514, 0.8523333072662354, 0.8539999723434448, 0.8506666421890259, 0.8536666631698608, 0.8550000190734863, 0.8573333621025085, 0.859333336353302, 0.859333336353302, 0.8610000014305115, 0.856333315372467, 0.8656666874885559, 0.8650000095367432, 0.8656666874885559, 0.8633333444595337, 0.8669999837875366, 0.8643333315849304, 0.8646666407585144, 0.8673333525657654, 0.8659999966621399, 0.8653333187103271, 0.8669999837875366, 0.8693333268165588, 0.8643333315849304, 0.862666666507721, 0.8686666488647461, 0.8696666955947876, 0.8686666488647461, 0.8700000047683716, 0.8696666955947876, 0.8706666827201843, 0.8736666440963745, 0.8766666650772095, 0.8723333477973938, 0.8740000128746033, 0.8723333477973938, 0.875333309173584, 0.8740000128746033]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [8, 2, 3, 0, 3], [0, 1, 0, 2], [39, 93], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0], [0, 2, 3, 2, 3, 8, 6, 1, 7, 7, 9, 3, 6, 0, 9, 7, 4, 7, 0, 5, 9], [0, 2, 0, 3, 0, 5, 4, 4, 5, 4, 0], [16, 16, 77, 23, 20, 31, 30], [0, 0, 1, 1], [0, 7], [4, 4], [86], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 5, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 1, 3, 1, 2, 0], [16, 99, 52, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 32, 21, 11, 7, 4, 2, 2, 0, 17, 9, 8, 4], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(beta)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.divide_no_nan(tf.math.subtract(tf.math.add(tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.math.divide_no_nan(grad, tf.math.negative(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.pow(grad, tf.math.add(grad, grad)), tf.math.negative(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), tf.math.square(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(grad, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(alpha, sigma))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 2, 3, 1, 3, 0, 5, 3, 9], [0, 1, 0, 2, 3, 3, 1], [39, 39, 36], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [59, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [4, 3, 3, 6, 4, 1, 4, 1, 4, 2, 1], [0, 0, 1, 3, 0, 0, 3, 1, 2, 0], [16, 99, 33, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 11, 7, 3, 6, 3, 3, 1, 2, 1, 1, 1, 17, 8, 9, 4], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(tf.math.square(grad)), tf.math.multiply(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), grad))))), grad), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), beta), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.math.subtract(sigma, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 5, 3, 0, 3, 5, 0], [1, 2, 0, 3], [16, 16], [0, 1], [8], [0], [99], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 3], [16, 99, 96, 99, 61, 98]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 10, 7, 3, 1, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.math.negative(alpha), tf.math.multiply(tf.math.square(beta), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), sigma))))", "other_info": {"loss": [2.326150894165039, 2.4422924518585205, 2.614699125289917, 2.8020741939544678, 2.9852805137634277, 3.1015677452087402], "accuracy": [0.09906221181154251, 0.10091137140989304, 0.10117553919553757, 0.10210011899471283, 0.09919429570436478, 0.09879804402589798], "val_loss": [2.3328797817230225, 2.4084153175354004, 2.5078389644622803, 2.6073901653289795, 2.693434476852417, 2.76182222366333], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 2, 3], [0, 2, 0, 2, 3], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 6], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [5], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [4, 3, 0, 3, 0, 0, 3, 4, 2, 0], [16, 99, 96, 23, 92, 1]], "fitness": -0.09514285624027252, "mapping_values": [1, 10, 5, 5, 2, 9, 5, 4, 2, 2, 1, 1, 1, 16, 8, 8, 3], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, sigma), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, grad)))", "other_info": {"loss": [2.3093924522399902, 2.3098669052124023, 2.311002731323242, 2.310091495513916, 2.3104846477508545, 2.3104753494262695], "accuracy": [0.09034473448991776, 0.09655263274908066, 0.08994849026203156, 0.08717474341392517, 0.09206181764602661, 0.09166556596755981], "val_loss": [2.3094489574432373, 2.3095357418060303, 2.3096766471862793, 2.309871196746826, 2.310124397277832, 2.3104357719421387], "val_accuracy": [0.08866667002439499, 0.08866667002439499, 0.08866667002439499, 0.08799999952316284, 0.08766666799783707, 0.08766666799783707]}}]