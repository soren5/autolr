[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8437142968177795, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2213566303253174, 1.8633570671081543, 1.3838649988174438, 1.1002329587936401, 0.9458864331245422, 0.8640017509460449, 0.7887668013572693, 0.7424435019493103, 0.710058331489563, 0.6815329194068909, 0.6516351699829102, 0.6198057532310486, 0.6072626113891602, 0.5811691284179688, 0.5753867030143738, 0.5614283084869385, 0.5425310134887695, 0.5237288475036621, 0.5139646530151367, 0.5040082931518555, 0.4986524283885956, 0.4888848662376404, 0.4796496033668518, 0.4709194004535675, 0.45552858710289, 0.454017698764801, 0.44874221086502075, 0.43379509449005127, 0.4347427785396576, 0.42028722167015076, 0.42284712195396423, 0.40537819266319275, 0.3994060456752777, 0.39386385679244995, 0.3856140375137329, 0.3883318603038788, 0.37520214915275574, 0.36699211597442627, 0.3656858503818512, 0.3592971861362457, 0.3520750403404236, 0.3443644046783447, 0.34525933861732483, 0.3435722589492798, 0.33661630749702454, 0.33073756098747253], "accuracy": [0.28780874609947205, 0.5004622936248779, 0.5661075115203857, 0.6153744459152222, 0.6690001487731934, 0.6901333928108215, 0.7197200059890747, 0.7341170310974121, 0.7471932172775269, 0.7543256878852844, 0.7644960880279541, 0.7750627398490906, 0.778761088848114, 0.7878747582435608, 0.7950072884559631, 0.7957997918128967, 0.8053097128868103, 0.8067626357078552, 0.8161405324935913, 0.8175934553146362, 0.8203672170639038, 0.8278959393501282, 0.8327829837799072, 0.8342359066009521, 0.8391229510307312, 0.8425571322441101, 0.8400475382804871, 0.8459912538528442, 0.8448025584220886, 0.8504821062088013, 0.8482366800308228, 0.8585391640663147, 0.859199583530426, 0.8598600029945374, 0.8648791313171387, 0.8576145768165588, 0.8706908226013184, 0.868049144744873, 0.8684453964233398, 0.8722757697105408, 0.8755778670310974, 0.8754457831382751, 0.8766345381736755, 0.8776912093162537, 0.8768987059593201, 0.8799365758895874], "val_loss": [2.0380773544311523, 1.5038304328918457, 1.0296603441238403, 0.8260644674301147, 0.7377437353134155, 0.687041163444519, 0.6401621699333191, 0.613800048828125, 0.5814844369888306, 0.5626594424247742, 0.5387318730354309, 0.5227091312408447, 0.5109890699386597, 0.49759355187416077, 0.4864833652973175, 0.4755336046218872, 0.46992725133895874, 0.4587371349334717, 0.44869980216026306, 0.4462829530239105, 0.4387313723564148, 0.43072038888931274, 0.4282453656196594, 0.41760173439979553, 0.41411247849464417, 0.4091302454471588, 0.4066992998123169, 0.3981190621852875, 0.39611825346946716, 0.39388325810432434, 0.3924770951271057, 0.3861979842185974, 0.38486093282699585, 0.38122794032096863, 0.38145264983177185, 0.3758717179298401, 0.3758374750614166, 0.378440260887146, 0.37198954820632935, 0.36615535616874695, 0.3651840090751648, 0.36363324522972107, 0.35936638712882996, 0.3577609956264496, 0.36261066794395447, 0.36159440875053406], "val_accuracy": [0.5233333110809326, 0.6603333353996277, 0.6816666722297668, 0.6990000009536743, 0.7356666922569275, 0.7573333382606506, 0.762333333492279, 0.7743333578109741, 0.7826666831970215, 0.7979999780654907, 0.8050000071525574, 0.809333324432373, 0.8153333067893982, 0.8243333101272583, 0.8236666917800903, 0.8293333053588867, 0.8309999704360962, 0.8349999785423279, 0.8393333554267883, 0.8373333215713501, 0.8393333554267883, 0.8423333168029785, 0.847000002861023, 0.846666693687439, 0.8493333458900452, 0.8476666808128357, 0.847000002861023, 0.8510000109672546, 0.8550000190734863, 0.8573333621025085, 0.859666645526886, 0.8566666841506958, 0.859333336353302, 0.859666645526886, 0.8576666712760925, 0.8663333058357239, 0.8636666536331177, 0.8619999885559082, 0.8610000014305115, 0.8659999966621399, 0.8686666488647461, 0.8669999837875366, 0.8656666874885559, 0.8669999837875366, 0.8659999966621399, 0.8676666617393494]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 2, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0], [0, 2, 0, 8, 3, 5], [0, 2, 0, 3], [16, 8], [0, 1], [0], [0], [38], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 9, 8, 1, 8, 1, 4, 2, 8], [4, 0, 0, 3, 0, 0, 3, 1, 3, 0], [58, 99, 96, 99, 61, 1]], "fitness": -0.35685715079307556, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), grad), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(grad, tf.math.multiply(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [2.400895833969116, 2.234389305114746, 2.2664732933044434, 2.304150342941284, 2.299938917160034, 2.580824375152588, 2.305253744125366], "accuracy": [0.19984149932861328, 0.1554616242647171, 0.16919825971126556, 0.09893012791872025, 0.11795007437467575, 0.15295206010341644, 0.09826971590518951], "val_loss": [2.2948145866394043, 2.0275678634643555, 2.304600477218628, 2.302814483642578, 2.263918399810791, 2.306800365447998, 2.303147077560425], "val_accuracy": [0.10100000351667404, 0.3636666536331177, 0.10300000011920929, 0.09666666388511658, 0.20633333921432495, 0.10066666454076767, 0.10066666454076767]}, "mapping_values": [1, 9, 5, 4, 0, 6, 4, 2, 1, 2, 1, 1, 1, 8, 5, 3, 3], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [6, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 3, 9, 0, 3, 5], [0, 2, 3, 1], [16, 16], [0, 1], [0], [1], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 4, 3, 2, 3, 1, 2, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 3, 0, 2], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha)), tf.math.add(tf.math.sqrt(sigma), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}, "mapping_values": [1, 9, 5, 4, 2, 5, 4, 1, 2, 2, 1, 1, 0, 22, 11, 11, 6], "tree_depth": 18}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 2, 3, 0, 3, 5], [0, 2, 0, 3], [54, 64], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [6, 9, 3, 6, 8, 1, 4, 1, 4, 2, 6], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 8, 4, 4, 2, 2, 1, 1, 1, 8, 5, 3, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [2.3035898208618164, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10499999672174454, 0.10499999672174454, 0.10499999672174454, 0.10499999672174454, 0.10499999672174454, 0.10499999672174454]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [1, 2, 3, 0, 3, 7], [0, 2, 0, 1, 3, 2], [39, 39], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 5, 0, 9], [0, 2, 1, 3], [16, 40], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [0, 1, 3, 1, 7, 7, 4], [0, 4, 7, 7, 0, 0, 6], [99, 26, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [4, 3, 3, 6, 8, 1, 6, 1, 9, 2, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [86, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 6, 6, 2, 8, 5, 3, 1, 14, 7, 7, 3, 16, 8, 8, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.add(grad, grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.square(tf.math.negative(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), grad), tf.math.add(grad, tf.math.pow(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(grad, tf.math.subtract(sigma, alpha))))", "other_info": {"loss": [2.303908109664917, 2.3027634620666504, 2.3027634620666504, 2.3027634620666504, 2.3027634620666504, 2.3027634620666504], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.302961826324463, 2.302961826324463, 2.302961826324463, 2.302961826324463, 2.302961826324463, 2.302961826324463], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}]