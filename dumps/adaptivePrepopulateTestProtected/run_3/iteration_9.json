[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8734285831451416, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2255282402038574, 1.8721107244491577, 1.4010379314422607, 1.1106735467910767, 0.940341055393219, 0.8359335660934448, 0.7731297612190247, 0.7296580672264099, 0.6895313262939453, 0.6571158170700073, 0.633295476436615, 0.6155224442481995, 0.5889805555343628, 0.5725106596946716, 0.556487500667572, 0.5408687591552734, 0.5278533697128296, 0.5128424763679504, 0.512872576713562, 0.4899774193763733, 0.4817979633808136, 0.47892409563064575, 0.46546685695648193, 0.4566666781902313, 0.451609343290329, 0.43633145093917847, 0.4428727924823761, 0.42452678084373474, 0.42050766944885254, 0.4092382490634918, 0.40380609035491943, 0.39615246653556824, 0.39049798250198364, 0.38757410645484924, 0.37997010350227356, 0.3791789710521698, 0.3691047430038452, 0.36647623777389526, 0.362128347158432, 0.35865068435668945, 0.34899047017097473, 0.34528470039367676, 0.34164324402809143, 0.3404218256473541, 0.329362154006958, 0.32548993825912476, 0.3200454115867615, 0.319357693195343, 0.3098825216293335, 0.3054966330528259], "accuracy": [0.2689208686351776, 0.48368775844573975, 0.5597675442695618, 0.6098269820213318, 0.6647734642028809, 0.7030775547027588, 0.7220974564552307, 0.7411174178123474, 0.7464007139205933, 0.763967752456665, 0.7684586048126221, 0.7718927264213562, 0.7889314293861389, 0.7909126877784729, 0.7968564033508301, 0.8092722296714783, 0.81112140417099, 0.8166688680648804, 0.8145555257797241, 0.8244617581367493, 0.8317263126373291, 0.8261788487434387, 0.8339717388153076, 0.8411042094230652, 0.8413683772087097, 0.8438779711723328, 0.8467837572097778, 0.846387505531311, 0.8527275323867798, 0.8576145768165588, 0.8529917001724243, 0.8617091774940491, 0.8622375130653381, 0.8621054291725159, 0.8650112152099609, 0.8644828796386719, 0.8721436858177185, 0.8687095642089844, 0.8734645247459412, 0.8747853636741638, 0.8800686597824097, 0.8786157965660095, 0.882710337638855, 0.8792761564254761, 0.8811253309249878, 0.885219931602478, 0.8856161832809448, 0.886672854423523, 0.886672854423523, 0.8899748921394348], "val_loss": [2.046873092651367, 1.5288923978805542, 1.0626829862594604, 0.856019914150238, 0.7606016993522644, 0.7008227705955505, 0.6582002639770508, 0.6210333704948425, 0.5941072702407837, 0.5707116723060608, 0.5571823120117188, 0.5361080169677734, 0.5217938423156738, 0.5068894624710083, 0.49441617727279663, 0.4871320128440857, 0.47810932993888855, 0.47213321924209595, 0.4643647372722626, 0.4517059624195099, 0.4470732808113098, 0.44019225239753723, 0.4363744854927063, 0.43239396810531616, 0.42653128504753113, 0.4212285280227661, 0.41591763496398926, 0.4089317321777344, 0.40691429376602173, 0.4042397439479828, 0.39867520332336426, 0.4001860022544861, 0.38896405696868896, 0.3901083469390869, 0.3860934376716614, 0.38403454422950745, 0.3824399709701538, 0.3795788884162903, 0.37650981545448303, 0.37731820344924927, 0.3719942271709442, 0.37503206729888916, 0.3734400272369385, 0.3695981800556183, 0.3660171627998352, 0.36835432052612305, 0.3619896173477173, 0.36234453320503235, 0.36134591698646545, 0.3571830987930298], "val_accuracy": [0.5239999890327454, 0.6553333401679993, 0.6856666803359985, 0.7023333311080933, 0.7279999852180481, 0.7490000128746033, 0.762333333492279, 0.7716666460037231, 0.7816666960716248, 0.7889999747276306, 0.7993333339691162, 0.8040000200271606, 0.8073333501815796, 0.8183333277702332, 0.8243333101272583, 0.8226666450500488, 0.8220000267028809, 0.8273333311080933, 0.8326666951179504, 0.8353333473205566, 0.8360000252723694, 0.8389999866485596, 0.8379999995231628, 0.8420000076293945, 0.8403333425521851, 0.8489999771118164, 0.8493333458900452, 0.8483333587646484, 0.8500000238418579, 0.8503333330154419, 0.8543333411216736, 0.8493333458900452, 0.8546666502952576, 0.8550000190734863, 0.8579999804496765, 0.8566666841506958, 0.8576666712760925, 0.8606666922569275, 0.8603333234786987, 0.8576666712760925, 0.862666666507721, 0.8583333492279053, 0.8616666793823242, 0.8606666922569275, 0.8679999709129333, 0.862333357334137, 0.8650000095367432, 0.8663333058357239, 0.8663333058357239, 0.8663333058357239]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8534285426139832, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2218079566955566, 1.8680607080459595, 1.38483464717865, 1.0833358764648438, 0.9415754675865173, 0.8411039113998413, 0.77890944480896, 0.7273179888725281, 0.6925832629203796, 0.6512832045555115, 0.6319156885147095, 0.6038082242012024, 0.591278612613678, 0.5677143931388855, 0.5514312982559204, 0.5380614399909973, 0.5297014117240906, 0.5156222581863403, 0.5055106282234192, 0.4899056851863861, 0.4731813073158264, 0.4735274910926819, 0.463192880153656, 0.45686858892440796, 0.44631803035736084, 0.43757203221321106, 0.435286283493042, 0.4232824742794037, 0.4231613576412201, 0.40277889370918274, 0.4139237105846405, 0.39772355556488037, 0.39288756251335144, 0.381161093711853, 0.3778291344642639, 0.3721926510334015, 0.36563414335250854, 0.36255377531051636, 0.3565709590911865, 0.34831205010414124, 0.351109117269516, 0.34219682216644287], "accuracy": [0.27644962072372437, 0.49068814516067505, 0.5691454410552979, 0.6259410977363586, 0.6623960137367249, 0.69673752784729, 0.7218332886695862, 0.7337207794189453, 0.746268630027771, 0.7592127919197083, 0.774798572063446, 0.7810064554214478, 0.7861577272415161, 0.7971205711364746, 0.7915731072425842, 0.8100647330284119, 0.8078193068504333, 0.8117818236351013, 0.8210275769233704, 0.8278959393501282, 0.8273676037788391, 0.829216718673706, 0.8356888294219971, 0.8392550349235535, 0.8408400416374207, 0.8378021121025085, 0.8418967127799988, 0.8506141901016235, 0.8482366800308228, 0.8561616539955139, 0.8544445633888245, 0.8580108284950256, 0.8593316674232483, 0.8614450097084045, 0.8664641380310059, 0.8672566413879395, 0.8671245574951172, 0.8673887252807617, 0.8732003569602966, 0.8713511824607849, 0.8765024542808533, 0.8780874609947205], "val_loss": [2.0375378131866455, 1.5112359523773193, 1.0383994579315186, 0.8300395607948303, 0.7437282800674438, 0.6906145811080933, 0.6451369524002075, 0.6073347926139832, 0.5818038582801819, 0.5600465536117554, 0.5399245619773865, 0.5259372591972351, 0.5113710165023804, 0.5001501441001892, 0.49002230167388916, 0.4777986705303192, 0.47379574179649353, 0.457663357257843, 0.45219385623931885, 0.4439590573310852, 0.43782663345336914, 0.43043163418769836, 0.43276941776275635, 0.420431911945343, 0.41212862730026245, 0.40803417563438416, 0.40726086497306824, 0.3968256115913391, 0.3912985026836395, 0.3924274146556854, 0.3853112757205963, 0.37896761298179626, 0.37861430644989014, 0.3808942437171936, 0.37486809492111206, 0.3703021705150604, 0.3649121820926666, 0.364175945520401, 0.3646826446056366, 0.35672175884246826, 0.35736149549484253, 0.3611675500869751], "val_accuracy": [0.5393333435058594, 0.6536666750907898, 0.6913333535194397, 0.7106666564941406, 0.7366666793823242, 0.749666690826416, 0.7566666603088379, 0.7683333158493042, 0.7816666960716248, 0.7953333258628845, 0.8043333292007446, 0.8096666932106018, 0.8149999976158142, 0.8190000057220459, 0.824999988079071, 0.82833331823349, 0.82833331823349, 0.8360000252723694, 0.8343333601951599, 0.8399999737739563, 0.8420000076293945, 0.8426666855812073, 0.8393333554267883, 0.8443333506584167, 0.8433333039283752, 0.8526666760444641, 0.8533333539962769, 0.8616666793823242, 0.8566666841506958, 0.8553333282470703, 0.8636666536331177, 0.862333357334137, 0.8666666746139526, 0.862333357334137, 0.8646666407585144, 0.8656666874885559, 0.8709999918937683, 0.8683333396911621, 0.8669999837875366, 0.8709999918937683, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 8], [1, 1, 0, 0], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 9, 3, 0, 3, 5], [0, 2, 0, 3], [16, 46], [0, 1], [0], [3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [8, 3, 3, 6, 8, 1, 3, 1, 4, 2, 8, 9], [0, 0, 0, 3, 3, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 5, 3, 1, 2, 2, 0, 1, 2, 1, 1, 0, 20, 12, 8, 5], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), alpha), tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(sigma, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))))), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10289261490106583, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 2, 0, 2], [39, 39], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 2, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1], [0], [3], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [6, 8, 3, 3, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 83, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 1, 0, 1, 0, 2, 1, 1, 0, 1, 0, 1, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.30367112159729, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 8, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 4, 3, 1, 3, 5], [0, 2, 0, 3, 2], [16, 41], [0, 1], [0], [0], [99], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 5, 1, 4, 1, 4, 2, 0], [0, 0, 1, 0, 1, 0, 0, 1, 4, 0], [16, 99, 78, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 11, 6, 5, 2, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.square(grad))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3032402992248535, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 9, 3], [0, 1, 2, 2], [7, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [2, 2, 3, 0, 3, 5], [0, 0, 0, 2, 3], [16, 16, 29], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [6, 3, 5, 6, 8, 1, 4, 1, 4, 1, 8], [0, 0, 0, 3, 0, 0, 3, 4, 2, 4], [16, 99, 96, 99, 61, 42]], "fitness": -0.08942857384681702, "mapping_values": [1, 6, 4, 2, 2, 11, 6, 5, 3, 2, 1, 1, 1, 11, 6, 5, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.square(beta))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.310417890548706, 2.310765027999878, 2.309354543685913, 2.311459541320801, 2.3101840019226074, 2.3101894855499268], "accuracy": [0.09060890227556229, 0.09417514503002167, 0.09642054885625839, 0.08585391938686371, 0.09509972482919693, 0.08968432247638702], "val_loss": [2.309252977371216, 2.3092527389526367, 2.309252977371216, 2.3092527389526367, 2.3092527389526367, 2.3092527389526367], "val_accuracy": [0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076]}}]