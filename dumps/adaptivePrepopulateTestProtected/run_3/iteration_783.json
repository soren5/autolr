[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8822857141494751, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585750579834, 1.8655762672424316, 1.394430160522461, 1.0773245096206665, 0.9378393888473511, 0.8425824046134949, 0.7776632308959961, 0.736241340637207, 0.6971188187599182, 0.6732122302055359, 0.644855797290802, 0.6276965141296387, 0.6100340485572815, 0.5899673104286194, 0.5746485590934753, 0.5484329462051392, 0.5425268411636353, 0.5357900857925415, 0.5214410424232483, 0.5127171874046326, 0.4895091950893402, 0.4932740032672882, 0.48551443219184875, 0.47113916277885437, 0.46571049094200134, 0.450914591550827, 0.438728004693985, 0.4414178729057312, 0.4245515465736389, 0.4182806611061096, 0.4126766324043274, 0.41352686285972595, 0.4031256139278412, 0.40064555406570435, 0.3982388377189636, 0.38566267490386963, 0.38400527834892273, 0.3741128146648407, 0.36422181129455566, 0.36170411109924316, 0.35991787910461426, 0.35666367411613464, 0.3521813750267029, 0.34583958983421326, 0.34736087918281555, 0.34181836247444153, 0.33650368452072144, 0.33141741156578064, 0.3230496346950531, 0.3225416839122772, 0.315096914768219, 0.3059031665325165, 0.3058394491672516, 0.3017319440841675, 0.29568877816200256, 0.2933836281299591, 0.28774771094322205, 0.2856961190700531, 0.2802303731441498, 0.2779994010925293, 0.274711549282074, 0.2719985842704773, 0.2586328387260437, 0.2598455548286438, 0.2622571289539337, 0.25739434361457825, 0.2502012252807617, 0.2544722855091095, 0.24556587636470795, 0.24580754339694977, 0.23948103189468384, 0.23949603736400604, 0.23484042286872864, 0.22871272265911102, 0.2256491780281067, 0.22479403018951416, 0.21744707226753235, 0.21390178799629211, 0.21272219717502594], "accuracy": [0.2785629332065582, 0.49451854825019836, 0.559899628162384, 0.6215823292732239, 0.6654338836669922, 0.6950204968452454, 0.7181349992752075, 0.7322678565979004, 0.7441553473472595, 0.7483819723129272, 0.7627789974212646, 0.7717606425285339, 0.7728173136711121, 0.78113853931427, 0.7882710099220276, 0.7993659973144531, 0.7976489067077637, 0.8074230551719666, 0.8128384351730347, 0.8198388814926147, 0.8212917447090149, 0.819970965385437, 0.8272355198860168, 0.8350284099578857, 0.8305375576019287, 0.8387266993522644, 0.846387505531311, 0.8433496356010437, 0.8504821062088013, 0.8524633646011353, 0.8535200357437134, 0.854708731174469, 0.856689989566803, 0.8551049828529358, 0.8593316674232483, 0.8615770936012268, 0.8628978729248047, 0.8702945709228516, 0.8691058158874512, 0.871879518032074, 0.8722757697105408, 0.8691058158874512, 0.8733324408531189, 0.8800686597824097, 0.8795403242111206, 0.8755778670310974, 0.8768987059593201, 0.8829745054244995, 0.8824461698532104, 0.8823140859603882, 0.887201189994812, 0.8897107243537903, 0.8889182209968567, 0.8927486538887024, 0.8902390599250793, 0.8953903317451477, 0.8980319499969482, 0.8976356983184814, 0.900409460067749, 0.89552241563797, 0.9025228023529053, 0.8989565372467041, 0.9056927561759949, 0.9085986018180847, 0.9030511379241943, 0.9066173434257507, 0.9101836085319519, 0.9083344340324402, 0.909259021282196, 0.9099194407463074, 0.9126931428909302, 0.9140139818191528, 0.9119006991386414, 0.9171839952468872, 0.9169198274612427, 0.9185048341751099, 0.9218068718910217, 0.9185048341751099, 0.9196935892105103], "val_loss": [2.033445358276367, 1.5042319297790527, 1.0271512269973755, 0.8147247433662415, 0.7278039455413818, 0.68117356300354, 0.6306353211402893, 0.5966841578483582, 0.5751398801803589, 0.5460951328277588, 0.5314993858337402, 0.509799063205719, 0.4957965612411499, 0.4792602062225342, 0.46671679615974426, 0.45267683267593384, 0.4441072940826416, 0.4356139600276947, 0.42943108081817627, 0.4255247414112091, 0.41811680793762207, 0.4163394272327423, 0.39929893612861633, 0.3969916105270386, 0.39089226722717285, 0.387652188539505, 0.3844633102416992, 0.3824205696582794, 0.3749690353870392, 0.3701930642127991, 0.36967378854751587, 0.36689504981040955, 0.3585263788700104, 0.3587398827075958, 0.36267170310020447, 0.3561091423034668, 0.35379692912101746, 0.3499273955821991, 0.34701839089393616, 0.3467637896537781, 0.3424672484397888, 0.33951225876808167, 0.3386255204677582, 0.34044384956359863, 0.33945050835609436, 0.33684298396110535, 0.3322163224220276, 0.33181649446487427, 0.32827115058898926, 0.3312568664550781, 0.3297465741634369, 0.3256674110889435, 0.3234780728816986, 0.32119208574295044, 0.3232716917991638, 0.3209094703197479, 0.31944912672042847, 0.3157532513141632, 0.3144265413284302, 0.31676045060157776, 0.31425556540489197, 0.3131799101829529, 0.3147056996822357, 0.3154993951320648, 0.31771615147590637, 0.31545644998550415, 0.3127000629901886, 0.31382524967193604, 0.31026333570480347, 0.3147730529308319, 0.30829918384552, 0.3107443153858185, 0.31316936016082764, 0.30297672748565674, 0.30325081944465637, 0.30436232686042786, 0.3072424829006195, 0.30681705474853516, 0.3061434030532837], "val_accuracy": [0.5526666641235352, 0.6666666865348816, 0.687333345413208, 0.7083333134651184, 0.731333315372467, 0.7446666955947876, 0.7606666684150696, 0.762666642665863, 0.7873333096504211, 0.7889999747276306, 0.7973333597183228, 0.8056666851043701, 0.8193333148956299, 0.8259999752044678, 0.8289999961853027, 0.8410000205039978, 0.8453333377838135, 0.8450000286102295, 0.8489999771118164, 0.847000002861023, 0.8516666889190674, 0.856333315372467, 0.859333336353302, 0.856333315372467, 0.8633333444595337, 0.8640000224113464, 0.8656666874885559, 0.8646666407585144, 0.8679999709129333, 0.8696666955947876, 0.8640000224113464, 0.8686666488647461, 0.8713333606719971, 0.8709999918937683, 0.8703333139419556, 0.8723333477973938, 0.871999979019165, 0.874666690826416, 0.8723333477973938, 0.8759999871253967, 0.8726666569709778, 0.875333309173584, 0.8790000081062317, 0.8756666779518127, 0.8726666569709778, 0.8769999742507935, 0.8796666860580444, 0.8796666860580444, 0.8806666731834412, 0.8793333172798157, 0.8813333511352539, 0.8840000033378601, 0.8840000033378601, 0.8843333125114441, 0.8809999823570251, 0.8856666684150696, 0.8866666555404663, 0.8833333253860474, 0.8866666555404663, 0.8843333125114441, 0.8856666684150696, 0.8880000114440918, 0.887333333492279, 0.8883333206176758, 0.8866666555404663, 0.8896666765213013, 0.8863333463668823, 0.8853333592414856, 0.890999972820282, 0.8870000243186951, 0.8883333206176758, 0.8883333206176758, 0.8916666507720947, 0.8939999938011169, 0.8896666765213013, 0.8916666507720947, 0.890999972820282, 0.8926666378974915, 0.8913333415985107]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8679999709129333, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224078416824341, 1.867442011833191, 1.3837391138076782, 1.0936603546142578, 0.9307584166526794, 0.8473159670829773, 0.7786230444908142, 0.7204769253730774, 0.6966904997825623, 0.6586906909942627, 0.6352651715278625, 0.6051552891731262, 0.5927245020866394, 0.5710138082504272, 0.562310516834259, 0.5404333472251892, 0.5400694608688354, 0.5145865678787231, 0.5092488527297974, 0.49415940046310425, 0.48479872941970825, 0.4817536175251007, 0.46489548683166504, 0.45998844504356384, 0.44976913928985596, 0.4394490420818329, 0.44132885336875916, 0.4208522140979767, 0.4159507751464844, 0.4128042161464691, 0.41275545954704285, 0.40201249718666077, 0.3940499424934387, 0.3876812160015106, 0.3890191912651062, 0.37960681319236755, 0.37086889147758484, 0.37514498829841614, 0.35766923427581787, 0.3563844859600067, 0.3619617819786072, 0.3456610441207886, 0.3408938944339752, 0.3378692865371704, 0.33305034041404724, 0.33046355843544006, 0.3273906409740448, 0.3206259608268738, 0.3110136091709137], "accuracy": [0.27420419454574585, 0.49068814516067505, 0.5676925182342529, 0.6198652982711792, 0.6684718132019043, 0.6913221478462219, 0.7239466309547424, 0.7371549606323242, 0.7512878179550171, 0.7594769597053528, 0.7693831920623779, 0.7751948237419128, 0.7795535326004028, 0.7907806038856506, 0.7936864495277405, 0.8020076751708984, 0.8031964302062988, 0.813498854637146, 0.8148196935653687, 0.8216879963874817, 0.8264430165290833, 0.8244617581367493, 0.8335754871368408, 0.8339717388153076, 0.8352925777435303, 0.8397833704948425, 0.8400475382804871, 0.8539162874221802, 0.850350022315979, 0.8512746095657349, 0.8498216867446899, 0.8595958352088928, 0.8582749962806702, 0.8613129258155823, 0.8622375130653381, 0.8628978729248047, 0.8688416481018066, 0.8651432991027832, 0.8735966086387634, 0.871879518032074, 0.8742570281028748, 0.8816536664962769, 0.8757099509239197, 0.8809932470321655, 0.8812574148178101, 0.8776912093162537, 0.8803328275680542, 0.885219931602478, 0.8906353116035461], "val_loss": [2.042856454849243, 1.521696925163269, 1.0471664667129517, 0.8512712121009827, 0.758791983127594, 0.7063432335853577, 0.6578230857849121, 0.6264132261276245, 0.6002039909362793, 0.579105794429779, 0.5591130256652832, 0.5437371134757996, 0.5296157002449036, 0.5164669156074524, 0.5104347467422485, 0.49793514609336853, 0.48921021819114685, 0.4815945625305176, 0.47053617238998413, 0.46246930956840515, 0.46241095662117004, 0.4536181688308716, 0.4480991065502167, 0.445823609828949, 0.4423561692237854, 0.43625012040138245, 0.4304217994213104, 0.42581623792648315, 0.4253444969654083, 0.4202840030193329, 0.42263737320899963, 0.4112388491630554, 0.41037824749946594, 0.4083020091056824, 0.40295201539993286, 0.4123924970626831, 0.40902790427207947, 0.3984013795852661, 0.3952023386955261, 0.3964172303676605, 0.3955988883972168, 0.39421093463897705, 0.39155369997024536, 0.3875466287136078, 0.3867281973361969, 0.3839641809463501, 0.3852591812610626, 0.38106054067611694, 0.37813952565193176], "val_accuracy": [0.543666660785675, 0.6470000147819519, 0.6823333501815796, 0.7106666564941406, 0.7363333106040955, 0.7396666407585144, 0.7556666731834412, 0.7689999938011169, 0.781000018119812, 0.778333306312561, 0.7886666655540466, 0.7996666431427002, 0.8019999861717224, 0.8086666464805603, 0.8086666464805603, 0.815666675567627, 0.8286666870117188, 0.8236666917800903, 0.8326666951179504, 0.8366666436195374, 0.8363333344459534, 0.8410000205039978, 0.8429999947547913, 0.8413333296775818, 0.8429999947547913, 0.8456666469573975, 0.8489999771118164, 0.8496666550636292, 0.8513333201408386, 0.8510000109672546, 0.8483333587646484, 0.8566666841506958, 0.856333315372467, 0.8566666841506958, 0.8600000143051147, 0.8500000238418579, 0.8556666374206543, 0.859000027179718, 0.8606666922569275, 0.8636666536331177, 0.859000027179718, 0.8573333621025085, 0.8606666922569275, 0.8673333525657654, 0.8663333058357239, 0.8640000224113464, 0.8659999966621399, 0.8650000095367432, 0.8669999837875366]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1], [2, 2, 3, 0, 3, 2, 3, 9], [0, 1, 0, 2, 2, 3], [73, 39, 29], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 8, 3, 5, 9, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 8, 4, 2, 8], [1, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 69, 6, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(tf.math.multiply(grad, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503]}, "mapping_values": [1, 14, 8, 6, 3, 6, 4, 2, 1, 2, 1, 1, 0, 15, 8, 7, 4], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 2, 3, 8, 3, 7, 3], [0, 1, 0, 2, 2, 3, 3], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [0, 1, 3, 0, 3, 5, 3, 2, 3, 2, 3, 7, 5, 5, 7, 2, 1, 0, 0, 7, 6, 9, 9, 9, 8], [0, 2, 0, 3, 0, 2, 4, 4, 4, 1, 5, 4], [86, 16, 98, 34, 85, 22], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 9, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 29, 16]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 7, 7, 2, 37, 25, 12, 6, 2, 1, 1, 1, 12, 7, 5, 5], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.multiply(grad, grad)), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(tf.math.add(grad, tf.math.multiply(tf.math.add(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.square(beta))), tf.math.add(grad, tf.math.add(tf.math.subtract(tf.math.negative(tf.math.negative(grad)), grad), alpha)))), grad), tf.math.add(tf.math.divide_no_nan(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [2, 2, 3, 0, 2, 6, 7, 7, 4, 3, 1, 7, 9], [0, 1, 0, 2, 0, 1, 1, 1, 0, 2, 1], [78, 39, 90, 86, 12], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 4, 0, 0, 3, 1, 0, 0], [16, 99, 96, 10, 61, 1, 37]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 13, 11, 5, 10, 6, 4, 1, 2, 1, 1, 1, 21, 11, 10, 7], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.math.pow(tf.math.multiply(tf.math.subtract(tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), alpha), alpha), alpha), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), grad), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.math.pow(tf.math.subtract(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)), alpha)))), tf.math.add(tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10533333569765091, 0.10533333569765091, 0.10533333569765091, 0.10533333569765091, 0.10533333569765091, 0.10533333569765091]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 2, 3, 0, 3, 5, 1, 5, 0, 9], [0, 1, 0, 2], [39, 39, 34], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 9, 6, 2, 6, 8, 6, 1, 7, 1, 1, 1, 2, 9, 4, 7, 4, 7, 7, 1], [2, 2, 0, 3, 3, 2, 4, 3, 0, 3, 2, 0, 3, 0, 0, 4, 1, 4], [16, 16, 34, 38, 31, 84, 82], [0, 1], [0], [1], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 9, 8, 1, 4, 1, 4, 2, 8, 0], [0, 0, 0, 3, 0, 1, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 10, 4, 3, 43, 25, 18, 7, 2, 1, 1, 0, 20, 12, 8, 5], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.math.square(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad), tf.math.square(tf.math.negative(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(beta, beta))), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.sqrt(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(tf.math.subtract(grad, tf.math.subtract(tf.math.subtract(beta, grad), grad)), tf.math.add(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(grad, beta)))), tf.math.pow(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), grad)), tf.math.add(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.subtract(grad, alpha), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), tf.math.subtract(tf.math.pow(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), alpha), sigma), tf.math.sqrt(tf.math.negative(alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}]