[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8608571290969849, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221357583999634, 1.8672492504119873, 1.3963403701782227, 1.0790393352508545, 0.9211527109146118, 0.8316454887390137, 0.7730335593223572, 0.7121421098709106, 0.6836816668510437, 0.6618674397468567, 0.6375188231468201, 0.6127543449401855, 0.5924506187438965, 0.5844723582267761, 0.5656477212905884, 0.5505427122116089, 0.5350075960159302, 0.5211232900619507, 0.5153806209564209, 0.5074242949485779, 0.4980703294277191, 0.4779003858566284, 0.4722752869129181, 0.46356695890426636, 0.4585421681404114, 0.4466131031513214, 0.43647047877311707, 0.4266316294670105, 0.42038387060165405, 0.42181459069252014, 0.4147682189941406, 0.41126951575279236, 0.40294650197029114, 0.3941632807254791, 0.383524626493454, 0.38445985317230225, 0.3811093866825104, 0.37204620242118835, 0.3666522800922394, 0.36041638255119324, 0.36041754484176636, 0.3508886396884918, 0.3489963710308075, 0.34641680121421814, 0.33964675664901733, 0.3334938585758209, 0.3232089877128601, 0.32645103335380554, 0.3238760530948639, 0.3169163763523102, 0.31577765941619873, 0.31132879853248596, 0.31655117869377136, 0.29610100388526917, 0.29030293226242065, 0.29417601227760315, 0.28345954418182373], "accuracy": [0.27644962072372437, 0.4859331548213959, 0.5649187564849854, 0.6217144131660461, 0.666358470916748, 0.6952846646308899, 0.7210407853126526, 0.7407211661338806, 0.752212405204773, 0.7556465268135071, 0.7689869403839111, 0.7794214487075806, 0.7854973077774048, 0.791441023349762, 0.7955356240272522, 0.8031964302062988, 0.8049134612083435, 0.8105930685997009, 0.8156121969223022, 0.8170651197433472, 0.822348415851593, 0.8276317715644836, 0.8327829837799072, 0.8383304476737976, 0.8364813327789307, 0.8387266993522644, 0.8455950617790222, 0.8521991968154907, 0.8491612672805786, 0.8490291833877563, 0.8544445633888245, 0.8555012345314026, 0.8573504090309143, 0.8622375130653381, 0.8625016212463379, 0.8593316674232483, 0.86553955078125, 0.8656716346740723, 0.8684453964233398, 0.8717474341392517, 0.8739928603172302, 0.8758420348167419, 0.8754457831382751, 0.8732003569602966, 0.8776912093162537, 0.8812574148178101, 0.8825782537460327, 0.8808611631393433, 0.8862766027450562, 0.8897107243537903, 0.8815215826034546, 0.8865407705307007, 0.8858803510665894, 0.8947299122810364, 0.9001452922821045, 0.8926165699958801, 0.8975036144256592], "val_loss": [2.0413289070129395, 1.5222421884536743, 1.0545567274093628, 0.8501101732254028, 0.7577345967292786, 0.701871931552887, 0.6488170623779297, 0.6131089925765991, 0.5910954475402832, 0.5668398141860962, 0.5501887202262878, 0.534641683101654, 0.5199297070503235, 0.5029708743095398, 0.4953998923301697, 0.4767645299434662, 0.4723162353038788, 0.46360114216804504, 0.4541809856891632, 0.4494662284851074, 0.44051826000213623, 0.43392831087112427, 0.42674463987350464, 0.4261704087257385, 0.4165850281715393, 0.41133877635002136, 0.4100967347621918, 0.40107813477516174, 0.40443354845046997, 0.39904800057411194, 0.40008944272994995, 0.3929230570793152, 0.39190661907196045, 0.3922497034072876, 0.3840864300727844, 0.38143864274024963, 0.3817599415779114, 0.37636807560920715, 0.3756350874900818, 0.3784239888191223, 0.3719507157802582, 0.37063902616500854, 0.37154892086982727, 0.37091219425201416, 0.36411601305007935, 0.3649919331073761, 0.36589884757995605, 0.3633812665939331, 0.3612813651561737, 0.3640812635421753, 0.3608767092227936, 0.35808032751083374, 0.3571132719516754, 0.35821211338043213, 0.3567681908607483, 0.3594495952129364, 0.3555827736854553], "val_accuracy": [0.5289999842643738, 0.6503333449363708, 0.6779999732971191, 0.7056666612625122, 0.7293333411216736, 0.7459999918937683, 0.762333333492279, 0.7793333530426025, 0.7799999713897705, 0.7973333597183228, 0.8080000281333923, 0.809333324432373, 0.8096666932106018, 0.8226666450500488, 0.8206666707992554, 0.8383333086967468, 0.8396666646003723, 0.8389999866485596, 0.843666672706604, 0.8446666598320007, 0.8473333120346069, 0.8486666679382324, 0.8513333201408386, 0.856333315372467, 0.859000027179718, 0.8636666536331177, 0.8629999756813049, 0.8650000095367432, 0.8603333234786987, 0.8646666407585144, 0.8650000095367432, 0.8683333396911621, 0.8659999966621399, 0.8706666827201843, 0.8700000047683716, 0.871999979019165, 0.8730000257492065, 0.8730000257492065, 0.8763333559036255, 0.8700000047683716, 0.8730000257492065, 0.8759999871253967, 0.8796666860580444, 0.875333309173584, 0.8796666860580444, 0.8799999952316284, 0.8796666860580444, 0.8793333172798157, 0.8793333172798157, 0.875333309173584, 0.8833333253860474, 0.8840000033378601, 0.8823333382606506, 0.8790000081062317, 0.8823333382606506, 0.8806666731834412, 0.8836666941642761]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 6, 5], [0, 2, 0, 3], [16, 16], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [2, 4, 7, 8, 8, 3], [2, 3, 4, 4, 3], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 9, 4, 1, 4, 2, 8], [0, 0, 0, 4, 4, 0, 3, 4, 2, 0], [48, 99, 46, 99, 61, 33]], "fitness": -0.10742857307195663, "mapping_values": [1, 2, 1, 1, 1, 10, 6, 4, 2, 11, 6, 5, 0, 10, 6, 4, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.sqrt(sigma), tf.math.sqrt(tf.math.multiply(grad, grad))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))), tf.constant(1.0, shape=shape, dtype=tf.float32)), grad)", "other_info": {"loss": [5.753112895633305e+25, 6.323670228664539e+25, 6.3323378925361735e+25, 6.655596791009452e+25, 6.522554722232442e+25, 6.599531601746227e+25], "accuracy": [0.10447761416435242, 0.10394927859306335, 0.10381719470024109, 0.1010434553027153, 0.10302469879388809, 0.11253467202186584], "val_loss": [6.657897099995444e+25, 6.657897099995444e+25, 6.657897099995444e+25, 6.657897099995444e+25, 6.657897099995444e+25, 6.657897099995444e+25], "val_accuracy": [0.10533333569765091, 0.10533333569765091, 0.10533333569765091, 0.10533333569765091, 0.10533333569765091, 0.10533333569765091]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 2, 3, 0, 3], [0, 1, 0, 2], [83, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3, 5, 4, 6, 6, 7, 2, 6], [0, 2, 0, 3, 5, 4, 3, 1, 5, 0], [16, 72, 65], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 0, 8, 1], [0, 0, 1, 3, 0, 0, 3, 1, 2, 3, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 2, 22, 12, 10, 3, 2, 1, 1, 1, 25, 14, 11, 4], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.pow(grad, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.math.divide_no_nan(grad, grad), grad), alpha), grad), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(alpha, tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), sigma))), tf.math.sqrt(tf.math.negative(alpha)))), beta), tf.math.sqrt(tf.math.subtract(sigma, grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 0, 2], [39, 25], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [0, 3, 3, 6, 8, 1, 4, 1, 2, 2, 8, 3], [0, 0, 0, 2, 4, 1, 3, 1, 2, 0], [16, 59, 96, 99, 61, 20]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 2, 2, 1, 1, 1, 22, 12, 10, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), beta))), tf.math.subtract(tf.math.add(tf.math.add(grad, alpha), sigma), tf.math.sqrt(tf.math.multiply(alpha, beta))))), tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 9, 0], [0, 0, 0, 2], [39, 39, 19], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 2, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [1, 3, 3, 6, 9, 1, 4, 2, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [39, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 3, 7, 4, 3, 2, 2, 1, 1, 1, 11, 6, 5, 5], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [17215213568.0, 4315722547200.0, 87669644197888.0, 679168547225600.0, 3166887693254656.0, 1.0725292473581568e+16], "accuracy": [0.09760929644107819, 0.10236428678035736, 0.09945846349000931, 0.09800554811954498, 0.09602430462837219, 0.0956280529499054], "val_loss": [215653531648.0, 17115123810304.0, 208771045392384.0, 1213118613028864.0, 4721663706923008.0, 1.4293353734602752e+16], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}]