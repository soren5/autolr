[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8671428561210632, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222661256790161, 1.8610296249389648, 1.3843415975570679, 1.0955504179000854, 0.9344612956047058, 0.84040766954422, 0.7772148847579956, 0.7343294024467468, 0.6864781379699707, 0.6573414206504822, 0.638680100440979, 0.6154277920722961, 0.5952342748641968, 0.5825065970420837, 0.5700837969779968, 0.5569677948951721, 0.5376219153404236, 0.5254626870155334, 0.5179302096366882, 0.504560649394989, 0.4910173714160919, 0.48539379239082336, 0.47443467378616333, 0.4638441205024719, 0.4630086123943329, 0.456711083650589, 0.4403007924556732, 0.4394094944000244, 0.4273967444896698, 0.4247087836265564, 0.41945475339889526, 0.4105992913246155, 0.4046638011932373, 0.40128031373023987, 0.3963404595851898, 0.38599854707717896, 0.3839435279369354, 0.3760952651500702, 0.3789944052696228, 0.36653998494148254, 0.3599786162376404, 0.356001079082489, 0.3583230972290039, 0.35215264558792114, 0.33863508701324463, 0.3323921263217926, 0.3327537178993225, 0.3343776762485504, 0.32269734144210815, 0.3168294131755829, 0.3172394335269928, 0.30882173776626587, 0.31036120653152466, 0.30096811056137085, 0.29452985525131226, 0.29282763600349426, 0.288088858127594, 0.2914712727069855, 0.2870718538761139, 0.27413299679756165, 0.2702535390853882, 0.2699339985847473, 0.26690366864204407], "accuracy": [0.27037379145622253, 0.4850085973739624, 0.566239595413208, 0.6147140264511108, 0.6715096831321716, 0.7051908373832703, 0.7292299270629883, 0.7346453666687012, 0.7541936039924622, 0.7631752490997314, 0.7737419009208679, 0.7790252566337585, 0.7844406366348267, 0.789988100528717, 0.7968564033508301, 0.7988376617431641, 0.804649293422699, 0.8078193068504333, 0.8157442808151245, 0.8181217908859253, 0.8220842480659485, 0.8265751004219055, 0.8333113193511963, 0.832650899887085, 0.83119797706604, 0.8387266993522644, 0.8457271456718445, 0.8441421389579773, 0.8474441766738892, 0.8479725122451782, 0.845859169960022, 0.8519350290298462, 0.8565579056739807, 0.8597279191017151, 0.8589354157447815, 0.8569541573524475, 0.86118084192276, 0.8619733452796936, 0.8646149635314941, 0.868049144744873, 0.8714832663536072, 0.8705587387084961, 0.8721436858177185, 0.8734645247459412, 0.8779553771018982, 0.8780874609947205, 0.8796724081039429, 0.8790120482444763, 0.8823140859603882, 0.884691596031189, 0.8883898854255676, 0.8869370222091675, 0.8879936337471008, 0.8912957310676575, 0.8944657444953918, 0.8943336606025696, 0.8972394466400146, 0.8947299122810364, 0.8912957310676575, 0.8996169567108154, 0.9015982151031494, 0.9043719172477722, 0.9050323367118835], "val_loss": [2.0330326557159424, 1.5019298791885376, 1.031469702720642, 0.8285335898399353, 0.7365490198135376, 0.6794966459274292, 0.6364914178848267, 0.6059908866882324, 0.5788567662239075, 0.5591093897819519, 0.5403612852096558, 0.5242988467216492, 0.5204444527626038, 0.4990043044090271, 0.49064791202545166, 0.48695799708366394, 0.4723207950592041, 0.4671129882335663, 0.45727214217185974, 0.4509865641593933, 0.4486906826496124, 0.44039225578308105, 0.4382716417312622, 0.4295193552970886, 0.4235074520111084, 0.41893184185028076, 0.4175959825515747, 0.41050854325294495, 0.4033452570438385, 0.4034600555896759, 0.3981366455554962, 0.3943755626678467, 0.3960748016834259, 0.38718757033348083, 0.3855349123477936, 0.38351643085479736, 0.3807753622531891, 0.38567546010017395, 0.3744605779647827, 0.37752994894981384, 0.3689638376235962, 0.3650430142879486, 0.36990591883659363, 0.36516350507736206, 0.3630659282207489, 0.36002233624458313, 0.3571802079677582, 0.3554312288761139, 0.3542165458202362, 0.36013707518577576, 0.3508610129356384, 0.34741276502609253, 0.3483657240867615, 0.346926748752594, 0.35000714659690857, 0.34695833921432495, 0.34397828578948975, 0.33966946601867676, 0.34537190198898315, 0.3440586030483246, 0.3416033387184143, 0.33862537145614624, 0.33706408739089966], "val_accuracy": [0.559333324432373, 0.6663333177566528, 0.6899999976158142, 0.7163333296775818, 0.7383333444595337, 0.7580000162124634, 0.7633333206176758, 0.7710000276565552, 0.7806666493415833, 0.7866666913032532, 0.8009999990463257, 0.8033333420753479, 0.8096666932106018, 0.8159999847412109, 0.8146666884422302, 0.8190000057220459, 0.8246666789054871, 0.8263333439826965, 0.8326666951179504, 0.8339999914169312, 0.8326666951179504, 0.8396666646003723, 0.8413333296775818, 0.8433333039283752, 0.8493333458900452, 0.8473333120346069, 0.8496666550636292, 0.8506666421890259, 0.8543333411216736, 0.8543333411216736, 0.8546666502952576, 0.8566666841506958, 0.8539999723434448, 0.8606666922569275, 0.8583333492279053, 0.8629999756813049, 0.8600000143051147, 0.8600000143051147, 0.862333357334137, 0.8643333315849304, 0.8679999709129333, 0.8686666488647461, 0.8690000176429749, 0.8686666488647461, 0.8690000176429749, 0.8686666488647461, 0.8706666827201843, 0.8693333268165588, 0.8679999709129333, 0.8700000047683716, 0.8706666827201843, 0.8736666440963745, 0.8763333559036255, 0.8733333349227905, 0.8743333220481873, 0.8769999742507935, 0.8766666650772095, 0.8813333511352539, 0.8726666569709778, 0.8723333477973938, 0.8786666393280029, 0.8790000081062317, 0.8796666860580444]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 2, 3, 4, 3, 9], [0, 1, 0, 2], [39, 39, 78], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 9, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 5, 2, 8], [0, 4, 0, 3, 0, 0, 3, 1, 1, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.7580000162124634, "mapping_values": [1, 10, 6, 4, 3, 2, 2, 0, 1, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha))))", "other_info": {"loss": [2.3104920387268066, 2.2980077266693115, 2.2765145301818848, 2.2344491481781006, 2.135215997695923, 1.8418680429458618, 1.3842360973358154, 1.138025164604187, 0.9968491792678833, 0.928112804889679, 0.9199585914611816, 0.8299384713172913, 0.8108417391777039, 0.7905802726745605, 0.7628835439682007, 0.7523730993270874, 0.737773060798645], "accuracy": [0.08691058307886124, 0.107647605240345, 0.16483952105045319, 0.26826047897338867, 0.35886937379837036, 0.443798691034317, 0.5342755317687988, 0.6058644652366638, 0.6472064256668091, 0.6627922058105469, 0.6556597352027893, 0.6951525807380676, 0.6997754573822021, 0.698190450668335, 0.7191916704177856, 0.7150970697402954, 0.7202483415603638], "val_loss": [2.3018648624420166, 2.2828686237335205, 2.250983476638794, 2.1840014457702637, 1.990208387374878, 1.4632092714309692, 1.042816400527954, 0.8934141993522644, 0.8439893126487732, 0.7646790146827698, 0.8142818808555603, 0.6828933358192444, 0.7005365490913391, 0.702882707118988, 0.6950101852416992, 0.663891613483429, 0.7122421860694885], "val_accuracy": [0.10133333504199982, 0.16333332657814026, 0.3623333275318146, 0.47066667675971985, 0.559333324432373, 0.6370000243186951, 0.6639999747276306, 0.690666675567627, 0.6880000233650208, 0.7203333377838135, 0.6923333406448364, 0.7566666603088379, 0.7486666440963745, 0.7409999966621399, 0.7463333606719971, 0.7473333477973938, 0.7236666679382324]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 1, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 5, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 5], [0, 1, 0, 3, 0, 0, 3, 4, 2, 0], [16, 99, 86, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 6, 4, 2, 1, 2, 1, 1, 1, 22, 12, 10, 5], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(alpha, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.math.square(grad)))))), beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 2, 3, 0, 3, 5, 8, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 6, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0], [14, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 12, 8, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(tf.math.square(grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(grad), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 2, 5, 0, 2], [2, 1, 0, 2], [61, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 1, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 3, 1, 4, 2, 8], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0], [16, 99, 79, 99, 10, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 7, 4, 3, 2, 2, 1, 1, 1, 20, 10, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), grad))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}]