[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8577142953872681, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.220126152038574, 1.8578709363937378, 1.380972981452942, 1.0938419103622437, 0.935181200504303, 0.8328353762626648, 0.7733007073402405, 0.7350683808326721, 0.689451277256012, 0.6668329238891602, 0.6429262161254883, 0.614517092704773, 0.5920149087905884, 0.5821513533592224, 0.5712530016899109, 0.5517206192016602, 0.5287483334541321, 0.5264667272567749, 0.5122429728507996, 0.5055497288703918, 0.488135427236557, 0.4906177818775177, 0.4678508937358856, 0.46271079778671265, 0.450029581785202, 0.4490702748298645, 0.4403321146965027, 0.4320980906486511, 0.43597880005836487, 0.4202177822589874, 0.4207524359226227, 0.4121117889881134, 0.40764692425727844, 0.3992016911506653, 0.38660281896591187, 0.3802015483379364, 0.3729178011417389, 0.36044567823410034, 0.3657616972923279, 0.3593129813671112, 0.36094921827316284], "accuracy": [0.27882710099220276, 0.4900277256965637, 0.5650508403778076, 0.6152423620223999, 0.6691322326660156, 0.7016246318817139, 0.7213049530982971, 0.7383436560630798, 0.7474573850631714, 0.7559106945991516, 0.7666094303131104, 0.7746664881706238, 0.7810064554214478, 0.7902522683143616, 0.7926297783851624, 0.7992339134216309, 0.8078193068504333, 0.8078193068504333, 0.8113855719566345, 0.8149517774581909, 0.8260467648506165, 0.8212917447090149, 0.8297450542449951, 0.8368775844573975, 0.8379341959953308, 0.8389908671379089, 0.8418967127799988, 0.846387505531311, 0.8411042094230652, 0.8486329317092896, 0.8512746095657349, 0.8481045961380005, 0.8545766472816467, 0.8543124794960022, 0.863029956817627, 0.8681812286376953, 0.8693699836730957, 0.8696341514587402, 0.8671245574951172, 0.8758420348167419, 0.8691058158874512], "val_loss": [2.029421806335449, 1.5012706518173218, 1.0356160402297974, 0.8312206268310547, 0.7441584467887878, 0.6811794638633728, 0.6391580700874329, 0.609750509262085, 0.5867717862129211, 0.5558937788009644, 0.5397366285324097, 0.5247742533683777, 0.5065935254096985, 0.4933382272720337, 0.4832916557788849, 0.4695787727832794, 0.46518877148628235, 0.4569578468799591, 0.447487473487854, 0.4435538053512573, 0.43594780564308167, 0.4297250509262085, 0.4215121269226074, 0.4144374132156372, 0.4141107499599457, 0.41361913084983826, 0.4037631154060364, 0.4018087685108185, 0.39962369203567505, 0.3936499059200287, 0.39593425393104553, 0.38350459933280945, 0.38455313444137573, 0.3781035542488098, 0.37246379256248474, 0.37067118287086487, 0.36779093742370605, 0.3696445822715759, 0.3637767732143402, 0.36386987566947937, 0.361225426197052], "val_accuracy": [0.5763333439826965, 0.6523333191871643, 0.6806666851043701, 0.7070000171661377, 0.7260000109672546, 0.7409999966621399, 0.7473333477973938, 0.7593333125114441, 0.7680000066757202, 0.7846666574478149, 0.7900000214576721, 0.7996666431427002, 0.8080000281333923, 0.8076666593551636, 0.8196666836738586, 0.8253333568572998, 0.8220000267028809, 0.8330000042915344, 0.8333333134651184, 0.8346666693687439, 0.8416666388511658, 0.8393333554267883, 0.8446666598320007, 0.8443333506584167, 0.8446666598320007, 0.8489999771118164, 0.8479999899864197, 0.8489999771118164, 0.8526666760444641, 0.8560000061988831, 0.8523333072662354, 0.8569999933242798, 0.8523333072662354, 0.8619999885559082, 0.8576666712760925, 0.8629999756813049, 0.8619999885559082, 0.862666666507721, 0.8619999885559082, 0.8606666922569275, 0.8603333234786987]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 2, 2, 5, 3], [0, 1, 1, 2, 3], [71, 39], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0], [0, 2, 3, 0, 3, 5], [0, 2, 0, 1], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 7, 4, 7, 1, 3, 6, 0, 9, 9, 7, 4, 4, 7, 2, 2, 4, 2, 0, 4, 7, 0, 1, 5, 6, 5, 5, 0, 9], [0, 0, 0, 3, 0, 0, 0, 1, 2, 0, 0, 0, 5, 3, 4, 5, 3, 6, 2, 7, 5, 6, 1, 5, 7], [16, 99, 96, 99, 86, 1, 10, 75, 33, 79, 77, 97]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 1, 6, 3, 3, 2, 2, 1, 1, 1, 64, 39, 25, 12], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.add(tf.math.square(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(alpha, grad)), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.add(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(alpha, beta), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.pow(grad, tf.math.pow(sigma, tf.math.add(tf.math.add(tf.math.add(tf.math.pow(grad, tf.math.add(grad, sigma)), tf.math.negative(grad)), tf.math.pow(beta, grad)), grad))), tf.math.add(tf.math.negative(tf.math.subtract(tf.math.square(grad), alpha)), tf.math.divide_no_nan(grad, tf.math.square(grad))))), tf.math.square(tf.math.negative(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10599999874830246, 0.10599999874830246, 0.10599999874830246, 0.10599999874830246, 0.10599999874830246, 0.10599999874830246]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [4, 2, 3, 0, 3, 8, 3], [0, 2, 0, 2, 0, 3], [39, 39, 60], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 3, 0, 0], [33, 16, 18], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1], [6, 3, 3, 3, 8, 1, 4, 1, 4, 2, 8, 4, 9], [0, 0, 1, 2, 0, 4, 3, 1, 2, 0], [16, 99, 96, 99, 61, 65]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.sqrt(tf.math.multiply(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), grad)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(alpha, beta))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma)))), alpha), tf.math.add(tf.math.sqrt(tf.math.pow(beta, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}, "mapping_values": [1, 13, 7, 6, 3, 10, 6, 4, 3, 2, 1, 1, 1, 23, 13, 10, 5], "tree_depth": 17}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 30], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [6, 3, 1, 6, 8, 1, 4, 1, 4, 2, 8, 3, 9], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 2, 1, 1, 1, 2, 1, 1, 1, 23, 13, 10, 7], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(grad, tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma), tf.math.sqrt(tf.math.multiply(alpha, beta))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 4], [0, 1, 0, 2], [43, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1, 1], [6], [0, 3], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 0, 1, 4, 1, 4, 2, 8, 8, 3, 6], [4, 0, 0, 4, 4, 0, 3, 1, 2, 0, 2, 3], [16, 99, 96, 99, 9, 1]], "fitness": -0.0908571407198906, "mapping_values": [1, 9, 5, 4, 2, 6, 3, 3, 1, 3, 1, 2, 1, 26, 14, 12, 4], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(grad))), grad), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.multiply(sigma, alpha)))), beta)), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(beta, sigma))", "other_info": {"loss": [2.3083252906799316, 2.310856342315674, 2.309706926345825, 2.309779405593872, 2.30964994430542, 2.308694362640381], "accuracy": [0.1002509593963623, 0.08955223858356476, 0.09298639744520187, 0.09813763201236725, 0.09311848133802414, 0.09338264167308807], "val_loss": [2.3085386753082275, 2.3085386753082275, 2.3085386753082275, 2.3085386753082275, 2.3085386753082275, 2.3085386753082275], "val_accuracy": [0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024]}}]