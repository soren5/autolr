[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8811428546905518, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2237746715545654, 1.8723686933517456, 1.3995952606201172, 1.0951578617095947, 0.9308109879493713, 0.8378576636314392, 0.7867980003356934, 0.7403825521469116, 0.7074968218803406, 0.6667766571044922, 0.6467143297195435, 0.6252685785293579, 0.6010545492172241, 0.592832088470459, 0.5694352388381958, 0.5546401739120483, 0.5457968711853027, 0.5263527035713196, 0.5090768933296204, 0.5048046112060547, 0.4915485680103302, 0.4950409531593323, 0.48390650749206543, 0.4653860628604889, 0.45890092849731445, 0.4539474546909332, 0.45054811239242554, 0.4434168338775635, 0.4299618601799011, 0.42732325196266174, 0.42083144187927246, 0.41875892877578735, 0.4139094650745392, 0.40237316489219666, 0.3879244327545166, 0.38828617334365845, 0.3872472941875458, 0.38174712657928467, 0.37753409147262573, 0.37368708848953247, 0.3667537569999695, 0.3609304130077362, 0.3514280617237091, 0.3454590141773224, 0.34209492802619934, 0.3294583857059479, 0.32658490538597107, 0.3237888813018799, 0.32169947028160095, 0.32040613889694214, 0.31856244802474976, 0.3111935555934906, 0.3040423095226288, 0.3039085268974304, 0.29984933137893677, 0.29860955476760864, 0.28763389587402344, 0.28644928336143494, 0.2838956117630005, 0.28346431255340576, 0.28013065457344055, 0.2724190354347229, 0.27310502529144287], "accuracy": [0.27420419454574585, 0.48051777482032776, 0.5654470920562744, 0.6198652982711792, 0.6709813475608826, 0.7000396251678467, 0.7174745798110962, 0.7283053994178772, 0.7400607466697693, 0.7589486241340637, 0.7675340175628662, 0.774798572063446, 0.7807422876358032, 0.7844406366348267, 0.793422281742096, 0.7984414100646973, 0.8030643463134766, 0.8128384351730347, 0.8185180425643921, 0.8169330358505249, 0.8182538747787476, 0.8228767514228821, 0.8251221776008606, 0.8399154543876648, 0.8416325449943542, 0.8403117060661316, 0.837537944316864, 0.8465195894241333, 0.8466516733169556, 0.8490291833877563, 0.8502179384231567, 0.8535200357437134, 0.8474441766738892, 0.858671247959137, 0.8619733452796936, 0.8652753829956055, 0.8643507957458496, 0.8625016212463379, 0.8665962219238281, 0.8665962219238281, 0.8704266548156738, 0.8721436858177185, 0.8747853636741638, 0.8749174475669861, 0.8805969953536987, 0.8824461698532104, 0.8840311765670776, 0.8821820020675659, 0.8858803510665894, 0.8850878477096558, 0.8824461698532104, 0.8881257176399231, 0.8928807377815247, 0.8902390599250793, 0.8939374089241028, 0.89552241563797, 0.8973715305328369, 0.8942015767097473, 0.89988112449646, 0.8997490406036377, 0.8969752788543701, 0.9014661312103271, 0.9029190540313721], "val_loss": [2.037389039993286, 1.511842966079712, 1.0359350442886353, 0.8279245495796204, 0.7450146675109863, 0.6904571652412415, 0.6491749286651611, 0.6089303493499756, 0.584378719329834, 0.558230996131897, 0.5482743382453918, 0.526901125907898, 0.5176275968551636, 0.49789905548095703, 0.48785078525543213, 0.4802698493003845, 0.4741758704185486, 0.4558241367340088, 0.446842759847641, 0.4397415220737457, 0.43689489364624023, 0.43105411529541016, 0.42206501960754395, 0.41691854596138, 0.41364946961402893, 0.4036501348018646, 0.4026815593242645, 0.40334782004356384, 0.3973897397518158, 0.3922448456287384, 0.386177659034729, 0.3828100562095642, 0.3804466128349304, 0.3790411651134491, 0.37225663661956787, 0.3669360876083374, 0.36680835485458374, 0.3673231899738312, 0.3597688376903534, 0.35926786065101624, 0.36098331212997437, 0.35272863507270813, 0.3481261432170868, 0.3572690486907959, 0.34953010082244873, 0.34897640347480774, 0.3506835401058197, 0.34860289096832275, 0.34379568696022034, 0.3427906930446625, 0.34296849370002747, 0.3384943902492523, 0.33897867798805237, 0.33991867303848267, 0.338674932718277, 0.3346634805202484, 0.3385751247406006, 0.33232465386390686, 0.332682728767395, 0.3382399082183838, 0.3326888978481293, 0.3314237594604492, 0.3316805958747864], "val_accuracy": [0.5120000243186951, 0.6606666445732117, 0.6880000233650208, 0.7093333601951599, 0.7293333411216736, 0.7519999742507935, 0.762333333492279, 0.7699999809265137, 0.7879999876022339, 0.7946666479110718, 0.7926666736602783, 0.8096666932106018, 0.8113333582878113, 0.8176666498184204, 0.8233333230018616, 0.8213333487510681, 0.824999988079071, 0.8360000252723694, 0.8379999995231628, 0.8379999995231628, 0.8423333168029785, 0.8443333506584167, 0.8483333587646484, 0.8460000157356262, 0.8496666550636292, 0.8569999933242798, 0.8519999980926514, 0.8516666889190674, 0.8583333492279053, 0.8550000190734863, 0.856333315372467, 0.8610000014305115, 0.859000027179718, 0.8640000224113464, 0.8629999756813049, 0.8646666407585144, 0.8676666617393494, 0.8656666874885559, 0.8673333525657654, 0.8650000095367432, 0.8700000047683716, 0.8713333606719971, 0.8730000257492065, 0.8696666955947876, 0.8726666569709778, 0.8733333349227905, 0.8726666569709778, 0.8736666440963745, 0.8726666569709778, 0.8730000257492065, 0.8740000128746033, 0.8790000081062317, 0.878333330154419, 0.878333330154419, 0.8776666522026062, 0.878000020980835, 0.8793333172798157, 0.8846666812896729, 0.8759999871253967, 0.8769999742507935, 0.8823333382606506, 0.878333330154419, 0.8826666474342346]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8591428399085999, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222348928451538, 1.859397292137146, 1.3928301334381104, 1.100151777267456, 0.9471746683120728, 0.8392255902290344, 0.7745171189308167, 0.7236617207527161, 0.6855903267860413, 0.6497003436088562, 0.627256453037262, 0.6227998733520508, 0.5964634418487549, 0.5714653730392456, 0.5560430288314819, 0.5421228408813477, 0.528070867061615, 0.5151664614677429, 0.5143692493438721, 0.49919602274894714, 0.4886345863342285, 0.4766733944416046, 0.4737354815006256, 0.4611125886440277, 0.45442429184913635, 0.43744245171546936, 0.43277984857559204, 0.4281594157218933, 0.42481493949890137, 0.41238725185394287, 0.41202953457832336, 0.40504181385040283, 0.3914601504802704, 0.396084189414978, 0.386513888835907, 0.37824922800064087, 0.37089067697525024, 0.37002626061439514, 0.36333584785461426, 0.3580475151538849, 0.3421487510204315, 0.3429970443248749, 0.3440646827220917, 0.33959490060806274, 0.34056755900382996, 0.32927191257476807, 0.3280332684516907, 0.32004863023757935, 0.32008326053619385, 0.3137623369693756, 0.3096967339515686, 0.3029184639453888, 0.2977913022041321, 0.28805482387542725, 0.2885923981666565, 0.28273633122444153, 0.2861739695072174, 0.2789163887500763, 0.28141269087791443, 0.2706048786640167, 0.2702184319496155, 0.25575315952301025, 0.2613631784915924, 0.25474804639816284, 0.2558687925338745, 0.25371253490448, 0.24371375143527985, 0.2420281320810318, 0.23789648711681366, 0.2440195232629776, 0.2286687195301056, 0.23269498348236084, 0.2231377214193344, 0.2183581441640854], "accuracy": [0.26839256286621094, 0.4998018741607666, 0.5601637959480286, 0.6223748326301575, 0.6568484902381897, 0.7022850513458252, 0.7205125093460083, 0.7428345084190369, 0.7523444890975952, 0.7638356685638428, 0.7726852297782898, 0.774270236492157, 0.7877426743507385, 0.7935543656349182, 0.7998943328857422, 0.8005547523498535, 0.8115176558494568, 0.8161405324935913, 0.8120459914207458, 0.8178576231002808, 0.8235371708869934, 0.8289526104927063, 0.8319904804229736, 0.832650899887085, 0.8383304476737976, 0.8413683772087097, 0.8462554216384888, 0.8467837572097778, 0.8477083444595337, 0.8532558679580688, 0.8520671129226685, 0.8556333184242249, 0.8614450097084045, 0.8577466607093811, 0.8619733452796936, 0.8661999702453613, 0.8631620407104492, 0.8621054291725159, 0.870030403137207, 0.870030403137207, 0.8746532797813416, 0.8767666220664978, 0.8754457831382751, 0.8794082403182983, 0.878351628780365, 0.8790120482444763, 0.8813894987106323, 0.8808611631393433, 0.8836349248886108, 0.8861445188522339, 0.8877294659614563, 0.8914278149604797, 0.8924844861030579, 0.8942015767097473, 0.8928807377815247, 0.8967111110687256, 0.8934090733528137, 0.8963148593902588, 0.8969752788543701, 0.9015982151031494, 0.9010698795318604, 0.9049002528190613, 0.9041078090667725, 0.9054285883903503, 0.9071456789970398, 0.9080702662467957, 0.9115044474601746, 0.9101836085319519, 0.9117686152458191, 0.9141460657119751, 0.9167877435684204, 0.9117686152458191, 0.9190331697463989, 0.9218068718910217], "val_loss": [2.038353681564331, 1.5116702318191528, 1.051592230796814, 0.8467476963996887, 0.7584587931632996, 0.6965492963790894, 0.6452454924583435, 0.6153392791748047, 0.583747386932373, 0.5620509386062622, 0.5408051013946533, 0.5302757024765015, 0.5167779922485352, 0.4999162554740906, 0.4896726906299591, 0.4818558394908905, 0.4707191586494446, 0.4686521887779236, 0.456229567527771, 0.4445497691631317, 0.440308153629303, 0.43399471044540405, 0.4286215007305145, 0.42137300968170166, 0.415810763835907, 0.4152803122997284, 0.41608747839927673, 0.4062914252281189, 0.40212246775627136, 0.3962160646915436, 0.3956286311149597, 0.3900596499443054, 0.3911893665790558, 0.3849542737007141, 0.3827732801437378, 0.3833692967891693, 0.37662622332572937, 0.3766002655029297, 0.3758859932422638, 0.3760417401790619, 0.366670161485672, 0.3637534976005554, 0.3630636930465698, 0.3638666868209839, 0.3638274073600769, 0.3586551249027252, 0.3578842878341675, 0.35804471373558044, 0.35236886143684387, 0.353384405374527, 0.3537522852420807, 0.354451984167099, 0.3492227792739868, 0.35126757621765137, 0.3508850038051605, 0.34956103563308716, 0.3477935492992401, 0.34491801261901855, 0.3448304533958435, 0.344895601272583, 0.3445145785808563, 0.346184641122818, 0.3444649279117584, 0.34046369791030884, 0.3372258245944977, 0.3418935537338257, 0.338785856962204, 0.3408515155315399, 0.34044328331947327, 0.3389754295349121, 0.34598344564437866, 0.3395506739616394, 0.3402646780014038, 0.3396606743335724], "val_accuracy": [0.5370000004768372, 0.6646666526794434, 0.6783333420753479, 0.7036666870117188, 0.7263333201408386, 0.7463333606719971, 0.7590000033378601, 0.7639999985694885, 0.7823333144187927, 0.7879999876022339, 0.8013333082199097, 0.8140000104904175, 0.8113333582878113, 0.8206666707992554, 0.828000009059906, 0.8256666660308838, 0.8363333344459534, 0.8323333263397217, 0.8416666388511658, 0.8429999947547913, 0.846666693687439, 0.8473333120346069, 0.8493333458900452, 0.8516666889190674, 0.8566666841506958, 0.8523333072662354, 0.8536666631698608, 0.8576666712760925, 0.8606666922569275, 0.8586666584014893, 0.859666645526886, 0.8650000095367432, 0.8600000143051147, 0.8653333187103271, 0.8653333187103271, 0.8640000224113464, 0.8646666407585144, 0.8656666874885559, 0.8610000014305115, 0.8676666617393494, 0.8726666569709778, 0.8736666440963745, 0.8693333268165588, 0.8713333606719971, 0.8686666488647461, 0.874666690826416, 0.8709999918937683, 0.8736666440963745, 0.875333309173584, 0.8726666569709778, 0.8756666779518127, 0.875333309173584, 0.8756666779518127, 0.8773333430290222, 0.8743333220481873, 0.8776666522026062, 0.8759999871253967, 0.875, 0.8766666650772095, 0.8759999871253967, 0.8793333172798157, 0.8773333430290222, 0.8766666650772095, 0.878333330154419, 0.8820000290870667, 0.8803333044052124, 0.875333309173584, 0.8823333382606506, 0.8826666474342346, 0.8803333044052124, 0.8823333382606506, 0.8823333382606506, 0.8820000290870667, 0.8809999823570251]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 9, 4], [0, 1, 0, 2], [39, 39, 31], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 3, 0, 3, 5, 2, 6, 2, 9], [0, 2, 0, 2, 4, 5], [16, 16, 97], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 6, 4, 1, 4, 2, 8], [0, 0, 0, 3, 1, 0, 3, 4, 2, 0], [16, 99, 96, 52, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta)), tf.math.divide_no_nan(tf.math.add(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), grad), grad))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma)), alpha), tf.math.pow(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}, "mapping_values": [1, 11, 7, 4, 3, 16, 10, 6, 3, 1, 0, 1, 1, 16, 8, 8, 4], "tree_depth": 16}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 2, 3, 0, 3, 5, 6, 5, 7], [0, 2, 0, 3, 0, 0, 1], [16, 16, 19, 54], [0, 1], [0], [3], [82], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 6, 3, 7, 5, 1, 4, 3, 0, 4, 2, 1, 8], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0, 1, 6, 5, 2, 7, 5, 0, 6, 2], [16, 99, 96, 99, 61, 1, 68]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 16, 9, 7, 4, 2, 1, 1, 0, 42, 23, 19, 7], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.divide_no_nan(tf.math.square(tf.math.add(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.divide_no_nan(tf.math.multiply(sigma, alpha), grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.square(tf.math.subtract(alpha, tf.math.pow(grad, grad))), tf.math.multiply(tf.math.negative(beta), grad))), tf.math.pow(grad, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.sqrt(beta)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 2, 3], [0, 1, 0, 2], [77, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 1, 0, 3, 5], [0, 2, 0, 3], [16, 80], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [6, 0, 3, 0, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 3], [16, 58, 96, 86, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 10, 6, 4, 2, 2, 1, 1, 1, 8, 5, 3, 3], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3032195568084717, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1], [0, 0, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 5], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 66]], "fitness": -0.09314285963773727, "mapping_values": [1, 6, 4, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 22, 12, 10, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma))), tf.math.sqrt(tf.math.square(alpha)))), beta), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3100438117980957, 2.310345411300659, 2.310823917388916, 2.309730052947998, 2.310298442840576, 2.309352397918701], "accuracy": [0.09206181764602661, 0.09457138925790787, 0.08889182657003403, 0.09509972482919693, 0.09536388516426086, 0.09153348207473755], "val_loss": [2.308102607727051, 2.308102607727051, 2.308102607727051, 2.308102607727051, 2.308102607727051, 2.308102607727051], "val_accuracy": [0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341]}}]