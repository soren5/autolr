[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8862857222557068, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222418785095215, 1.8632627725601196, 1.3950724601745605, 1.0979150533676147, 0.9474178552627563, 0.8543937802314758, 0.7783248424530029, 0.7376496195793152, 0.7006842494010925, 0.6746688485145569, 0.647553563117981, 0.6295329928398132, 0.6112891435623169, 0.58865886926651, 0.5667527914047241, 0.5575993657112122, 0.5467248558998108, 0.5289703011512756, 0.5205997824668884, 0.5110849142074585, 0.5064045786857605, 0.4867391884326935, 0.4731372892856598, 0.47443822026252747, 0.46410614252090454, 0.4545186161994934, 0.445819616317749, 0.4367676079273224, 0.4321127235889435, 0.4275900721549988, 0.4177286922931671, 0.40700381994247437, 0.40491974353790283, 0.3923063576221466, 0.38597339391708374, 0.37638187408447266, 0.3749813437461853, 0.3708414137363434, 0.369646281003952, 0.3635149896144867, 0.3594855070114136, 0.3503628671169281, 0.3338625133037567, 0.3396199643611908, 0.33679017424583435, 0.3303111493587494, 0.3275522291660309, 0.3153315782546997, 0.3093845844268799, 0.31660354137420654, 0.313541054725647, 0.3128948211669922, 0.2977619469165802, 0.30230653285980225, 0.298944890499115, 0.28947505354881287, 0.2822195291519165, 0.2778712213039398, 0.2668195366859436, 0.26853811740875244, 0.26283398270606995, 0.2662760019302368, 0.2576100528240204, 0.25102800130844116, 0.2539205849170685, 0.25087955594062805, 0.24508193135261536], "accuracy": [0.280940443277359, 0.48685774207115173, 0.5665037631988525, 0.616299033164978, 0.6625280380249023, 0.6930392384529114, 0.7169462442398071, 0.7320036888122559, 0.7375511527061462, 0.7491744756698608, 0.7672698497772217, 0.7670056819915771, 0.7745344042778015, 0.7876105904579163, 0.7906485199928284, 0.7994980812072754, 0.802800178527832, 0.8068947196006775, 0.8117818236351013, 0.8153480291366577, 0.8181217908859253, 0.829216718673706, 0.8300092220306396, 0.8238013386726379, 0.8325188159942627, 0.8385946154594421, 0.8372738361358643, 0.842028796672821, 0.8451988101005554, 0.8481045961380005, 0.8515387773513794, 0.8549728989601135, 0.8516708612442017, 0.8603883385658264, 0.8598600029945374, 0.8667283058166504, 0.8636903762817383, 0.8636903762817383, 0.8677849769592285, 0.8704266548156738, 0.8758420348167419, 0.8739928603172302, 0.8790120482444763, 0.8768987059593201, 0.8751816153526306, 0.8794082403182983, 0.8813894987106323, 0.8860124349594116, 0.8874653577804565, 0.8856161832809448, 0.8838990926742554, 0.8877294659614563, 0.8918240666389465, 0.8918240666389465, 0.8922203183174133, 0.8953903317451477, 0.89552241563797, 0.9002773761749268, 0.9049002528190613, 0.9034473896026611, 0.9035794734954834, 0.9038436412811279, 0.9085986018180847, 0.9095231890678406, 0.9095231890678406, 0.909259021282196, 0.910711944103241], "val_loss": [2.0414316654205322, 1.5168657302856445, 1.0494927167892456, 0.8396123051643372, 0.7532041668891907, 0.6975494027137756, 0.6532282829284668, 0.6188269853591919, 0.5909113883972168, 0.5747429728507996, 0.5562715530395508, 0.5392115712165833, 0.5226473808288574, 0.5080817937850952, 0.49551260471343994, 0.4949219524860382, 0.48097461462020874, 0.46894019842147827, 0.4645398259162903, 0.4554585814476013, 0.44845467805862427, 0.44272810220718384, 0.4365209937095642, 0.4303407371044159, 0.42757970094680786, 0.42137086391448975, 0.4158954322338104, 0.4094981253147125, 0.40614867210388184, 0.40746310353279114, 0.39686036109924316, 0.39440515637397766, 0.39069101214408875, 0.3898474872112274, 0.3889416456222534, 0.3833497166633606, 0.387736976146698, 0.3792175352573395, 0.3778442442417145, 0.37528878450393677, 0.3729557991027832, 0.37016138434410095, 0.36690768599510193, 0.36455467343330383, 0.36386409401893616, 0.3628668487071991, 0.365796834230423, 0.36076274514198303, 0.3599783480167389, 0.35867130756378174, 0.35705167055130005, 0.35411083698272705, 0.3552299737930298, 0.3651564121246338, 0.36276260018348694, 0.34837988018989563, 0.34821584820747375, 0.3528410792350769, 0.3496720790863037, 0.3506317138671875, 0.34951722621917725, 0.3443804085254669, 0.345913290977478, 0.3461855351924896, 0.3431210517883301, 0.348863810300827, 0.3426092565059662], "val_accuracy": [0.5373333096504211, 0.6570000052452087, 0.6759999990463257, 0.7110000252723694, 0.7286666631698608, 0.7419999837875366, 0.7590000033378601, 0.7616666555404663, 0.7836666703224182, 0.7903333306312561, 0.7886666655540466, 0.8006666898727417, 0.809333324432373, 0.8183333277702332, 0.8146666884422302, 0.8140000104904175, 0.8233333230018616, 0.8289999961853027, 0.8326666951179504, 0.8363333344459534, 0.8389999866485596, 0.8366666436195374, 0.8363333344459534, 0.8489999771118164, 0.847000002861023, 0.8519999980926514, 0.8533333539962769, 0.8560000061988831, 0.8573333621025085, 0.8539999723434448, 0.8619999885559082, 0.862666666507721, 0.8656666874885559, 0.8629999756813049, 0.8646666407585144, 0.8636666536331177, 0.8603333234786987, 0.8659999966621399, 0.8673333525657654, 0.8673333525657654, 0.8713333606719971, 0.8703333139419556, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8730000257492065, 0.871999979019165, 0.874666690826416, 0.875333309173584, 0.874666690826416, 0.875, 0.8786666393280029, 0.8776666522026062, 0.8743333220481873, 0.8723333477973938, 0.8833333253860474, 0.8826666474342346, 0.8790000081062317, 0.8836666941642761, 0.878333330154419, 0.8820000290870667, 0.887666642665863, 0.8820000290870667, 0.8803333044052124, 0.8830000162124634, 0.8846666812896729, 0.8856666684150696]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8568571209907532, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2249162197113037, 1.8688427209854126, 1.3860594034194946, 1.1005091667175293, 0.9422269463539124, 0.8386425375938416, 0.7781860828399658, 0.7374652624130249, 0.7030532360076904, 0.6630280017852783, 0.6461893320083618, 0.622175931930542, 0.6048411130905151, 0.5840053558349609, 0.5722494721412659, 0.5534492135047913, 0.5373742580413818, 0.5299616456031799, 0.5160268545150757, 0.5075758099555969, 0.4951436519622803, 0.4901360869407654, 0.4819883704185486, 0.47552236914634705, 0.4607992172241211, 0.4551783502101898, 0.44319596886634827, 0.4364527463912964, 0.42929697036743164, 0.417416512966156, 0.41409167647361755, 0.4049663245677948, 0.400816947221756, 0.3930877149105072, 0.39116984605789185, 0.380039244890213, 0.37482866644859314, 0.37164515256881714, 0.3690796494483948, 0.36173373460769653, 0.35219112038612366, 0.352434366941452, 0.34325817227363586, 0.32954293489456177, 0.3377581536769867, 0.3272066116333008, 0.3303385078907013], "accuracy": [0.27037379145622253, 0.48487651348114014, 0.5676925182342529, 0.6091665625572205, 0.6604147553443909, 0.6954167485237122, 0.7230220437049866, 0.733588695526123, 0.7390040755271912, 0.7552502751350403, 0.7666094303131104, 0.7689869403839111, 0.7774402499198914, 0.7835160493850708, 0.7913089394569397, 0.8001585006713867, 0.8053097128868103, 0.8117818236351013, 0.8157442808151245, 0.8181217908859253, 0.8203672170639038, 0.8252542614936829, 0.8232730031013489, 0.8264430165290833, 0.8355567455291748, 0.837537944316864, 0.843481719493866, 0.8482366800308228, 0.8438779711723328, 0.8500858545303345, 0.852331280708313, 0.8598600029945374, 0.8560295701026917, 0.8569541573524475, 0.8585391640663147, 0.8622375130653381, 0.8664641380310059, 0.8689737319946289, 0.8658037185668945, 0.8702945709228516, 0.8706908226013184, 0.8726720213890076, 0.8776912093162537, 0.8804649114608765, 0.8803328275680542, 0.8817857503890991, 0.8805969953536987], "val_loss": [2.0391950607299805, 1.5154966115951538, 1.0526560544967651, 0.8537584543228149, 0.7636411190032959, 0.7062597870826721, 0.6625635623931885, 0.6336593627929688, 0.6035538911819458, 0.5862715840339661, 0.573731541633606, 0.5521013736724854, 0.5399004817008972, 0.5270940661430359, 0.5123825669288635, 0.5019798874855042, 0.5009087920188904, 0.48620402812957764, 0.47677358984947205, 0.4747946858406067, 0.46621012687683105, 0.461263507604599, 0.45254307985305786, 0.45152339339256287, 0.44825479388237, 0.4370870888233185, 0.43561872839927673, 0.43099915981292725, 0.4271834194660187, 0.4216524660587311, 0.4161020815372467, 0.4129689931869507, 0.41432368755340576, 0.4099796414375305, 0.40361955761909485, 0.4037705957889557, 0.4049019515514374, 0.39908382296562195, 0.39354369044303894, 0.39573198556900024, 0.39359623193740845, 0.3871076703071594, 0.38704851269721985, 0.3869650065898895, 0.38057780265808105, 0.3784905672073364, 0.3855905830860138], "val_accuracy": [0.5239999890327454, 0.6506666541099548, 0.6740000247955322, 0.6976666450500488, 0.7310000061988831, 0.7429999709129333, 0.7549999952316284, 0.7646666765213013, 0.781333327293396, 0.7749999761581421, 0.7896666526794434, 0.7953333258628845, 0.8043333292007446, 0.8073333501815796, 0.8133333325386047, 0.8199999928474426, 0.8173333406448364, 0.8243333101272583, 0.8309999704360962, 0.82833331823349, 0.8316666483879089, 0.8303333520889282, 0.8376666903495789, 0.8366666436195374, 0.8366666436195374, 0.8426666855812073, 0.8410000205039978, 0.8456666469573975, 0.8473333120346069, 0.8516666889190674, 0.8516666889190674, 0.8510000109672546, 0.8506666421890259, 0.8546666502952576, 0.8539999723434448, 0.8529999852180481, 0.8543333411216736, 0.8573333621025085, 0.859000027179718, 0.8556666374206543, 0.8536666631698608, 0.8629999756813049, 0.859000027179718, 0.859000027179718, 0.8616666793823242, 0.8619999885559082, 0.8629999756813049]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], [0, 2, 5, 0, 3, 2, 2, 7, 0, 7, 7, 4, 7, 1, 8, 7, 3, 1, 9], [0, 1, 0, 1, 3, 0, 3, 1, 2, 1, 0, 3, 2], [39, 39, 8, 10, 52], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 72], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [4, 0, 0, 3, 0, 0, 4, 1, 3, 0], [16, 99, 28, 99, 61, 75]], "fitness": -0.5508571267127991, "mapping_values": [1, 32, 19, 13, 5, 10, 6, 4, 2, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(tf.math.add(grad, tf.math.pow(tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), grad), alpha)), tf.math.subtract(grad, alpha))), tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), grad), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), grad))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(grad, alpha)))", "other_info": {"loss": [2.246011734008789, 1.9488999843597412, 1.928676962852478, 2.413741111755371, 3.536186695098877, 2.3264546394348145], "accuracy": [0.20737022161483765, 0.37287017703056335, 0.39506009221076965, 0.17593449354171753, 0.2899220585823059, 0.09655263274908066], "val_loss": [1.8057080507278442, 2.1260604858398438, 2.677124261856079, 2.1643240451812744, 2.4031472206115723, 2.3037993907928467], "val_accuracy": [0.5699999928474426, 0.3343333303928375, 0.20100000500679016, 0.28066667914390564, 0.10133333504199982, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 18], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 2, 4, 0, 8, 3, 4, 6], [0, 0, 1, 4, 0, 0, 2, 1, 2, 0, 5, 2], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(alpha, grad))), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(beta))))), tf.math.sqrt(tf.math.multiply(alpha, beta))), tf.math.pow(tf.math.divide_no_nan(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), grad), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 26, 14, 12, 5], "tree_depth": 17}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 1, 1], [6, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [3], [99], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 0, 1, 4, 1, 4, 2, 8], [0, 0, 1, 3, 0, 0, 4, 1, 2, 0], [16, 99, 96, 99, 50, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 2, 3, 2, 10, 6, 4, 2, 2, 1, 1, 0, 1, 0, 1, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3039255142211914, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 6, 3, 0, 1], [0, 1, 0, 2], [47, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 4, 7, 2, 0, 3, 0], [0, 2, 1, 3, 1, 1, 3, 5], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [6, 3, 3, 0, 3, 1, 4, 1, 4, 2, 8, 5, 6, 4, 3, 7, 6, 2, 1, 8, 4, 3, 7, 6, 9, 8, 8, 6, 7, 6, 3, 7, 3, 2, 5, 5, 1, 4, 4, 9, 5, 6, 0, 7, 8, 1, 3, 5, 9, 9, 7, 6, 3, 4, 2, 4, 4, 4, 4, 9, 7, 2, 2, 2, 6, 0, 9, 7, 2, 0, 9, 3, 6, 1], [0, 0, 0, 3, 0, 0, 3, 4, 3, 0, 4, 5, 7, 6, 6, 2, 5, 2, 4, 3, 4, 2, 7, 1, 6, 3, 0, 3, 7, 0, 3, 1, 7, 4, 6, 0, 0, 3, 5, 1, 0, 3, 1, 2, 2, 3, 4], [16, 99, 96, 99, 61, 1, 70, 23, 35, 91, 21, 4, 12, 26, 26, 92, 67, 78]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 19, 11, 8, 1, 2, 1, 1, 1, 121, 74, 47, 18], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.math.subtract(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(alpha, tf.math.pow(tf.math.add(tf.math.add(grad, alpha), tf.math.negative(alpha)), tf.math.multiply(grad, tf.math.negative(grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.multiply(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), sigma), tf.math.sqrt(tf.math.square(grad)))))), sigma), tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.subtract(grad, grad), tf.math.sqrt(tf.math.pow(grad, tf.math.multiply(grad, tf.math.add(tf.math.divide_no_nan(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(beta, tf.math.multiply(grad, beta)), tf.math.add(grad, tf.math.multiply(tf.math.add(tf.math.square(tf.math.square(tf.math.subtract(sigma, tf.math.pow(tf.math.pow(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), grad), tf.math.square(tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, grad)), alpha)))))), tf.math.sqrt(tf.math.subtract(tf.math.multiply(grad, sigma), tf.math.square(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))))))), tf.math.add(tf.math.divide_no_nan(tf.math.multiply(sigma, tf.math.pow(tf.math.add(grad, tf.math.pow(tf.math.pow(tf.math.pow(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), alpha), tf.math.add(grad, tf.math.add(tf.math.add(tf.math.add(tf.math.divide_no_nan(grad, tf.math.negative(grad)), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), sigma)))), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), grad), alpha)), tf.math.add(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(sigma), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.subtract(beta, beta), sigma))), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}]