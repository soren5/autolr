[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8420000076293945, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223722457885742, 1.868991494178772, 1.3987051248550415, 1.101961612701416, 0.9633309841156006, 0.8583381772041321, 0.7876943945884705, 0.7397896647453308, 0.7132779955863953, 0.6688051223754883, 0.6504880785942078, 0.6333132982254028, 0.604555606842041, 0.5888569355010986, 0.5749945044517517, 0.5525588989257812, 0.5460129380226135, 0.5293204188346863, 0.5191513895988464, 0.5015360713005066, 0.4957136809825897, 0.48495733737945557, 0.4767276644706726, 0.4686480760574341, 0.4568493664264679, 0.4546057879924774, 0.44325506687164307, 0.4369964897632599, 0.432844340801239, 0.42003852128982544, 0.4160342216491699, 0.41044434905052185, 0.4014239013195038, 0.39218977093696594, 0.38873976469039917, 0.381632000207901, 0.3787619471549988, 0.37386927008628845, 0.37355849146842957, 0.3597000241279602, 0.35236766934394836, 0.3538393974304199, 0.3457600474357605, 0.34751418232917786, 0.3342944085597992, 0.33248499035835266, 0.32828041911125183, 0.323645681142807, 0.321682333946228, 0.3172324001789093, 0.3118886351585388, 0.30954208970069885, 0.2992543876171112, 0.30030882358551025, 0.29667484760284424, 0.2912444770336151, 0.29039907455444336], "accuracy": [0.26443007588386536, 0.4765552878379822, 0.555408775806427, 0.6085061430931091, 0.6524897813796997, 0.6900013089179993, 0.7154933214187622, 0.7304186820983887, 0.7360982894897461, 0.7497028112411499, 0.761590301990509, 0.7703077793121338, 0.77677983045578, 0.7854973077774048, 0.793422281742096, 0.800290584564209, 0.7988376617431641, 0.807158887386322, 0.8171972036361694, 0.8191784620285034, 0.8198388814926147, 0.8236692547798157, 0.8297450542449951, 0.8345000743865967, 0.8363492488861084, 0.8409721255302429, 0.8438779711723328, 0.8396512866020203, 0.845859169960022, 0.8510104417800903, 0.8512746095657349, 0.8529917001724243, 0.8544445633888245, 0.8617091774940491, 0.8573504090309143, 0.8659358024597168, 0.863558292388916, 0.867520809173584, 0.8647470474243164, 0.8725399374961853, 0.8746532797813416, 0.8722757697105408, 0.8778232932090759, 0.8790120482444763, 0.8808611631393433, 0.8800686597824097, 0.8816536664962769, 0.8811253309249878, 0.8861445188522339, 0.8870691061019897, 0.8889182209968567, 0.887597382068634, 0.8952582478523254, 0.8927486538887024, 0.8922203183174133, 0.8953903317451477, 0.8949940800666809], "val_loss": [2.038900375366211, 1.5109113454818726, 1.0359565019607544, 0.8242639303207397, 0.7398606538772583, 0.6836169362068176, 0.6375452280044556, 0.6057837605476379, 0.5883339643478394, 0.5615777969360352, 0.5478910207748413, 0.5329150557518005, 0.5231806039810181, 0.5094248056411743, 0.50310218334198, 0.49140673875808716, 0.481894850730896, 0.47095638513565063, 0.4677866995334625, 0.4613795280456543, 0.4534837305545807, 0.44939687848091125, 0.4467127323150635, 0.4370623826980591, 0.43103548884391785, 0.43260928988456726, 0.42400163412094116, 0.42052218317985535, 0.41636770963668823, 0.4206162393093109, 0.4121183753013611, 0.4092763662338257, 0.40623804926872253, 0.40451592206954956, 0.40415799617767334, 0.396111398935318, 0.3951079249382019, 0.3939744830131531, 0.3891301155090332, 0.3896694481372833, 0.3855961859226227, 0.3885369896888733, 0.3840000331401825, 0.3826550245285034, 0.37994906306266785, 0.3764553964138031, 0.38196566700935364, 0.37359026074409485, 0.3743247985839844, 0.3759254515171051, 0.37097087502479553, 0.37038853764533997, 0.3696408271789551, 0.37016698718070984, 0.3675353229045868, 0.3695884943008423, 0.3737194836139679], "val_accuracy": [0.5230000019073486, 0.6503333449363708, 0.6786666512489319, 0.7056666612625122, 0.7443333268165588, 0.765999972820282, 0.7739999890327454, 0.7870000004768372, 0.7850000262260437, 0.796999990940094, 0.8026666641235352, 0.8113333582878113, 0.8136666417121887, 0.8186666369438171, 0.8223333358764648, 0.82833331823349, 0.8289999961853027, 0.8353333473205566, 0.8360000252723694, 0.8356666564941406, 0.8396666646003723, 0.8399999737739563, 0.8410000205039978, 0.8416666388511658, 0.8519999980926514, 0.8450000286102295, 0.8460000157356262, 0.8496666550636292, 0.8543333411216736, 0.8450000286102295, 0.8516666889190674, 0.8553333282470703, 0.8539999723434448, 0.8576666712760925, 0.8506666421890259, 0.8546666502952576, 0.8583333492279053, 0.8603333234786987, 0.8613333106040955, 0.8603333234786987, 0.859333336353302, 0.859000027179718, 0.8586666584014893, 0.8659999966621399, 0.8659999966621399, 0.8669999837875366, 0.8603333234786987, 0.8679999709129333, 0.8659999966621399, 0.8666666746139526, 0.8686666488647461, 0.8700000047683716, 0.8686666488647461, 0.8653333187103271, 0.8690000176429749, 0.8690000176429749, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 5], [0, 1, 0, 2], [95, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 5, 5], [0, 3, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 8, 4, 8, 2, 8], [0, 0, 0, 3, 0, 2, 3, 4, 2, 0], [16, 51, 96, 99, 61, 26]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 5, 3, 2, 10, 6, 4, 2, 2, 1, 1, 1, 16, 9, 7, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32)), beta), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 0], [39, 56], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5, 1, 3, 5, 0, 4, 0], [0, 2, 0, 3, 0, 5, 0], [8, 16, 43, 78], [0, 1], [8], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 1, 3, 4, 7, 9, 3, 3, 6, 8, 8, 8], [3, 4, 0, 3, 0, 0, 3, 1, 2, 0, 4, 5, 5, 3, 0, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.subtract(tf.math.multiply(grad, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.negative(tf.math.pow(grad, tf.math.negative(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.subtract(tf.math.multiply(tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), alpha)), beta))))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), grad)), tf.math.multiply(grad, tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.sqrt(tf.math.sqrt(grad))), sigma), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10381719470024109, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}, "mapping_values": [1, 6, 3, 3, 2, 19, 12, 7, 4, 2, 1, 1, 1, 38, 22, 16, 6], "tree_depth": 32}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 60], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 39], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 9, 9], [2, 0, 0, 4, 0, 3, 3, 1, 2, 0], [16, 99, 96, 99, 61, 66]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 1, 0, 1, 1, 2, 1, 1, 1, 18, 10, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, sigma)))), alpha), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 5, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 3, 0, 3, 5, 4], [0, 2, 0, 3], [16, 29], [0, 1], [5], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 2, 3, 6, 8, 1, 1, 1, 4, 2, 8], [0, 0, 0, 3, 0, 3, 3, 1, 2, 4], [16, 99, 96, 48, 74, 67]], "fitness": -0.09000000357627869, "mapping_values": [1, 9, 5, 4, 2, 11, 7, 4, 2, 2, 1, 1, 1, 18, 9, 9, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.pow(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, sigma)))), alpha), beta)", "other_info": {"loss": [2.3099236488342285, 2.3092310428619385, 2.3099091053009033, 2.3096725940704346, 2.309880495071411, 2.309326648712158], "accuracy": [0.09166556596755981, 0.0956280529499054, 0.09457138925790787, 0.09206181764602661, 0.09298639744520187, 0.09325055778026581], "val_loss": [2.3087847232818604, 2.3087847232818604, 2.3087847232818604, 2.3087847232818604, 2.3087847232818604, 2.3087847232818604], "val_accuracy": [0.08633333444595337, 0.08633333444595337, 0.08633333444595337, 0.08633333444595337, 0.08633333444595337, 0.08633333444595337]}}]