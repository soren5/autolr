[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8862857222557068, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222418785095215, 1.8632627725601196, 1.3950724601745605, 1.0979150533676147, 0.9474178552627563, 0.8543937802314758, 0.7783248424530029, 0.7376496195793152, 0.7006842494010925, 0.6746688485145569, 0.647553563117981, 0.6295329928398132, 0.6112891435623169, 0.58865886926651, 0.5667527914047241, 0.5575993657112122, 0.5467248558998108, 0.5289703011512756, 0.5205997824668884, 0.5110849142074585, 0.5064045786857605, 0.4867391884326935, 0.4731372892856598, 0.47443822026252747, 0.46410614252090454, 0.4545186161994934, 0.445819616317749, 0.4367676079273224, 0.4321127235889435, 0.4275900721549988, 0.4177286922931671, 0.40700381994247437, 0.40491974353790283, 0.3923063576221466, 0.38597339391708374, 0.37638187408447266, 0.3749813437461853, 0.3708414137363434, 0.369646281003952, 0.3635149896144867, 0.3594855070114136, 0.3503628671169281, 0.3338625133037567, 0.3396199643611908, 0.33679017424583435, 0.3303111493587494, 0.3275522291660309, 0.3153315782546997, 0.3093845844268799, 0.31660354137420654, 0.313541054725647, 0.3128948211669922, 0.2977619469165802, 0.30230653285980225, 0.298944890499115, 0.28947505354881287, 0.2822195291519165, 0.2778712213039398, 0.2668195366859436, 0.26853811740875244, 0.26283398270606995, 0.2662760019302368, 0.2576100528240204, 0.25102800130844116, 0.2539205849170685, 0.25087955594062805, 0.24508193135261536], "accuracy": [0.280940443277359, 0.48685774207115173, 0.5665037631988525, 0.616299033164978, 0.6625280380249023, 0.6930392384529114, 0.7169462442398071, 0.7320036888122559, 0.7375511527061462, 0.7491744756698608, 0.7672698497772217, 0.7670056819915771, 0.7745344042778015, 0.7876105904579163, 0.7906485199928284, 0.7994980812072754, 0.802800178527832, 0.8068947196006775, 0.8117818236351013, 0.8153480291366577, 0.8181217908859253, 0.829216718673706, 0.8300092220306396, 0.8238013386726379, 0.8325188159942627, 0.8385946154594421, 0.8372738361358643, 0.842028796672821, 0.8451988101005554, 0.8481045961380005, 0.8515387773513794, 0.8549728989601135, 0.8516708612442017, 0.8603883385658264, 0.8598600029945374, 0.8667283058166504, 0.8636903762817383, 0.8636903762817383, 0.8677849769592285, 0.8704266548156738, 0.8758420348167419, 0.8739928603172302, 0.8790120482444763, 0.8768987059593201, 0.8751816153526306, 0.8794082403182983, 0.8813894987106323, 0.8860124349594116, 0.8874653577804565, 0.8856161832809448, 0.8838990926742554, 0.8877294659614563, 0.8918240666389465, 0.8918240666389465, 0.8922203183174133, 0.8953903317451477, 0.89552241563797, 0.9002773761749268, 0.9049002528190613, 0.9034473896026611, 0.9035794734954834, 0.9038436412811279, 0.9085986018180847, 0.9095231890678406, 0.9095231890678406, 0.909259021282196, 0.910711944103241], "val_loss": [2.0414316654205322, 1.5168657302856445, 1.0494927167892456, 0.8396123051643372, 0.7532041668891907, 0.6975494027137756, 0.6532282829284668, 0.6188269853591919, 0.5909113883972168, 0.5747429728507996, 0.5562715530395508, 0.5392115712165833, 0.5226473808288574, 0.5080817937850952, 0.49551260471343994, 0.4949219524860382, 0.48097461462020874, 0.46894019842147827, 0.4645398259162903, 0.4554585814476013, 0.44845467805862427, 0.44272810220718384, 0.4365209937095642, 0.4303407371044159, 0.42757970094680786, 0.42137086391448975, 0.4158954322338104, 0.4094981253147125, 0.40614867210388184, 0.40746310353279114, 0.39686036109924316, 0.39440515637397766, 0.39069101214408875, 0.3898474872112274, 0.3889416456222534, 0.3833497166633606, 0.387736976146698, 0.3792175352573395, 0.3778442442417145, 0.37528878450393677, 0.3729557991027832, 0.37016138434410095, 0.36690768599510193, 0.36455467343330383, 0.36386409401893616, 0.3628668487071991, 0.365796834230423, 0.36076274514198303, 0.3599783480167389, 0.35867130756378174, 0.35705167055130005, 0.35411083698272705, 0.3552299737930298, 0.3651564121246338, 0.36276260018348694, 0.34837988018989563, 0.34821584820747375, 0.3528410792350769, 0.3496720790863037, 0.3506317138671875, 0.34951722621917725, 0.3443804085254669, 0.345913290977478, 0.3461855351924896, 0.3431210517883301, 0.348863810300827, 0.3426092565059662], "val_accuracy": [0.5373333096504211, 0.6570000052452087, 0.6759999990463257, 0.7110000252723694, 0.7286666631698608, 0.7419999837875366, 0.7590000033378601, 0.7616666555404663, 0.7836666703224182, 0.7903333306312561, 0.7886666655540466, 0.8006666898727417, 0.809333324432373, 0.8183333277702332, 0.8146666884422302, 0.8140000104904175, 0.8233333230018616, 0.8289999961853027, 0.8326666951179504, 0.8363333344459534, 0.8389999866485596, 0.8366666436195374, 0.8363333344459534, 0.8489999771118164, 0.847000002861023, 0.8519999980926514, 0.8533333539962769, 0.8560000061988831, 0.8573333621025085, 0.8539999723434448, 0.8619999885559082, 0.862666666507721, 0.8656666874885559, 0.8629999756813049, 0.8646666407585144, 0.8636666536331177, 0.8603333234786987, 0.8659999966621399, 0.8673333525657654, 0.8673333525657654, 0.8713333606719971, 0.8703333139419556, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8730000257492065, 0.871999979019165, 0.874666690826416, 0.875333309173584, 0.874666690826416, 0.875, 0.8786666393280029, 0.8776666522026062, 0.8743333220481873, 0.8723333477973938, 0.8833333253860474, 0.8826666474342346, 0.8790000081062317, 0.8836666941642761, 0.878333330154419, 0.8820000290870667, 0.887666642665863, 0.8820000290870667, 0.8803333044052124, 0.8830000162124634, 0.8846666812896729, 0.8856666684150696]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8591428399085999, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223841905593872, 1.8647792339324951, 1.3915400505065918, 1.0920790433883667, 0.9307610988616943, 0.8275312781333923, 0.7746172547340393, 0.7179229259490967, 0.6843329668045044, 0.6566967964172363, 0.6296777129173279, 0.6107355952262878, 0.5905797481536865, 0.5716721415519714, 0.5567155480384827, 0.5445375442504883, 0.5317472219467163, 0.5128377079963684, 0.5026278495788574, 0.4860647916793823, 0.4805819094181061, 0.47228795289993286, 0.46918436884880066, 0.4537990987300873, 0.44415587186813354, 0.4303726553916931, 0.4249531328678131, 0.4219207167625427, 0.40995416045188904, 0.406030535697937, 0.40070459246635437, 0.3960210978984833, 0.38543328642845154, 0.3800012171268463, 0.36927297711372375, 0.36912840604782104, 0.3573419153690338, 0.3599955141544342, 0.35255205631256104, 0.3404770493507385, 0.34066811203956604, 0.3298434019088745], "accuracy": [0.266939640045166, 0.497820645570755, 0.5659754276275635, 0.6173557043075562, 0.6662263870239258, 0.7041342258453369, 0.7250033020973206, 0.7411174178123474, 0.752212405204773, 0.7600052952766418, 0.774798572063446, 0.7800818681716919, 0.7860256433486938, 0.7948752045631409, 0.8020076751708984, 0.8080834746360779, 0.8105930685997009, 0.8171972036361694, 0.8231409192085266, 0.8235371708869934, 0.8272355198860168, 0.8305375576019287, 0.8359529972076416, 0.8364813327789307, 0.8392550349235535, 0.8496896028518677, 0.8524633646011353, 0.848368763923645, 0.8564258217811584, 0.8544445633888245, 0.8582749962806702, 0.8590674996376038, 0.8614450097084045, 0.8676528930664062, 0.8692378997802734, 0.8679170608520508, 0.8733324408531189, 0.8712190985679626, 0.8716153502464294, 0.8749174475669861, 0.8758420348167419, 0.8840311765670776], "val_loss": [2.038487195968628, 1.5107407569885254, 1.0332307815551758, 0.8248385190963745, 0.7386990785598755, 0.6855221390724182, 0.6442306041717529, 0.6099659204483032, 0.587838351726532, 0.5688930153846741, 0.5505828261375427, 0.5350707769393921, 0.518759548664093, 0.5048038959503174, 0.4974801540374756, 0.48317644000053406, 0.47727230191230774, 0.46335238218307495, 0.4565131962299347, 0.4491085708141327, 0.43889546394348145, 0.43783077597618103, 0.4305292069911957, 0.4235776364803314, 0.41762450337409973, 0.41629594564437866, 0.4079715311527252, 0.404677152633667, 0.4009174406528473, 0.39477017521858215, 0.3962899446487427, 0.39142492413520813, 0.3854755759239197, 0.38306212425231934, 0.3780990540981293, 0.377824068069458, 0.3742494583129883, 0.37781965732574463, 0.3718855679035187, 0.3718026578426361, 0.3683509826660156, 0.3696424067020416], "val_accuracy": [0.5493333339691162, 0.6549999713897705, 0.6859999895095825, 0.7106666564941406, 0.7360000014305115, 0.7540000081062317, 0.7649999856948853, 0.7703333497047424, 0.7776666879653931, 0.7846666574478149, 0.7879999876022339, 0.7993333339691162, 0.8066666722297668, 0.8140000104904175, 0.8106666803359985, 0.8206666707992554, 0.8196666836738586, 0.8376666903495789, 0.8370000123977661, 0.8413333296775818, 0.8423333168029785, 0.843999981880188, 0.8516666889190674, 0.8573333621025085, 0.8560000061988831, 0.8489999771118164, 0.859666645526886, 0.8613333106040955, 0.859666645526886, 0.8606666922569275, 0.8606666922569275, 0.859000027179718, 0.8640000224113464, 0.8666666746139526, 0.8683333396911621, 0.8690000176429749, 0.8730000257492065, 0.8646666407585144, 0.8640000224113464, 0.8679999709129333, 0.8676666617393494, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [77, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 0], [6, 9], [0], [99, 79], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1], [6, 3, 3, 0, 6, 1, 4, 1, 4, 2, 8, 5, 0, 1, 4, 3, 1, 9, 8, 2, 1, 4, 3, 7, 5, 4, 1, 1, 0, 8, 1, 4, 1, 1, 4, 2, 0, 5, 4, 1, 4, 7, 1, 8, 8, 4, 4, 3, 2, 6, 0, 2, 9, 1, 6, 9], [0, 0, 1, 3, 0, 0, 3, 1, 2, 0, 1, 4, 1, 6, 6, 2, 2, 5, 4, 4, 4, 2, 0, 6, 5, 0, 6, 2, 0, 6, 4, 6, 2, 7, 4, 6, 2, 7], [16, 99, 96, 99, 61, 1, 55, 41, 83, 39, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 2, 3, 2, 1, 2, 94, 56, 38, 11], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.divide_no_nan(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), alpha), tf.math.pow(tf.math.add(tf.math.sqrt(sigma), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.negative(sigma))), alpha))), tf.math.subtract(tf.math.pow(tf.math.multiply(tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(beta)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), alpha)), tf.math.subtract(tf.math.pow(tf.math.multiply(tf.math.add(tf.math.square(grad), tf.math.pow(tf.math.subtract(tf.math.subtract(tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.math.pow(grad, tf.math.subtract(beta, tf.math.subtract(beta, grad))), tf.math.pow(grad, tf.math.add(tf.math.negative(tf.math.square(tf.math.pow(grad, grad))), tf.math.subtract(tf.math.pow(tf.math.add(tf.math.subtract(tf.math.sqrt(beta), tf.math.sqrt(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))), grad), grad), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))))), grad), beta), tf.math.pow(tf.math.pow(tf.math.multiply(tf.math.add(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), grad), grad), grad), tf.math.divide_no_nan(beta, tf.math.negative(tf.math.add(grad, grad)))))), grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.divide_no_nan(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 4, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0], [16, 41, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 2, 2, 1, 1, 1, 10, 5, 5, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.303825616836548, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 3, 0, 5], [0, 1, 0, 2], [12, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 3], [3, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 5, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [57, 99, 96, 71, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 3, 2, 1, 7, 4, 3, 1, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303690195083618, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 3], [0, 1, 0, 2], [19, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 6, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1], [6, 3, 3, 6, 6, 1, 4, 2, 4, 2, 8, 6, 6, 5, 4, 2, 6, 1, 8, 4, 7, 4, 6, 1, 1, 7, 5, 8, 3, 5], [0, 0, 1, 3, 0, 0, 3, 1, 2, 0, 3, 0, 4, 4, 6, 6, 7, 4, 3, 1, 0, 6, 6, 3, 7], [95, 99, 96, 99, 61, 1, 56]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 6, 3, 3, 1, 2, 1, 1, 1, 55, 30, 25, 7], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(grad, beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.math.add(tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma))), tf.math.sqrt(tf.math.divide_no_nan(alpha, beta))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.square(tf.math.pow(tf.math.add(sigma, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.sqrt(tf.math.pow(tf.math.add(tf.math.pow(grad, tf.math.divide_no_nan(grad, grad)), tf.math.subtract(tf.math.subtract(grad, grad), tf.math.add(tf.math.square(sigma), alpha))), tf.math.sqrt(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), grad)))), grad)), tf.math.multiply(sigma, tf.math.square(grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925]}}]