[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8654285669326782, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222815990447998, 1.8640252351760864, 1.3903752565383911, 1.0907821655273438, 0.9486833810806274, 0.8465737700462341, 0.7852112054824829, 0.7341509461402893, 0.7004581093788147, 0.6678454279899597, 0.6473845839500427, 0.6234441995620728, 0.603456437587738, 0.5872215628623962, 0.5778091549873352, 0.5537441968917847, 0.5408769845962524, 0.5329652428627014, 0.5276036858558655, 0.517037034034729, 0.5019669532775879, 0.49441930651664734, 0.47854316234588623, 0.473940372467041, 0.46237364411354065, 0.4541824162006378, 0.4441366493701935, 0.4445632994174957, 0.4257560968399048, 0.42352959513664246, 0.42432066798210144, 0.4128694236278534, 0.4112760126590729, 0.40144965052604675, 0.39658698439598083, 0.3882961869239807, 0.3763023912906647, 0.3828721344470978, 0.3712921440601349, 0.36897003650665283, 0.36159056425094604, 0.354214072227478, 0.35361433029174805, 0.3465966582298279, 0.3400025963783264, 0.33406883478164673, 0.3323865532875061, 0.32941001653671265, 0.32197973132133484, 0.3168855607509613, 0.31303444504737854, 0.31008380651474, 0.3111121356487274, 0.29966703057289124], "accuracy": [0.2712983787059784, 0.5057455897331238, 0.564258337020874, 0.6219785809516907, 0.6601505875587463, 0.6993792057037354, 0.7195879220962524, 0.7360982894897461, 0.7483819723129272, 0.761590301990509, 0.7714964747428894, 0.778232753276825, 0.7864218950271606, 0.7911768555641174, 0.7965922355651855, 0.8016114234924316, 0.8088759779930115, 0.8146876096725464, 0.8127063512802124, 0.8186501264572144, 0.8240655064582825, 0.8219521641731262, 0.8284242749214172, 0.8374059200286865, 0.8389908671379089, 0.8457271456718445, 0.843481719493866, 0.8409721255302429, 0.8495575189590454, 0.8487650156021118, 0.852331280708313, 0.8561616539955139, 0.8533879518508911, 0.856689989566803, 0.8581429123878479, 0.8644828796386719, 0.8647470474243164, 0.8643507957458496, 0.8672566413879395, 0.8692378997802734, 0.8741249442100525, 0.8741249442100525, 0.8747853636741638, 0.8757099509239197, 0.878879964351654, 0.880729079246521, 0.8804649114608765, 0.8850878477096558, 0.886672854423523, 0.8842953443527222, 0.8868049383163452, 0.8894465565681458, 0.8861445188522339, 0.8945978283882141], "val_loss": [2.0364389419555664, 1.516180396080017, 1.0496768951416016, 0.844713568687439, 0.7588956952095032, 0.6948505640029907, 0.6507881283760071, 0.6164711713790894, 0.583613932132721, 0.5653771162033081, 0.543076753616333, 0.5271690487861633, 0.5153678059577942, 0.4979492127895355, 0.48741185665130615, 0.4762755036354065, 0.4724040925502777, 0.4576796889305115, 0.4550397992134094, 0.4484812021255493, 0.4403890073299408, 0.4316587746143341, 0.42461124062538147, 0.419150710105896, 0.4134329855442047, 0.41004443168640137, 0.4038717448711395, 0.3965196907520294, 0.39502155780792236, 0.39059534668922424, 0.39202937483787537, 0.3870982229709625, 0.3841058611869812, 0.3735690116882324, 0.3715842366218567, 0.3700024485588074, 0.36560890078544617, 0.3670872449874878, 0.3635087013244629, 0.36035701632499695, 0.3579690456390381, 0.36039209365844727, 0.35636040568351746, 0.3496836721897125, 0.3498498499393463, 0.3471086919307709, 0.34854361414909363, 0.3495435416698456, 0.34295979142189026, 0.34886524081230164, 0.34295156598091125, 0.33991149067878723, 0.3374670445919037, 0.3389325737953186], "val_accuracy": [0.5379999876022339, 0.6430000066757202, 0.6763333082199097, 0.6976666450500488, 0.7239999771118164, 0.749666690826416, 0.7566666603088379, 0.7649999856948853, 0.781000018119812, 0.784333348274231, 0.7979999780654907, 0.8046666383743286, 0.8080000281333923, 0.8176666498184204, 0.8223333358764648, 0.8263333439826965, 0.8259999752044678, 0.8320000171661377, 0.8346666693687439, 0.8370000123977661, 0.8386666774749756, 0.8386666774749756, 0.843666672706604, 0.8500000238418579, 0.843999981880188, 0.8519999980926514, 0.8473333120346069, 0.8533333539962769, 0.8550000190734863, 0.8539999723434448, 0.8516666889190674, 0.8560000061988831, 0.8566666841506958, 0.8636666536331177, 0.8650000095367432, 0.8629999756813049, 0.8659999966621399, 0.8659999966621399, 0.8683333396911621, 0.862666666507721, 0.8679999709129333, 0.8683333396911621, 0.8703333139419556, 0.871999979019165, 0.871999979019165, 0.8696666955947876, 0.8706666827201843, 0.8686666488647461, 0.8730000257492065, 0.8700000047683716, 0.8700000047683716, 0.8709999918937683, 0.8726666569709778, 0.8706666827201843]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 2, 3, 0, 3, 3, 3, 4, 7, 8, 1, 5, 7, 5, 3, 4], [0, 1, 0, 2, 0, 3, 2, 2, 2, 1, 1, 3], [39, 39, 13], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 2, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 99, 92, 76, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 28, 16, 12, 3, 1, 0, 1, 1, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(grad, tf.math.pow(tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.subtract(grad, grad))), grad))), tf.math.square(tf.math.add(tf.math.square(tf.math.multiply(tf.math.pow(grad, alpha), alpha)), grad)))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(sigma, grad)), tf.math.pow(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09338264167308807, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 3, 2, 3, 6, 6, 2, 2, 1, 7, 5, 7, 7, 5, 3, 0, 2, 4, 0], [1, 1, 0, 2, 0, 2, 2, 3, 1, 0, 3, 1, 3, 2, 2, 3, 0], [39, 39, 30, 8], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 6, 0, 3, 5], [3, 2, 0, 3], [16, 83], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 0, 6, 1, 4, 1, 4, 2, 8], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [62, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 37, 20, 17, 4, 10, 6, 4, 1, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.add(grad, tf.math.subtract(tf.math.add(tf.math.square(tf.math.add(grad, tf.math.add(grad, alpha))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(grad, alpha)), tf.math.pow(tf.math.negative(grad), grad))))), grad), grad))), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 2, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 1, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 2, 4], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 2, 0], [16, 99, 96, 99, 61, 1, 93]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 10, 6, 4, 2, 2, 1, 1, 1, 24, 12, 12, 7], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.pow(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2095.520263671875, 4112.3232421875, 4943.77001953125, 5703.65576171875, 6181.4482421875, 6724.86572265625], "accuracy": [0.09642054885625839, 0.09945846349000931, 0.10381719470024109, 0.09576013684272766, 0.09932637959718704, 0.1010434553027153], "val_loss": [2637.403076171875, 3395.980224609375, 3913.447021484375, 4342.43115234375, 4727.8125, 5087.06884765625], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [6, 2, 3, 2, 3], [0, 1, 0, 2, 1], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 2, 3, 0, 3, 5, 0], [0, 2, 0, 3, 2], [16, 16], [0, 1], [0], [0], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 6, 2, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 85, 96, 99, 61, 95]], "fitness": -0.09971428662538528, "mapping_values": [1, 9, 4, 5, 2, 12, 7, 5, 2, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, alpha))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), grad), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, alpha)))))", "other_info": {"loss": [1533927302889472.0, 1.8147231883623137e+18, 9.070046459775366e+19, 1.273560412987639e+21, 1.921296399631223e+22, 1.6734102597334143e+23], "accuracy": [0.09509972482919693, 0.09826971590518951, 0.10038304328918457, 0.09800554811954498, 0.09813763201236725, 0.108440101146698], "val_loss": [3.5342648076140544e+16, 1.169989113653651e+19, 3.152196746623572e+20, 3.0060075101818234e+21, 3.75892537574512e+22, 2.351361791367453e+23], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.0963333323597908, 0.09866666793823242]}}]