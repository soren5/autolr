[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.878000020980835, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223759174346924, 1.8681567907333374, 1.3971633911132812, 1.1021500825881958, 0.9438490867614746, 0.8268281817436218, 0.7700234055519104, 0.7182450890541077, 0.6839274764060974, 0.655160665512085, 0.6316797733306885, 0.6046612858772278, 0.586663544178009, 0.5732303261756897, 0.5552444458007812, 0.5382086634635925, 0.5205084085464478, 0.5141545534133911, 0.49866363406181335, 0.4905571937561035, 0.48713892698287964, 0.4630949795246124, 0.46493759751319885, 0.4510720372200012, 0.4456666111946106, 0.4411585330963135, 0.43109801411628723, 0.4194287657737732, 0.41647717356681824, 0.4177640676498413, 0.39898860454559326, 0.3982110619544983, 0.3941095173358917, 0.3838343918323517, 0.38270825147628784, 0.38132011890411377, 0.3706604242324829, 0.3630581796169281, 0.35970449447631836, 0.3585955500602722, 0.3488880693912506, 0.3406795859336853, 0.3434852361679077, 0.34305644035339355, 0.32770219445228577, 0.3274216949939728, 0.3164256513118744, 0.31487780809402466, 0.31453031301498413, 0.3020377457141876, 0.3013147711753845, 0.29238083958625793, 0.30650538206100464, 0.2886098325252533, 0.28784143924713135, 0.28922179341316223, 0.27991431951522827, 0.27731093764305115, 0.27029022574424744, 0.2677718997001648, 0.2672445476055145], "accuracy": [0.27182671427726746, 0.4913485646247864, 0.5609562993049622, 0.6095628142356873, 0.6618676781654358, 0.6997754573822021, 0.7215691208839417, 0.7407211661338806, 0.7508915662765503, 0.7592127919197083, 0.7656848430633545, 0.7798177003860474, 0.7849689722061157, 0.789459764957428, 0.7991018295288086, 0.806630551815033, 0.81112140417099, 0.8088759779930115, 0.8210275769233704, 0.8181217908859253, 0.826310932636261, 0.8333113193511963, 0.8294808864593506, 0.8401796221733093, 0.8409721255302429, 0.8436138033866882, 0.8459912538528442, 0.8519350290298462, 0.8485008478164673, 0.8490291833877563, 0.856689989566803, 0.8573504090309143, 0.8615770936012268, 0.8644828796386719, 0.8605204224586487, 0.8614450097084045, 0.8671245574951172, 0.8726720213890076, 0.8732003569602966, 0.8689737319946289, 0.8762382864952087, 0.8798044919967651, 0.8717474341392517, 0.8825782537460327, 0.8840311765670776, 0.8845595121383667, 0.8885219693183899, 0.8865407705307007, 0.8887861371040344, 0.894069492816925, 0.8918240666389465, 0.8953903317451477, 0.8860124349594116, 0.8988244533538818, 0.8992207050323486, 0.8956544995307922, 0.9014661312103271, 0.89988112449646, 0.900409460067749, 0.9046360850334167, 0.9033153057098389], "val_loss": [2.0386126041412354, 1.5089809894561768, 1.0396978855133057, 0.8277255296707153, 0.7414798736572266, 0.6867381930351257, 0.6452507376670837, 0.6096968054771423, 0.5920496582984924, 0.5695558786392212, 0.550778865814209, 0.5315823554992676, 0.5166425704956055, 0.5040237307548523, 0.4927339255809784, 0.48035380244255066, 0.4752146899700165, 0.4640548527240753, 0.45926037430763245, 0.4498494863510132, 0.44989997148513794, 0.43486902117729187, 0.4302854835987091, 0.42699891328811646, 0.4222937822341919, 0.4179273545742035, 0.4156407117843628, 0.40615877509117126, 0.40567347407341003, 0.40483561158180237, 0.4008205533027649, 0.3957735300064087, 0.3910598158836365, 0.39842313528060913, 0.38378071784973145, 0.3824272155761719, 0.37983548641204834, 0.3832281529903412, 0.37993335723876953, 0.37290528416633606, 0.37028563022613525, 0.3697679340839386, 0.369826078414917, 0.3630952835083008, 0.3613884747028351, 0.3612003028392792, 0.3630628287792206, 0.35836127400398254, 0.35707563161849976, 0.3544061779975891, 0.35439038276672363, 0.35541149973869324, 0.34793493151664734, 0.355723112821579, 0.3566884696483612, 0.3480426073074341, 0.35176366567611694, 0.34468159079551697, 0.3469727337360382, 0.34757280349731445, 0.34379008412361145], "val_accuracy": [0.546999990940094, 0.6536666750907898, 0.6856666803359985, 0.7066666483879089, 0.7366666793823242, 0.7536666393280029, 0.7599999904632568, 0.7720000147819519, 0.7706666588783264, 0.7926666736602783, 0.7963333129882812, 0.7956666946411133, 0.8103333115577698, 0.809333324432373, 0.8220000267028809, 0.8226666450500488, 0.8243333101272583, 0.8330000042915344, 0.8349999785423279, 0.8370000123977661, 0.8333333134651184, 0.8429999947547913, 0.8463333249092102, 0.8446666598320007, 0.8476666808128357, 0.8479999899864197, 0.8450000286102295, 0.8506666421890259, 0.8496666550636292, 0.8529999852180481, 0.8556666374206543, 0.8556666374206543, 0.8586666584014893, 0.8526666760444641, 0.8576666712760925, 0.8610000014305115, 0.859000027179718, 0.8616666793823242, 0.8653333187103271, 0.8673333525657654, 0.8673333525657654, 0.8659999966621399, 0.8693333268165588, 0.8690000176429749, 0.8726666569709778, 0.8726666569709778, 0.8740000128746033, 0.8730000257492065, 0.871999979019165, 0.8759999871253967, 0.874666690826416, 0.871999979019165, 0.8806666731834412, 0.8776666522026062, 0.8706666827201843, 0.8820000290870667, 0.878333330154419, 0.878000020980835, 0.8806666731834412, 0.8793333172798157, 0.878333330154419]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8645714521408081, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.22318959236145, 1.8702667951583862, 1.395251989364624, 1.094192385673523, 0.9431267976760864, 0.8462518453598022, 0.7796184420585632, 0.7334131002426147, 0.6878957152366638, 0.6721376776695251, 0.6368390917778015, 0.6220695376396179, 0.5943217277526855, 0.5677013397216797, 0.554705023765564, 0.5502162575721741, 0.541736900806427, 0.5160480737686157, 0.5065678954124451, 0.49933770298957825, 0.4889519512653351, 0.47201982140541077, 0.4603838324546814, 0.45918890833854675, 0.447721391916275, 0.4350188672542572, 0.4353167414665222, 0.4245746433734894, 0.4173860549926758, 0.41289472579956055, 0.40306079387664795, 0.40072619915008545, 0.38977715373039246, 0.38474997878074646, 0.3778635859489441, 0.3848455250263214, 0.370093435049057, 0.3623318374156952, 0.36134085059165955, 0.36137688159942627, 0.35915037989616394, 0.3495770990848541, 0.33940818905830383, 0.3433041572570801, 0.3264121413230896, 0.31811362504959106, 0.328143835067749, 0.3125379979610443], "accuracy": [0.26997753977775574, 0.49029189348220825, 0.566239595413208, 0.616299033164978, 0.6625280380249023, 0.6977941989898682, 0.7191916704177856, 0.7321357727050781, 0.7532690763473511, 0.7539294958114624, 0.7667415142059326, 0.7783648371696472, 0.7903843522071838, 0.7936864495277405, 0.8018755912780762, 0.8026680946350098, 0.802271842956543, 0.8166688680648804, 0.8181217908859253, 0.8210275769233704, 0.8245938420295715, 0.834632158279419, 0.8372738361358643, 0.8358209133148193, 0.8418967127799988, 0.8474441766738892, 0.843481719493866, 0.848368763923645, 0.8516708612442017, 0.8565579056739807, 0.8589354157447815, 0.8615770936012268, 0.8615770936012268, 0.8667283058166504, 0.8621054291725159, 0.8622375130653381, 0.8691058158874512, 0.8730682730674744, 0.8713511824607849, 0.8741249442100525, 0.8709549307823181, 0.8751816153526306, 0.8798044919967651, 0.8808611631393433, 0.8877294659614563, 0.8873332738876343, 0.8828424215316772, 0.8870691061019897], "val_loss": [2.037339210510254, 1.5100218057632446, 1.0473426580429077, 0.8385880589485168, 0.7486615180969238, 0.6977246999740601, 0.656423807144165, 0.6198025941848755, 0.5908955931663513, 0.5714592337608337, 0.561998724937439, 0.5400760769844055, 0.5218918323516846, 0.5142709016799927, 0.4989893436431885, 0.49596354365348816, 0.4790134131908417, 0.47671395540237427, 0.45950761437416077, 0.459160715341568, 0.45693492889404297, 0.44342902302742004, 0.43683531880378723, 0.4378035366535187, 0.42650479078292847, 0.42784783244132996, 0.41564464569091797, 0.41596564650535583, 0.4101923108100891, 0.4035140872001648, 0.40418148040771484, 0.3957935869693756, 0.39543604850769043, 0.39397287368774414, 0.38971126079559326, 0.3866572976112366, 0.38753223419189453, 0.3786892592906952, 0.38203004002571106, 0.38164591789245605, 0.3887293338775635, 0.3715446889400482, 0.3722406029701233, 0.3668842017650604, 0.36882564425468445, 0.3623327314853668, 0.36435985565185547, 0.3625708520412445], "val_accuracy": [0.5483333468437195, 0.656333327293396, 0.6846666932106018, 0.7113333344459534, 0.7416666746139526, 0.753333330154419, 0.765333354473114, 0.777999997138977, 0.7889999747276306, 0.7896666526794434, 0.7996666431427002, 0.8086666464805603, 0.8080000281333923, 0.8109999895095825, 0.8203333616256714, 0.824999988079071, 0.8263333439826965, 0.8270000219345093, 0.8343333601951599, 0.8360000252723694, 0.8333333134651184, 0.8396666646003723, 0.843999981880188, 0.8410000205039978, 0.8496666550636292, 0.8479999899864197, 0.8539999723434448, 0.8550000190734863, 0.8536666631698608, 0.856333315372467, 0.8576666712760925, 0.8573333621025085, 0.8606666922569275, 0.8650000095367432, 0.8636666536331177, 0.8586666584014893, 0.8629999756813049, 0.8686666488647461, 0.8613333106040955, 0.8673333525657654, 0.8643333315849304, 0.8730000257492065, 0.8733333349227905, 0.871999979019165, 0.8726666569709778, 0.871999979019165, 0.8706666827201843, 0.871999979019165]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 4], [0, 2, 0, 3], [16, 16], [0, 0], [0, 9], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [6, 9, 3, 6, 8, 1, 4, 1, 4, 2, 8], [4, 0, 1, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.12600000202655792, "mapping_values": [1, 2, 1, 1, 1, 7, 4, 3, 2, 2, 2, 0, 1, 3, 2, 1, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)", "other_info": {"loss": [31665483153408.0, 33953683603456.0, 37511082541056.0, 37126200623104.0, 35377008082944.0, 35462534135808.0], "accuracy": [0.10962884873151779, 0.11200633645057678, 0.11491216719150543, 0.11121384054422379, 0.11306300014257431, 0.11015717685222626], "val_loss": [27874274836480.0, 27874276933632.0, 27874276933632.0, 27874274836480.0, 27874274836480.0, 27874283225088.0], "val_accuracy": [0.1276666671037674, 0.1276666671037674, 0.1276666671037674, 0.1276666671037674, 0.1276666671037674, 0.1276666671037674]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 2, 3, 3, 3, 8, 5], [2, 1, 0, 2, 3], [26, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [6, 2, 3, 0, 3, 5, 4, 3, 1, 0], [2, 2, 0, 3, 2, 3, 0, 5], [16, 16], [0, 0], [9], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 1], [16, 99, 9, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 1, 18, 10, 8, 2, 1, 1, 0, 1, 18, 9, 9, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.multiply(grad, alpha), tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), grad)), tf.math.sqrt(tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(beta), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.pow(tf.math.multiply(tf.math.subtract(beta, tf.math.negative(grad)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 7], [0, 1, 0, 2, 2], [73, 23], [1, 0, 0, 0, 1, 1, 1, 0, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [28], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 90, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 1, 0, 1, 1, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, grad)))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 2, 9, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 1, 1, 4, 2, 8], [0, 0, 0, 1, 0, 0, 3, 1, 2, 0], [16, 26, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 2, 1, 1, 1, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), alpha))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0956280529499054, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}]