[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.878000020980835, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223759174346924, 1.8681567907333374, 1.3971633911132812, 1.1021500825881958, 0.9438490867614746, 0.8268281817436218, 0.7700234055519104, 0.7182450890541077, 0.6839274764060974, 0.655160665512085, 0.6316797733306885, 0.6046612858772278, 0.586663544178009, 0.5732303261756897, 0.5552444458007812, 0.5382086634635925, 0.5205084085464478, 0.5141545534133911, 0.49866363406181335, 0.4905571937561035, 0.48713892698287964, 0.4630949795246124, 0.46493759751319885, 0.4510720372200012, 0.4456666111946106, 0.4411585330963135, 0.43109801411628723, 0.4194287657737732, 0.41647717356681824, 0.4177640676498413, 0.39898860454559326, 0.3982110619544983, 0.3941095173358917, 0.3838343918323517, 0.38270825147628784, 0.38132011890411377, 0.3706604242324829, 0.3630581796169281, 0.35970449447631836, 0.3585955500602722, 0.3488880693912506, 0.3406795859336853, 0.3434852361679077, 0.34305644035339355, 0.32770219445228577, 0.3274216949939728, 0.3164256513118744, 0.31487780809402466, 0.31453031301498413, 0.3020377457141876, 0.3013147711753845, 0.29238083958625793, 0.30650538206100464, 0.2886098325252533, 0.28784143924713135, 0.28922179341316223, 0.27991431951522827, 0.27731093764305115, 0.27029022574424744, 0.2677718997001648, 0.2672445476055145], "accuracy": [0.27182671427726746, 0.4913485646247864, 0.5609562993049622, 0.6095628142356873, 0.6618676781654358, 0.6997754573822021, 0.7215691208839417, 0.7407211661338806, 0.7508915662765503, 0.7592127919197083, 0.7656848430633545, 0.7798177003860474, 0.7849689722061157, 0.789459764957428, 0.7991018295288086, 0.806630551815033, 0.81112140417099, 0.8088759779930115, 0.8210275769233704, 0.8181217908859253, 0.826310932636261, 0.8333113193511963, 0.8294808864593506, 0.8401796221733093, 0.8409721255302429, 0.8436138033866882, 0.8459912538528442, 0.8519350290298462, 0.8485008478164673, 0.8490291833877563, 0.856689989566803, 0.8573504090309143, 0.8615770936012268, 0.8644828796386719, 0.8605204224586487, 0.8614450097084045, 0.8671245574951172, 0.8726720213890076, 0.8732003569602966, 0.8689737319946289, 0.8762382864952087, 0.8798044919967651, 0.8717474341392517, 0.8825782537460327, 0.8840311765670776, 0.8845595121383667, 0.8885219693183899, 0.8865407705307007, 0.8887861371040344, 0.894069492816925, 0.8918240666389465, 0.8953903317451477, 0.8860124349594116, 0.8988244533538818, 0.8992207050323486, 0.8956544995307922, 0.9014661312103271, 0.89988112449646, 0.900409460067749, 0.9046360850334167, 0.9033153057098389], "val_loss": [2.0386126041412354, 1.5089809894561768, 1.0396978855133057, 0.8277255296707153, 0.7414798736572266, 0.6867381930351257, 0.6452507376670837, 0.6096968054771423, 0.5920496582984924, 0.5695558786392212, 0.550778865814209, 0.5315823554992676, 0.5166425704956055, 0.5040237307548523, 0.4927339255809784, 0.48035380244255066, 0.4752146899700165, 0.4640548527240753, 0.45926037430763245, 0.4498494863510132, 0.44989997148513794, 0.43486902117729187, 0.4302854835987091, 0.42699891328811646, 0.4222937822341919, 0.4179273545742035, 0.4156407117843628, 0.40615877509117126, 0.40567347407341003, 0.40483561158180237, 0.4008205533027649, 0.3957735300064087, 0.3910598158836365, 0.39842313528060913, 0.38378071784973145, 0.3824272155761719, 0.37983548641204834, 0.3832281529903412, 0.37993335723876953, 0.37290528416633606, 0.37028563022613525, 0.3697679340839386, 0.369826078414917, 0.3630952835083008, 0.3613884747028351, 0.3612003028392792, 0.3630628287792206, 0.35836127400398254, 0.35707563161849976, 0.3544061779975891, 0.35439038276672363, 0.35541149973869324, 0.34793493151664734, 0.355723112821579, 0.3566884696483612, 0.3480426073074341, 0.35176366567611694, 0.34468159079551697, 0.3469727337360382, 0.34757280349731445, 0.34379008412361145], "val_accuracy": [0.546999990940094, 0.6536666750907898, 0.6856666803359985, 0.7066666483879089, 0.7366666793823242, 0.7536666393280029, 0.7599999904632568, 0.7720000147819519, 0.7706666588783264, 0.7926666736602783, 0.7963333129882812, 0.7956666946411133, 0.8103333115577698, 0.809333324432373, 0.8220000267028809, 0.8226666450500488, 0.8243333101272583, 0.8330000042915344, 0.8349999785423279, 0.8370000123977661, 0.8333333134651184, 0.8429999947547913, 0.8463333249092102, 0.8446666598320007, 0.8476666808128357, 0.8479999899864197, 0.8450000286102295, 0.8506666421890259, 0.8496666550636292, 0.8529999852180481, 0.8556666374206543, 0.8556666374206543, 0.8586666584014893, 0.8526666760444641, 0.8576666712760925, 0.8610000014305115, 0.859000027179718, 0.8616666793823242, 0.8653333187103271, 0.8673333525657654, 0.8673333525657654, 0.8659999966621399, 0.8693333268165588, 0.8690000176429749, 0.8726666569709778, 0.8726666569709778, 0.8740000128746033, 0.8730000257492065, 0.871999979019165, 0.8759999871253967, 0.874666690826416, 0.871999979019165, 0.8806666731834412, 0.8776666522026062, 0.8706666827201843, 0.8820000290870667, 0.878333330154419, 0.878000020980835, 0.8806666731834412, 0.8793333172798157, 0.878333330154419]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8565714359283447, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2251198291778564, 1.870861530303955, 1.3986800909042358, 1.0886726379394531, 0.9363642930984497, 0.8366144299507141, 0.7717987298965454, 0.7166086435317993, 0.683988630771637, 0.6476334929466248, 0.6358701586723328, 0.5960890054702759, 0.5840452313423157, 0.5631686449050903, 0.544096827507019, 0.5340628027915955, 0.5155713558197021, 0.5061866044998169, 0.49840182065963745, 0.48240408301353455, 0.4802638590335846, 0.46836623549461365, 0.45884889364242554, 0.449896901845932, 0.4400853216648102, 0.4374697804450989, 0.423354834318161, 0.42245379090309143, 0.413390189409256, 0.40417978167533875, 0.3947566747665405, 0.39899104833602905, 0.3896764814853668, 0.3874485194683075, 0.3763905465602875, 0.37333181500434875, 0.36455100774765015, 0.3647664189338684, 0.357617050409317, 0.3507830500602722, 0.3503541052341461, 0.33992475271224976, 0.3362791836261749, 0.32863032817840576, 0.3246646821498871, 0.32551082968711853, 0.3238888680934906, 0.315110445022583, 0.31041914224624634, 0.3166724145412445, 0.3098255395889282, 0.3035314381122589, 0.2949613332748413, 0.2910032570362091, 0.2830043137073517, 0.28178146481513977, 0.28101062774658203, 0.27078065276145935, 0.2695181965827942, 0.26746925711631775, 0.26106372475624084, 0.26303863525390625, 0.2580389678478241, 0.2502192556858063, 0.24720796942710876, 0.24525603652000427, 0.24353715777397156, 0.23238515853881836, 0.23955045640468597, 0.23476015031337738, 0.2307898849248886, 0.2240353375673294, 0.21998675167560577, 0.2224486768245697, 0.21304085850715637], "accuracy": [0.28305375576019287, 0.5017831325531006, 0.5621450543403625, 0.6239598393440247, 0.6679434776306152, 0.7025492191314697, 0.7265883088111877, 0.735041618347168, 0.7530049085617065, 0.7689869403839111, 0.7689869403839111, 0.7890635132789612, 0.7898560166358948, 0.7946110367774963, 0.8026680946350098, 0.8067626357078552, 0.8137630224227905, 0.8201030492782593, 0.8178576231002808, 0.8274996876716614, 0.828820526599884, 0.8318583965301514, 0.8392550349235535, 0.8436138033866882, 0.8471800088882446, 0.845859169960022, 0.8533879518508911, 0.8494254350662231, 0.8515387773513794, 0.8539162874221802, 0.8622375130653381, 0.8560295701026917, 0.8621054291725159, 0.8646149635314941, 0.8640866279602051, 0.8638224601745605, 0.8702945709228516, 0.8713511824607849, 0.8712190985679626, 0.8759741187095642, 0.8747853636741638, 0.8784837126731873, 0.8809932470321655, 0.8824461698532104, 0.8849557638168335, 0.8836349248886108, 0.8868049383163452, 0.8886540532112122, 0.8906353116035461, 0.8865407705307007, 0.8901069760322571, 0.893541157245636, 0.8961827754974365, 0.893541157245636, 0.8976356983184814, 0.8973715305328369, 0.8977677822113037, 0.9039757251739502, 0.9035794734954834, 0.9009377956390381, 0.9030511379241943, 0.9051644206047058, 0.9039757251739502, 0.9119006991386414, 0.9113723635673523, 0.9134856462478638, 0.9101836085319519, 0.9153348207473755, 0.9126931428909302, 0.9124290347099304, 0.9179764986038208, 0.9154669046401978, 0.9204860925674438, 0.9199577569961548, 0.9206181764602661], "val_loss": [2.041597366333008, 1.5148988962173462, 1.0360465049743652, 0.8229164481163025, 0.7287268042564392, 0.6716099977493286, 0.6280661821365356, 0.5881471633911133, 0.5624274015426636, 0.5433049201965332, 0.522986650466919, 0.5071985721588135, 0.49549412727355957, 0.48502856492996216, 0.47384700179100037, 0.4650917053222656, 0.4538918137550354, 0.4499751031398773, 0.4425126016139984, 0.43662330508232117, 0.43441179394721985, 0.4240410625934601, 0.41591697931289673, 0.4118745028972626, 0.41104263067245483, 0.4040988087654114, 0.40291252732276917, 0.3963422179222107, 0.393025279045105, 0.3961799740791321, 0.38931840658187866, 0.38613811135292053, 0.3880178928375244, 0.37707260251045227, 0.3777720630168915, 0.37305647134780884, 0.37181493639945984, 0.3721780478954315, 0.36654093861579895, 0.3625735342502594, 0.36536991596221924, 0.36286890506744385, 0.3579852283000946, 0.3597026467323303, 0.36146849393844604, 0.3544882535934448, 0.35501518845558167, 0.3595503866672516, 0.3570282459259033, 0.351421058177948, 0.3475401997566223, 0.3484427034854889, 0.3507702648639679, 0.3443126678466797, 0.3484148681163788, 0.34486880898475647, 0.34152400493621826, 0.34426388144493103, 0.3420097529888153, 0.34312793612480164, 0.34643417596817017, 0.34173429012298584, 0.34033262729644775, 0.3410516381263733, 0.3372231423854828, 0.3414382338523865, 0.33608314394950867, 0.3434607684612274, 0.3367588222026825, 0.339559942483902, 0.34451520442962646, 0.3371366262435913, 0.3403574228286743, 0.33957046270370483, 0.3453804850578308], "val_accuracy": [0.5849999785423279, 0.67166668176651, 0.699999988079071, 0.7210000157356262, 0.7440000176429749, 0.762333333492279, 0.7699999809265137, 0.7763333320617676, 0.7979999780654907, 0.8073333501815796, 0.812666654586792, 0.8240000009536743, 0.8263333439826965, 0.8303333520889282, 0.8286666870117188, 0.8336666822433472, 0.8413333296775818, 0.8433333039283752, 0.8383333086967468, 0.8506666421890259, 0.8476666808128357, 0.8519999980926514, 0.8569999933242798, 0.8556666374206543, 0.8543333411216736, 0.8573333621025085, 0.859666645526886, 0.8573333621025085, 0.859333336353302, 0.859333336353302, 0.8636666536331177, 0.8640000224113464, 0.859666645526886, 0.8640000224113464, 0.8663333058357239, 0.8703333139419556, 0.8703333139419556, 0.8703333139419556, 0.8726666569709778, 0.8733333349227905, 0.8666666746139526, 0.8690000176429749, 0.8743333220481873, 0.8743333220481873, 0.8723333477973938, 0.8726666569709778, 0.8763333559036255, 0.8756666779518127, 0.875, 0.8736666440963745, 0.8803333044052124, 0.874666690826416, 0.8759999871253967, 0.8776666522026062, 0.878000020980835, 0.8806666731834412, 0.8803333044052124, 0.8773333430290222, 0.8806666731834412, 0.8813333511352539, 0.8793333172798157, 0.8806666731834412, 0.8799999952316284, 0.8820000290870667, 0.8820000290870667, 0.8796666860580444, 0.8823333382606506, 0.8820000290870667, 0.8820000290870667, 0.8843333125114441, 0.8813333511352539, 0.8836666941642761, 0.8826666474342346, 0.8830000162124634, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 0, 0, 2], [39, 20], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 0], [16, 16, 40], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 2, 6, 8, 1, 2, 1, 4, 2, 8], [0, 0, 4, 3, 0, 3, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 10, 6, 4, 3, 1, 0, 1, 1, 16, 8, 8, 3], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(grad, sigma))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma), tf.math.subtract(sigma, alpha))", "other_info": {"loss": [2.3027844429016113, 2.3025286197662354, 2.3025481700897217, 2.302551507949829, 2.302549362182617, 2.302565574645996], "accuracy": [0.10698718577623367, 0.10276053100824356, 0.10157178342342377, 0.10289261490106583, 0.10500594228506088, 0.09998679161071777], "val_loss": [2.302589178085327, 2.3026041984558105, 2.3026034832000732, 2.3026037216186523, 2.302612543106079, 2.302615165710449], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 2], [0, 2, 0, 3], [16, 16], [0, 1], [5], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 0, 2, 0], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [16, 99, 85, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 1, 0, 1, 1, 2, 1, 1, 1, 22, 12, 10, 5], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)))), grad))), sigma)), tf.math.add(tf.math.negative(alpha), beta)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 3, 3, 0, 3], [0, 1, 0, 2], [39, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 5, 3, 0, 3, 5], [0, 2, 0, 3], [9, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 9, 2, 8, 3], [1, 0, 0, 4, 0, 0, 3, 1, 4, 0], [16, 55, 30, 99, 61, 37]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 1, 0, 1, 1, 2, 1, 1, 0, 21, 12, 9, 5], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), grad), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.math.sqrt(tf.math.multiply(alpha, grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 0, 0, 3], [18, 16, 14], [0, 1], [0], [0], [73], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 5, 1, 4, 2, 8], [4, 0, 1, 3, 0, 1, 3, 1, 2, 0], [16, 99, 96, 99, 19, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 3, 2, 1, 1, 1, 17, 9, 8, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha)), tf.math.subtract(tf.math.square(sigma), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(alpha, sigma)))), alpha)", "other_info": {"loss": [2908062208.0, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.13934750854969025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.126095398532158e+25, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.08733333647251129, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}]