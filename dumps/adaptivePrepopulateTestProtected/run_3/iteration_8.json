[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8734285831451416, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2255282402038574, 1.8721107244491577, 1.4010379314422607, 1.1106735467910767, 0.940341055393219, 0.8359335660934448, 0.7731297612190247, 0.7296580672264099, 0.6895313262939453, 0.6571158170700073, 0.633295476436615, 0.6155224442481995, 0.5889805555343628, 0.5725106596946716, 0.556487500667572, 0.5408687591552734, 0.5278533697128296, 0.5128424763679504, 0.512872576713562, 0.4899774193763733, 0.4817979633808136, 0.47892409563064575, 0.46546685695648193, 0.4566666781902313, 0.451609343290329, 0.43633145093917847, 0.4428727924823761, 0.42452678084373474, 0.42050766944885254, 0.4092382490634918, 0.40380609035491943, 0.39615246653556824, 0.39049798250198364, 0.38757410645484924, 0.37997010350227356, 0.3791789710521698, 0.3691047430038452, 0.36647623777389526, 0.362128347158432, 0.35865068435668945, 0.34899047017097473, 0.34528470039367676, 0.34164324402809143, 0.3404218256473541, 0.329362154006958, 0.32548993825912476, 0.3200454115867615, 0.319357693195343, 0.3098825216293335, 0.3054966330528259], "accuracy": [0.2689208686351776, 0.48368775844573975, 0.5597675442695618, 0.6098269820213318, 0.6647734642028809, 0.7030775547027588, 0.7220974564552307, 0.7411174178123474, 0.7464007139205933, 0.763967752456665, 0.7684586048126221, 0.7718927264213562, 0.7889314293861389, 0.7909126877784729, 0.7968564033508301, 0.8092722296714783, 0.81112140417099, 0.8166688680648804, 0.8145555257797241, 0.8244617581367493, 0.8317263126373291, 0.8261788487434387, 0.8339717388153076, 0.8411042094230652, 0.8413683772087097, 0.8438779711723328, 0.8467837572097778, 0.846387505531311, 0.8527275323867798, 0.8576145768165588, 0.8529917001724243, 0.8617091774940491, 0.8622375130653381, 0.8621054291725159, 0.8650112152099609, 0.8644828796386719, 0.8721436858177185, 0.8687095642089844, 0.8734645247459412, 0.8747853636741638, 0.8800686597824097, 0.8786157965660095, 0.882710337638855, 0.8792761564254761, 0.8811253309249878, 0.885219931602478, 0.8856161832809448, 0.886672854423523, 0.886672854423523, 0.8899748921394348], "val_loss": [2.046873092651367, 1.5288923978805542, 1.0626829862594604, 0.856019914150238, 0.7606016993522644, 0.7008227705955505, 0.6582002639770508, 0.6210333704948425, 0.5941072702407837, 0.5707116723060608, 0.5571823120117188, 0.5361080169677734, 0.5217938423156738, 0.5068894624710083, 0.49441617727279663, 0.4871320128440857, 0.47810932993888855, 0.47213321924209595, 0.4643647372722626, 0.4517059624195099, 0.4470732808113098, 0.44019225239753723, 0.4363744854927063, 0.43239396810531616, 0.42653128504753113, 0.4212285280227661, 0.41591763496398926, 0.4089317321777344, 0.40691429376602173, 0.4042397439479828, 0.39867520332336426, 0.4001860022544861, 0.38896405696868896, 0.3901083469390869, 0.3860934376716614, 0.38403454422950745, 0.3824399709701538, 0.3795788884162903, 0.37650981545448303, 0.37731820344924927, 0.3719942271709442, 0.37503206729888916, 0.3734400272369385, 0.3695981800556183, 0.3660171627998352, 0.36835432052612305, 0.3619896173477173, 0.36234453320503235, 0.36134591698646545, 0.3571830987930298], "val_accuracy": [0.5239999890327454, 0.6553333401679993, 0.6856666803359985, 0.7023333311080933, 0.7279999852180481, 0.7490000128746033, 0.762333333492279, 0.7716666460037231, 0.7816666960716248, 0.7889999747276306, 0.7993333339691162, 0.8040000200271606, 0.8073333501815796, 0.8183333277702332, 0.8243333101272583, 0.8226666450500488, 0.8220000267028809, 0.8273333311080933, 0.8326666951179504, 0.8353333473205566, 0.8360000252723694, 0.8389999866485596, 0.8379999995231628, 0.8420000076293945, 0.8403333425521851, 0.8489999771118164, 0.8493333458900452, 0.8483333587646484, 0.8500000238418579, 0.8503333330154419, 0.8543333411216736, 0.8493333458900452, 0.8546666502952576, 0.8550000190734863, 0.8579999804496765, 0.8566666841506958, 0.8576666712760925, 0.8606666922569275, 0.8603333234786987, 0.8576666712760925, 0.862666666507721, 0.8583333492279053, 0.8616666793823242, 0.8606666922569275, 0.8679999709129333, 0.862333357334137, 0.8650000095367432, 0.8663333058357239, 0.8663333058357239, 0.8663333058357239]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8679999709129333, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2232158184051514, 1.8628642559051514, 1.3866525888442993, 1.0923168659210205, 0.946931004524231, 0.8422515988349915, 0.7818672060966492, 0.7319341897964478, 0.6902596354484558, 0.6672953367233276, 0.6396744847297668, 0.6256952881813049, 0.5984439849853516, 0.5826901793479919, 0.5685834884643555, 0.5616718530654907, 0.5394769310951233, 0.5260592103004456, 0.5175665616989136, 0.5053364634513855, 0.4915907680988312, 0.4817233085632324, 0.4850347340106964, 0.47499629855155945, 0.46402299404144287, 0.4553944766521454, 0.44443854689598083, 0.4433444142341614, 0.42755550146102905, 0.4288349449634552, 0.4141973555088043, 0.41111889481544495, 0.4062057435512543, 0.39010849595069885, 0.394901841878891, 0.3829115927219391, 0.37562617659568787, 0.36836037039756775, 0.35833659768104553, 0.3564264476299286, 0.35375577211380005, 0.3456955850124359, 0.3418075740337372, 0.3421810269355774, 0.33471012115478516, 0.33448129892349243, 0.32392850518226624, 0.3210108280181885, 0.3170902132987976, 0.31764140725135803, 0.3128374516963959, 0.305144339799881, 0.29494452476501465, 0.3040052652359009, 0.2947159707546234, 0.29223012924194336, 0.2873924970626831, 0.27588850259780884], "accuracy": [0.2736758589744568, 0.4934619069099426, 0.5686171054840088, 0.609959065914154, 0.6610751748085022, 0.6979262828826904, 0.719852089881897, 0.7349095344543457, 0.750231146812439, 0.7568352818489075, 0.7697794437408447, 0.7721568942070007, 0.7796856164932251, 0.7886672616004944, 0.7989697456359863, 0.7931581139564514, 0.8034605979919434, 0.8103289008140564, 0.8152159452438354, 0.8178576231002808, 0.8206313848495483, 0.8305375576019287, 0.8267071843147278, 0.8285563588142395, 0.8341038227081299, 0.8364813327789307, 0.8389908671379089, 0.846387505531311, 0.8518029451370239, 0.8495575189590454, 0.8521991968154907, 0.8498216867446899, 0.8585391640663147, 0.8595958352088928, 0.8590674996376038, 0.8656716346740723, 0.8681812286376953, 0.8705587387084961, 0.8749174475669861, 0.872407853603363, 0.8733324408531189, 0.8776912093162537, 0.8817857503890991, 0.8772949576377869, 0.880729079246521, 0.8820499181747437, 0.8819178342819214, 0.8838990926742554, 0.8870691061019897, 0.8862766027450562, 0.8899748921394348, 0.8887861371040344, 0.8905032277107239, 0.8893144726753235, 0.893541157245636, 0.8932769894599915, 0.8981640338897705, 0.898428201675415], "val_loss": [2.035611867904663, 1.5146995782852173, 1.055725336074829, 0.8476089835166931, 0.7565409541130066, 0.6991873383522034, 0.6476633548736572, 0.6163965463638306, 0.5853117108345032, 0.5645002722740173, 0.5422728657722473, 0.5250363945960999, 0.5079638361930847, 0.49532800912857056, 0.4854069948196411, 0.4723970592021942, 0.4698733985424042, 0.45193472504615784, 0.44414055347442627, 0.4335685074329376, 0.4270341396331787, 0.42043399810791016, 0.415802925825119, 0.40868496894836426, 0.4019385576248169, 0.3958982229232788, 0.39243510365486145, 0.38464322686195374, 0.37814152240753174, 0.37858039140701294, 0.37241625785827637, 0.37429630756378174, 0.3635455369949341, 0.3596961200237274, 0.3658284544944763, 0.35387128591537476, 0.3554324805736542, 0.3521636426448822, 0.34736189246177673, 0.34464991092681885, 0.3416794538497925, 0.3399564325809479, 0.33607468008995056, 0.33570024371147156, 0.3361507058143616, 0.332711398601532, 0.32944315671920776, 0.3243543207645416, 0.33121171593666077, 0.32551392912864685, 0.3277716636657715, 0.3205636739730835, 0.3217439651489258, 0.31895866990089417, 0.3224889039993286, 0.3183012902736664, 0.3153882920742035, 0.3183731734752655], "val_accuracy": [0.5059999823570251, 0.6449999809265137, 0.6733333468437195, 0.7046666741371155, 0.7273333072662354, 0.7423333525657654, 0.7549999952316284, 0.7743333578109741, 0.7736666798591614, 0.7889999747276306, 0.8090000152587891, 0.812666654586792, 0.8166666626930237, 0.8180000185966492, 0.82833331823349, 0.8349999785423279, 0.82833331823349, 0.8420000076293945, 0.8433333039283752, 0.8489999771118164, 0.8503333330154419, 0.8493333458900452, 0.8539999723434448, 0.8539999723434448, 0.8573333621025085, 0.8603333234786987, 0.8640000224113464, 0.8619999885559082, 0.8636666536331177, 0.8629999756813049, 0.8673333525657654, 0.8669999837875366, 0.874666690826416, 0.8723333477973938, 0.8669999837875366, 0.874666690826416, 0.8723333477973938, 0.8759999871253967, 0.8736666440963745, 0.8756666779518127, 0.8743333220481873, 0.8799999952316284, 0.878333330154419, 0.8813333511352539, 0.8820000290870667, 0.8823333382606506, 0.8846666812896729, 0.8840000033378601, 0.8820000290870667, 0.8823333382606506, 0.8830000162124634, 0.887333333492279, 0.8899999856948853, 0.887333333492279, 0.8833333253860474, 0.8893333077430725, 0.8886666893959045, 0.8856666684150696]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 2, 3, 0, 3], [2, 2, 0, 2], [39, 12], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 8, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 21]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 1, 1, 0, 1, 1, 2, 1, 1, 1, 11, 6, 5, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3041880130767822, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 72], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 2, 0, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [94], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 1, 8, 2, 7, 4, 5, 9, 7, 3, 5], [2, 0, 0, 3, 4, 0, 3, 1, 2, 0, 0, 6, 4, 5], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 6, 4, 2, 1, 2, 1, 1, 1, 33, 19, 14, 6], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.math.pow(tf.math.subtract(tf.math.sqrt(grad), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.math.pow(sigma, alpha), tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32))), beta)), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), grad), tf.math.multiply(grad, tf.math.square(grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [49, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 6, 3, 3, 8, 6], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 3, 5, 3, 2], [16, 99, 96, 99, 42, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.sqrt(tf.math.divide_no_nan(alpha, beta))))))), tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.multiply(sigma, grad))), tf.math.sqrt(tf.math.divide_no_nan(sigma, beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 30, 16, 14, 6], "tree_depth": 23}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [5, 5, 3, 0, 3, 0], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [6, 3, 5, 6, 8, 1, 4, 1, 8, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 31, 1]], "fitness": -0.09314285963773727, "mapping_values": [1, 9, 5, 4, 2, 6, 4, 2, 1, 2, 1, 1, 1, 15, 8, 7, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.square(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), sigma)", "other_info": {"loss": [2.3103854656219482, 2.31009578704834, 2.3096280097961426, 2.3106775283813477, 2.3107492923736572, 2.308931589126587], "accuracy": [0.10077928751707077, 0.09285431355237961, 0.09985470771789551, 0.09470347315073013, 0.08836349099874496, 0.09536388516426086], "val_loss": [2.3083128929138184, 2.30831241607666, 2.308311939239502, 2.308311939239502, 2.308311939239502, 2.308311939239502], "val_accuracy": [0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503]}}]