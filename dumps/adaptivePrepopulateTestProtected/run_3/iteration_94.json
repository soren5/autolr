[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.878000020980835, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223759174346924, 1.8681567907333374, 1.3971633911132812, 1.1021500825881958, 0.9438490867614746, 0.8268281817436218, 0.7700234055519104, 0.7182450890541077, 0.6839274764060974, 0.655160665512085, 0.6316797733306885, 0.6046612858772278, 0.586663544178009, 0.5732303261756897, 0.5552444458007812, 0.5382086634635925, 0.5205084085464478, 0.5141545534133911, 0.49866363406181335, 0.4905571937561035, 0.48713892698287964, 0.4630949795246124, 0.46493759751319885, 0.4510720372200012, 0.4456666111946106, 0.4411585330963135, 0.43109801411628723, 0.4194287657737732, 0.41647717356681824, 0.4177640676498413, 0.39898860454559326, 0.3982110619544983, 0.3941095173358917, 0.3838343918323517, 0.38270825147628784, 0.38132011890411377, 0.3706604242324829, 0.3630581796169281, 0.35970449447631836, 0.3585955500602722, 0.3488880693912506, 0.3406795859336853, 0.3434852361679077, 0.34305644035339355, 0.32770219445228577, 0.3274216949939728, 0.3164256513118744, 0.31487780809402466, 0.31453031301498413, 0.3020377457141876, 0.3013147711753845, 0.29238083958625793, 0.30650538206100464, 0.2886098325252533, 0.28784143924713135, 0.28922179341316223, 0.27991431951522827, 0.27731093764305115, 0.27029022574424744, 0.2677718997001648, 0.2672445476055145], "accuracy": [0.27182671427726746, 0.4913485646247864, 0.5609562993049622, 0.6095628142356873, 0.6618676781654358, 0.6997754573822021, 0.7215691208839417, 0.7407211661338806, 0.7508915662765503, 0.7592127919197083, 0.7656848430633545, 0.7798177003860474, 0.7849689722061157, 0.789459764957428, 0.7991018295288086, 0.806630551815033, 0.81112140417099, 0.8088759779930115, 0.8210275769233704, 0.8181217908859253, 0.826310932636261, 0.8333113193511963, 0.8294808864593506, 0.8401796221733093, 0.8409721255302429, 0.8436138033866882, 0.8459912538528442, 0.8519350290298462, 0.8485008478164673, 0.8490291833877563, 0.856689989566803, 0.8573504090309143, 0.8615770936012268, 0.8644828796386719, 0.8605204224586487, 0.8614450097084045, 0.8671245574951172, 0.8726720213890076, 0.8732003569602966, 0.8689737319946289, 0.8762382864952087, 0.8798044919967651, 0.8717474341392517, 0.8825782537460327, 0.8840311765670776, 0.8845595121383667, 0.8885219693183899, 0.8865407705307007, 0.8887861371040344, 0.894069492816925, 0.8918240666389465, 0.8953903317451477, 0.8860124349594116, 0.8988244533538818, 0.8992207050323486, 0.8956544995307922, 0.9014661312103271, 0.89988112449646, 0.900409460067749, 0.9046360850334167, 0.9033153057098389], "val_loss": [2.0386126041412354, 1.5089809894561768, 1.0396978855133057, 0.8277255296707153, 0.7414798736572266, 0.6867381930351257, 0.6452507376670837, 0.6096968054771423, 0.5920496582984924, 0.5695558786392212, 0.550778865814209, 0.5315823554992676, 0.5166425704956055, 0.5040237307548523, 0.4927339255809784, 0.48035380244255066, 0.4752146899700165, 0.4640548527240753, 0.45926037430763245, 0.4498494863510132, 0.44989997148513794, 0.43486902117729187, 0.4302854835987091, 0.42699891328811646, 0.4222937822341919, 0.4179273545742035, 0.4156407117843628, 0.40615877509117126, 0.40567347407341003, 0.40483561158180237, 0.4008205533027649, 0.3957735300064087, 0.3910598158836365, 0.39842313528060913, 0.38378071784973145, 0.3824272155761719, 0.37983548641204834, 0.3832281529903412, 0.37993335723876953, 0.37290528416633606, 0.37028563022613525, 0.3697679340839386, 0.369826078414917, 0.3630952835083008, 0.3613884747028351, 0.3612003028392792, 0.3630628287792206, 0.35836127400398254, 0.35707563161849976, 0.3544061779975891, 0.35439038276672363, 0.35541149973869324, 0.34793493151664734, 0.355723112821579, 0.3566884696483612, 0.3480426073074341, 0.35176366567611694, 0.34468159079551697, 0.3469727337360382, 0.34757280349731445, 0.34379008412361145], "val_accuracy": [0.546999990940094, 0.6536666750907898, 0.6856666803359985, 0.7066666483879089, 0.7366666793823242, 0.7536666393280029, 0.7599999904632568, 0.7720000147819519, 0.7706666588783264, 0.7926666736602783, 0.7963333129882812, 0.7956666946411133, 0.8103333115577698, 0.809333324432373, 0.8220000267028809, 0.8226666450500488, 0.8243333101272583, 0.8330000042915344, 0.8349999785423279, 0.8370000123977661, 0.8333333134651184, 0.8429999947547913, 0.8463333249092102, 0.8446666598320007, 0.8476666808128357, 0.8479999899864197, 0.8450000286102295, 0.8506666421890259, 0.8496666550636292, 0.8529999852180481, 0.8556666374206543, 0.8556666374206543, 0.8586666584014893, 0.8526666760444641, 0.8576666712760925, 0.8610000014305115, 0.859000027179718, 0.8616666793823242, 0.8653333187103271, 0.8673333525657654, 0.8673333525657654, 0.8659999966621399, 0.8693333268165588, 0.8690000176429749, 0.8726666569709778, 0.8726666569709778, 0.8740000128746033, 0.8730000257492065, 0.871999979019165, 0.8759999871253967, 0.874666690826416, 0.871999979019165, 0.8806666731834412, 0.8776666522026062, 0.8706666827201843, 0.8820000290870667, 0.878333330154419, 0.878000020980835, 0.8806666731834412, 0.8793333172798157, 0.878333330154419]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8640000224113464, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221204996109009, 1.8624118566513062, 1.3870317935943604, 1.1021925210952759, 0.9466687440872192, 0.8371720314025879, 0.7681113481521606, 0.7244185209274292, 0.6791427135467529, 0.6572992205619812, 0.6405891180038452, 0.6121727824211121, 0.5894244313240051, 0.5741766095161438, 0.5574140548706055, 0.5442898869514465, 0.5266320109367371, 0.5125064849853516, 0.5104672908782959, 0.49584537744522095, 0.48280054330825806, 0.48152801394462585, 0.4698370099067688, 0.4591664671897888, 0.4534166753292084, 0.4441635012626648, 0.434499055147171, 0.42788171768188477, 0.4199480414390564, 0.4212140142917633, 0.40954360365867615, 0.40577298402786255, 0.3956744074821472, 0.3827303946018219, 0.3921877443790436, 0.3828885555267334, 0.3735720217227936, 0.37177973985671997, 0.35964637994766235, 0.3568950891494751, 0.35387998819351196, 0.35812944173812866, 0.3444153666496277, 0.33362236618995667, 0.3368183970451355, 0.33850401639938354, 0.3227406442165375, 0.3302236795425415, 0.3204517960548401, 0.31695541739463806, 0.31424129009246826, 0.30381450057029724, 0.30348479747772217, 0.30022427439689636, 0.29803773760795593, 0.2873358130455017, 0.291316419839859, 0.28893813490867615, 0.27508512139320374, 0.2888695001602173, 0.27098268270492554, 0.26939716935157776, 0.2685372531414032, 0.26216304302215576, 0.26368170976638794], "accuracy": [0.2785629332065582, 0.48566898703575134, 0.5626733303070068, 0.6193369626998901, 0.656980574131012, 0.7010962963104248, 0.7170783281326294, 0.7310791015625, 0.752212405204773, 0.7582882046699524, 0.7617223858833313, 0.7730814814567566, 0.780610203742981, 0.7885351777076721, 0.7947431206703186, 0.8013472557067871, 0.806630551815033, 0.81548011302948, 0.8129705190658569, 0.821820080280304, 0.8257825970649719, 0.8272355198860168, 0.830669641494751, 0.8345000743865967, 0.8370096683502197, 0.8403117060661316, 0.8451988101005554, 0.8491612672805786, 0.8548408150672913, 0.8512746095657349, 0.8535200357437134, 0.8558974862098694, 0.8617091774940491, 0.8621054291725159, 0.8589354157447815, 0.8650112152099609, 0.86553955078125, 0.8684453964233398, 0.8735966086387634, 0.8745211958885193, 0.8726720213890076, 0.8734645247459412, 0.8784837126731873, 0.8800686597824097, 0.8805969953536987, 0.878351628780365, 0.8835028409957886, 0.8782195448875427, 0.8819178342819214, 0.8887861371040344, 0.8858803510665894, 0.8936732411384583, 0.8918240666389465, 0.891559898853302, 0.8944657444953918, 0.89552241563797, 0.8953903317451477, 0.8963148593902588, 0.8985602855682373, 0.8988244533538818, 0.9030511379241943, 0.9026548862457275, 0.9038436412811279, 0.9075419306755066, 0.9039757251739502], "val_loss": [2.0360312461853027, 1.4996432065963745, 1.0248137712478638, 0.8241318464279175, 0.7397313714027405, 0.6814895868301392, 0.6309608817100525, 0.6006243228912354, 0.5740203261375427, 0.5515540242195129, 0.5345295071601868, 0.5189262628555298, 0.5027067065238953, 0.49456411600112915, 0.48267635703086853, 0.47423556447029114, 0.462840735912323, 0.4526994526386261, 0.44917774200439453, 0.441409170627594, 0.4363555610179901, 0.4328738749027252, 0.4261115789413452, 0.41880106925964355, 0.4107298254966736, 0.40711528062820435, 0.40602871775627136, 0.39930713176727295, 0.39554691314697266, 0.39087942242622375, 0.39086344838142395, 0.39181894063949585, 0.38383346796035767, 0.3808240294456482, 0.3768445551395416, 0.3747721314430237, 0.37057048082351685, 0.3724402189254761, 0.3646351397037506, 0.36708182096481323, 0.3659442663192749, 0.3621583580970764, 0.3570479452610016, 0.35817334055900574, 0.3561501204967499, 0.3520558178424835, 0.3566074073314667, 0.34985896944999695, 0.3499024212360382, 0.35133251547813416, 0.3474803864955902, 0.349093496799469, 0.3513934314250946, 0.34471550583839417, 0.3430919051170349, 0.3468017578125, 0.3410996198654175, 0.3368474841117859, 0.3426496982574463, 0.340798944234848, 0.33754828572273254, 0.34456607699394226, 0.33906033635139465, 0.3353000581264496, 0.33940133452415466], "val_accuracy": [0.5546666383743286, 0.6753333210945129, 0.6973333358764648, 0.7239999771118164, 0.7426666617393494, 0.7633333206176758, 0.7733333110809326, 0.7823333144187927, 0.7923333048820496, 0.8046666383743286, 0.8090000152587891, 0.8253333568572998, 0.8256666660308838, 0.8270000219345093, 0.8386666774749756, 0.8360000252723694, 0.8433333039283752, 0.8456666469573975, 0.8519999980926514, 0.8550000190734863, 0.8529999852180481, 0.8529999852180481, 0.8560000061988831, 0.8606666922569275, 0.8633333444595337, 0.862333357334137, 0.8619999885559082, 0.8619999885559082, 0.8653333187103271, 0.8700000047683716, 0.8723333477973938, 0.8693333268165588, 0.8669999837875366, 0.8713333606719971, 0.8733333349227905, 0.871666669845581, 0.874666690826416, 0.875333309173584, 0.8740000128746033, 0.875333309173584, 0.8759999871253967, 0.874666690826416, 0.8776666522026062, 0.878000020980835, 0.8820000290870667, 0.8820000290870667, 0.875, 0.8833333253860474, 0.8793333172798157, 0.8769999742507935, 0.8816666603088379, 0.8823333382606506, 0.8843333125114441, 0.8856666684150696, 0.8816666603088379, 0.8836666941642761, 0.8863333463668823, 0.8886666893959045, 0.8859999775886536, 0.8913333415985107, 0.8870000243186951, 0.8830000162124634, 0.8899999856948853, 0.890999972820282, 0.8870000243186951]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [6, 0, 3, 4, 3, 0, 1, 2, 3, 6, 0, 2, 7, 9, 5, 4], [0, 1, 0, 2, 0, 2, 0, 0, 1, 3, 3], [56, 39, 20, 69, 18, 32], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [6, 3, 3, 6, 8, 1, 5, 1, 4, 2, 2, 6, 4, 1, 8, 1, 3, 5, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 3, 1, 0, 1], [16, 99, 11, 99, 61, 83, 11, 28]], "fitness": -0.10000000149011612, "mapping_values": [1, 27, 16, 11, 6, 7, 4, 3, 2, 2, 1, 1, 1, 33, 19, 14, 8], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.pow(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.subtract(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.multiply(tf.math.divide_no_nan(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), alpha))), tf.math.square(tf.math.pow(grad, grad)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))), sigma)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.add(tf.math.add(tf.math.divide_no_nan(alpha, beta), tf.math.pow(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.math.sqrt(tf.math.subtract(alpha, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))))), tf.math.multiply(tf.math.square(alpha), tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1], [6, 3, 3, 6, 2, 1, 4, 1, 4, 2, 8, 3, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 5], [16, 99, 96, 99, 61, 1, 35]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), sigma)), alpha), tf.math.pow(tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), grad)))", "other_info": {"loss": [2.3103184700012207, 2.3075311183929443, 2.3049612045288086, 2.3029980659484863, 2.3025896549224854, 2.3025853633880615, 2.3025851249694824, 2.3025851249694824, 2.3025853633880615, 2.3025856018066406, 2.3025858402252197, 2.302586555480957], "accuracy": [0.09126931428909302, 0.08717474341392517, 0.09232597798109055, 0.08849557489156723, 0.09338264167308807, 0.09760929644107819, 0.09906221181154251, 0.09866596013307571, 0.09708096832036972, 0.09549596905708313, 0.09655263274908066, 0.09998679161071777], "val_loss": [2.3079566955566406, 2.3060965538024902, 2.303213119506836, 2.3025856018066406, 2.3025853633880615, 2.3025853633880615, 2.3025848865509033, 2.3025848865509033, 2.3025848865509033, 2.3025848865509033, 2.3025848865509033, 2.302584409713745], "val_accuracy": [0.07966666668653488, 0.06499999761581421, 0.08966666460037231, 0.10066666454076767, 0.10066666454076767, 0.10333333164453506, 0.10400000214576721, 0.10400000214576721, 0.10100000351667404, 0.10333333164453506, 0.09833333641290665, 0.09933333098888397]}, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 2, 2, 1, 1, 1, 24, 13, 11, 7], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 88], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [0, 0, 3, 0, 3, 5, 7, 5, 5, 3, 8], [0, 2, 0, 3, 2], [16, 16], [0, 1], [0], [0], [99], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 6, 4, 1, 4, 2, 8, 9, 0], [0, 0, 4, 3, 0, 0, 3, 4, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 16, 11, 5, 2, 2, 1, 1, 1, 22, 13, 9, 5], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.square(tf.math.multiply(tf.math.sqrt(grad), beta)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.negative(sigma)))), grad)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 2], [0, 3, 0, 3, 2], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [5, 3, 3, 6, 8, 3, 4, 1, 3, 2, 8], [0, 0, 0, 4, 1, 4, 4, 1, 2, 4], [16, 99, 96, 63, 61, 1]], "fitness": -0.09342857450246811, "mapping_values": [1, 9, 5, 4, 2, 11, 6, 5, 2, 2, 1, 1, 1, 11, 6, 5, 3], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(grad, alpha)))", "other_info": {"loss": [2.310133934020996, 2.3092803955078125, 2.3099284172058105, 2.3101913928985596, 2.309480905532837, 2.3099586963653564], "accuracy": [0.09298639744520187, 0.0936468094587326, 0.09298639744520187, 0.09113723784685135, 0.09245806187391281, 0.10170386731624603], "val_loss": [2.308928966522217, 2.308928966522217, 2.308928966522217, 2.308928966522217, 2.308928966522217, 2.308928966522217], "val_accuracy": [0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918]}}]