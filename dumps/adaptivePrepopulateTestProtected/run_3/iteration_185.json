[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8682857155799866, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223965883255005, 1.8735958337783813, 1.3983676433563232, 1.097078800201416, 0.9382131099700928, 0.8521754741668701, 0.776899516582489, 0.7354626655578613, 0.7001459002494812, 0.676909863948822, 0.6511390805244446, 0.6255041360855103, 0.6039295196533203, 0.5870446562767029, 0.571520984172821, 0.5571050047874451, 0.5428345203399658, 0.5270620584487915, 0.5122162699699402, 0.5059584379196167, 0.48712071776390076, 0.4818471670150757, 0.4678524434566498, 0.4580211043357849, 0.4461582601070404, 0.4467891454696655, 0.4427541494369507, 0.4342289865016937, 0.42365169525146484, 0.41158172488212585, 0.40620169043540955, 0.39816534519195557, 0.3922329843044281, 0.38455915451049805, 0.3821675777435303, 0.37755903601646423, 0.37222811579704285, 0.36642158031463623, 0.3549511134624481, 0.35730522871017456, 0.35570910573005676, 0.34088173508644104, 0.3439888060092926, 0.3353549540042877, 0.33047330379486084, 0.33022332191467285, 0.3255370259284973, 0.3181542456150055], "accuracy": [0.2685246467590332, 0.49425438046455383, 0.5610883831977844, 0.6221106648445129, 0.6662263870239258, 0.6963412761688232, 0.7197200059890747, 0.7339849472045898, 0.7460044622421265, 0.7577598690986633, 0.7671377658843994, 0.7696473598480225, 0.7852331399917603, 0.7872143983840942, 0.7907806038856506, 0.8000264167785645, 0.8042530417442322, 0.8145555257797241, 0.8224804997444153, 0.8177255392074585, 0.8255184292793274, 0.8277638554573059, 0.8284242749214172, 0.833179235458374, 0.8389908671379089, 0.8433496356010437, 0.8432175517082214, 0.8451988101005554, 0.8512746095657349, 0.8536521196365356, 0.8533879518508911, 0.8574824929237366, 0.8644828796386719, 0.8614450097084045, 0.8615770936012268, 0.8642187118530273, 0.8642187118530273, 0.8688416481018066, 0.8775591254234314, 0.8705587387084961, 0.8701624870300293, 0.8786157965660095, 0.8790120482444763, 0.882710337638855, 0.8824461698532104, 0.8802007436752319, 0.8809932470321655, 0.8841632604598999], "val_loss": [2.042001962661743, 1.516220211982727, 1.0394843816757202, 0.8323853611946106, 0.7423548698425293, 0.6885442137718201, 0.6444882154464722, 0.6103371381759644, 0.5847730040550232, 0.5627612471580505, 0.5446210503578186, 0.5322458744049072, 0.5166478157043457, 0.49959883093833923, 0.4928072988986969, 0.479816198348999, 0.4706137776374817, 0.4651457667350769, 0.4568028151988983, 0.4504289925098419, 0.44600528478622437, 0.44096237421035767, 0.43069979548454285, 0.42848706245422363, 0.42440664768218994, 0.41645386815071106, 0.43494054675102234, 0.41158759593963623, 0.4070214033126831, 0.4065266251564026, 0.4043005704879761, 0.3960515856742859, 0.3968566060066223, 0.388356477022171, 0.396308034658432, 0.3864094913005829, 0.3856643736362457, 0.38088858127593994, 0.37943336367607117, 0.3819037973880768, 0.38045164942741394, 0.37583425641059875, 0.36945295333862305, 0.3718562722206116, 0.37915563583374023, 0.37201017141342163, 0.3698629140853882, 0.36752215027809143], "val_accuracy": [0.546999990940094, 0.6456666588783264, 0.6853333115577698, 0.7066666483879089, 0.7379999756813049, 0.7509999871253967, 0.762333333492279, 0.7746666669845581, 0.7836666703224182, 0.7923333048820496, 0.8080000281333923, 0.8040000200271606, 0.8163333535194397, 0.8233333230018616, 0.8293333053588867, 0.8326666951179504, 0.8396666646003723, 0.8356666564941406, 0.8426666855812073, 0.8420000076293945, 0.8433333039283752, 0.8473333120346069, 0.8536666631698608, 0.8513333201408386, 0.8516666889190674, 0.8556666374206543, 0.8479999899864197, 0.8573333621025085, 0.859333336353302, 0.859666645526886, 0.8629999756813049, 0.8650000095367432, 0.8633333444595337, 0.8700000047683716, 0.8683333396911621, 0.8693333268165588, 0.8713333606719971, 0.8730000257492065, 0.8743333220481873, 0.871666669845581, 0.8709999918937683, 0.871999979019165, 0.8769999742507935, 0.8759999871253967, 0.8669999837875366, 0.871666669845581, 0.8763333559036255, 0.8726666569709778]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 5, 8, 0, 3], [0, 1, 0, 2], [39, 41], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 0, 5, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 8, 2, 8], [0, 0, 0, 3, 1, 0, 3, 0, 2, 0], [16, 56, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 3, 1, 1, 6, 4, 2, 0, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.square(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.square(grad)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, alpha)), tf.math.pow(tf.math.subtract(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), sigma), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 8], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 0, 0, 3], [16, 16, 97], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 4, 6, 2, 6, 6, 7, 6, 9, 5], [4, 4, 4, 4, 4, 2, 2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 2, 4, 1, 4, 2, 8, 6, 6, 4, 0, 7, 3, 0, 2, 7, 6, 8, 5, 0, 2, 4, 4, 7, 8, 9, 9, 1, 3, 7, 4, 0, 2, 0, 2, 6, 4, 2], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0, 3, 4, 0, 0, 4, 2, 2, 1, 5, 4, 3, 0, 4, 2, 5, 5, 4, 1, 7], [16, 99, 96, 99, 61, 76, 47, 58, 13, 6]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 2, 10, 6, 4, 3, 17, 10, 7, 1, 71, 42, 29, 10], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.sqrt(alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, grad), grad), tf.math.add(grad, tf.math.divide_no_nan(grad, tf.constant(1.0, shape=shape, dtype=tf.float32)))), beta), tf.math.square(beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(grad, tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.math.divide_no_nan(alpha, beta)))))), tf.math.divide_no_nan(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.sqrt(tf.math.square(grad)), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(tf.math.pow(tf.math.pow(tf.math.add(tf.math.sqrt(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), grad), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), beta)))), tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.negative(alpha), grad)), grad), tf.math.add(sigma, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.add(grad, beta)))), grad))), tf.math.divide_no_nan(grad, tf.math.pow(grad, tf.math.add(alpha, grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 3], [0, 2, 0, 3, 2], [16, 16], [0, 1], [0], [4], [94], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 5, 6, 1, 4, 1, 4, 2, 2], [0, 1, 0, 4, 0, 0, 3, 1, 4, 0], [16, 99, 96, 99, 45, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(tf.math.subtract(alpha, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))))), alpha), tf.math.add(grad, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [211848.3125, 646281.8125, 6931790.5, 43334048.0, 154511920.0, 405253536.0], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [463001.1875, 1958300.375, 20415998.0, 92003120.0, 273512544.0, 641896960.0], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}, "mapping_values": [1, 2, 1, 1, 1, 11, 6, 5, 2, 2, 1, 1, 0, 20, 10, 10, 5], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 5, 3, 0, 3], [0, 1, 0, 2], [39, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 2, 3], [88, 0], [0, 1, 1], [2], [0, 2], [25], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 1, 4, 0, 3, 2, 2, 0], [16, 52, 96, 99, 61, 1]], "fitness": -0.09285714477300644, "mapping_values": [1, 8, 5, 3, 2, 1, 0, 1, 1, 3, 1, 2, 1, 16, 8, 8, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), alpha)), grad), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, beta)))", "other_info": {"loss": [2.310224771499634, 2.309525966644287, 2.30859112739563, 2.3088903427124023, 2.309560537338257, 2.310283660888672], "accuracy": [0.09166556596755981, 0.09417514503002167, 0.09417514503002167, 0.08730682730674744, 0.09628847241401672, 0.08981640636920929], "val_loss": [2.3091487884521484, 2.3091487884521484, 2.3091487884521484, 2.3091487884521484, 2.3091487884521484, 2.3091487884521484], "val_accuracy": [0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393]}}]