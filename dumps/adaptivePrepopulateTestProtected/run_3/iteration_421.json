[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8697142601013184, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2208027839660645, 1.8579531908035278, 1.3881653547286987, 1.0737316608428955, 0.9359351396560669, 0.8284561634063721, 0.7705740928649902, 0.7349437475204468, 0.6926329731941223, 0.6552662253379822, 0.6368398666381836, 0.6124764084815979, 0.597390353679657, 0.578449010848999, 0.5630843043327332, 0.5422977805137634, 0.5283499360084534, 0.5103051662445068, 0.5051910281181335, 0.4977726936340332, 0.48029568791389465, 0.47481030225753784, 0.4720149338245392, 0.45954588055610657, 0.44780585169792175, 0.44676071405410767, 0.4327563941478729, 0.4240790605545044, 0.423901230096817, 0.4155370891094208, 0.4108332097530365, 0.40406888723373413, 0.3947816789150238, 0.388248473405838, 0.3909100890159607, 0.3762182593345642, 0.3785659670829773, 0.37043431401252747, 0.3683190941810608, 0.36554229259490967, 0.35639265179634094, 0.34835368394851685, 0.35418787598609924, 0.3487046957015991, 0.3267565965652466, 0.33323290944099426, 0.3325105905532837, 0.32223641872406006, 0.3148159980773926, 0.30867981910705566, 0.3124341666698456, 0.30548667907714844, 0.3064095675945282, 0.306315153837204, 0.2944420278072357, 0.29249078035354614, 0.2907727062702179, 0.2866683304309845, 0.2820846438407898, 0.26839596033096313, 0.26915937662124634, 0.2736566364765167, 0.2694125175476074, 0.26205146312713623, 0.258258581161499, 0.25847646594047546, 0.25005361437797546, 0.25139012932777405, 0.2445465475320816, 0.2439173460006714, 0.2457772195339203, 0.23900748789310455, 0.23645971715450287, 0.23273691534996033], "accuracy": [0.2689208686351776, 0.49451854825019836, 0.5715228915214539, 0.629507303237915, 0.6692643165588379, 0.702681303024292, 0.7236824631690979, 0.7359662055969238, 0.744419515132904, 0.759080708026886, 0.7717606425285339, 0.7744023203849792, 0.7827235460281372, 0.7938185334205627, 0.7985734939575195, 0.8058380484580994, 0.809140145778656, 0.8148196935653687, 0.8226125836372375, 0.8236692547798157, 0.826310932636261, 0.8274996876716614, 0.8391229510307312, 0.8399154543876648, 0.839519202709198, 0.8399154543876648, 0.8471800088882446, 0.8475762605667114, 0.852331280708313, 0.8504821062088013, 0.8564258217811584, 0.858671247959137, 0.8631620407104492, 0.86553955078125, 0.856689989566803, 0.8665962219238281, 0.8651432991027832, 0.8683133125305176, 0.8687095642089844, 0.8660678863525391, 0.8741249442100525, 0.8757099509239197, 0.8750495314598083, 0.8729361891746521, 0.8837670087814331, 0.8778232932090759, 0.8812574148178101, 0.8856161832809448, 0.8902390599250793, 0.889578640460968, 0.887201189994812, 0.8902390599250793, 0.8910315632820129, 0.8857482671737671, 0.8930128216743469, 0.8922203183174133, 0.8944657444953918, 0.8989565372467041, 0.8951261639595032, 0.9017302989959717, 0.9029190540313721, 0.9038436412811279, 0.9022586345672607, 0.9034473896026611, 0.9068815112113953, 0.9070135951042175, 0.9140139818191528, 0.9075419306755066, 0.9124290347099304, 0.9109761118888855, 0.9116365313529968, 0.913617730140686, 0.9126931428909302, 0.9141460657119751], "val_loss": [2.0357894897460938, 1.5129987001419067, 1.0451923608779907, 0.8401936888694763, 0.7538240551948547, 0.7023349404335022, 0.6586836576461792, 0.6291537880897522, 0.5993010401725769, 0.5775736570358276, 0.5624980330467224, 0.541418194770813, 0.5304360389709473, 0.5172162652015686, 0.502291202545166, 0.49209707975387573, 0.4825803339481354, 0.4774037003517151, 0.4725305438041687, 0.4596482813358307, 0.4611142575740814, 0.4557519555091858, 0.4416741132736206, 0.43707117438316345, 0.4336591362953186, 0.4301307797431946, 0.4206025302410126, 0.4180455803871155, 0.4160180687904358, 0.4076000154018402, 0.4054318964481354, 0.4021713435649872, 0.4029557704925537, 0.40181049704551697, 0.39247235655784607, 0.39116960763931274, 0.3930056095123291, 0.38763970136642456, 0.3859008848667145, 0.38419318199157715, 0.37866300344467163, 0.3825167715549469, 0.37390729784965515, 0.37569648027420044, 0.37389427423477173, 0.37044745683670044, 0.36656397581100464, 0.36845362186431885, 0.362847238779068, 0.3637247383594513, 0.3587174415588379, 0.36240094900131226, 0.3605416715145111, 0.35464200377464294, 0.35902684926986694, 0.353274941444397, 0.3513357639312744, 0.34960514307022095, 0.3483946919441223, 0.355744332075119, 0.3473335802555084, 0.3456548750400543, 0.34932371973991394, 0.3445756137371063, 0.3434593975543976, 0.340658038854599, 0.34312593936920166, 0.3402111232280731, 0.3407346308231354, 0.34460222721099854, 0.3366382122039795, 0.3461780250072479, 0.3416595757007599, 0.33847978711128235], "val_accuracy": [0.5649999976158142, 0.6586666703224182, 0.6790000200271606, 0.7043333053588867, 0.7296666502952576, 0.7443333268165588, 0.7543333172798157, 0.7603333592414856, 0.7796666622161865, 0.784333348274231, 0.7883333563804626, 0.7983333468437195, 0.8056666851043701, 0.812666654586792, 0.8153333067893982, 0.8263333439826965, 0.8273333311080933, 0.8330000042915344, 0.8299999833106995, 0.8399999737739563, 0.8333333134651184, 0.8403333425521851, 0.8473333120346069, 0.8460000157356262, 0.8510000109672546, 0.8460000157356262, 0.8526666760444641, 0.8560000061988831, 0.8573333621025085, 0.859666645526886, 0.8619999885559082, 0.8600000143051147, 0.8583333492279053, 0.862333357334137, 0.8650000095367432, 0.8663333058357239, 0.8636666536331177, 0.8656666874885559, 0.8656666874885559, 0.8676666617393494, 0.8659999966621399, 0.8700000047683716, 0.8686666488647461, 0.8656666874885559, 0.871666669845581, 0.8713333606719971, 0.8769999742507935, 0.8766666650772095, 0.875333309173584, 0.8766666650772095, 0.8776666522026062, 0.8740000128746033, 0.8740000128746033, 0.878333330154419, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8803333044052124, 0.8809999823570251, 0.878000020980835, 0.8826666474342346, 0.8796666860580444, 0.878333330154419, 0.8836666941642761, 0.8836666941642761, 0.8816666603088379, 0.8813333511352539, 0.8836666941642761, 0.8856666684150696, 0.8830000162124634, 0.8846666812896729, 0.8799999952316284, 0.8820000290870667, 0.8849999904632568]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 4, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5, 4, 8], [0, 3, 0, 3, 2], [9, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 6, 0, 1, 0, 1, 4, 2, 8, 3, 6, 0], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4, 7], [16, 99, 13, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 13, 8, 5, 2, 2, 1, 1, 1, 25, 14, 11, 5], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), tf.math.sqrt(beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.subtract(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))))), sigma)), tf.math.sqrt(alpha)), tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.negative(grad), grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 2, 3, 3, 2, 6, 8], [0, 1, 0, 2, 2, 3], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 3, 0, 2, 4, 7, 1, 9, 6, 4, 1, 6, 3, 2], [0, 2, 0, 3, 1, 3, 1, 0, 0, 5, 3, 3], [16, 57, 24, 8, 67], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 0, 1, 6, 1, 4, 2, 8, 3, 4], [0, 4, 4, 3, 0, 0, 3, 1, 2, 0, 7, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 7, 6, 2, 27, 15, 12, 5, 2, 1, 1, 1, 25, 13, 12, 4], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.add(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), grad)), tf.math.sqrt(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.add(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.add(tf.math.subtract(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.math.divide_no_nan(tf.math.multiply(grad, alpha), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), grad)), grad), grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(grad, tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), sigma))), tf.math.sqrt(tf.math.multiply(alpha, beta)))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [9, 2, 3, 0, 3], [0, 1, 0, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 5, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 2, 0, 4, 5, 8, 6, 2, 6, 5, 9], [0, 0, 0, 3, 0, 4, 0, 1, 2, 0, 6, 0, 3, 0], [16, 99, 96, 99, 61, 1, 47, 82, 37]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(grad))), tf.math.add(tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), alpha))))), tf.math.pow(tf.math.square(tf.math.sqrt(tf.math.divide_no_nan(beta, tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad)))), tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.square(sigma))))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}, "mapping_values": [1, 1, 1, 0, 1, 6, 4, 2, 1, 2, 1, 1, 1, 35, 21, 14, 9], "tree_depth": 25}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 5, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 9, 4, 1, 4, 2, 8, 1], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [32, 99, 55, 99, 61, 1]], "fitness": -0.05999999865889549, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 12, 9, 6], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.square(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.math.sqrt(sigma), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), sigma)), tf.math.subtract(alpha, beta))", "other_info": {"loss": [41569.84375, 48667.0390625, 48408.203125, 49274.6171875, 49629.6015625, 48398.828125], "accuracy": [0.08294808864593506, 0.08030643314123154, 0.08017434924840927, 0.07938185334205627, 0.07911768555641174, 0.08189142495393753], "val_loss": [37584.3671875, 37584.3671875, 37584.3671875, 37584.3671875, 37584.3671875, 37584.3671875], "val_accuracy": [0.05700000002980232, 0.05700000002980232, 0.05700000002980232, 0.05700000002980232, 0.05700000002980232, 0.05700000002980232]}}]