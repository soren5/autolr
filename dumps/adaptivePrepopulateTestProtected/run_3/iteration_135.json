[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.878000020980835, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223759174346924, 1.8681567907333374, 1.3971633911132812, 1.1021500825881958, 0.9438490867614746, 0.8268281817436218, 0.7700234055519104, 0.7182450890541077, 0.6839274764060974, 0.655160665512085, 0.6316797733306885, 0.6046612858772278, 0.586663544178009, 0.5732303261756897, 0.5552444458007812, 0.5382086634635925, 0.5205084085464478, 0.5141545534133911, 0.49866363406181335, 0.4905571937561035, 0.48713892698287964, 0.4630949795246124, 0.46493759751319885, 0.4510720372200012, 0.4456666111946106, 0.4411585330963135, 0.43109801411628723, 0.4194287657737732, 0.41647717356681824, 0.4177640676498413, 0.39898860454559326, 0.3982110619544983, 0.3941095173358917, 0.3838343918323517, 0.38270825147628784, 0.38132011890411377, 0.3706604242324829, 0.3630581796169281, 0.35970449447631836, 0.3585955500602722, 0.3488880693912506, 0.3406795859336853, 0.3434852361679077, 0.34305644035339355, 0.32770219445228577, 0.3274216949939728, 0.3164256513118744, 0.31487780809402466, 0.31453031301498413, 0.3020377457141876, 0.3013147711753845, 0.29238083958625793, 0.30650538206100464, 0.2886098325252533, 0.28784143924713135, 0.28922179341316223, 0.27991431951522827, 0.27731093764305115, 0.27029022574424744, 0.2677718997001648, 0.2672445476055145], "accuracy": [0.27182671427726746, 0.4913485646247864, 0.5609562993049622, 0.6095628142356873, 0.6618676781654358, 0.6997754573822021, 0.7215691208839417, 0.7407211661338806, 0.7508915662765503, 0.7592127919197083, 0.7656848430633545, 0.7798177003860474, 0.7849689722061157, 0.789459764957428, 0.7991018295288086, 0.806630551815033, 0.81112140417099, 0.8088759779930115, 0.8210275769233704, 0.8181217908859253, 0.826310932636261, 0.8333113193511963, 0.8294808864593506, 0.8401796221733093, 0.8409721255302429, 0.8436138033866882, 0.8459912538528442, 0.8519350290298462, 0.8485008478164673, 0.8490291833877563, 0.856689989566803, 0.8573504090309143, 0.8615770936012268, 0.8644828796386719, 0.8605204224586487, 0.8614450097084045, 0.8671245574951172, 0.8726720213890076, 0.8732003569602966, 0.8689737319946289, 0.8762382864952087, 0.8798044919967651, 0.8717474341392517, 0.8825782537460327, 0.8840311765670776, 0.8845595121383667, 0.8885219693183899, 0.8865407705307007, 0.8887861371040344, 0.894069492816925, 0.8918240666389465, 0.8953903317451477, 0.8860124349594116, 0.8988244533538818, 0.8992207050323486, 0.8956544995307922, 0.9014661312103271, 0.89988112449646, 0.900409460067749, 0.9046360850334167, 0.9033153057098389], "val_loss": [2.0386126041412354, 1.5089809894561768, 1.0396978855133057, 0.8277255296707153, 0.7414798736572266, 0.6867381930351257, 0.6452507376670837, 0.6096968054771423, 0.5920496582984924, 0.5695558786392212, 0.550778865814209, 0.5315823554992676, 0.5166425704956055, 0.5040237307548523, 0.4927339255809784, 0.48035380244255066, 0.4752146899700165, 0.4640548527240753, 0.45926037430763245, 0.4498494863510132, 0.44989997148513794, 0.43486902117729187, 0.4302854835987091, 0.42699891328811646, 0.4222937822341919, 0.4179273545742035, 0.4156407117843628, 0.40615877509117126, 0.40567347407341003, 0.40483561158180237, 0.4008205533027649, 0.3957735300064087, 0.3910598158836365, 0.39842313528060913, 0.38378071784973145, 0.3824272155761719, 0.37983548641204834, 0.3832281529903412, 0.37993335723876953, 0.37290528416633606, 0.37028563022613525, 0.3697679340839386, 0.369826078414917, 0.3630952835083008, 0.3613884747028351, 0.3612003028392792, 0.3630628287792206, 0.35836127400398254, 0.35707563161849976, 0.3544061779975891, 0.35439038276672363, 0.35541149973869324, 0.34793493151664734, 0.355723112821579, 0.3566884696483612, 0.3480426073074341, 0.35176366567611694, 0.34468159079551697, 0.3469727337360382, 0.34757280349731445, 0.34379008412361145], "val_accuracy": [0.546999990940094, 0.6536666750907898, 0.6856666803359985, 0.7066666483879089, 0.7366666793823242, 0.7536666393280029, 0.7599999904632568, 0.7720000147819519, 0.7706666588783264, 0.7926666736602783, 0.7963333129882812, 0.7956666946411133, 0.8103333115577698, 0.809333324432373, 0.8220000267028809, 0.8226666450500488, 0.8243333101272583, 0.8330000042915344, 0.8349999785423279, 0.8370000123977661, 0.8333333134651184, 0.8429999947547913, 0.8463333249092102, 0.8446666598320007, 0.8476666808128357, 0.8479999899864197, 0.8450000286102295, 0.8506666421890259, 0.8496666550636292, 0.8529999852180481, 0.8556666374206543, 0.8556666374206543, 0.8586666584014893, 0.8526666760444641, 0.8576666712760925, 0.8610000014305115, 0.859000027179718, 0.8616666793823242, 0.8653333187103271, 0.8673333525657654, 0.8673333525657654, 0.8659999966621399, 0.8693333268165588, 0.8690000176429749, 0.8726666569709778, 0.8726666569709778, 0.8740000128746033, 0.8730000257492065, 0.871999979019165, 0.8759999871253967, 0.874666690826416, 0.871999979019165, 0.8806666731834412, 0.8776666522026062, 0.8706666827201843, 0.8820000290870667, 0.878333330154419, 0.878000020980835, 0.8806666731834412, 0.8793333172798157, 0.878333330154419]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8754285573959351, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2210962772369385, 1.8547391891479492, 1.3846678733825684, 1.0910629034042358, 0.933857798576355, 0.8182600736618042, 0.7538673877716064, 0.7035530209541321, 0.6693033576011658, 0.6328601241111755, 0.6153307557106018, 0.582751989364624, 0.5750828981399536, 0.5525867342948914, 0.5377342104911804, 0.5243970155715942, 0.5048871636390686, 0.5062140226364136, 0.48864927887916565, 0.4799420237541199, 0.4642402231693268, 0.46218547224998474, 0.4520139992237091, 0.4433201253414154, 0.43541839718818665, 0.42408403754234314, 0.4210372567176819, 0.40394464135169983, 0.40158307552337646, 0.39935630559921265, 0.38875308632850647, 0.384967565536499, 0.3776732385158539, 0.37159693241119385, 0.37272804975509644, 0.36403289437294006, 0.3606516420841217, 0.35296401381492615, 0.3491227924823761, 0.34441596269607544, 0.3335934579372406, 0.3320280909538269, 0.3254382014274597, 0.3218424618244171, 0.3252912163734436, 0.3115631937980652, 0.3097781538963318, 0.3085505962371826, 0.30309954285621643, 0.30956071615219116, 0.29166045784950256, 0.29137489199638367, 0.2828753590583801, 0.28179582953453064, 0.27704235911369324, 0.2743963301181793, 0.267027884721756, 0.264426589012146, 0.2596105635166168, 0.2530185580253601, 0.25552070140838623, 0.2511484920978546, 0.24975623190402985], "accuracy": [0.27737417817115784, 0.4947827160358429, 0.5691454410552979, 0.6156386137008667, 0.6646413803100586, 0.7059833407402039, 0.7230220437049866, 0.7416457533836365, 0.7526086568832397, 0.7684586048126221, 0.7769119143486023, 0.7884030938148499, 0.791969358921051, 0.793950617313385, 0.8000264167785645, 0.8099326491355896, 0.8168009519577026, 0.8145555257797241, 0.8202351331710815, 0.8251221776008606, 0.8341038227081299, 0.8317263126373291, 0.8335754871368408, 0.8397833704948425, 0.8433496356010437, 0.8475762605667114, 0.8487650156021118, 0.8485008478164673, 0.8532558679580688, 0.8584070801734924, 0.8593316674232483, 0.8664641380310059, 0.8663320541381836, 0.8628978729248047, 0.8646149635314941, 0.8720116019248962, 0.8720116019248962, 0.8705587387084961, 0.878351628780365, 0.8739928603172302, 0.8833707571029663, 0.8802007436752319, 0.8854840993881226, 0.8828424215316772, 0.8853520154953003, 0.8902390599250793, 0.8849557638168335, 0.8878615498542786, 0.8908994793891907, 0.8865407705307007, 0.8945978283882141, 0.8924844861030579, 0.8975036144256592, 0.8949940800666809, 0.9017302989959717, 0.9039757251739502, 0.9021265506744385, 0.9030511379241943, 0.9066173434257507, 0.9079381823539734, 0.9052965044975281, 0.9076740145683289, 0.906749427318573], "val_loss": [2.039700508117676, 1.5239408016204834, 1.0714263916015625, 0.8691993951797485, 0.7798612713813782, 0.7176399827003479, 0.6726767420768738, 0.6337197422981262, 0.6051027774810791, 0.5892497301101685, 0.5677751302719116, 0.5480077862739563, 0.5386722087860107, 0.5232622027397156, 0.5094629526138306, 0.5029107928276062, 0.4909178912639618, 0.48445308208465576, 0.47506770491600037, 0.47042033076286316, 0.46265920996665955, 0.46308717131614685, 0.4535529911518097, 0.4445511996746063, 0.44371822476387024, 0.4347113072872162, 0.42795291543006897, 0.42550110816955566, 0.42307209968566895, 0.41958004236221313, 0.4195699095726013, 0.41378703713417053, 0.4082208573818207, 0.40751489996910095, 0.40164998173713684, 0.39901456236839294, 0.402610182762146, 0.3965934216976166, 0.3936687111854553, 0.3921244442462921, 0.38894739747047424, 0.38595056533813477, 0.38596469163894653, 0.38190758228302, 0.3853710889816284, 0.37908393144607544, 0.3764110505580902, 0.37774455547332764, 0.3743009865283966, 0.3707873225212097, 0.37245815992355347, 0.3691466450691223, 0.3680964410305023, 0.36614102125167847, 0.3629211485385895, 0.3612671196460724, 0.3668104112148285, 0.3618617355823517, 0.36032170057296753, 0.36215224862098694, 0.36237338185310364, 0.36438679695129395, 0.36084800958633423], "val_accuracy": [0.5073333382606506, 0.6363333463668823, 0.6656666398048401, 0.6953333616256714, 0.721666693687439, 0.7406666874885559, 0.7493333220481873, 0.7646666765213013, 0.777999997138977, 0.7829999923706055, 0.7950000166893005, 0.7963333129882812, 0.8006666898727417, 0.8103333115577698, 0.8196666836738586, 0.8176666498184204, 0.8233333230018616, 0.8213333487510681, 0.8293333053588867, 0.8289999961853027, 0.8306666612625122, 0.8296666741371155, 0.8343333601951599, 0.8376666903495789, 0.8403333425521851, 0.843666672706604, 0.8410000205039978, 0.843999981880188, 0.8453333377838135, 0.8473333120346069, 0.8486666679382324, 0.8519999980926514, 0.8523333072662354, 0.8536666631698608, 0.8569999933242798, 0.8560000061988831, 0.8513333201408386, 0.8556666374206543, 0.856333315372467, 0.859000027179718, 0.8566666841506958, 0.8606666922569275, 0.8600000143051147, 0.859666645526886, 0.859000027179718, 0.862333357334137, 0.8656666874885559, 0.8629999756813049, 0.8659999966621399, 0.8659999966621399, 0.8669999837875366, 0.8686666488647461, 0.8666666746139526, 0.8673333525657654, 0.871999979019165, 0.8656666874885559, 0.8690000176429749, 0.8726666569709778, 0.8696666955947876, 0.8696666955947876, 0.8696666955947876, 0.8669999837875366, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 0, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 2, 1, 0, 3, 5, 1, 1, 7, 6, 7, 4, 7, 1, 4, 9, 8], [0, 2, 0, 3, 0, 2, 5, 5, 0, 4, 0, 2], [16, 16, 6, 69, 23, 67], [0, 1, 0], [3, 9], [1], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 2, 3, 6, 8, 2, 4, 6, 4, 2, 8, 8], [0, 0, 0, 4, 0, 0, 4, 1, 3, 0], [90, 99, 99, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 29, 17, 12, 6, 3, 2, 1, 1, 22, 12, 10, 6], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.subtract(tf.math.subtract(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.add(tf.math.pow(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), beta), tf.math.add(tf.math.subtract(grad, grad), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))))), grad), tf.math.pow(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))))), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(grad, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), grad), tf.math.sqrt(tf.math.sqrt(alpha))), sigma), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 2, 3, 0, 3], [0, 1, 0, 2, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 56], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 9], [0, 0, 4, 3, 4, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 10, 6, 4, 2, 2, 1, 1, 1, 20, 11, 9, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(grad, sigma)), tf.math.subtract(tf.math.pow(tf.math.add(grad, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), sigma), alpha)), tf.constant(1.0, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [2, 2, 3, 0, 3], [0, 1, 2, 2], [17, 15], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 3, 3, 1, 8, 1, 4, 1, 5, 2, 8], [0, 0, 0, 3, 0, 0, 3, 4, 2, 0], [16, 99, 96, 40, 35, 1]], "fitness": -0.09342857450246811, "mapping_values": [1, 8, 4, 4, 1, 10, 6, 4, 2, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), alpha), grad), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))), sigma), grad)", "other_info": {"loss": [14735266816.0, 88337833984.0, 356748361728.0, 367375712256.0, 350703616000.0, 356016226304.0], "accuracy": [0.09932637959718704, 0.09034473448991776, 0.08875974267721176, 0.08889182657003403, 0.08717474341392517, 0.08598599582910538], "val_loss": [10031613952.0, 315442036736.0, 314252099584.0, 314251542528.0, 314935083008.0, 314935050240.0], "val_accuracy": [0.0833333358168602, 0.0663333311676979, 0.06800000369548798, 0.06800000369548798, 0.06499999761581421, 0.06499999761581421]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 3, 3, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [3, 2, 4, 0, 3, 5], [0, 2, 0, 3, 0], [51, 16, 78], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 9, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1, 8]], "fitness": -0.09057142585515976, "mapping_values": [1, 7, 4, 3, 1, 10, 5, 5, 3, 2, 1, 1, 1, 21, 13, 8, 7], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.negative(grad), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.pow(tf.math.negative(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), sigma), alpha)", "other_info": {"loss": [2.3099889755249023, 2.3097314834594727, 2.3117194175720215, 2.3086020946502686, 2.3099358081817627, 2.310452461242676], "accuracy": [0.09060890227556229, 0.09391097724437714, 0.08294808864593506, 0.09734513610601425, 0.09192973375320435, 0.09126931428909302], "val_loss": [2.3087873458862305, 2.3087873458862305, 2.3087873458862305, 2.3087873458862305, 2.3087873458862305, 2.3087873458862305], "val_accuracy": [0.08966666460037231, 0.08966666460037231, 0.08966666460037231, 0.08966666460037231, 0.08966666460037231, 0.08966666460037231]}}]