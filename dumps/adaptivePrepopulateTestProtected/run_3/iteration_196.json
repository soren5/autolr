[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8628571629524231, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2221946716308594, 1.8674622774124146, 1.3887954950332642, 1.0786323547363281, 0.9230660796165466, 0.8363973498344421, 0.7675678133964539, 0.7199009656906128, 0.6965730786323547, 0.6564694046974182, 0.6370094418525696, 0.616937518119812, 0.594813883304596, 0.5820919275283813, 0.5649130344390869, 0.5469396114349365, 0.5331548452377319, 0.5234566926956177, 0.5086928009986877, 0.49373361468315125, 0.48760125041007996, 0.47812899947166443, 0.4659408926963806, 0.4535585641860962, 0.4517233073711395, 0.4449503421783447, 0.4294377267360687, 0.4231671988964081, 0.42383232712745667, 0.4147600829601288, 0.40553808212280273, 0.39643916487693787, 0.3967997133731842, 0.39378073811531067, 0.378700315952301, 0.3750975430011749, 0.37163349986076355, 0.3691982626914978, 0.36606836318969727, 0.3589406907558441, 0.34822678565979004, 0.3485246002674103, 0.3464241623878479, 0.334768146276474, 0.3275820016860962, 0.31265929341316223, 0.32088804244995117, 0.3173868656158447, 0.31592339277267456, 0.3014240562915802, 0.30326318740844727, 0.2916494607925415, 0.2971546947956085, 0.2906530499458313, 0.2823149263858795, 0.2789844274520874, 0.2793552875518799, 0.26733899116516113, 0.26773837208747864, 0.2649840712547302, 0.259894996881485, 0.2621447443962097, 0.25370779633522034, 0.24664843082427979, 0.24765416979789734, 0.2410009354352951, 0.2420780509710312, 0.2373925894498825, 0.2312707155942917, 0.23087015748023987, 0.2265467494726181, 0.21892113983631134, 0.21585877239704132, 0.2202868014574051, 0.21231086552143097], "accuracy": [0.28001585602760315, 0.47087571024894714, 0.5724474787712097, 0.6207898855209351, 0.6684718132019043, 0.6968696117401123, 0.7182670831680298, 0.7384757399559021, 0.7466648817062378, 0.76106196641922, 0.7638356685638428, 0.7714964747428894, 0.7815347909927368, 0.7864218950271606, 0.7946110367774963, 0.8016114234924316, 0.8084797263145447, 0.8064984679222107, 0.8125742673873901, 0.8190463781356812, 0.8178576231002808, 0.8278959393501282, 0.8304054737091064, 0.8362171649932861, 0.834632158279419, 0.8393871188163757, 0.8469158411026001, 0.8520671129226685, 0.8508783578872681, 0.8504821062088013, 0.8516708612442017, 0.8569541573524475, 0.8553691506385803, 0.860652506351471, 0.8595958352088928, 0.8626337051391602, 0.8631620407104492, 0.867520809173584, 0.8693699836730957, 0.8681812286376953, 0.8739928603172302, 0.8733324408531189, 0.8746532797813416, 0.8775591254234314, 0.880729079246521, 0.8862766027450562, 0.8860124349594116, 0.8819178342819214, 0.8838990926742554, 0.8874653577804565, 0.8908994793891907, 0.8936732411384583, 0.8906353116035461, 0.8928807377815247, 0.8936732411384583, 0.8977677822113037, 0.8989565372467041, 0.9005415439605713, 0.8965790271759033, 0.9010698795318604, 0.9015982151031494, 0.9039757251739502, 0.9079381823539734, 0.9095231890678406, 0.9129573106765747, 0.9124290347099304, 0.9101836085319519, 0.9125610589981079, 0.9149385690689087, 0.9152027368545532, 0.9165235757827759, 0.9215427041053772, 0.9233918786048889, 0.9169198274612427, 0.921938955783844], "val_loss": [2.03817081451416, 1.5111948251724243, 1.0383453369140625, 0.8311869502067566, 0.7428878545761108, 0.6889979839324951, 0.6425672769546509, 0.6063553690910339, 0.5895715355873108, 0.5642849206924438, 0.5483019948005676, 0.533482015132904, 0.5187952518463135, 0.5041543245315552, 0.4890033006668091, 0.4868127405643463, 0.4706045389175415, 0.46249526739120483, 0.4585706293582916, 0.4461396336555481, 0.4404318034648895, 0.4347296953201294, 0.42560091614723206, 0.4204598069190979, 0.4139581620693207, 0.4087681174278259, 0.4041514992713928, 0.40029358863830566, 0.40610042214393616, 0.3927380442619324, 0.38697266578674316, 0.3867027163505554, 0.3832920789718628, 0.38540491461753845, 0.37803059816360474, 0.3713909387588501, 0.3684742748737335, 0.3745552897453308, 0.3683808445930481, 0.36112698912620544, 0.36307021975517273, 0.3575257658958435, 0.3602849543094635, 0.3544771373271942, 0.35705476999282837, 0.3514118194580078, 0.3484979569911957, 0.34563007950782776, 0.34704166650772095, 0.34052449464797974, 0.340933620929718, 0.3422107696533203, 0.34199103713035583, 0.33832451701164246, 0.33946120738983154, 0.33605900406837463, 0.3375978469848633, 0.33543771505355835, 0.3358272910118103, 0.3368665277957916, 0.3360185921192169, 0.3303917348384857, 0.3333056569099426, 0.3330857455730438, 0.33276432752609253, 0.3332354426383972, 0.33043617010116577, 0.33377406001091003, 0.3290737569332123, 0.3311912417411804, 0.32606810331344604, 0.32921361923217773, 0.32784149050712585, 0.32817450165748596, 0.33004581928253174], "val_accuracy": [0.5086666941642761, 0.6629999876022339, 0.6830000281333923, 0.7013333439826965, 0.7336666584014893, 0.7549999952316284, 0.7689999938011169, 0.777999997138977, 0.7793333530426025, 0.7956666946411133, 0.8076666593551636, 0.8106666803359985, 0.8073333501815796, 0.8233333230018616, 0.8289999961853027, 0.8196666836738586, 0.8360000252723694, 0.8403333425521851, 0.840666651725769, 0.8426666855812073, 0.8446666598320007, 0.847000002861023, 0.8529999852180481, 0.8533333539962769, 0.8560000061988831, 0.859000027179718, 0.8556666374206543, 0.8583333492279053, 0.8553333282470703, 0.859000027179718, 0.8613333106040955, 0.8629999756813049, 0.8663333058357239, 0.8616666793823242, 0.8643333315849304, 0.8703333139419556, 0.8726666569709778, 0.8646666407585144, 0.8696666955947876, 0.8686666488647461, 0.8696666955947876, 0.874666690826416, 0.8743333220481873, 0.8736666440963745, 0.8759999871253967, 0.8790000081062317, 0.8756666779518127, 0.8773333430290222, 0.8759999871253967, 0.878000020980835, 0.8803333044052124, 0.8776666522026062, 0.8786666393280029, 0.8830000162124634, 0.8820000290870667, 0.8806666731834412, 0.8786666393280029, 0.8840000033378601, 0.8833333253860474, 0.8813333511352539, 0.8843333125114441, 0.8859999775886536, 0.8836666941642761, 0.8849999904632568, 0.8880000114440918, 0.8843333125114441, 0.8826666474342346, 0.8833333253860474, 0.8836666941642761, 0.8893333077430725, 0.8886666893959045, 0.8883333206176758, 0.887666642665863, 0.8859999775886536, 0.887666642665863]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 8, 3, 1, 3], [0, 1, 0, 2], [39, 55], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 1, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [1, 1], [0], [4], [99], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0], [16, 99, 96, 99, 11, 1]], "fitness": -0.1477142870426178, "mapping_values": [1, 2, 1, 1, 1, 10, 6, 4, 2, 1, 0, 1, 0, 10, 5, 5, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(sigma, tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [3247978286415872.0, 3698029655752704.0, 3717188162682880.0, 3682040297816064.0, 3694525499310080.0, 3699616646168576.0], "accuracy": [0.11557257920503616, 0.11438383162021637, 0.11187426000833511, 0.11755382269620895, 0.11491216719150543, 0.11332716792821884], "val_loss": [1985276155002880.0, 1985276155002880.0, 1985276155002880.0, 1985276155002880.0, 1985276155002880.0, 1985276155002880.0], "val_accuracy": [0.14266666769981384, 0.14266666769981384, 0.14266666769981384, 0.14266666769981384, 0.14266666769981384, 0.14266666769981384]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 6, 9, 0, 9, 7, 0, 4, 1, 3, 1], [0, 0, 0, 2, 1, 0, 2, 3], [39, 39, 69, 22, 89, 13], [0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 2, 4, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1], [6, 3, 6, 6, 3, 0, 4, 2, 4, 2, 8, 6, 0, 8], [2, 4, 0, 3, 0, 0, 3, 1, 2, 0, 6], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 15, 8, 6, 4, 2, 2, 1, 2, 1, 1, 1, 25, 14, 11, 4], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.pow(grad, tf.math.subtract(alpha, tf.math.multiply(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.subtract(grad, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.math.pow(grad, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))))), sigma), tf.math.sqrt(tf.math.divide_no_nan(alpha, beta)))), tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.sqrt(grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 2, 0, 3], [0, 1, 0, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [3], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 48, 61, 91]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 1, 2, 1, 1, 0, 1, 0, 1, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3034298419952393, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [8, 2, 3, 0, 3, 7, 4, 1, 5], [0, 1, 0, 2, 1, 1, 1], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 1, 3, 0, 3, 2, 2], [0, 3, 0, 3, 5, 4], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 3], [25, 99, 96, 42, 61, 53]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 9, 7, 2, 13, 7, 6, 2, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), tf.math.pow(tf.math.subtract(alpha, alpha), tf.math.square(alpha))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.subtract(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(grad, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}]