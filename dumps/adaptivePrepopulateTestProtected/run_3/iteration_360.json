[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8754285573959351, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2209317684173584, 1.863287091255188, 1.3872020244598389, 1.087437391281128, 0.928544819355011, 0.8406554460525513, 0.7775234580039978, 0.7189139723777771, 0.6909875869750977, 0.6473358273506165, 0.6350768208503723, 0.6060320138931274, 0.5773576498031616, 0.5659744143486023, 0.5555684566497803, 0.5387574434280396, 0.5217000842094421, 0.5187570452690125, 0.5036527514457703, 0.49412423372268677, 0.48344630002975464, 0.4692121148109436, 0.46547815203666687, 0.4557156264781952, 0.44519487023353577, 0.4327072501182556, 0.435120552778244, 0.4205751419067383, 0.41049620509147644, 0.4104654788970947, 0.39385318756103516, 0.39602130651474, 0.3934409022331238, 0.3862265944480896, 0.3803251087665558, 0.3697524964809418, 0.36344489455223083, 0.3621746897697449, 0.35306403040885925, 0.3446469306945801, 0.34086838364601135, 0.3453059196472168, 0.32719123363494873, 0.3351406157016754, 0.32414066791534424, 0.32554593682289124, 0.3151906728744507, 0.3173016607761383, 0.3089848458766937, 0.30401015281677246, 0.30106762051582336, 0.2987884283065796, 0.29164958000183105, 0.28563106060028076, 0.28734785318374634, 0.28014254570007324, 0.27866432070732117, 0.27401643991470337, 0.2671418786048889, 0.26127731800079346, 0.2634842097759247, 0.26535874605178833, 0.2548093795776367, 0.2514827847480774, 0.2524223029613495, 0.23473742604255676, 0.23850621283054352, 0.23452191054821014, 0.2334158718585968, 0.23921255767345428], "accuracy": [0.27460044622421265, 0.4920089840888977, 0.570730447769165, 0.6211860775947571, 0.6705851554870605, 0.6968696117401123, 0.720380425453186, 0.7442874312400818, 0.7512878179550171, 0.7647602558135986, 0.7667415142059326, 0.7815347909927368, 0.7890635132789612, 0.7932901978492737, 0.7971205711364746, 0.8033285140991211, 0.8107251524925232, 0.8124422430992126, 0.817989706993103, 0.8228767514228821, 0.8271034359931946, 0.8329150676727295, 0.8322546482086182, 0.8396512866020203, 0.8372738361358643, 0.8477083444595337, 0.8461233377456665, 0.8495575189590454, 0.8516708612442017, 0.852859616279602, 0.8607845902442932, 0.8601241707801819, 0.8618412613868713, 0.863558292388916, 0.8656716346740723, 0.863558292388916, 0.871879518032074, 0.8728041052818298, 0.8747853636741638, 0.8784837126731873, 0.8768987059593201, 0.8780874609947205, 0.884691596031189, 0.8774270415306091, 0.8865407705307007, 0.8831065893173218, 0.8841632604598999, 0.8841632604598999, 0.889578640460968, 0.8878615498542786, 0.8894465565681458, 0.8938053250312805, 0.8948619961738586, 0.8965790271759033, 0.8963148593902588, 0.8990886211395264, 0.9001452922821045, 0.901862382888794, 0.904768168926239, 0.9088627696037292, 0.9072777628898621, 0.9030511379241943, 0.9108440279960632, 0.9079381823539734, 0.9076740145683289, 0.913617730140686, 0.9144102334976196, 0.9133535623550415, 0.9202219247817993, 0.9129573106765747], "val_loss": [2.0386435985565186, 1.5182690620422363, 1.058653473854065, 0.8587419390678406, 0.7705155611038208, 0.7108157277107239, 0.6659690737724304, 0.6255413293838501, 0.596723198890686, 0.5753853917121887, 0.5533925890922546, 0.5415007472038269, 0.5238186120986938, 0.5129736065864563, 0.5021448731422424, 0.4944433569908142, 0.4839734733104706, 0.4736737012863159, 0.46897628903388977, 0.4600679576396942, 0.457011878490448, 0.4541844129562378, 0.4452120363712311, 0.4393083453178406, 0.44015246629714966, 0.42948219180107117, 0.4218888282775879, 0.42252689599990845, 0.4193302094936371, 0.4154711961746216, 0.4086054563522339, 0.4081586003303528, 0.40461766719818115, 0.4026508033275604, 0.39917683601379395, 0.39513200521469116, 0.3952559530735016, 0.3948352038860321, 0.390787810087204, 0.3940037488937378, 0.3893929421901703, 0.3866645395755768, 0.38388726115226746, 0.38405919075012207, 0.38313084840774536, 0.38141781091690063, 0.3762933015823364, 0.3812277913093567, 0.377276211977005, 0.37234827876091003, 0.3767252564430237, 0.3757716417312622, 0.3771341145038605, 0.37249743938446045, 0.37076619267463684, 0.3712362051010132, 0.3670549988746643, 0.3736054599285126, 0.37578150629997253, 0.3743099272251129, 0.37614214420318604, 0.3685026168823242, 0.3748568892478943, 0.3803900182247162, 0.3654845356941223, 0.37268680334091187, 0.3712267279624939, 0.37509486079216003, 0.373761385679245, 0.36732620000839233], "val_accuracy": [0.546999990940094, 0.6513333320617676, 0.6693333387374878, 0.6956666707992554, 0.721666693687439, 0.7409999966621399, 0.753333330154419, 0.7733333110809326, 0.781333327293396, 0.7866666913032532, 0.7946666479110718, 0.8076666593551636, 0.8103333115577698, 0.8166666626930237, 0.8133333325386047, 0.8203333616256714, 0.824999988079071, 0.8353333473205566, 0.8323333263397217, 0.8373333215713501, 0.8379999995231628, 0.8333333134651184, 0.8396666646003723, 0.847000002861023, 0.8393333554267883, 0.8479999899864197, 0.8496666550636292, 0.8493333458900452, 0.8513333201408386, 0.859000027179718, 0.8556666374206543, 0.859333336353302, 0.8550000190734863, 0.8583333492279053, 0.8556666374206543, 0.8603333234786987, 0.8560000061988831, 0.8579999804496765, 0.8603333234786987, 0.8633333444595337, 0.8613333106040955, 0.8573333621025085, 0.8653333187103271, 0.8673333525657654, 0.8633333444595337, 0.8683333396911621, 0.8656666874885559, 0.8690000176429749, 0.8676666617393494, 0.8693333268165588, 0.8679999709129333, 0.8673333525657654, 0.8703333139419556, 0.8693333268165588, 0.8709999918937683, 0.8713333606719971, 0.8709999918937683, 0.8683333396911621, 0.871666669845581, 0.8706666827201843, 0.8700000047683716, 0.8723333477973938, 0.8706666827201843, 0.8696666955947876, 0.8759999871253967, 0.871999979019165, 0.8759999871253967, 0.8733333349227905, 0.875, 0.8756666779518127]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 0, 8], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 4, 2, 2, 1, 2, 1, 1, 1, 10, 5, 5, 3], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(grad), grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0], [0, 2, 5, 0, 3, 5], [0, 2, 3, 3], [16, 64], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 4, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 16, 75]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 5, 3, 2, 1, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [1, 2, 3, 0, 0, 3, 6, 7, 1, 2, 5, 2], [0, 1, 2, 2, 0, 3, 0, 1, 1, 3], [39, 39, 57], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 3, 8, 0, 3, 5], [0, 2, 0, 3], [16, 40], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 8, 8, 4, 5], [0, 0, 0, 3, 4, 0, 3, 0, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(tf.math.negative(tf.math.multiply(alpha, grad))), tf.math.divide_no_nan(grad, tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.square(tf.math.add(alpha, alpha)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.math.sqrt(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.sqrt(tf.math.sqrt(sigma)), grad)), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.square(sigma), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}, "mapping_values": [1, 22, 12, 10, 3, 6, 4, 2, 1, 2, 1, 1, 1, 23, 13, 10, 6], "tree_depth": 23}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 2, 0, 2], [0, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 3, 3, 5], [0, 2, 0, 3, 1], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 6, 4, 0, 4, 5], [0, 0, 0, 3, 0, 0, 3, 1, 0, 0, 0, 6, 5], [16, 9, 96, 99, 61, 1, 70, 83]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 10, 5, 5, 2, 2, 1, 1, 1, 29, 16, 13, 8], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), grad), tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.subtract(tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma), alpha), tf.math.add(tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.pow(tf.math.negative(tf.math.pow(tf.math.square(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), grad), grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}]