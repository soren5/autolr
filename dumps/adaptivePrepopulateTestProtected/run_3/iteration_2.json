[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8734285831451416, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2255282402038574, 1.8721107244491577, 1.4010379314422607, 1.1106735467910767, 0.940341055393219, 0.8359335660934448, 0.7731297612190247, 0.7296580672264099, 0.6895313262939453, 0.6571158170700073, 0.633295476436615, 0.6155224442481995, 0.5889805555343628, 0.5725106596946716, 0.556487500667572, 0.5408687591552734, 0.5278533697128296, 0.5128424763679504, 0.512872576713562, 0.4899774193763733, 0.4817979633808136, 0.47892409563064575, 0.46546685695648193, 0.4566666781902313, 0.451609343290329, 0.43633145093917847, 0.4428727924823761, 0.42452678084373474, 0.42050766944885254, 0.4092382490634918, 0.40380609035491943, 0.39615246653556824, 0.39049798250198364, 0.38757410645484924, 0.37997010350227356, 0.3791789710521698, 0.3691047430038452, 0.36647623777389526, 0.362128347158432, 0.35865068435668945, 0.34899047017097473, 0.34528470039367676, 0.34164324402809143, 0.3404218256473541, 0.329362154006958, 0.32548993825912476, 0.3200454115867615, 0.319357693195343, 0.3098825216293335, 0.3054966330528259], "accuracy": [0.2689208686351776, 0.48368775844573975, 0.5597675442695618, 0.6098269820213318, 0.6647734642028809, 0.7030775547027588, 0.7220974564552307, 0.7411174178123474, 0.7464007139205933, 0.763967752456665, 0.7684586048126221, 0.7718927264213562, 0.7889314293861389, 0.7909126877784729, 0.7968564033508301, 0.8092722296714783, 0.81112140417099, 0.8166688680648804, 0.8145555257797241, 0.8244617581367493, 0.8317263126373291, 0.8261788487434387, 0.8339717388153076, 0.8411042094230652, 0.8413683772087097, 0.8438779711723328, 0.8467837572097778, 0.846387505531311, 0.8527275323867798, 0.8576145768165588, 0.8529917001724243, 0.8617091774940491, 0.8622375130653381, 0.8621054291725159, 0.8650112152099609, 0.8644828796386719, 0.8721436858177185, 0.8687095642089844, 0.8734645247459412, 0.8747853636741638, 0.8800686597824097, 0.8786157965660095, 0.882710337638855, 0.8792761564254761, 0.8811253309249878, 0.885219931602478, 0.8856161832809448, 0.886672854423523, 0.886672854423523, 0.8899748921394348], "val_loss": [2.046873092651367, 1.5288923978805542, 1.0626829862594604, 0.856019914150238, 0.7606016993522644, 0.7008227705955505, 0.6582002639770508, 0.6210333704948425, 0.5941072702407837, 0.5707116723060608, 0.5571823120117188, 0.5361080169677734, 0.5217938423156738, 0.5068894624710083, 0.49441617727279663, 0.4871320128440857, 0.47810932993888855, 0.47213321924209595, 0.4643647372722626, 0.4517059624195099, 0.4470732808113098, 0.44019225239753723, 0.4363744854927063, 0.43239396810531616, 0.42653128504753113, 0.4212285280227661, 0.41591763496398926, 0.4089317321777344, 0.40691429376602173, 0.4042397439479828, 0.39867520332336426, 0.4001860022544861, 0.38896405696868896, 0.3901083469390869, 0.3860934376716614, 0.38403454422950745, 0.3824399709701538, 0.3795788884162903, 0.37650981545448303, 0.37731820344924927, 0.3719942271709442, 0.37503206729888916, 0.3734400272369385, 0.3695981800556183, 0.3660171627998352, 0.36835432052612305, 0.3619896173477173, 0.36234453320503235, 0.36134591698646545, 0.3571830987930298], "val_accuracy": [0.5239999890327454, 0.6553333401679993, 0.6856666803359985, 0.7023333311080933, 0.7279999852180481, 0.7490000128746033, 0.762333333492279, 0.7716666460037231, 0.7816666960716248, 0.7889999747276306, 0.7993333339691162, 0.8040000200271606, 0.8073333501815796, 0.8183333277702332, 0.8243333101272583, 0.8226666450500488, 0.8220000267028809, 0.8273333311080933, 0.8326666951179504, 0.8353333473205566, 0.8360000252723694, 0.8389999866485596, 0.8379999995231628, 0.8420000076293945, 0.8403333425521851, 0.8489999771118164, 0.8493333458900452, 0.8483333587646484, 0.8500000238418579, 0.8503333330154419, 0.8543333411216736, 0.8493333458900452, 0.8546666502952576, 0.8550000190734863, 0.8579999804496765, 0.8566666841506958, 0.8576666712760925, 0.8606666922569275, 0.8603333234786987, 0.8576666712760925, 0.862666666507721, 0.8583333492279053, 0.8616666793823242, 0.8606666922569275, 0.8679999709129333, 0.862333357334137, 0.8650000095367432, 0.8663333058357239, 0.8663333058357239, 0.8663333058357239]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8728571534156799, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2236742973327637, 1.8742692470550537, 1.4029496908187866, 1.09634530544281, 0.9415430426597595, 0.8414611220359802, 0.7710993885993958, 0.7318057417869568, 0.6923565864562988, 0.662964403629303, 0.629790186882019, 0.6138708591461182, 0.5961389541625977, 0.5758830308914185, 0.5571126937866211, 0.5433351993560791, 0.5337265133857727, 0.5266324877738953, 0.5038482546806335, 0.5054583549499512, 0.49074992537498474, 0.48108628392219543, 0.4662751257419586, 0.4598284661769867, 0.45472049713134766, 0.44517654180526733, 0.4379558861255646, 0.4283325672149658, 0.41711679100990295, 0.4244152307510376, 0.4177493155002594, 0.4060872793197632, 0.3936041295528412, 0.3849567472934723, 0.38450613617897034, 0.3791911005973816, 0.3743784725666046, 0.3655022084712982, 0.3645157217979431, 0.3541099727153778, 0.35636913776397705, 0.34905949234962463, 0.3471554219722748, 0.3358820080757141, 0.33769214153289795, 0.322871595621109, 0.31903600692749023, 0.31539660692214966, 0.3060597777366638, 0.3117862343788147, 0.2996765971183777, 0.29820516705513, 0.29109513759613037, 0.28863954544067383, 0.28606635332107544, 0.2784731686115265, 0.28222617506980896, 0.2743145823478699, 0.2768363058567047, 0.2716750204563141, 0.2657518684864044, 0.26154467463493347, 0.2528415322303772, 0.250501424074173, 0.24744635820388794, 0.2531175911426544, 0.24610650539398193, 0.23532679677009583, 0.23487304151058197, 0.23139679431915283, 0.22567737102508545], "accuracy": [0.27803459763526917, 0.49108439683914185, 0.5610883831977844, 0.6140536069869995, 0.6616035103797913, 0.6995112895965576, 0.7177387475967407, 0.7280412316322327, 0.7481178045272827, 0.7607977986335754, 0.7637035846710205, 0.774798572063446, 0.7769119143486023, 0.7913089394569397, 0.8013472557067871, 0.8029322624206543, 0.8082155585289001, 0.8095363974571228, 0.8171972036361694, 0.8238013386726379, 0.8281601071357727, 0.82683926820755, 0.8318583965301514, 0.8352925777435303, 0.8383304476737976, 0.8400475382804871, 0.8424250483512878, 0.8492933511734009, 0.8521991968154907, 0.8469158411026001, 0.8536521196365356, 0.8555012345314026, 0.8580108284950256, 0.8622375130653381, 0.8648791313171387, 0.8667283058166504, 0.868049144744873, 0.8713511824607849, 0.8725399374961853, 0.8762382864952087, 0.8709549307823181, 0.8768987059593201, 0.876370370388031, 0.8844274282455444, 0.8808611631393433, 0.8861445188522339, 0.8889182209968567, 0.887201189994812, 0.8936732411384583, 0.8899748921394348, 0.8927486538887024, 0.8931449055671692, 0.8967111110687256, 0.8972394466400146, 0.8953903317451477, 0.8980319499969482, 0.8981640338897705, 0.9014661312103271, 0.9029190540313721, 0.9015982151031494, 0.9035794734954834, 0.9068815112113953, 0.9091269373893738, 0.9091269373893738, 0.909259021282196, 0.910711944103241, 0.9120327830314636, 0.9167877435684204, 0.9122969508171082, 0.9163914918899536, 0.9196935892105103], "val_loss": [2.0419516563415527, 1.5237354040145874, 1.0530084371566772, 0.8416926860809326, 0.7417232990264893, 0.690920352935791, 0.6462734937667847, 0.6095905900001526, 0.585680365562439, 0.5572311878204346, 0.5388494729995728, 0.5281277894973755, 0.5190134048461914, 0.4926217496395111, 0.4865248501300812, 0.47582560777664185, 0.4720318615436554, 0.46265918016433716, 0.44838643074035645, 0.44377779960632324, 0.4433821737766266, 0.4314210116863251, 0.42617908120155334, 0.417481392621994, 0.41455480456352234, 0.4124411642551422, 0.406139075756073, 0.40258902311325073, 0.4000110626220703, 0.40358203649520874, 0.4024205803871155, 0.39223623275756836, 0.38700008392333984, 0.38293302059173584, 0.38349243998527527, 0.3763214647769928, 0.37651827931404114, 0.372843861579895, 0.37471795082092285, 0.37357771396636963, 0.3665928840637207, 0.3671625852584839, 0.3624955117702484, 0.36710822582244873, 0.3601970076560974, 0.36056578159332275, 0.3592379689216614, 0.3625374734401703, 0.3540889024734497, 0.35078832507133484, 0.35561466217041016, 0.3486775755882263, 0.34984490275382996, 0.35090306401252747, 0.3454386293888092, 0.34897470474243164, 0.3465390205383301, 0.3456992506980896, 0.3474999964237213, 0.34699979424476624, 0.3462543487548828, 0.3373771905899048, 0.3447944223880768, 0.3394356966018677, 0.3368738293647766, 0.34223705530166626, 0.3366350531578064, 0.3399204909801483, 0.3381897509098053, 0.3361601233482361, 0.3382430970668793], "val_accuracy": [0.5076666474342346, 0.6613333225250244, 0.6800000071525574, 0.7133333086967468, 0.7476666569709778, 0.75, 0.762333333492279, 0.7756666541099548, 0.7760000228881836, 0.7956666946411133, 0.7993333339691162, 0.8080000281333923, 0.8090000152587891, 0.8163333535194397, 0.8226666450500488, 0.8296666741371155, 0.8256666660308838, 0.8323333263397217, 0.8363333344459534, 0.8376666903495789, 0.8376666903495789, 0.843999981880188, 0.8460000157356262, 0.8516666889190674, 0.8493333458900452, 0.8550000190734863, 0.8553333282470703, 0.8550000190734863, 0.8569999933242798, 0.8526666760444641, 0.8553333282470703, 0.8643333315849304, 0.8613333106040955, 0.8640000224113464, 0.8640000224113464, 0.8673333525657654, 0.8676666617393494, 0.8650000095367432, 0.8686666488647461, 0.8669999837875366, 0.8650000095367432, 0.8690000176429749, 0.8679999709129333, 0.8686666488647461, 0.8700000047683716, 0.8713333606719971, 0.8723333477973938, 0.8679999709129333, 0.8736666440963745, 0.8756666779518127, 0.875, 0.8733333349227905, 0.8756666779518127, 0.878000020980835, 0.878000020980835, 0.8763333559036255, 0.8769999742507935, 0.8790000081062317, 0.878000020980835, 0.878000020980835, 0.8763333559036255, 0.8833333253860474, 0.8820000290870667, 0.8806666731834412, 0.8820000290870667, 0.8849999904632568, 0.8833333253860474, 0.8840000033378601, 0.8849999904632568, 0.8833333253860474, 0.8836666941642761]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 2, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 8, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 3, 1], [16, 10, 96, 99, 61, 93]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 9, 5, 4, 2, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 8, 8], [0, 2, 1, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}, "mapping_values": [1, 6, 3, 3, 2, 6, 3, 3, 1, 2, 1, 1, 1, 20, 10, 10, 5], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 1], [0, 1, 2, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 5, 3, 5], [0, 2, 0, 3], [66, 16], [0, 1], [0], [0], [27], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 4, 8, 2], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 5], [16, 99, 96, 99, 61, 1]], "fitness": -0.09428571164608002, "mapping_values": [1, 9, 5, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 23, 12, 11, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.subtract(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.pow(tf.math.sqrt(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad))", "other_info": {"loss": [2.3096683025360107, 2.3105196952819824, 2.3103294372558594, 2.3101987838745117, 2.309767484664917, 2.308955669403076], "accuracy": [0.09470347315073013, 0.09034473448991776, 0.09034473448991776, 0.09325055778026581, 0.09113723784685135, 0.09430722147226334], "val_loss": [2.308814525604248, 2.308814525604248, 2.308814525604248, 2.308814525604248, 2.308814525604248, 2.308814525604248], "val_accuracy": [0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 6, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [1], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [4, 3, 3, 6, 8, 1, 4, 1, 4, 2, 4, 0, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 0], [90, 99, 96, 99, 61, 6, 74]], "fitness": -0.09342857450246811, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 0, 24, 13, 11, 7], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), sigma), tf.math.pow(tf.math.negative(alpha), beta)), tf.math.sqrt(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.310753345489502, 2.3099231719970703, 2.311206579208374, 2.3097174167633057, 2.308896541595459, 2.309898853302002], "accuracy": [0.08849557489156723, 0.08809932321310043, 0.09166556596755981, 0.09615638852119446, 0.09311848133802414, 0.09576013684272766], "val_loss": [2.3089075088500977, 2.3089075088500977, 2.3089075088500977, 2.3089075088500977, 2.3089075088500977, 2.3089075088500977], "val_accuracy": [0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654]}}]