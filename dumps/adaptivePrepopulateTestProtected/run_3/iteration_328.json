[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8545714020729065, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224182367324829, 1.8691816329956055, 1.3956049680709839, 1.1060502529144287, 0.9506565928459167, 0.8514868021011353, 0.7935841679573059, 0.7377301454544067, 0.7009968161582947, 0.6759353876113892, 0.6541643142700195, 0.6225987076759338, 0.6087780594825745, 0.5939934849739075, 0.5777916312217712, 0.5587684512138367, 0.5454877018928528, 0.5389719605445862, 0.5310767292976379, 0.5220577716827393, 0.511023998260498, 0.5015844702720642, 0.4782554805278778, 0.4815651476383209, 0.47394508123397827, 0.47493281960487366, 0.4660094678401947, 0.45128223299980164, 0.43924349546432495, 0.43344372510910034, 0.4258021116256714, 0.4218003749847412, 0.41367363929748535, 0.41264715790748596, 0.41057685017585754, 0.39703425765037537, 0.3961351215839386, 0.3856092393398285, 0.38025861978530884, 0.3733687698841095, 0.3674400746822357, 0.3646070957183838, 0.365623414516449, 0.35798168182373047, 0.35692113637924194, 0.3472987115383148, 0.3440864086151123], "accuracy": [0.2735437750816345, 0.48329150676727295, 0.5585787892341614, 0.6165632009506226, 0.6633205413818359, 0.6942279934883118, 0.7207766771316528, 0.7296261787414551, 0.7475894689559937, 0.750231146812439, 0.7648923397064209, 0.7714964747428894, 0.7751948237419128, 0.7823272943496704, 0.7948752045631409, 0.7957997918128967, 0.802800178527832, 0.8068947196006775, 0.8131026029586792, 0.816008448600769, 0.8191784620285034, 0.8214238286018372, 0.8259146809577942, 0.8325188159942627, 0.8286884427070618, 0.8293488025665283, 0.8273676037788391, 0.837141752243042, 0.8486329317092896, 0.8495575189590454, 0.8459912538528442, 0.8535200357437134, 0.8512746095657349, 0.8518029451370239, 0.8520671129226685, 0.8605204224586487, 0.8580108284950256, 0.8634262084960938, 0.8677849769592285, 0.8677849769592285, 0.8689737319946289, 0.8693699836730957, 0.8654074668884277, 0.8735966086387634, 0.8713511824607849, 0.8754457831382751, 0.8770307898521423], "val_loss": [2.0390069484710693, 1.5069314241409302, 1.037420392036438, 0.8289104700088501, 0.7362752556800842, 0.6770626902580261, 0.6307005286216736, 0.5982598066329956, 0.5643620491027832, 0.5444197654724121, 0.5249930620193481, 0.5111849904060364, 0.49529728293418884, 0.4832303822040558, 0.4672001898288727, 0.45733389258384705, 0.4509643018245697, 0.4506042003631592, 0.44035279750823975, 0.43262016773223877, 0.42304232716560364, 0.4156438708305359, 0.40697866678237915, 0.4065159559249878, 0.4030078053474426, 0.3946024179458618, 0.39386194944381714, 0.3866105079650879, 0.38809818029403687, 0.38170942664146423, 0.37751010060310364, 0.3739881217479706, 0.3844454288482666, 0.37437891960144043, 0.3691607713699341, 0.3649921417236328, 0.36416834592819214, 0.3592257499694824, 0.3584294021129608, 0.35650333762168884, 0.3589048385620117, 0.3548906147480011, 0.3506380319595337, 0.35079941153526306, 0.3468855321407318, 0.34654927253723145, 0.34232160449028015], "val_accuracy": [0.574999988079071, 0.6629999876022339, 0.6866666674613953, 0.7163333296775818, 0.7416666746139526, 0.7599999904632568, 0.7733333110809326, 0.7873333096504211, 0.796999990940094, 0.8083333373069763, 0.812666654586792, 0.8180000185966492, 0.8256666660308838, 0.828000009059906, 0.8336666822433472, 0.8416666388511658, 0.8403333425521851, 0.8426666855812073, 0.843999981880188, 0.8473333120346069, 0.8523333072662354, 0.8516666889190674, 0.859666645526886, 0.859000027179718, 0.8603333234786987, 0.8659999966621399, 0.8653333187103271, 0.8663333058357239, 0.8659999966621399, 0.8679999709129333, 0.8690000176429749, 0.871666669845581, 0.8619999885559082, 0.8686666488647461, 0.871666669845581, 0.871666669845581, 0.8743333220481873, 0.875333309173584, 0.8736666440963745, 0.874666690826416, 0.8766666650772095, 0.8806666731834412, 0.8773333430290222, 0.8786666393280029, 0.8790000081062317, 0.8776666522026062, 0.8803333044052124]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 2, 0, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 26], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 3, 6, 8, 1, 4, 1, 4, 2, 3], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 8, 4, 4, 2, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(grad, tf.math.subtract(sigma, alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 9, 0, 3, 4], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1], [6, 3, 3, 2, 8, 1, 4, 1, 4, 2, 8, 1, 4, 8, 6, 0, 9, 6, 5], [0, 1, 0, 3, 0, 0, 3, 1, 2, 4, 4, 5, 2], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 2, 1, 1, 1, 2, 1, 1, 1, 32, 19, 13, 5], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(alpha, tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), sigma), tf.math.divide_no_nan(alpha, beta))))), grad)), grad)), tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.square(grad), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1], [1, 2, 2, 0, 3, 2, 2, 2, 5, 8, 3, 8, 1, 3, 2, 7, 0, 1, 1, 6, 5, 3, 5, 1, 6, 2, 7, 2, 9, 8, 0, 7, 6, 9, 7, 0, 0, 6, 3, 8, 3, 7, 4, 5, 6, 1, 1, 7, 1, 4, 0, 3, 3, 7, 8, 3, 2, 4, 7, 8, 4, 6, 5, 2, 2, 0, 6, 5, 9, 8, 0, 7], [0, 1, 0, 2, 1, 0, 1, 2, 3, 3, 3, 0, 0, 2, 2, 3, 0, 1, 0, 1, 0, 1, 0, 2, 0, 0, 3, 0, 1, 3, 2, 1, 0, 2, 0, 3, 0, 3, 1, 2, 1, 1, 2, 0, 2, 1], [39, 39, 31, 70, 41, 58, 79, 13, 93, 19, 40, 38, 55, 74, 45, 39, 55, 5, 99], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 2, 3, 0, 3, 5, 4, 6, 5, 1, 2, 7, 6, 0, 7, 1, 9, 4, 5, 0, 6, 3, 7, 3, 0, 5, 9], [0, 2, 0, 3, 2, 5, 4, 4, 5, 2, 0, 2, 5, 4, 5], [16, 16, 2, 71, 74], [0, 1, 0, 1, 1], [6, 1], [0, 4, 0], [99, 57], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [5, 3, 3, 0, 8, 4, 4, 1, 4, 2, 8], [3, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 89, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.add(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.add(tf.math.square(alpha), tf.math.sqrt(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), alpha), tf.math.multiply(tf.math.sqrt(tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.add(tf.math.negative(tf.math.subtract(grad, tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.square(tf.math.multiply(grad, tf.math.square(tf.math.subtract(grad, tf.math.divide_no_nan(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(grad, grad)))), grad), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.negative(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.divide_no_nan(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.negative(tf.math.negative(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.multiply(alpha, tf.math.sqrt(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(tf.math.pow(tf.math.square(tf.math.divide_no_nan(grad, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), alpha))))))), tf.math.subtract(tf.math.add(grad, tf.math.subtract(tf.math.pow(tf.math.negative(tf.math.multiply(grad, alpha)), tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.multiply(tf.math.add(tf.math.pow(grad, tf.math.add(tf.math.sqrt(tf.math.pow(tf.math.divide_no_nan(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)), alpha)), tf.math.add(grad, alpha))), tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.square(alpha), grad)), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.negative(tf.math.add(grad, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.square(beta)))), tf.math.subtract(tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.math.add(grad, tf.math.subtract(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.pow(grad, grad)))), tf.math.square(tf.math.negative(grad))), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(tf.math.negative(beta), grad), tf.math.square(grad))), grad)), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(sigma)", "other_info": {"loss": [2.3498573303222656, 145851.734375, 9750031.0, 24749010.0, 39661196.0, 54400660.0, 69257368.0], "accuracy": [0.09747721254825592, 0.09893012791872025, 0.10276053100824356, 0.10130762308835983, 0.10368511080741882, 0.09972262382507324, 0.09642054885625839], "val_loss": [2.817464828491211, 3739112.75, 18655728.0, 33513660.0, 48316276.0, 63047184.0, 77738136.0], "val_accuracy": [0.1003333330154419, 0.10266666859388351, 0.10199999809265137, 0.09700000286102295, 0.10100000351667404, 0.10199999809265137, 0.0976666659116745]}, "mapping_values": [1, 118, 72, 46, 19, 42, 27, 15, 5, 5, 2, 3, 2, 2, 1, 1, 0], "tree_depth": 36}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 5, 0, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [89], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.08857142925262451, "mapping_values": [1, 9, 5, 4, 2, 8, 5, 3, 2, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, alpha))", "other_info": {"loss": [2.3104608058929443, 2.3094940185546875, 2.308029890060425, 2.307706356048584, 2.3082730770111084, 2.308983564376831], "accuracy": [0.09285431355237961, 0.08981640636920929, 0.0936468094587326, 0.09325055778026581, 0.08981640636920929, 0.09008057415485382], "val_loss": [2.3084869384765625, 2.3082311153411865, 2.3080081939697266, 2.307835578918457, 2.307692766189575, 2.307565689086914], "val_accuracy": [0.08533333241939545, 0.08366666734218597, 0.0820000022649765, 0.08133333176374435, 0.08033332973718643, 0.07866666465997696]}}]