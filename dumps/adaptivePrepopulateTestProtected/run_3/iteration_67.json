[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.878000020980835, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223759174346924, 1.8681567907333374, 1.3971633911132812, 1.1021500825881958, 0.9438490867614746, 0.8268281817436218, 0.7700234055519104, 0.7182450890541077, 0.6839274764060974, 0.655160665512085, 0.6316797733306885, 0.6046612858772278, 0.586663544178009, 0.5732303261756897, 0.5552444458007812, 0.5382086634635925, 0.5205084085464478, 0.5141545534133911, 0.49866363406181335, 0.4905571937561035, 0.48713892698287964, 0.4630949795246124, 0.46493759751319885, 0.4510720372200012, 0.4456666111946106, 0.4411585330963135, 0.43109801411628723, 0.4194287657737732, 0.41647717356681824, 0.4177640676498413, 0.39898860454559326, 0.3982110619544983, 0.3941095173358917, 0.3838343918323517, 0.38270825147628784, 0.38132011890411377, 0.3706604242324829, 0.3630581796169281, 0.35970449447631836, 0.3585955500602722, 0.3488880693912506, 0.3406795859336853, 0.3434852361679077, 0.34305644035339355, 0.32770219445228577, 0.3274216949939728, 0.3164256513118744, 0.31487780809402466, 0.31453031301498413, 0.3020377457141876, 0.3013147711753845, 0.29238083958625793, 0.30650538206100464, 0.2886098325252533, 0.28784143924713135, 0.28922179341316223, 0.27991431951522827, 0.27731093764305115, 0.27029022574424744, 0.2677718997001648, 0.2672445476055145], "accuracy": [0.27182671427726746, 0.4913485646247864, 0.5609562993049622, 0.6095628142356873, 0.6618676781654358, 0.6997754573822021, 0.7215691208839417, 0.7407211661338806, 0.7508915662765503, 0.7592127919197083, 0.7656848430633545, 0.7798177003860474, 0.7849689722061157, 0.789459764957428, 0.7991018295288086, 0.806630551815033, 0.81112140417099, 0.8088759779930115, 0.8210275769233704, 0.8181217908859253, 0.826310932636261, 0.8333113193511963, 0.8294808864593506, 0.8401796221733093, 0.8409721255302429, 0.8436138033866882, 0.8459912538528442, 0.8519350290298462, 0.8485008478164673, 0.8490291833877563, 0.856689989566803, 0.8573504090309143, 0.8615770936012268, 0.8644828796386719, 0.8605204224586487, 0.8614450097084045, 0.8671245574951172, 0.8726720213890076, 0.8732003569602966, 0.8689737319946289, 0.8762382864952087, 0.8798044919967651, 0.8717474341392517, 0.8825782537460327, 0.8840311765670776, 0.8845595121383667, 0.8885219693183899, 0.8865407705307007, 0.8887861371040344, 0.894069492816925, 0.8918240666389465, 0.8953903317451477, 0.8860124349594116, 0.8988244533538818, 0.8992207050323486, 0.8956544995307922, 0.9014661312103271, 0.89988112449646, 0.900409460067749, 0.9046360850334167, 0.9033153057098389], "val_loss": [2.0386126041412354, 1.5089809894561768, 1.0396978855133057, 0.8277255296707153, 0.7414798736572266, 0.6867381930351257, 0.6452507376670837, 0.6096968054771423, 0.5920496582984924, 0.5695558786392212, 0.550778865814209, 0.5315823554992676, 0.5166425704956055, 0.5040237307548523, 0.4927339255809784, 0.48035380244255066, 0.4752146899700165, 0.4640548527240753, 0.45926037430763245, 0.4498494863510132, 0.44989997148513794, 0.43486902117729187, 0.4302854835987091, 0.42699891328811646, 0.4222937822341919, 0.4179273545742035, 0.4156407117843628, 0.40615877509117126, 0.40567347407341003, 0.40483561158180237, 0.4008205533027649, 0.3957735300064087, 0.3910598158836365, 0.39842313528060913, 0.38378071784973145, 0.3824272155761719, 0.37983548641204834, 0.3832281529903412, 0.37993335723876953, 0.37290528416633606, 0.37028563022613525, 0.3697679340839386, 0.369826078414917, 0.3630952835083008, 0.3613884747028351, 0.3612003028392792, 0.3630628287792206, 0.35836127400398254, 0.35707563161849976, 0.3544061779975891, 0.35439038276672363, 0.35541149973869324, 0.34793493151664734, 0.355723112821579, 0.3566884696483612, 0.3480426073074341, 0.35176366567611694, 0.34468159079551697, 0.3469727337360382, 0.34757280349731445, 0.34379008412361145], "val_accuracy": [0.546999990940094, 0.6536666750907898, 0.6856666803359985, 0.7066666483879089, 0.7366666793823242, 0.7536666393280029, 0.7599999904632568, 0.7720000147819519, 0.7706666588783264, 0.7926666736602783, 0.7963333129882812, 0.7956666946411133, 0.8103333115577698, 0.809333324432373, 0.8220000267028809, 0.8226666450500488, 0.8243333101272583, 0.8330000042915344, 0.8349999785423279, 0.8370000123977661, 0.8333333134651184, 0.8429999947547913, 0.8463333249092102, 0.8446666598320007, 0.8476666808128357, 0.8479999899864197, 0.8450000286102295, 0.8506666421890259, 0.8496666550636292, 0.8529999852180481, 0.8556666374206543, 0.8556666374206543, 0.8586666584014893, 0.8526666760444641, 0.8576666712760925, 0.8610000014305115, 0.859000027179718, 0.8616666793823242, 0.8653333187103271, 0.8673333525657654, 0.8673333525657654, 0.8659999966621399, 0.8693333268165588, 0.8690000176429749, 0.8726666569709778, 0.8726666569709778, 0.8740000128746033, 0.8730000257492065, 0.871999979019165, 0.8759999871253967, 0.874666690826416, 0.871999979019165, 0.8806666731834412, 0.8776666522026062, 0.8706666827201843, 0.8820000290870667, 0.878333330154419, 0.878000020980835, 0.8806666731834412, 0.8793333172798157, 0.878333330154419]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8637142777442932, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2224514484405518, 1.8730305433273315, 1.4004546403884888, 1.0908764600753784, 0.9403401017189026, 0.8301625847816467, 0.774117112159729, 0.7322869300842285, 0.6906476020812988, 0.6561650633811951, 0.6347403526306152, 0.6192464232444763, 0.5982305407524109, 0.5779057145118713, 0.5519372224807739, 0.540091872215271, 0.5332221388816833, 0.5175538659095764, 0.509354829788208, 0.5002611875534058, 0.4868607819080353, 0.4810815453529358, 0.4772914946079254, 0.4666304290294647, 0.45416927337646484, 0.45309242606163025, 0.43529918789863586, 0.42861446738243103, 0.4335186183452606, 0.41529831290245056, 0.41381868720054626, 0.40376630425453186, 0.3914520740509033, 0.394918829202652, 0.3821418881416321, 0.386227548122406, 0.3662611246109009, 0.3668384253978729, 0.36311426758766174, 0.3649425804615021, 0.352385014295578, 0.34778764843940735, 0.34962716698646545, 0.33532166481018066, 0.32733842730522156, 0.3238494396209717, 0.3263697922229767, 0.32205891609191895, 0.3151646554470062, 0.30672910809516907, 0.29938453435897827, 0.3031105399131775, 0.29684197902679443, 0.2923024296760559, 0.29852449893951416, 0.2912123203277588, 0.2849869430065155, 0.28300559520721436, 0.2732350528240204, 0.26995816826820374, 0.26898670196533203, 0.2637738883495331, 0.26100805401802063, 0.25631630420684814, 0.25488361716270447, 0.24740156531333923, 0.2439480721950531, 0.24481096863746643, 0.23997686803340912, 0.23000265657901764, 0.23119385540485382, 0.22458909451961517, 0.22541752457618713, 0.2216416895389557, 0.2168198525905609, 0.2166394144296646, 0.2125275582075119, 0.20777390897274017, 0.2123439460992813, 0.2046108841896057], "accuracy": [0.2627129852771759, 0.4873860776424408, 0.568749189376831, 0.6222427487373352, 0.6670188903808594, 0.7066437602043152, 0.7284374833106995, 0.7310791015625, 0.7512878179550171, 0.7619865536689758, 0.7675340175628662, 0.7755910754203796, 0.7841764688491821, 0.7906485199928284, 0.802271842956543, 0.8054417967796326, 0.8094043135643005, 0.813498854637146, 0.8187822103500366, 0.8208954930305481, 0.8267071843147278, 0.8257825970649719, 0.8298771381378174, 0.8354246616363525, 0.8401796221733093, 0.8400475382804871, 0.843481719493866, 0.8469158411026001, 0.8494254350662231, 0.850350022315979, 0.8556333184242249, 0.8568220734596252, 0.8628978729248047, 0.8601241707801819, 0.8651432991027832, 0.8658037185668945, 0.8717474341392517, 0.8676528930664062, 0.8701624870300293, 0.8720116019248962, 0.8753136992454529, 0.8782195448875427, 0.876370370388031, 0.8809932470321655, 0.8836349248886108, 0.8844274282455444, 0.884691596031189, 0.8837670087814331, 0.8898428082466125, 0.8924844861030579, 0.8932769894599915, 0.8927486538887024, 0.8926165699958801, 0.8957865834236145, 0.8924844861030579, 0.8952582478523254, 0.8973715305328369, 0.8949940800666809, 0.9041078090667725, 0.9043719172477722, 0.9062210917472839, 0.9059569239616394, 0.9074098467826843, 0.9066173434257507, 0.9083344340324402, 0.9109761118888855, 0.9109761118888855, 0.9144102334976196, 0.9116365313529968, 0.9166556596755981, 0.9149385690689087, 0.9185048341751099, 0.9222031235694885, 0.9208822846412659, 0.9198256731033325, 0.9214106202125549, 0.9220710396766663, 0.924448549747467, 0.9232597947120667, 0.926429808139801], "val_loss": [2.0405445098876953, 1.5130927562713623, 1.039271354675293, 0.8377305269241333, 0.7513561844825745, 0.6995530724525452, 0.6490364670753479, 0.6178182363510132, 0.5986406803131104, 0.572653591632843, 0.5568490624427795, 0.5451768636703491, 0.5220026969909668, 0.5088271498680115, 0.5016733407974243, 0.4910303056240082, 0.47980374097824097, 0.4741988182067871, 0.46710360050201416, 0.46458911895751953, 0.45572200417518616, 0.442141592502594, 0.44097399711608887, 0.4358289837837219, 0.4290750324726105, 0.42478516697883606, 0.42196276783943176, 0.4196310341358185, 0.4093773066997528, 0.4154598116874695, 0.4062790870666504, 0.4010311961174011, 0.39917805790901184, 0.39983588457107544, 0.39991268515586853, 0.39223143458366394, 0.38918018341064453, 0.38646772503852844, 0.3885616958141327, 0.38203760981559753, 0.3812195658683777, 0.37549975514411926, 0.37588921189308167, 0.3707699477672577, 0.37186506390571594, 0.3676387667655945, 0.36798998713493347, 0.36557477712631226, 0.36707282066345215, 0.3662777543067932, 0.36895665526390076, 0.36200985312461853, 0.36280590295791626, 0.3611218333244324, 0.3652137815952301, 0.3594219982624054, 0.3610961437225342, 0.3574575185775757, 0.3588337302207947, 0.3559633493423462, 0.3572264313697815, 0.35714852809906006, 0.3580387234687805, 0.35894516110420227, 0.35451871156692505, 0.3512403666973114, 0.3526310324668884, 0.3513496518135071, 0.35359644889831543, 0.3559530973434448, 0.34939852356910706, 0.3509323000907898, 0.35450389981269836, 0.3518209755420685, 0.3510598838329315, 0.35136279463768005, 0.349033921957016, 0.3530980348587036, 0.3517088294029236, 0.3523905873298645], "val_accuracy": [0.5256666541099548, 0.6506666541099548, 0.6736666560173035, 0.7070000171661377, 0.7273333072662354, 0.7463333606719971, 0.7580000162124634, 0.7673333287239075, 0.7716666460037231, 0.7879999876022339, 0.7903333306312561, 0.7990000247955322, 0.8133333325386047, 0.8186666369438171, 0.8209999799728394, 0.824999988079071, 0.8263333439826965, 0.8296666741371155, 0.8333333134651184, 0.8346666693687439, 0.831333339214325, 0.8393333554267883, 0.8376666903495789, 0.8376666903495789, 0.8489999771118164, 0.843999981880188, 0.846666693687439, 0.8429999947547913, 0.8493333458900452, 0.8500000238418579, 0.8513333201408386, 0.8513333201408386, 0.8526666760444641, 0.8516666889190674, 0.8493333458900452, 0.8576666712760925, 0.859333336353302, 0.8573333621025085, 0.8510000109672546, 0.8579999804496765, 0.8603333234786987, 0.8606666922569275, 0.862333357334137, 0.8666666746139526, 0.8650000095367432, 0.8683333396911621, 0.8656666874885559, 0.8669999837875366, 0.8646666407585144, 0.8666666746139526, 0.8690000176429749, 0.8693333268165588, 0.8673333525657654, 0.8733333349227905, 0.8636666536331177, 0.8679999709129333, 0.871999979019165, 0.875, 0.8693333268165588, 0.8736666440963745, 0.875333309173584, 0.8713333606719971, 0.8740000128746033, 0.875333309173584, 0.875333309173584, 0.878000020980835, 0.8776666522026062, 0.8769999742507935, 0.8759999871253967, 0.8793333172798157, 0.8766666650772095, 0.8773333430290222, 0.8769999742507935, 0.8776666522026062, 0.8820000290870667, 0.8786666393280029, 0.8790000081062317, 0.8799999952316284, 0.8813333511352539, 0.8766666650772095]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 1, 3, 0, 3], [0, 1, 0, 2], [39, 32], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3, 6, 0, 7, 7, 4, 0, 2, 4, 4, 5, 2, 1, 3, 8, 6, 9, 3, 1, 1, 8, 0, 3, 0, 3, 1, 3, 1, 4, 2, 7, 9, 7, 8, 8, 3, 3, 2, 4], [0, 2, 0, 3, 3, 1, 3, 0, 1, 0, 4, 4, 4, 4, 3, 4, 1, 2, 0, 2, 2, 2, 0, 2, 1, 5, 1, 3, 0], [16, 16, 3, 36, 18, 29, 33, 45, 88], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 8, 6, 2, 1, 9, 1, 4, 8, 6], [0, 0, 0, 3, 4, 0, 3, 1, 2, 4], [16, 99, 96, 99, 97, 31]], "fitness": -0.10428571701049805, "mapping_values": [1, 2, 1, 1, 1, 72, 43, 29, 9, 2, 1, 1, 1, 17, 10, 7, 5], "tree_depth": 33, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.add(tf.math.pow(tf.math.negative(tf.math.add(grad, tf.math.pow(alpha, grad))), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), alpha))), tf.math.pow(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(tf.math.subtract(tf.math.multiply(tf.math.sqrt(tf.math.divide_no_nan(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), grad)), tf.math.multiply(grad, tf.math.subtract(tf.math.subtract(tf.math.sqrt(grad), tf.math.negative(grad)), tf.math.multiply(grad, tf.math.negative(grad))))), alpha), tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.math.subtract(beta, tf.math.pow(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), beta)), beta), tf.math.add(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.sqrt(tf.math.sqrt(tf.math.multiply(tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), beta), tf.math.add(tf.math.pow(alpha, grad), alpha)))), grad))), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma), tf.math.subtract(grad, tf.math.pow(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(sigma))))", "other_info": {"loss": [142021.84375, 1239015.25, 10958505.0, 63921292.0, 79693352.0, 98402488.0, 152206384.0], "accuracy": [0.09536388516426086, 0.09734513610601425, 0.10091137140989304, 0.0948355570435524, 0.08426892012357712, 0.09311848133802414, 0.07766477018594742], "val_loss": [454227.3125, 1831110.625, 55788792.0, 56303852.0, 74736992.0, 79130712.0, 128572672.0], "val_accuracy": [0.08533333241939545, 0.10333333164453506, 0.0403333343565464, 0.09233333170413971, 0.056333333253860474, 0.04933333396911621, 0.04500000178813934]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 1, 0, 4], [0, 1, 2, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 3, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 3, 1, 6, 6, 2, 1, 7, 7, 3, 2, 0, 4, 3, 9, 8, 2, 9, 2, 8, 0, 3, 6, 4, 9, 4, 4], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 5, 6, 3, 3, 4, 5, 7, 2, 0, 5, 5, 2, 6, 3, 1, 6], [16, 99, 96, 99, 61, 1, 90, 10, 41, 69]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 10, 6, 4, 2, 2, 1, 1, 1, 62, 36, 26, 10], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.multiply(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(grad, grad), tf.math.multiply(tf.math.add(tf.math.negative(sigma), sigma), tf.math.pow(tf.math.multiply(grad, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad)))), grad), tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(beta), tf.math.negative(tf.math.multiply(tf.math.divide_no_nan(tf.math.pow(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.pow(grad, grad), beta)), grad))))), sigma), alpha), grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [9, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0], [0, 6, 3, 0, 8, 2], [0, 2, 0, 3], [16, 16], [0, 1, 0, 1], [2, 8], [0, 1], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 6, 8, 1, 4, 1, 4, 5, 8], [0, 0, 0, 3, 0, 2, 4, 1, 2, 0], [16, 99, 96, 92, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 8, 5, 3, 2, 4, 2, 2, 1, 20, 11, 9, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.pow(beta, grad)))), alpha), tf.math.square(tf.math.sqrt(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 4], [0, 1, 0, 2], [39, 18], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 4, 3, 0, 3, 5], [0, 3, 0, 3], [98, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 3, 1, 4, 1, 4, 2, 8, 7, 4, 4, 8, 4, 8, 0, 1], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0, 0, 2, 4, 2, 1, 2], [16, 99, 96, 99, 61, 1, 49]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 0, 35, 19, 16, 7], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.pow(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), grad), tf.math.sqrt(tf.math.add(alpha, beta)))), tf.math.pow(tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.pow(tf.math.sqrt(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), beta))), grad))), tf.math.negative(tf.math.subtract(beta, alpha))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}]