[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8500000238418579, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222332239151001, 1.8665963411331177, 1.3907060623168945, 1.0865646600723267, 0.9326106309890747, 0.8274349570274353, 0.7698604464530945, 0.7255653738975525, 0.691534161567688, 0.6601535677909851, 0.6250795722007751, 0.6144009232521057, 0.5907772183418274, 0.5698728561401367, 0.5588815212249756, 0.5408470034599304, 0.5334771275520325, 0.5260836482048035, 0.5059252381324768, 0.5048235654830933, 0.491609126329422, 0.4835151433944702, 0.472743958234787, 0.47081154584884644, 0.4523075222969055, 0.448391854763031, 0.44001713395118713, 0.4386000335216522, 0.42529913783073425, 0.4243070185184479, 0.41405564546585083, 0.40972185134887695, 0.400912880897522, 0.39477065205574036, 0.39276084303855896, 0.3858168423175812, 0.3864116668701172, 0.37672683596611023, 0.36941638588905334, 0.3702049255371094, 0.36242610216140747, 0.34997543692588806, 0.351067453622818, 0.3434096574783325, 0.33639076352119446, 0.34164518117904663, 0.33373764157295227, 0.3284054696559906, 0.3227466642856598, 0.31758004426956177, 0.31011322140693665, 0.31155216693878174, 0.3006354868412018, 0.3018852472305298, 0.2960796654224396, 0.29004883766174316, 0.2894800901412964, 0.2801845073699951, 0.2824673056602478, 0.2830377221107483, 0.27241554856300354, 0.2718466818332672, 0.2644401490688324, 0.25899913907051086, 0.2532874345779419, 0.25191521644592285, 0.250562459230423, 0.24483434855937958], "accuracy": [0.28397834300994873, 0.47787609696388245, 0.5638620853424072, 0.6131290197372437, 0.668339729309082, 0.7057191729545593, 0.7210407853126526, 0.7374191284179688, 0.7471932172775269, 0.763439416885376, 0.7738739848136902, 0.7791573405265808, 0.7862898111343384, 0.7910447716712952, 0.796328067779541, 0.8033285140991211, 0.8084797263145447, 0.8086118102073669, 0.8181217908859253, 0.8161405324935913, 0.8207634687423706, 0.8259146809577942, 0.8313300609588623, 0.830669641494751, 0.8370096683502197, 0.842028796672821, 0.8442742228507996, 0.8473120927810669, 0.8494254350662231, 0.8487650156021118, 0.8529917001724243, 0.8543124794960022, 0.8599920868873596, 0.8584070801734924, 0.8605204224586487, 0.8640866279602051, 0.860652506351471, 0.8658037185668945, 0.8676528930664062, 0.8681812286376953, 0.8697662353515625, 0.8754457831382751, 0.8741249442100525, 0.8776912093162537, 0.8795403242111206, 0.8754457831382751, 0.8796724081039429, 0.8804649114608765, 0.8845595121383667, 0.8862766027450562, 0.8908994793891907, 0.8879936337471008, 0.8887861371040344, 0.8893144726753235, 0.8965790271759033, 0.8951261639595032, 0.8957865834236145, 0.8988244533538818, 0.8947299122810364, 0.8965790271759033, 0.9027869701385498, 0.9030511379241943, 0.9037115573883057, 0.9066173434257507, 0.9078060984611511, 0.9037115573883057, 0.909259021282196, 0.9104477763175964], "val_loss": [2.037442684173584, 1.5029059648513794, 1.0208903551101685, 0.8077118992805481, 0.725174069404602, 0.6681059002876282, 0.6222569346427917, 0.5920549035072327, 0.5646565556526184, 0.5388426780700684, 0.5205278992652893, 0.5088158249855042, 0.49719002842903137, 0.48224958777427673, 0.4652825891971588, 0.46253272891044617, 0.4508494436740875, 0.44453296065330505, 0.4365503191947937, 0.42858582735061646, 0.4195176661014557, 0.4213133156299591, 0.4179041385650635, 0.40651610493659973, 0.3996269106864929, 0.39349862933158875, 0.39490658044815063, 0.3907354474067688, 0.3829628825187683, 0.3817273676395416, 0.3730602264404297, 0.36996158957481384, 0.3672797977924347, 0.3643970191478729, 0.36352312564849854, 0.358703076839447, 0.36087897419929504, 0.3573744297027588, 0.3528183698654175, 0.34974902868270874, 0.34377962350845337, 0.3418959975242615, 0.34943097829818726, 0.3390769064426422, 0.3386191427707672, 0.33505719900131226, 0.334546834230423, 0.33175772428512573, 0.3333451747894287, 0.33226534724235535, 0.3285311758518219, 0.3242887854576111, 0.325646311044693, 0.3274392783641815, 0.31700649857521057, 0.320000022649765, 0.31444311141967773, 0.3154633641242981, 0.31219640374183655, 0.3216490149497986, 0.31385692954063416, 0.31150001287460327, 0.3102322220802307, 0.31136730313301086, 0.30855730175971985, 0.3112449645996094, 0.3053750693798065, 0.3066903352737427], "val_accuracy": [0.5113333463668823, 0.6556666493415833, 0.6963333487510681, 0.7170000076293945, 0.7366666793823242, 0.746999979019165, 0.762666642665863, 0.7710000276565552, 0.7833333611488342, 0.7929999828338623, 0.7996666431427002, 0.8109999895095825, 0.8119999766349792, 0.8163333535194397, 0.8259999752044678, 0.8273333311080933, 0.831333339214325, 0.8326666951179504, 0.8443333506584167, 0.8420000076293945, 0.847000002861023, 0.8429999947547913, 0.8399999737739563, 0.8523333072662354, 0.8523333072662354, 0.8543333411216736, 0.8566666841506958, 0.8536666631698608, 0.859333336353302, 0.8606666922569275, 0.8633333444595337, 0.8646666407585144, 0.8659999966621399, 0.8693333268165588, 0.8679999709129333, 0.8686666488647461, 0.8669999837875366, 0.8676666617393494, 0.8709999918937683, 0.871999979019165, 0.8756666779518127, 0.8759999871253967, 0.8703333139419556, 0.874666690826416, 0.875, 0.8769999742507935, 0.8793333172798157, 0.8790000081062317, 0.875333309173584, 0.878000020980835, 0.8803333044052124, 0.8799999952316284, 0.8769999742507935, 0.875, 0.8840000033378601, 0.8853333592414856, 0.8836666941642761, 0.8823333382606506, 0.8846666812896729, 0.8763333559036255, 0.8870000243186951, 0.8849999904632568, 0.8883333206176758, 0.8813333511352539, 0.8863333463668823, 0.8846666812896729, 0.8856666684150696, 0.8863333463668823]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 4, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 1, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [6, 4, 3, 6, 8, 1, 4, 3, 4, 2, 8, 6, 3, 3, 6, 5, 3, 5, 1, 5, 5, 3, 3, 0, 2, 9, 3, 6, 8, 8, 7, 3, 7, 2, 3, 0, 1, 8, 1, 8, 7, 2, 1, 2, 3], [0, 0, 0, 1, 4, 1, 3, 1, 2, 0, 1, 3, 6, 1, 5, 7, 6, 2, 4, 5, 1, 0, 0, 3, 5, 0, 5, 7, 0, 7, 2, 5], [16, 99, 96, 99, 61, 4, 17, 6, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 2, 1, 1, 1, 2, 1, 1, 1, 77, 45, 32, 9], "tree_depth": 33, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.pow(alpha, tf.math.add(grad, alpha)), sigma)))), tf.math.sqrt(tf.math.divide_no_nan(alpha, beta)))), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.square(tf.math.multiply(alpha, tf.math.square(sigma))), tf.math.subtract(tf.math.square(tf.math.square(tf.math.multiply(tf.math.multiply(tf.math.negative(grad), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(alpha, tf.math.sqrt(tf.math.sqrt(grad))), tf.math.add(tf.math.multiply(grad, grad), beta)))), grad))), grad)), tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(alpha), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.sqrt(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.sqrt(sigma), tf.math.add(grad, tf.math.add(tf.math.subtract(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), grad), grad))))), tf.math.add(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), grad))))), tf.math.multiply(beta, grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 9, 3, 0, 3, 5], [0, 2, 0, 3], [16, 28], [1, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 5, 6, 4, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 6]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 2, 2, 0, 1, 1, 0, 1, 1, 21, 11, 10, 6], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [0, 2, 3, 0, 3, 4, 2, 1, 8, 5, 1], [0, 1, 0, 2, 1, 0, 3, 2], [86, 39, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5, 9], [0, 2, 3, 3], [16, 71], [0, 1], [0], [2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 4], [46, 99, 96, 99, 61, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 11, 8, 3, 10, 7, 3, 2, 2, 1, 1, 0, 16, 8, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.pow(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), tf.math.square(tf.math.subtract(grad, grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [1, 2, 3, 0, 3, 8], [2, 1, 0, 2, 1], [39, 39], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [2, 2, 3, 0, 3, 5], [0, 1, 0, 3], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 4, 2], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 2, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 1, 1, 0, 1, 1, 1, 0, 1, 1, 25, 13, 12, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.sqrt(alpha)), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha), tf.math.add(tf.math.sqrt(tf.math.pow(beta, tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), beta))), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}]