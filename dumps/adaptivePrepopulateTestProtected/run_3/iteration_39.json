[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.87628573179245, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221153497695923, 1.8690768480300903, 1.3930829763412476, 1.0920813083648682, 0.946754515171051, 0.8386176228523254, 0.7666530013084412, 0.7169585227966309, 0.6927855014801025, 0.6578141450881958, 0.6284602284431458, 0.6175082921981812, 0.5932229161262512, 0.5866845846176147, 0.5698589086532593, 0.5537236928939819, 0.5400969386100769, 0.5237241387367249, 0.5110511779785156, 0.4987642467021942, 0.4859139025211334, 0.48274683952331543, 0.4702848792076111, 0.46559596061706543, 0.4571192264556885, 0.45048508048057556, 0.43323010206222534, 0.43672871589660645, 0.4228549599647522, 0.4158686399459839, 0.40923213958740234, 0.3978442847728729, 0.3938561677932739, 0.39290058612823486, 0.3881992995738983, 0.372427374124527, 0.3708527982234955, 0.3674342930316925, 0.3639999032020569, 0.3603408634662628, 0.34736937284469604, 0.34856680035591125, 0.3419991731643677, 0.3314146399497986, 0.33113908767700195, 0.3256821036338806, 0.32241684198379517, 0.31129369139671326, 0.31209611892700195, 0.31315377354621887, 0.29969727993011475, 0.30303266644477844, 0.2969401776790619, 0.2884080111980438, 0.2830028831958771, 0.2803061902523041, 0.284909725189209, 0.2756250500679016, 0.27255335450172424, 0.267034113407135, 0.26680734753608704, 0.26125890016555786, 0.25913572311401367, 0.2510053515434265, 0.24825863540172577, 0.2431088238954544, 0.24655894935131073], "accuracy": [0.27077004313468933, 0.488971084356308, 0.5671641826629639, 0.6252806782722473, 0.6592260003089905, 0.698718786239624, 0.7232862114906311, 0.7390040755271912, 0.7467969655990601, 0.7652885913848877, 0.7759873270988464, 0.7729493975639343, 0.7843085527420044, 0.7873464822769165, 0.7947431206703186, 0.7976489067077637, 0.8076872229576111, 0.8117818236351013, 0.8136309385299683, 0.8247259259223938, 0.8227446675300598, 0.8274996876716614, 0.8329150676727295, 0.829216718673706, 0.8379341959953308, 0.8426892161369324, 0.8479725122451782, 0.8446704745292664, 0.8507462739944458, 0.8500858545303345, 0.8543124794960022, 0.8582749962806702, 0.8609166741371155, 0.86118084192276, 0.8593316674232483, 0.8659358024597168, 0.8634262084960938, 0.872407853603363, 0.8688416481018066, 0.8714832663536072, 0.8737286925315857, 0.8730682730674744, 0.8749174475669861, 0.8821820020675659, 0.8799365758895874, 0.8815215826034546, 0.8837670087814331, 0.8878615498542786, 0.8838990926742554, 0.8853520154953003, 0.891559898853302, 0.8865407705307007, 0.8905032277107239, 0.8963148593902588, 0.896446943283081, 0.8969752788543701, 0.8951261639595032, 0.9002773761749268, 0.89988112449646, 0.8986923694610596, 0.901862382888794, 0.9029190540313721, 0.9019944667816162, 0.9062210917472839, 0.9074098467826843, 0.9082023501396179, 0.9084665179252625], "val_loss": [2.033933639526367, 1.5043776035308838, 1.0385841131210327, 0.8348872661590576, 0.748683512210846, 0.6962888240814209, 0.6452283263206482, 0.6097168326377869, 0.5908951163291931, 0.5654791593551636, 0.5485540628433228, 0.5308454632759094, 0.5217159986495972, 0.5026088356971741, 0.4924180805683136, 0.4941955506801605, 0.47913697361946106, 0.46788424253463745, 0.4600522518157959, 0.45553308725357056, 0.4523840844631195, 0.45103052258491516, 0.4417187571525574, 0.43125733733177185, 0.42781078815460205, 0.4263964891433716, 0.4191243350505829, 0.41350650787353516, 0.4158003032207489, 0.4085052013397217, 0.4044939875602722, 0.3971168100833893, 0.39628612995147705, 0.39976948499679565, 0.3952869176864624, 0.3888694643974304, 0.3912425935268402, 0.3875867426395416, 0.38649430871009827, 0.3814649283885956, 0.38066309690475464, 0.37854698300361633, 0.3797750174999237, 0.3766616880893707, 0.37332388758659363, 0.3710525631904602, 0.36949723958969116, 0.37775883078575134, 0.36838436126708984, 0.3662301003932953, 0.36757656931877136, 0.36328125, 0.36480098962783813, 0.3676953911781311, 0.3622332215309143, 0.36552929878234863, 0.35753536224365234, 0.368220716714859, 0.3614383041858673, 0.3567075729370117, 0.3559085726737976, 0.35341039299964905, 0.35565683245658875, 0.3598191440105438, 0.3541577160358429, 0.35910654067993164, 0.356111079454422], "val_accuracy": [0.5270000100135803, 0.6653333306312561, 0.6803333163261414, 0.7123333215713501, 0.734666645526886, 0.7536666393280029, 0.7680000066757202, 0.7770000100135803, 0.7826666831970215, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8040000200271606, 0.8149999976158142, 0.8186666369438171, 0.8149999976158142, 0.8223333358764648, 0.8259999752044678, 0.8303333520889282, 0.8316666483879089, 0.8326666951179504, 0.8306666612625122, 0.8346666693687439, 0.8429999947547913, 0.8423333168029785, 0.8420000076293945, 0.8479999899864197, 0.8500000238418579, 0.8456666469573975, 0.8443333506584167, 0.8479999899864197, 0.8539999723434448, 0.8560000061988831, 0.8486666679382324, 0.8513333201408386, 0.8603333234786987, 0.8546666502952576, 0.8569999933242798, 0.8569999933242798, 0.862333357334137, 0.8629999756813049, 0.8600000143051147, 0.8629999756813049, 0.862666666507721, 0.8650000095367432, 0.8643333315849304, 0.8629999756813049, 0.8636666536331177, 0.8679999709129333, 0.8650000095367432, 0.8683333396911621, 0.8690000176429749, 0.8683333396911621, 0.8666666746139526, 0.8703333139419556, 0.8686666488647461, 0.8736666440963745, 0.8679999709129333, 0.8706666827201843, 0.8709999918937683, 0.8730000257492065, 0.8743333220481873, 0.871999979019165, 0.8733333349227905, 0.8740000128746033, 0.8693333268165588, 0.8740000128746033]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8677142858505249, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.220592737197876, 1.8649641275405884, 1.385387897491455, 1.081546425819397, 0.9379348754882812, 0.8281540274620056, 0.7548969388008118, 0.7045096755027771, 0.677941083908081, 0.6528180837631226, 0.624737024307251, 0.6007217168807983, 0.5829816460609436, 0.5571993589401245, 0.5513790845870972, 0.5342008471488953, 0.5231131315231323, 0.5040744543075562, 0.5065940022468567, 0.4882490038871765, 0.4764936566352844, 0.4724551737308502, 0.47098585963249207, 0.4652337431907654, 0.4489266872406006, 0.4431118369102478, 0.42684611678123474, 0.4329446256160736, 0.41736915707588196, 0.4044675827026367, 0.40358051657676697, 0.39375433325767517, 0.39020973443984985, 0.37973079085350037, 0.3770318925380707, 0.3736947178840637, 0.36537450551986694, 0.3590075373649597, 0.35816317796707153, 0.3566003143787384, 0.3456692397594452, 0.34608399868011475, 0.3424418866634369, 0.3349020183086395, 0.32909008860588074, 0.3246326148509979, 0.3219541013240814, 0.3081172704696655, 0.3077423572540283, 0.3029640018939972, 0.30519384145736694, 0.29842808842658997, 0.29662591218948364, 0.2879992723464966, 0.2827698588371277], "accuracy": [0.2786950170993805, 0.49491479992866516, 0.5753533244132996, 0.6230352520942688, 0.6643772125244141, 0.7021529674530029, 0.7234182953834534, 0.7434949278831482, 0.7544577717781067, 0.7635715007781982, 0.7750627398490906, 0.7798177003860474, 0.7865539789199829, 0.802800178527832, 0.8030643463134766, 0.8107251524925232, 0.8115176558494568, 0.8208954930305481, 0.8220842480659485, 0.8273676037788391, 0.8300092220306396, 0.8304054737091064, 0.828820526599884, 0.828820526599884, 0.8399154543876648, 0.844010055065155, 0.845859169960022, 0.8455950617790222, 0.8508783578872681, 0.8582749962806702, 0.8610487580299377, 0.8610487580299377, 0.8580108284950256, 0.8672566413879395, 0.8651432991027832, 0.8693699836730957, 0.872407853603363, 0.871879518032074, 0.8708229064941406, 0.8710870146751404, 0.8791441321372986, 0.8804649114608765, 0.8791441321372986, 0.880729079246521, 0.8835028409957886, 0.886672854423523, 0.8860124349594116, 0.8908994793891907, 0.8898428082466125, 0.8931449055671692, 0.8928807377815247, 0.8960506916046143, 0.8936732411384583, 0.898428201675415, 0.8997490406036377], "val_loss": [2.0345680713653564, 1.5047874450683594, 1.039689064025879, 0.8428191542625427, 0.7560784220695496, 0.7005802989006042, 0.6573971509933472, 0.6218940019607544, 0.6002199649810791, 0.5843005180358887, 0.5619503855705261, 0.5470940470695496, 0.5320481657981873, 0.5217830538749695, 0.5089749097824097, 0.4984716475009918, 0.48804721236228943, 0.48420578241348267, 0.4727509617805481, 0.4668063521385193, 0.4643470048904419, 0.4542468786239624, 0.45900723338127136, 0.44914567470550537, 0.44053971767425537, 0.4328690469264984, 0.437355637550354, 0.43320807814598083, 0.41981419920921326, 0.4185175895690918, 0.4200439155101776, 0.4123508334159851, 0.4093343913555145, 0.4021739363670349, 0.4038655459880829, 0.39960864186286926, 0.3968553841114044, 0.3936426043510437, 0.39206331968307495, 0.39139097929000854, 0.3885290026664734, 0.38565632700920105, 0.3837292790412903, 0.3840375244617462, 0.3780432939529419, 0.3770442306995392, 0.375326007604599, 0.37356722354888916, 0.3710693418979645, 0.3686715066432953, 0.3708834648132324, 0.3712558448314667, 0.36836087703704834, 0.3678732216358185, 0.3719460368156433], "val_accuracy": [0.5580000281333923, 0.6616666913032532, 0.6823333501815796, 0.7043333053588867, 0.7283333539962769, 0.7543333172798157, 0.7593333125114441, 0.7743333578109741, 0.7793333530426025, 0.7926666736602783, 0.8026666641235352, 0.8066666722297668, 0.8190000057220459, 0.8209999799728394, 0.8213333487510681, 0.8296666741371155, 0.8286666870117188, 0.8339999914169312, 0.8339999914169312, 0.8393333554267883, 0.8376666903495789, 0.843666672706604, 0.8336666822433472, 0.8476666808128357, 0.8443333506584167, 0.8510000109672546, 0.8496666550636292, 0.8473333120346069, 0.8556666374206543, 0.8529999852180481, 0.8529999852180481, 0.8566666841506958, 0.8543333411216736, 0.8586666584014893, 0.8606666922569275, 0.8600000143051147, 0.8613333106040955, 0.8600000143051147, 0.8619999885559082, 0.859333336353302, 0.8600000143051147, 0.862666666507721, 0.8600000143051147, 0.8619999885559082, 0.8650000095367432, 0.8686666488647461, 0.8633333444595337, 0.8669999837875366, 0.8690000176429749, 0.8693333268165588, 0.8659999966621399, 0.8666666746139526, 0.8686666488647461, 0.8686666488647461, 0.8690000176429749]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 0], [2, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 2, 0, 5, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [75], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 9, 8, 9, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 2, 3, 1, 2, 0], [16, 29, 96, 99, 61, 1]], "fitness": -0.10999999940395355, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.309136152267456, 2.306962251663208, 2.3055882453918457, 2.3043618202209473, 2.3032991886138916, 2.302825689315796, 2.302687883377075, 2.3025972843170166, 2.3025906085968018, 2.302584648132324], "accuracy": [0.08558975160121918, 0.08585391938686371, 0.08281600475311279, 0.08611807972192764, 0.10289261490106583, 0.10117553919553757, 0.10236428678035736, 0.10051512718200684, 0.09985470771789551, 0.09998679161071777], "val_loss": [2.307173728942871, 2.3057432174682617, 2.3041865825653076, 2.3031773567199707, 2.3027234077453613, 2.3026041984558105, 2.3025870323181152, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.08299999684095383, 0.06733333319425583, 0.07400000095367432, 0.0949999988079071, 0.10833333432674408, 0.09866666793823242, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}, "mapping_values": [1, 8, 5, 3, 0, 8, 5, 3, 2, 2, 1, 1, 1, 8, 6, 2, 4], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 54], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 82], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1], [6, 7, 4, 8, 1, 5, 7, 9, 5, 4, 9], [0, 5, 0, 2, 4], [99, 92, 6, 75], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 3, 3, 4, 8, 2, 1, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 68, 71]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 16, 11, 5, 4, 16, 8, 8, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(beta)), tf.math.multiply(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(tf.math.sqrt(tf.math.subtract(tf.math.square(grad), tf.math.add(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.pow(beta, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.sqrt(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 5, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5, 0, 8, 2, 1, 6, 8, 5], [0, 2, 0, 3, 4, 2, 5], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1], [6, 3, 3, 6, 8, 1, 4, 0, 4, 2, 8, 1, 4, 1, 2, 0, 8, 4, 1, 2, 2, 1, 4, 8, 8, 7, 0, 6, 7, 4, 6, 0, 0, 7, 9, 6, 3, 9, 8, 5], [0, 0, 4, 3, 4, 0, 3, 1, 2, 0, 4, 0, 0, 1, 3, 6, 2, 3, 4, 6, 2, 4, 0, 2, 3], [16, 99, 91, 71, 61, 1, 95, 96, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 20, 13, 7, 2, 2, 1, 1, 1, 65, 40, 25, 9], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.negative(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.subtract(grad, grad), tf.math.divide_no_nan(tf.math.sqrt(beta), tf.math.square(grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.pow(tf.math.add(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, sigma)), grad))), tf.math.pow(tf.math.subtract(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), sigma), tf.math.add(tf.math.negative(alpha), beta)))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), grad), tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, tf.math.subtract(sigma, grad)), tf.math.pow(tf.math.sqrt(beta), tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.math.pow(sigma, tf.math.divide_no_nan(grad, tf.math.negative(grad))), beta), grad)), tf.math.negative(tf.math.add(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))))))), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), beta), tf.math.sqrt(tf.math.square(sigma)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [53, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [26, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [6, 5, 3, 2, 1, 1, 4, 1, 4, 2, 8, 6, 7, 3, 2, 0, 8, 4, 9, 5], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0, 1, 2, 0, 3], [16, 99, 96, 62, 61, 1, 50]], "fitness": -0.09200000017881393, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 34, 20, 14, 7], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), sigma))), alpha))), tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(beta, tf.math.add(tf.math.multiply(tf.math.add(tf.math.negative(tf.math.sqrt(tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), alpha), tf.math.square(beta)), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), sigma))", "other_info": {"loss": [2.309159994125366, 2.30908203125, 2.3086066246032715, 2.310519218444824, 2.3100318908691406, 2.3094184398651123], "accuracy": [0.09496764093637466, 0.1014397069811821, 0.09166556596755981, 0.08981640636920929, 0.09047681838274002, 0.09074098616838455], "val_loss": [2.3086657524108887, 2.3086557388305664, 2.3086483478546143, 2.3086419105529785, 2.3086366653442383, 2.3086321353912354], "val_accuracy": [0.09266666322946548, 0.09233333170413971, 0.09200000017881393, 0.09200000017881393, 0.09266666322946548, 0.09266666322946548]}}]