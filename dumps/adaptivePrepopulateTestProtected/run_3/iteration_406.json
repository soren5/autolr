[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8717142939567566, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2231523990631104, 1.865759015083313, 1.406507968902588, 1.0951875448226929, 0.9483802914619446, 0.8380973935127258, 0.7866529822349548, 0.7324093580245972, 0.6952853202819824, 0.6629349589347839, 0.6369600892066956, 0.6151964664459229, 0.6009272933006287, 0.5787553191184998, 0.5525521039962769, 0.5415999889373779, 0.5215974450111389, 0.5252760052680969, 0.50960773229599, 0.4939236640930176, 0.48423466086387634, 0.47968387603759766, 0.4669119715690613, 0.4606926739215851, 0.45091402530670166, 0.4515414834022522, 0.43979939818382263, 0.4327133893966675, 0.41958487033843994, 0.41337573528289795, 0.39931386709213257, 0.3954086899757385, 0.39800402522087097, 0.3976292312145233, 0.3942435681819916, 0.382254958152771, 0.3830413818359375, 0.37087568640708923, 0.3636055886745453, 0.3543005883693695, 0.35439345240592957, 0.34371498227119446, 0.3455759286880493, 0.3343575894832611, 0.32824721932411194, 0.3248916268348694, 0.32448461651802063, 0.3152107894420624, 0.3152710795402527, 0.31418707966804504, 0.30533888936042786, 0.30034738779067993], "accuracy": [0.27724209427833557, 0.5024435520172119, 0.5575221180915833, 0.615770697593689, 0.669792652130127, 0.7016246318817139, 0.7128516435623169, 0.7363624572753906, 0.7489103078842163, 0.7560427784919739, 0.7740060687065125, 0.7792893648147583, 0.7820631265640259, 0.7913089394569397, 0.8009510040283203, 0.8072909712791443, 0.8119139075279236, 0.807158887386322, 0.8157442808151245, 0.8236692547798157, 0.8281601071357727, 0.8235371708869934, 0.8338396549224854, 0.8339717388153076, 0.8383304476737976, 0.8374059200286865, 0.843481719493866, 0.8453308939933777, 0.8450667262077332, 0.8479725122451782, 0.857218325138092, 0.8574824929237366, 0.8537842035293579, 0.8551049828529358, 0.854708731174469, 0.8627657890319824, 0.8588033318519592, 0.8663320541381836, 0.8691058158874512, 0.8681812286376953, 0.8671245574951172, 0.8745211958885193, 0.8770307898521423, 0.8798044919967651, 0.8812574148178101, 0.8815215826034546, 0.8845595121383667, 0.8816536664962769, 0.8861445188522339, 0.8878615498542786, 0.8817857503890991, 0.8912957310676575], "val_loss": [2.0427157878875732, 1.516611933708191, 1.0438086986541748, 0.8365434408187866, 0.748401939868927, 0.6912208795547485, 0.6459528207778931, 0.6125707030296326, 0.5836296677589417, 0.5630247592926025, 0.5453716516494751, 0.5293393135070801, 0.5187138915061951, 0.5011046528816223, 0.49859583377838135, 0.47764474153518677, 0.47790583968162537, 0.46635133028030396, 0.4612245261669159, 0.45015934109687805, 0.44497448205947876, 0.44222885370254517, 0.43353474140167236, 0.42657792568206787, 0.4235844016075134, 0.42156368494033813, 0.41201791167259216, 0.4127545654773712, 0.4030155539512634, 0.4006611406803131, 0.3967821002006531, 0.3927775025367737, 0.3921525776386261, 0.3968621492385864, 0.3873862326145172, 0.3811952769756317, 0.3837517201900482, 0.3761036694049835, 0.3709833025932312, 0.37007564306259155, 0.367705374956131, 0.3670310974121094, 0.36185169219970703, 0.3626457154750824, 0.36068856716156006, 0.3590833246707916, 0.35244351625442505, 0.3494182527065277, 0.3542581796646118, 0.3531789481639862, 0.35456138849258423, 0.35092994570732117], "val_accuracy": [0.5366666913032532, 0.6620000004768372, 0.6813333630561829, 0.7086666822433472, 0.7289999723434448, 0.7429999709129333, 0.7596666812896729, 0.7770000100135803, 0.7803333401679993, 0.7926666736602783, 0.8023333549499512, 0.8056666851043701, 0.8090000152587891, 0.8186666369438171, 0.8166666626930237, 0.8243333101272583, 0.8220000267028809, 0.8309999704360962, 0.8270000219345093, 0.8343333601951599, 0.8320000171661377, 0.8336666822433472, 0.8379999995231628, 0.8453333377838135, 0.8450000286102295, 0.843666672706604, 0.8496666550636292, 0.8539999723434448, 0.8513333201408386, 0.8529999852180481, 0.8533333539962769, 0.8556666374206543, 0.8519999980926514, 0.8546666502952576, 0.856333315372467, 0.859000027179718, 0.8583333492279053, 0.8576666712760925, 0.8603333234786987, 0.8619999885559082, 0.8616666793823242, 0.8643333315849304, 0.8629999756813049, 0.8663333058357239, 0.8676666617393494, 0.871666669845581, 0.8730000257492065, 0.8723333477973938, 0.8679999709129333, 0.8709999918937683, 0.8703333139419556, 0.8730000257492065]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 9, 4], [0, 1, 0, 2], [39, 39, 91], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 9, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [6, 3, 3, 2, 8, 6, 4, 1, 4, 2, 8, 6, 2, 4, 2, 9, 8, 6, 4, 3], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0, 1, 1, 0, 7, 2, 4], [16, 99, 96, 99, 76, 1, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 6, 3, 3, 2, 2, 0, 1, 2, 1, 1, 1, 36, 20, 16, 7], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.pow(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(grad, tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(sigma, tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(alpha, beta)), tf.math.add(tf.math.pow(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), alpha), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), alpha))))), tf.math.sqrt(tf.math.divide_no_nan(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.multiply(beta, grad)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 0, 1], [0, 1, 3, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 1], [2], [0, 4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 4, 4, 4, 3, 1, 2, 0], [16, 8, 96, 99, 88, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 6, 3, 3, 2, 3, 1, 2, 1, 21, 11, 10, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))), tf.math.subtract(grad, tf.math.pow(grad, sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 5, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 3, 0, 3], [94, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 1, 3, 6, 8, 5, 4, 1, 4, 2, 6], [4, 0, 0, 3, 0, 0, 3, 1, 2, 4], [16, 99, 96, 99, 61, 35]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 0, 6, 3, 3, 2, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.negative(grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [1.2504932144277094e+17, 1.40856252790997e+17, 1.889092058921042e+17, 1.3929699927392256e+17, 1.4848856429481165e+17, 1.1254261719498752e+17], "accuracy": [0.10434553027153015, 0.11028926074504852, 0.1088363528251648, 0.10738343745470047, 0.10645885765552521, 0.10751552134752274], "val_loss": [1.0307562451134054e+17, 1.0307562451134054e+17, 1.0307562451134054e+17, 1.0307562451134054e+17, 1.0307562451134054e+17, 1.0307562451134054e+17], "val_accuracy": [0.1120000034570694, 0.1120000034570694, 0.1120000034570694, 0.1120000034570694, 0.1120000034570694, 0.1120000034570694]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 0, 1], [0, 2, 8, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 6, 6, 1, 1, 3, 1, 4, 3, 8], [0, 0, 3, 3, 0, 0, 3, 1, 4, 0], [16, 99, 51, 99, 61, 1]], "fitness": -0.056857142597436905, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.subtract(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(sigma, sigma)), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, alpha)), grad)", "other_info": {"loss": [5004209741103104.0, 6042208847265792.0, 5996193641398272.0, 6034456968167424.0, 5983692065341440.0, 6155494515277824.0], "accuracy": [0.08558975160121918, 0.08532558381557465, 0.08189142495393753, 0.08598599582910538, 0.08347642421722412, 0.08057060092687607], "val_loss": [4528549629263872.0, 4528549629263872.0, 4528549629263872.0, 4528549629263872.0, 4528549629263872.0, 4528549629263872.0], "val_accuracy": [0.0560000017285347, 0.0560000017285347, 0.0560000017285347, 0.0560000017285347, 0.0560000017285347, 0.0560000017285347]}, "mapping_values": [1, 1, 0, 1, 1, 6, 3, 3, 2, 2, 1, 1, 1, 17, 8, 9, 4], "tree_depth": 17}]