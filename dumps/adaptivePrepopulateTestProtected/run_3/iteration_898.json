[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8862857222557068, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222418785095215, 1.8632627725601196, 1.3950724601745605, 1.0979150533676147, 0.9474178552627563, 0.8543937802314758, 0.7783248424530029, 0.7376496195793152, 0.7006842494010925, 0.6746688485145569, 0.647553563117981, 0.6295329928398132, 0.6112891435623169, 0.58865886926651, 0.5667527914047241, 0.5575993657112122, 0.5467248558998108, 0.5289703011512756, 0.5205997824668884, 0.5110849142074585, 0.5064045786857605, 0.4867391884326935, 0.4731372892856598, 0.47443822026252747, 0.46410614252090454, 0.4545186161994934, 0.445819616317749, 0.4367676079273224, 0.4321127235889435, 0.4275900721549988, 0.4177286922931671, 0.40700381994247437, 0.40491974353790283, 0.3923063576221466, 0.38597339391708374, 0.37638187408447266, 0.3749813437461853, 0.3708414137363434, 0.369646281003952, 0.3635149896144867, 0.3594855070114136, 0.3503628671169281, 0.3338625133037567, 0.3396199643611908, 0.33679017424583435, 0.3303111493587494, 0.3275522291660309, 0.3153315782546997, 0.3093845844268799, 0.31660354137420654, 0.313541054725647, 0.3128948211669922, 0.2977619469165802, 0.30230653285980225, 0.298944890499115, 0.28947505354881287, 0.2822195291519165, 0.2778712213039398, 0.2668195366859436, 0.26853811740875244, 0.26283398270606995, 0.2662760019302368, 0.2576100528240204, 0.25102800130844116, 0.2539205849170685, 0.25087955594062805, 0.24508193135261536], "accuracy": [0.280940443277359, 0.48685774207115173, 0.5665037631988525, 0.616299033164978, 0.6625280380249023, 0.6930392384529114, 0.7169462442398071, 0.7320036888122559, 0.7375511527061462, 0.7491744756698608, 0.7672698497772217, 0.7670056819915771, 0.7745344042778015, 0.7876105904579163, 0.7906485199928284, 0.7994980812072754, 0.802800178527832, 0.8068947196006775, 0.8117818236351013, 0.8153480291366577, 0.8181217908859253, 0.829216718673706, 0.8300092220306396, 0.8238013386726379, 0.8325188159942627, 0.8385946154594421, 0.8372738361358643, 0.842028796672821, 0.8451988101005554, 0.8481045961380005, 0.8515387773513794, 0.8549728989601135, 0.8516708612442017, 0.8603883385658264, 0.8598600029945374, 0.8667283058166504, 0.8636903762817383, 0.8636903762817383, 0.8677849769592285, 0.8704266548156738, 0.8758420348167419, 0.8739928603172302, 0.8790120482444763, 0.8768987059593201, 0.8751816153526306, 0.8794082403182983, 0.8813894987106323, 0.8860124349594116, 0.8874653577804565, 0.8856161832809448, 0.8838990926742554, 0.8877294659614563, 0.8918240666389465, 0.8918240666389465, 0.8922203183174133, 0.8953903317451477, 0.89552241563797, 0.9002773761749268, 0.9049002528190613, 0.9034473896026611, 0.9035794734954834, 0.9038436412811279, 0.9085986018180847, 0.9095231890678406, 0.9095231890678406, 0.909259021282196, 0.910711944103241], "val_loss": [2.0414316654205322, 1.5168657302856445, 1.0494927167892456, 0.8396123051643372, 0.7532041668891907, 0.6975494027137756, 0.6532282829284668, 0.6188269853591919, 0.5909113883972168, 0.5747429728507996, 0.5562715530395508, 0.5392115712165833, 0.5226473808288574, 0.5080817937850952, 0.49551260471343994, 0.4949219524860382, 0.48097461462020874, 0.46894019842147827, 0.4645398259162903, 0.4554585814476013, 0.44845467805862427, 0.44272810220718384, 0.4365209937095642, 0.4303407371044159, 0.42757970094680786, 0.42137086391448975, 0.4158954322338104, 0.4094981253147125, 0.40614867210388184, 0.40746310353279114, 0.39686036109924316, 0.39440515637397766, 0.39069101214408875, 0.3898474872112274, 0.3889416456222534, 0.3833497166633606, 0.387736976146698, 0.3792175352573395, 0.3778442442417145, 0.37528878450393677, 0.3729557991027832, 0.37016138434410095, 0.36690768599510193, 0.36455467343330383, 0.36386409401893616, 0.3628668487071991, 0.365796834230423, 0.36076274514198303, 0.3599783480167389, 0.35867130756378174, 0.35705167055130005, 0.35411083698272705, 0.3552299737930298, 0.3651564121246338, 0.36276260018348694, 0.34837988018989563, 0.34821584820747375, 0.3528410792350769, 0.3496720790863037, 0.3506317138671875, 0.34951722621917725, 0.3443804085254669, 0.345913290977478, 0.3461855351924896, 0.3431210517883301, 0.348863810300827, 0.3426092565059662], "val_accuracy": [0.5373333096504211, 0.6570000052452087, 0.6759999990463257, 0.7110000252723694, 0.7286666631698608, 0.7419999837875366, 0.7590000033378601, 0.7616666555404663, 0.7836666703224182, 0.7903333306312561, 0.7886666655540466, 0.8006666898727417, 0.809333324432373, 0.8183333277702332, 0.8146666884422302, 0.8140000104904175, 0.8233333230018616, 0.8289999961853027, 0.8326666951179504, 0.8363333344459534, 0.8389999866485596, 0.8366666436195374, 0.8363333344459534, 0.8489999771118164, 0.847000002861023, 0.8519999980926514, 0.8533333539962769, 0.8560000061988831, 0.8573333621025085, 0.8539999723434448, 0.8619999885559082, 0.862666666507721, 0.8656666874885559, 0.8629999756813049, 0.8646666407585144, 0.8636666536331177, 0.8603333234786987, 0.8659999966621399, 0.8673333525657654, 0.8673333525657654, 0.8713333606719971, 0.8703333139419556, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8730000257492065, 0.871999979019165, 0.874666690826416, 0.875333309173584, 0.874666690826416, 0.875, 0.8786666393280029, 0.8776666522026062, 0.8743333220481873, 0.8723333477973938, 0.8833333253860474, 0.8826666474342346, 0.8790000081062317, 0.8836666941642761, 0.878333330154419, 0.8820000290870667, 0.887666642665863, 0.8820000290870667, 0.8803333044052124, 0.8830000162124634, 0.8846666812896729, 0.8856666684150696]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8534285426139832, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2236509323120117, 1.8693954944610596, 1.3864316940307617, 1.0773413181304932, 0.9300012588500977, 0.8365764021873474, 0.7657859325408936, 0.7116736173629761, 0.6886380314826965, 0.6578525304794312, 0.6257602572441101, 0.6018241047859192, 0.5880771279335022, 0.5762431025505066, 0.5546048283576965, 0.5334193110466003, 0.5359970927238464, 0.5167351961135864, 0.4961932599544525, 0.48770758509635925, 0.47764647006988525, 0.47567248344421387, 0.45855745673179626, 0.4580431878566742, 0.4378003180027008, 0.43837428092956543, 0.42456746101379395, 0.42080435156822205, 0.41464200615882874, 0.4058470129966736, 0.3986026346683502, 0.3926672637462616, 0.39232489466667175, 0.3777300715446472, 0.380567342042923, 0.36741435527801514, 0.36830976605415344, 0.36918696761131287, 0.3591347634792328, 0.35085004568099976, 0.34699922800064087, 0.3388406038284302, 0.33259451389312744, 0.3253556787967682, 0.3190705478191376, 0.31949591636657715, 0.31651395559310913, 0.31067517399787903, 0.3141242265701294, 0.30310943722724915, 0.30195578932762146, 0.29585668444633484, 0.29024994373321533, 0.28495800495147705, 0.28177398443222046, 0.27646246552467346, 0.27590060234069824, 0.2699141800403595, 0.26587361097335815, 0.2659302055835724, 0.2541908025741577, 0.2531786262989044, 0.2539415657520294, 0.242675319314003, 0.24415399134159088, 0.23649315536022186, 0.23144680261611938, 0.23150725662708282, 0.2284177988767624], "accuracy": [0.2677321434020996, 0.4994056224822998, 0.5698058605194092, 0.6242240071296692, 0.6684718132019043, 0.6985867023468018, 0.7250033020973206, 0.7386078238487244, 0.7457403540611267, 0.7630431652069092, 0.7708360552787781, 0.7844406366348267, 0.7841764688491821, 0.7915731072425842, 0.8012151718139648, 0.8087438941001892, 0.8101968169212341, 0.8128384351730347, 0.8183859586715698, 0.8189142942428589, 0.83119797706604, 0.8260467648506165, 0.8356888294219971, 0.8356888294219971, 0.843481719493866, 0.8429533839225769, 0.8474441766738892, 0.8516708612442017, 0.8519350290298462, 0.8561616539955139, 0.8557654023170471, 0.8544445633888245, 0.8569541573524475, 0.8642187118530273, 0.8615770936012268, 0.8689737319946289, 0.8698983192443848, 0.8656716346740723, 0.8714832663536072, 0.8716153502464294, 0.878351628780365, 0.8761062026023865, 0.8795403242111206, 0.8820499181747437, 0.880729079246521, 0.8815215826034546, 0.8821820020675659, 0.8862766027450562, 0.8836349248886108, 0.8899748921394348, 0.8922203183174133, 0.8939374089241028, 0.8972394466400146, 0.9002773761749268, 0.8981640338897705, 0.8988244533538818, 0.8996169567108154, 0.9008057117462158, 0.90423983335495, 0.902390718460083, 0.9083344340324402, 0.906749427318573, 0.9063531756401062, 0.9097873568534851, 0.9108440279960632, 0.9158631563186646, 0.915070652961731, 0.9115044474601746, 0.9159952402114868], "val_loss": [2.0453498363494873, 1.5239440202713013, 1.0476778745651245, 0.847207248210907, 0.759335458278656, 0.7048606872558594, 0.6583899855613708, 0.6266465783119202, 0.598715603351593, 0.577403724193573, 0.5589552521705627, 0.5411170125007629, 0.5281895995140076, 0.5231636762619019, 0.5097203254699707, 0.4940706491470337, 0.4830971658229828, 0.4740440249443054, 0.4692744016647339, 0.4619661569595337, 0.45781421661376953, 0.45318880677223206, 0.4493177831172943, 0.4436509311199188, 0.4376358985900879, 0.43125811219215393, 0.4275760054588318, 0.4224933981895447, 0.41716572642326355, 0.42128321528434753, 0.4105534553527832, 0.4101710617542267, 0.40526044368743896, 0.40177157521247864, 0.40250837802886963, 0.4059476852416992, 0.3990577757358551, 0.3973850905895233, 0.3992081582546234, 0.3945809602737427, 0.3909338414669037, 0.3902016282081604, 0.38738253712654114, 0.39014673233032227, 0.3866253197193146, 0.3884483575820923, 0.3846200406551361, 0.38733163475990295, 0.3790108263492584, 0.37677985429763794, 0.38249722123146057, 0.3751950263977051, 0.37572577595710754, 0.37386515736579895, 0.3746602237224579, 0.3820958733558655, 0.3715772330760956, 0.3662591874599457, 0.3703262507915497, 0.3749842047691345, 0.37068235874176025, 0.3796306848526001, 0.3679845333099365, 0.3718685209751129, 0.3717689514160156, 0.37427082657814026, 0.3732162415981293, 0.3668901324272156, 0.36866438388824463], "val_accuracy": [0.5456666946411133, 0.652999997138977, 0.6776666641235352, 0.7026666402816772, 0.7253333330154419, 0.7440000176429749, 0.762333333492279, 0.7633333206176758, 0.7829999923706055, 0.7873333096504211, 0.7953333258628845, 0.8029999732971191, 0.8153333067893982, 0.8113333582878113, 0.8140000104904175, 0.824999988079071, 0.8266666531562805, 0.8289999961853027, 0.8330000042915344, 0.8309999704360962, 0.8373333215713501, 0.8330000042915344, 0.8333333134651184, 0.8366666436195374, 0.840666651725769, 0.8433333039283752, 0.847000002861023, 0.8496666550636292, 0.8479999899864197, 0.8453333377838135, 0.8476666808128357, 0.8533333539962769, 0.8523333072662354, 0.8539999723434448, 0.8550000190734863, 0.8529999852180481, 0.8569999933242798, 0.856333315372467, 0.856333315372467, 0.8583333492279053, 0.859666645526886, 0.859666645526886, 0.8616666793823242, 0.8586666584014893, 0.8640000224113464, 0.8633333444595337, 0.8636666536331177, 0.862333357334137, 0.8653333187103271, 0.8666666746139526, 0.8663333058357239, 0.8666666746139526, 0.8676666617393494, 0.8650000095367432, 0.8696666955947876, 0.862333357334137, 0.8669999837875366, 0.8713333606719971, 0.8703333139419556, 0.8703333139419556, 0.8706666827201843, 0.871999979019165, 0.871999979019165, 0.8776666522026062, 0.8693333268165588, 0.8713333606719971, 0.8713333606719971, 0.8766666650772095, 0.8763333559036255]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 2, 7, 4], [0, 1, 0, 2, 0, 0], [39, 39, 82, 33], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0], [4, 2, 3, 6, 3, 5, 0, 9], [0, 2, 0, 3, 3], [9, 16, 56], [0, 1], [0], [3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [34, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 7, 6, 4, 13, 8, 5, 3, 2, 1, 1, 0, 21, 11, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), tf.math.pow(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), grad), tf.math.negative(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 8, 3], [0, 1, 0, 0], [39, 39, 26], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 83], [0, 0, 1], [0, 8], [4], [15], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 5, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 10, 6, 4, 2, 3, 2, 1, 0, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 0, 8, 3, 5, 1, 8, 7, 2, 2, 6, 9, 8], [0, 2, 0, 2, 1, 2, 1, 2, 1], [39, 64, 48], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [4, 2, 3, 0, 3, 5], [0, 2, 0, 3, 0], [16, 16, 42], [0, 1], [0], [0], [99], [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 6, 8, 1, 4, 0, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 2], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 27, 18, 9, 3, 11, 6, 5, 3, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.square(grad), tf.math.subtract(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha))), grad)), alpha)))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3035144805908203, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 87], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1], [6, 3, 3, 6, 8, 1, 4, 6, 4, 2, 8, 7, 4, 2, 4, 1, 6, 8, 2, 3, 9, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 5, 6, 4, 0, 4, 2], [1, 99, 96, 99, 61, 41, 82, 97, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 2, 1, 1, 1, 2, 1, 1, 1, 38, 22, 16, 9], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(sigma))), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), sigma)), alpha)), tf.math.add(tf.math.pow(tf.math.add(tf.math.pow(tf.math.subtract(tf.math.divide_no_nan(beta, tf.math.sqrt(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), grad), grad), tf.math.add(grad, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), grad), tf.math.multiply(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}]