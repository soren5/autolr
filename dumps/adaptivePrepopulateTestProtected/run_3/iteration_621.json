[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8822857141494751, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585750579834, 1.8655762672424316, 1.394430160522461, 1.0773245096206665, 0.9378393888473511, 0.8425824046134949, 0.7776632308959961, 0.736241340637207, 0.6971188187599182, 0.6732122302055359, 0.644855797290802, 0.6276965141296387, 0.6100340485572815, 0.5899673104286194, 0.5746485590934753, 0.5484329462051392, 0.5425268411636353, 0.5357900857925415, 0.5214410424232483, 0.5127171874046326, 0.4895091950893402, 0.4932740032672882, 0.48551443219184875, 0.47113916277885437, 0.46571049094200134, 0.450914591550827, 0.438728004693985, 0.4414178729057312, 0.4245515465736389, 0.4182806611061096, 0.4126766324043274, 0.41352686285972595, 0.4031256139278412, 0.40064555406570435, 0.3982388377189636, 0.38566267490386963, 0.38400527834892273, 0.3741128146648407, 0.36422181129455566, 0.36170411109924316, 0.35991787910461426, 0.35666367411613464, 0.3521813750267029, 0.34583958983421326, 0.34736087918281555, 0.34181836247444153, 0.33650368452072144, 0.33141741156578064, 0.3230496346950531, 0.3225416839122772, 0.315096914768219, 0.3059031665325165, 0.3058394491672516, 0.3017319440841675, 0.29568877816200256, 0.2933836281299591, 0.28774771094322205, 0.2856961190700531, 0.2802303731441498, 0.2779994010925293, 0.274711549282074, 0.2719985842704773, 0.2586328387260437, 0.2598455548286438, 0.2622571289539337, 0.25739434361457825, 0.2502012252807617, 0.2544722855091095, 0.24556587636470795, 0.24580754339694977, 0.23948103189468384, 0.23949603736400604, 0.23484042286872864, 0.22871272265911102, 0.2256491780281067, 0.22479403018951416, 0.21744707226753235, 0.21390178799629211, 0.21272219717502594], "accuracy": [0.2785629332065582, 0.49451854825019836, 0.559899628162384, 0.6215823292732239, 0.6654338836669922, 0.6950204968452454, 0.7181349992752075, 0.7322678565979004, 0.7441553473472595, 0.7483819723129272, 0.7627789974212646, 0.7717606425285339, 0.7728173136711121, 0.78113853931427, 0.7882710099220276, 0.7993659973144531, 0.7976489067077637, 0.8074230551719666, 0.8128384351730347, 0.8198388814926147, 0.8212917447090149, 0.819970965385437, 0.8272355198860168, 0.8350284099578857, 0.8305375576019287, 0.8387266993522644, 0.846387505531311, 0.8433496356010437, 0.8504821062088013, 0.8524633646011353, 0.8535200357437134, 0.854708731174469, 0.856689989566803, 0.8551049828529358, 0.8593316674232483, 0.8615770936012268, 0.8628978729248047, 0.8702945709228516, 0.8691058158874512, 0.871879518032074, 0.8722757697105408, 0.8691058158874512, 0.8733324408531189, 0.8800686597824097, 0.8795403242111206, 0.8755778670310974, 0.8768987059593201, 0.8829745054244995, 0.8824461698532104, 0.8823140859603882, 0.887201189994812, 0.8897107243537903, 0.8889182209968567, 0.8927486538887024, 0.8902390599250793, 0.8953903317451477, 0.8980319499969482, 0.8976356983184814, 0.900409460067749, 0.89552241563797, 0.9025228023529053, 0.8989565372467041, 0.9056927561759949, 0.9085986018180847, 0.9030511379241943, 0.9066173434257507, 0.9101836085319519, 0.9083344340324402, 0.909259021282196, 0.9099194407463074, 0.9126931428909302, 0.9140139818191528, 0.9119006991386414, 0.9171839952468872, 0.9169198274612427, 0.9185048341751099, 0.9218068718910217, 0.9185048341751099, 0.9196935892105103], "val_loss": [2.033445358276367, 1.5042319297790527, 1.0271512269973755, 0.8147247433662415, 0.7278039455413818, 0.68117356300354, 0.6306353211402893, 0.5966841578483582, 0.5751398801803589, 0.5460951328277588, 0.5314993858337402, 0.509799063205719, 0.4957965612411499, 0.4792602062225342, 0.46671679615974426, 0.45267683267593384, 0.4441072940826416, 0.4356139600276947, 0.42943108081817627, 0.4255247414112091, 0.41811680793762207, 0.4163394272327423, 0.39929893612861633, 0.3969916105270386, 0.39089226722717285, 0.387652188539505, 0.3844633102416992, 0.3824205696582794, 0.3749690353870392, 0.3701930642127991, 0.36967378854751587, 0.36689504981040955, 0.3585263788700104, 0.3587398827075958, 0.36267170310020447, 0.3561091423034668, 0.35379692912101746, 0.3499273955821991, 0.34701839089393616, 0.3467637896537781, 0.3424672484397888, 0.33951225876808167, 0.3386255204677582, 0.34044384956359863, 0.33945050835609436, 0.33684298396110535, 0.3322163224220276, 0.33181649446487427, 0.32827115058898926, 0.3312568664550781, 0.3297465741634369, 0.3256674110889435, 0.3234780728816986, 0.32119208574295044, 0.3232716917991638, 0.3209094703197479, 0.31944912672042847, 0.3157532513141632, 0.3144265413284302, 0.31676045060157776, 0.31425556540489197, 0.3131799101829529, 0.3147056996822357, 0.3154993951320648, 0.31771615147590637, 0.31545644998550415, 0.3127000629901886, 0.31382524967193604, 0.31026333570480347, 0.3147730529308319, 0.30829918384552, 0.3107443153858185, 0.31316936016082764, 0.30297672748565674, 0.30325081944465637, 0.30436232686042786, 0.3072424829006195, 0.30681705474853516, 0.3061434030532837], "val_accuracy": [0.5526666641235352, 0.6666666865348816, 0.687333345413208, 0.7083333134651184, 0.731333315372467, 0.7446666955947876, 0.7606666684150696, 0.762666642665863, 0.7873333096504211, 0.7889999747276306, 0.7973333597183228, 0.8056666851043701, 0.8193333148956299, 0.8259999752044678, 0.8289999961853027, 0.8410000205039978, 0.8453333377838135, 0.8450000286102295, 0.8489999771118164, 0.847000002861023, 0.8516666889190674, 0.856333315372467, 0.859333336353302, 0.856333315372467, 0.8633333444595337, 0.8640000224113464, 0.8656666874885559, 0.8646666407585144, 0.8679999709129333, 0.8696666955947876, 0.8640000224113464, 0.8686666488647461, 0.8713333606719971, 0.8709999918937683, 0.8703333139419556, 0.8723333477973938, 0.871999979019165, 0.874666690826416, 0.8723333477973938, 0.8759999871253967, 0.8726666569709778, 0.875333309173584, 0.8790000081062317, 0.8756666779518127, 0.8726666569709778, 0.8769999742507935, 0.8796666860580444, 0.8796666860580444, 0.8806666731834412, 0.8793333172798157, 0.8813333511352539, 0.8840000033378601, 0.8840000033378601, 0.8843333125114441, 0.8809999823570251, 0.8856666684150696, 0.8866666555404663, 0.8833333253860474, 0.8866666555404663, 0.8843333125114441, 0.8856666684150696, 0.8880000114440918, 0.887333333492279, 0.8883333206176758, 0.8866666555404663, 0.8896666765213013, 0.8863333463668823, 0.8853333592414856, 0.890999972820282, 0.8870000243186951, 0.8883333206176758, 0.8883333206176758, 0.8916666507720947, 0.8939999938011169, 0.8896666765213013, 0.8916666507720947, 0.890999972820282, 0.8926666378974915, 0.8913333415985107]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8611428737640381, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2234225273132324, 1.8689067363739014, 1.3938316106796265, 1.0919007062911987, 0.9395027756690979, 0.8446034789085388, 0.7807082533836365, 0.7293291091918945, 0.685399055480957, 0.6609183549880981, 0.6362302303314209, 0.6137293577194214, 0.5973499417304993, 0.5838717222213745, 0.5679693222045898, 0.553931713104248, 0.5346941947937012, 0.5295516848564148, 0.513433039188385, 0.49839210510253906, 0.5012636184692383, 0.48423704504966736, 0.475350946187973, 0.4701901078224182, 0.46594762802124023, 0.4485234320163727, 0.44494491815567017, 0.4400109052658081, 0.42741620540618896, 0.42344608902931213, 0.41894567012786865, 0.40862610936164856, 0.4013146460056305, 0.4018475413322449, 0.3927929997444153, 0.3919689953327179, 0.38230693340301514, 0.3799167275428772, 0.3695901334285736, 0.363607794046402, 0.36327502131462097, 0.3562224805355072, 0.3549194931983948, 0.350212424993515, 0.34116169810295105, 0.3242061734199524, 0.3266948163509369, 0.33331185579299927, 0.32818835973739624, 0.3257722854614258, 0.32086238265037537, 0.3074873387813568, 0.3070705831050873, 0.30703005194664, 0.30143317580223083, 0.2940047085285187, 0.29525142908096313, 0.28687894344329834, 0.284371554851532, 0.2746686637401581, 0.27121344208717346, 0.26803091168403625], "accuracy": [0.26760005950927734, 0.49729230999946594, 0.5614846348762512, 0.6213181614875793, 0.6719059348106384, 0.6976621150970459, 0.7211728692054749, 0.7331924438476562, 0.7520803213119507, 0.7597411274909973, 0.7683265209197998, 0.7753269076347351, 0.7839123010635376, 0.7882710099220276, 0.7927618622779846, 0.7965922355651855, 0.8108572363853455, 0.8101968169212341, 0.8148196935653687, 0.8202351331710815, 0.8215559124946594, 0.8274996876716614, 0.8309338092803955, 0.8403117060661316, 0.8360850811004639, 0.8413683772087097, 0.8426892161369324, 0.8438779711723328, 0.8486329317092896, 0.8507462739944458, 0.8529917001724243, 0.8562937378883362, 0.856689989566803, 0.8588033318519592, 0.8590674996376038, 0.8618412613868713, 0.8659358024597168, 0.8648791313171387, 0.8698983192443848, 0.8685774803161621, 0.8706908226013184, 0.8735966086387634, 0.8747853636741638, 0.8765024542808533, 0.8824461698532104, 0.8835028409957886, 0.8838990926742554, 0.878351628780365, 0.8813894987106323, 0.8815215826034546, 0.8861445188522339, 0.8916919827461243, 0.8902390599250793, 0.8960506916046143, 0.8942015767097473, 0.8947299122810364, 0.8956544995307922, 0.9001452922821045, 0.902390718460083, 0.901862382888794, 0.9072777628898621, 0.9041078090667725], "val_loss": [2.0400538444519043, 1.5132794380187988, 1.034834623336792, 0.8211549520492554, 0.7364807724952698, 0.6811293363571167, 0.6360888481140137, 0.5999484658241272, 0.5757911205291748, 0.5549528002738953, 0.5359805822372437, 0.5224026441574097, 0.5121293663978577, 0.49259623885154724, 0.48984017968177795, 0.47634512186050415, 0.46692684292793274, 0.46038949489593506, 0.4523445665836334, 0.4433395266532898, 0.4440002739429474, 0.4340023696422577, 0.4211544692516327, 0.42591559886932373, 0.4150337874889374, 0.40592625737190247, 0.4043993651866913, 0.40209460258483887, 0.39305663108825684, 0.39024728536605835, 0.38307201862335205, 0.37901073694229126, 0.38404080271720886, 0.37639379501342773, 0.3723394274711609, 0.3743838369846344, 0.3659641146659851, 0.36402589082717896, 0.3591883182525635, 0.3550926148891449, 0.35329723358154297, 0.3554995656013489, 0.35410168766975403, 0.3496120572090149, 0.3450241684913635, 0.34537845849990845, 0.3426400125026703, 0.3381710946559906, 0.34473082423210144, 0.33604493737220764, 0.33273446559906006, 0.33323559165000916, 0.3317600190639496, 0.33069950342178345, 0.3292137086391449, 0.3369309604167938, 0.32291921973228455, 0.3242095410823822, 0.3289368450641632, 0.32351842522621155, 0.32878804206848145, 0.33069679141044617], "val_accuracy": [0.5519999861717224, 0.6693333387374878, 0.6986666917800903, 0.7176666855812073, 0.7369999885559082, 0.753333330154419, 0.7649999856948853, 0.7789999842643738, 0.7900000214576721, 0.7960000038146973, 0.8040000200271606, 0.8103333115577698, 0.8159999847412109, 0.8206666707992554, 0.8190000057220459, 0.8256666660308838, 0.8303333520889282, 0.8289999961853027, 0.8306666612625122, 0.8370000123977661, 0.8363333344459534, 0.8360000252723694, 0.8473333120346069, 0.8450000286102295, 0.8496666550636292, 0.846666693687439, 0.8536666631698608, 0.8533333539962769, 0.8586666584014893, 0.8583333492279053, 0.8616666793823242, 0.8656666874885559, 0.8600000143051147, 0.8659999966621399, 0.8640000224113464, 0.8646666407585144, 0.8730000257492065, 0.8700000047683716, 0.8726666569709778, 0.8730000257492065, 0.875, 0.8709999918937683, 0.8713333606719971, 0.8759999871253967, 0.878000020980835, 0.8773333430290222, 0.8773333430290222, 0.8799999952316284, 0.878000020980835, 0.8809999823570251, 0.8799999952316284, 0.8820000290870667, 0.8806666731834412, 0.8790000081062317, 0.8816666603088379, 0.8806666731834412, 0.8823333382606506, 0.8823333382606506, 0.8806666731834412, 0.8823333382606506, 0.8799999952316284, 0.8803333044052124]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 0, 0, 3, 5], [0, 2, 0, 1], [16, 16], [0, 1], [0], [0], [24], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [8, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 20, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma), alpha)))", "other_info": {"loss": [2.303070545196533, 2.3025834560394287, 2.302583932876587, 2.3025829792022705, 2.3025829792022705, 2.3025825023651123], "accuracy": [0.10910051316022873, 0.10157178342342377, 0.10289261490106583, 0.10355303436517715, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025848865509033, 2.3025858402252197, 2.3025848865509033, 2.302584171295166, 2.302584648132324, 2.302583694458008], "val_accuracy": [0.10166666656732559, 0.09700000286102295, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}, "mapping_values": [1, 9, 5, 4, 2, 6, 4, 2, 1, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 18}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 1, 0], [0, 4, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 9, 3, 0, 3, 5], [2, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1], [6, 3, 3, 6, 2, 1, 4, 1, 4, 2, 8, 8, 3, 5, 8, 4, 0], [0, 0, 0, 4, 0, 0, 3, 1, 0, 0, 6, 4, 4], [16, 99, 96, 92, 61, 5, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 2, 2, 0, 1, 2, 1, 1, 1, 30, 17, 13, 7], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(grad, tf.math.add(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.multiply(tf.math.square(sigma), alpha))), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.negative(grad)))), grad), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 2, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 2, 3, 0, 3, 4, 3, 1, 7, 1, 2, 8, 1, 9], [0, 3, 0, 3, 1, 5, 1, 3, 2, 0], [16, 16, 82, 22], [0, 0], [0, 9], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 24, 14, 10, 4, 2, 2, 0, 1, 21, 11, 10, 5], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.multiply(grad, tf.math.subtract(alpha, tf.math.add(grad, tf.math.subtract(alpha, tf.math.add(tf.math.sqrt(tf.math.subtract(grad, beta)), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(sigma, alpha), tf.math.add(tf.math.sqrt(beta), grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 2, 3, 0, 2, 6, 3, 0, 1, 8, 8], [0, 1, 0, 2, 1, 2, 3], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [9, 2, 2, 0, 3, 3], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 5, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 3, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 14]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 11, 7, 2, 1, 1, 0, 1, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(grad), tf.math.subtract(tf.math.sqrt(tf.math.sqrt(alpha)), grad)), grad)))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(sigma, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09232597798109055, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}]