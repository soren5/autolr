[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.878000020980835, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223759174346924, 1.8681567907333374, 1.3971633911132812, 1.1021500825881958, 0.9438490867614746, 0.8268281817436218, 0.7700234055519104, 0.7182450890541077, 0.6839274764060974, 0.655160665512085, 0.6316797733306885, 0.6046612858772278, 0.586663544178009, 0.5732303261756897, 0.5552444458007812, 0.5382086634635925, 0.5205084085464478, 0.5141545534133911, 0.49866363406181335, 0.4905571937561035, 0.48713892698287964, 0.4630949795246124, 0.46493759751319885, 0.4510720372200012, 0.4456666111946106, 0.4411585330963135, 0.43109801411628723, 0.4194287657737732, 0.41647717356681824, 0.4177640676498413, 0.39898860454559326, 0.3982110619544983, 0.3941095173358917, 0.3838343918323517, 0.38270825147628784, 0.38132011890411377, 0.3706604242324829, 0.3630581796169281, 0.35970449447631836, 0.3585955500602722, 0.3488880693912506, 0.3406795859336853, 0.3434852361679077, 0.34305644035339355, 0.32770219445228577, 0.3274216949939728, 0.3164256513118744, 0.31487780809402466, 0.31453031301498413, 0.3020377457141876, 0.3013147711753845, 0.29238083958625793, 0.30650538206100464, 0.2886098325252533, 0.28784143924713135, 0.28922179341316223, 0.27991431951522827, 0.27731093764305115, 0.27029022574424744, 0.2677718997001648, 0.2672445476055145], "accuracy": [0.27182671427726746, 0.4913485646247864, 0.5609562993049622, 0.6095628142356873, 0.6618676781654358, 0.6997754573822021, 0.7215691208839417, 0.7407211661338806, 0.7508915662765503, 0.7592127919197083, 0.7656848430633545, 0.7798177003860474, 0.7849689722061157, 0.789459764957428, 0.7991018295288086, 0.806630551815033, 0.81112140417099, 0.8088759779930115, 0.8210275769233704, 0.8181217908859253, 0.826310932636261, 0.8333113193511963, 0.8294808864593506, 0.8401796221733093, 0.8409721255302429, 0.8436138033866882, 0.8459912538528442, 0.8519350290298462, 0.8485008478164673, 0.8490291833877563, 0.856689989566803, 0.8573504090309143, 0.8615770936012268, 0.8644828796386719, 0.8605204224586487, 0.8614450097084045, 0.8671245574951172, 0.8726720213890076, 0.8732003569602966, 0.8689737319946289, 0.8762382864952087, 0.8798044919967651, 0.8717474341392517, 0.8825782537460327, 0.8840311765670776, 0.8845595121383667, 0.8885219693183899, 0.8865407705307007, 0.8887861371040344, 0.894069492816925, 0.8918240666389465, 0.8953903317451477, 0.8860124349594116, 0.8988244533538818, 0.8992207050323486, 0.8956544995307922, 0.9014661312103271, 0.89988112449646, 0.900409460067749, 0.9046360850334167, 0.9033153057098389], "val_loss": [2.0386126041412354, 1.5089809894561768, 1.0396978855133057, 0.8277255296707153, 0.7414798736572266, 0.6867381930351257, 0.6452507376670837, 0.6096968054771423, 0.5920496582984924, 0.5695558786392212, 0.550778865814209, 0.5315823554992676, 0.5166425704956055, 0.5040237307548523, 0.4927339255809784, 0.48035380244255066, 0.4752146899700165, 0.4640548527240753, 0.45926037430763245, 0.4498494863510132, 0.44989997148513794, 0.43486902117729187, 0.4302854835987091, 0.42699891328811646, 0.4222937822341919, 0.4179273545742035, 0.4156407117843628, 0.40615877509117126, 0.40567347407341003, 0.40483561158180237, 0.4008205533027649, 0.3957735300064087, 0.3910598158836365, 0.39842313528060913, 0.38378071784973145, 0.3824272155761719, 0.37983548641204834, 0.3832281529903412, 0.37993335723876953, 0.37290528416633606, 0.37028563022613525, 0.3697679340839386, 0.369826078414917, 0.3630952835083008, 0.3613884747028351, 0.3612003028392792, 0.3630628287792206, 0.35836127400398254, 0.35707563161849976, 0.3544061779975891, 0.35439038276672363, 0.35541149973869324, 0.34793493151664734, 0.355723112821579, 0.3566884696483612, 0.3480426073074341, 0.35176366567611694, 0.34468159079551697, 0.3469727337360382, 0.34757280349731445, 0.34379008412361145], "val_accuracy": [0.546999990940094, 0.6536666750907898, 0.6856666803359985, 0.7066666483879089, 0.7366666793823242, 0.7536666393280029, 0.7599999904632568, 0.7720000147819519, 0.7706666588783264, 0.7926666736602783, 0.7963333129882812, 0.7956666946411133, 0.8103333115577698, 0.809333324432373, 0.8220000267028809, 0.8226666450500488, 0.8243333101272583, 0.8330000042915344, 0.8349999785423279, 0.8370000123977661, 0.8333333134651184, 0.8429999947547913, 0.8463333249092102, 0.8446666598320007, 0.8476666808128357, 0.8479999899864197, 0.8450000286102295, 0.8506666421890259, 0.8496666550636292, 0.8529999852180481, 0.8556666374206543, 0.8556666374206543, 0.8586666584014893, 0.8526666760444641, 0.8576666712760925, 0.8610000014305115, 0.859000027179718, 0.8616666793823242, 0.8653333187103271, 0.8673333525657654, 0.8673333525657654, 0.8659999966621399, 0.8693333268165588, 0.8690000176429749, 0.8726666569709778, 0.8726666569709778, 0.8740000128746033, 0.8730000257492065, 0.871999979019165, 0.8759999871253967, 0.874666690826416, 0.871999979019165, 0.8806666731834412, 0.8776666522026062, 0.8706666827201843, 0.8820000290870667, 0.878333330154419, 0.878000020980835, 0.8806666731834412, 0.8793333172798157, 0.878333330154419]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8562856912612915, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222637414932251, 1.8597981929779053, 1.385101079940796, 1.0914793014526367, 0.9292345643043518, 0.8301589488983154, 0.766440212726593, 0.7153805494308472, 0.6820297241210938, 0.657867431640625, 0.6233030557632446, 0.6138105988502502, 0.5931174755096436, 0.5750694870948792, 0.5590550303459167, 0.5395830273628235, 0.5235337615013123, 0.5123134851455688, 0.5062267780303955, 0.49395322799682617, 0.48551467061042786, 0.4698595404624939, 0.4648420214653015, 0.4638535976409912, 0.44496747851371765, 0.4380768835544586, 0.4376359283924103, 0.42182666063308716, 0.42915502190589905, 0.4137943685054779, 0.40585145354270935, 0.40710994601249695, 0.39923644065856934, 0.3898569643497467, 0.38385605812072754, 0.37559080123901367, 0.3810179531574249, 0.36234191060066223, 0.36343926191329956, 0.3588903546333313, 0.3521234691143036, 0.35478049516677856, 0.3431640863418579, 0.3444461226463318, 0.3389921486377716, 0.32805687189102173, 0.3225806951522827, 0.32421714067459106, 0.31410759687423706, 0.3084443509578705, 0.3065683841705322, 0.3018840551376343, 0.2901824712753296, 0.29860633611679077, 0.2962590157985687, 0.28676095604896545, 0.27892786264419556, 0.27635109424591064], "accuracy": [0.2775062620639801, 0.499009370803833, 0.566239595413208, 0.6225069165229797, 0.6707172393798828, 0.7000396251678467, 0.7172104120254517, 0.7442874312400818, 0.752212405204773, 0.7618544697761536, 0.772288978099823, 0.7783648371696472, 0.7862898111343384, 0.7965922355651855, 0.7989697456359863, 0.8064984679222107, 0.8123101592063904, 0.8138951063156128, 0.8173292875289917, 0.8261788487434387, 0.8231409192085266, 0.8315942287445068, 0.8350284099578857, 0.8341038227081299, 0.8417646288871765, 0.8450667262077332, 0.8485008478164673, 0.8487650156021118, 0.847840428352356, 0.8544445633888245, 0.8560295701026917, 0.8603883385658264, 0.8555012345314026, 0.860652506351471, 0.8621054291725159, 0.8650112152099609, 0.8634262084960938, 0.8704266548156738, 0.8716153502464294, 0.8737286925315857, 0.8713511824607849, 0.8745211958885193, 0.878351628780365, 0.8780874609947205, 0.8811253309249878, 0.8809932470321655, 0.8794082403182983, 0.8815215826034546, 0.8905032277107239, 0.887597382068634, 0.8878615498542786, 0.8910315632820129, 0.8968431949615479, 0.8912957310676575, 0.8920882344245911, 0.896446943283081, 0.8992207050323486, 0.8977677822113037], "val_loss": [2.0395348072052, 1.5095882415771484, 1.0428025722503662, 0.8399611115455627, 0.7585049867630005, 0.7029138803482056, 0.6582795977592468, 0.6250503063201904, 0.598814070224762, 0.5838332772254944, 0.564784586429596, 0.5476218461990356, 0.5359699726104736, 0.5315681099891663, 0.5153692364692688, 0.4998261034488678, 0.48990851640701294, 0.48066723346710205, 0.4805182218551636, 0.47057756781578064, 0.4649125039577484, 0.46319493651390076, 0.46714746952056885, 0.44757193326950073, 0.4413033723831177, 0.4378718137741089, 0.43877673149108887, 0.4370959401130676, 0.43143635988235474, 0.422660768032074, 0.4282410740852356, 0.42078304290771484, 0.41122525930404663, 0.4089021682739258, 0.4092617630958557, 0.4088461995124817, 0.4067104160785675, 0.40894490480422974, 0.3983595371246338, 0.394084632396698, 0.3943539261817932, 0.3919738829135895, 0.3964396119117737, 0.3852052092552185, 0.3917175233364105, 0.3842746317386627, 0.3802056610584259, 0.3777763545513153, 0.37923023104667664, 0.3792310059070587, 0.374610036611557, 0.3763980269432068, 0.3730044364929199, 0.3732552230358124, 0.3777179419994354, 0.37320980429649353, 0.36942994594573975, 0.36963167786598206], "val_accuracy": [0.562666654586792, 0.6556666493415833, 0.6753333210945129, 0.703000009059906, 0.7233333587646484, 0.7429999709129333, 0.7536666393280029, 0.765333354473114, 0.7763333320617676, 0.7760000228881836, 0.7886666655540466, 0.7979999780654907, 0.8003333210945129, 0.8086666464805603, 0.8026666641235352, 0.8153333067893982, 0.8230000138282776, 0.8273333311080933, 0.828000009059906, 0.8263333439826965, 0.8336666822433472, 0.8299999833106995, 0.8270000219345093, 0.8353333473205566, 0.8413333296775818, 0.8456666469573975, 0.8426666855812073, 0.8443333506584167, 0.8346666693687439, 0.846666693687439, 0.843999981880188, 0.8516666889190674, 0.8496666550636292, 0.8479999899864197, 0.8510000109672546, 0.8550000190734863, 0.8529999852180481, 0.8479999899864197, 0.8536666631698608, 0.8569999933242798, 0.862333357334137, 0.859666645526886, 0.8606666922569275, 0.8616666793823242, 0.8610000014305115, 0.8656666874885559, 0.8683333396911621, 0.8663333058357239, 0.8663333058357239, 0.8696666955947876, 0.8663333058357239, 0.8673333525657654, 0.871666669845581, 0.862666666507721, 0.8633333444595337, 0.8673333525657654, 0.8693333268165588, 0.8709999918937683]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [2, 3, 0, 3], [3, 16], [0, 1], [0], [0], [84], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 66, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 1, 0, 1, 0, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [2.30380916595459, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 9], [0, 1, 0, 2], [56, 39], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 6, 8, 3, 5], [0, 2, 0, 3], [16, 10], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [3, 2, 4, 8, 6, 2, 6, 2, 4, 0, 3, 6, 4, 0, 4, 3, 3, 8], [4, 0, 0, 6, 3, 0, 4, 1, 7, 4, 1, 1, 6, 5, 3], [99, 87, 30], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 2, 6, 8, 1, 4, 1, 4, 2, 1], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 96, 45, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(grad, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.pow(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.negative(grad)), sigma), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), grad), alpha)), tf.math.multiply(tf.math.divide_no_nan(tf.math.pow(tf.math.negative(grad), tf.math.pow(grad, alpha)), tf.math.multiply(tf.math.multiply(alpha, grad), grad)), tf.math.sqrt(sigma))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), grad)))), alpha), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}, "mapping_values": [1, 7, 5, 2, 2, 10, 6, 4, 2, 33, 18, 15, 3, 18, 9, 9, 5], "tree_depth": 23}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 5, 7], [2, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 4, 7, 3], [1, 2, 6, 7, 3], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 0, 2, 8, 6], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [97, 99, 71, 99, 86, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 1, 6, 3, 3, 2, 10, 5, 5, 0, 22, 12, 10, 6], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), tf.math.square(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.math.negative(tf.math.pow(beta, tf.math.add(tf.math.multiply(grad, grad), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.math.negative(sigma))), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), sigma), tf.math.sqrt(tf.math.divide_no_nan(alpha, beta))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [5, 2, 3, 0, 3], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 1, 2, 3, 5], [0, 2, 0, 3, 4], [16, 16], [0, 1, 1], [4], [0, 4], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 6, 8, 1, 5, 1, 4, 2, 8], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.08914285898208618, "mapping_values": [1, 6, 3, 3, 2, 11, 6, 5, 2, 3, 1, 2, 1, 13, 7, 6, 4], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.309805154800415, 2.310850143432617, 2.310567855834961, 2.3105180263519287, 2.3099844455718994, 2.310727119445801], "accuracy": [0.09589222073554993, 0.08809932321310043, 0.09589222073554993, 0.09245806187391281, 0.09232597798109055, 0.09192973375320435], "val_loss": [2.309605121612549, 2.3097472190856934, 2.309835195541382, 2.309898853302002, 2.3099489212036133, 2.3099899291992188], "val_accuracy": [0.08566666394472122, 0.08566666394472122, 0.08566666394472122, 0.08566666394472122, 0.08566666394472122, 0.08566666394472122]}}]