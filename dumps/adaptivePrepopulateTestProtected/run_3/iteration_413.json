[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8591428399085999, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222306251525879, 1.8669562339782715, 1.3931690454483032, 1.1034208536148071, 0.9483104348182678, 0.8480936288833618, 0.7762542366981506, 0.7347954511642456, 0.6962676644325256, 0.6620481610298157, 0.6400163769721985, 0.6246142983436584, 0.5990634560585022, 0.5842123031616211, 0.5663090944290161, 0.5553649663925171, 0.5468205809593201, 0.5315233469009399, 0.5191802978515625, 0.5072528719902039, 0.49624693393707275, 0.4927798807621002, 0.4699392318725586, 0.46813979744911194, 0.46101558208465576, 0.4501071274280548, 0.4401114881038666, 0.4372604191303253, 0.4309981167316437, 0.4260006546974182, 0.4188007712364197, 0.4051855206489563, 0.40773671865463257, 0.4024404287338257, 0.3951535224914551, 0.388099730014801, 0.38466116786003113, 0.36769673228263855, 0.3669224679470062, 0.3650899827480316, 0.3657650053501129, 0.3583992123603821, 0.35132044553756714, 0.34613874554634094, 0.3453560769557953, 0.3405480980873108, 0.3268943130970001, 0.3268583416938782, 0.32029563188552856], "accuracy": [0.27565711736679077, 0.48606523871421814, 0.5667679309844971, 0.6118082404136658, 0.6709813475608826, 0.696209192276001, 0.7180029153823853, 0.7354378700256348, 0.7500990629196167, 0.759609043598175, 0.7651565074920654, 0.7692511081695557, 0.7794214487075806, 0.7839123010635376, 0.7905164361000061, 0.796328067779541, 0.805177628993988, 0.8117818236351013, 0.8136309385299683, 0.8181217908859253, 0.8239334225654602, 0.821820080280304, 0.8321225643157959, 0.8329150676727295, 0.8381983637809753, 0.8383304476737976, 0.8450667262077332, 0.8450667262077332, 0.8482366800308228, 0.8473120927810669, 0.8508783578872681, 0.8584070801734924, 0.8525954484939575, 0.8589354157447815, 0.8597279191017151, 0.8570862412452698, 0.8599920868873596, 0.8647470474243164, 0.8652753829956055, 0.8697662353515625, 0.8689737319946289, 0.8701624870300293, 0.8749174475669861, 0.8749174475669861, 0.8751816153526306, 0.8794082403182983, 0.8817857503890991, 0.8833707571029663, 0.884691596031189], "val_loss": [2.0400826930999756, 1.5233079195022583, 1.062578558921814, 0.8667492866516113, 0.7788060903549194, 0.7269701361656189, 0.6832714676856995, 0.6456538438796997, 0.6236750483512878, 0.6020547151565552, 0.5831872820854187, 0.5703452825546265, 0.5550950765609741, 0.5469144582748413, 0.5307801961898804, 0.5274960994720459, 0.5121215581893921, 0.5077501535415649, 0.49236178398132324, 0.4916239380836487, 0.47785884141921997, 0.4765087962150574, 0.4689408242702484, 0.46233299374580383, 0.464071661233902, 0.45343029499053955, 0.44931966066360474, 0.44527173042297363, 0.438693106174469, 0.4404280185699463, 0.43221965432167053, 0.4336492419242859, 0.4286177456378937, 0.4251624643802643, 0.41865307092666626, 0.4141060709953308, 0.4172377586364746, 0.41056135296821594, 0.4113604724407196, 0.40768465399742126, 0.4060913920402527, 0.40620508790016174, 0.40870845317840576, 0.40006953477859497, 0.40057528018951416, 0.3960284888744354, 0.3990418612957001, 0.39488720893859863, 0.40083691477775574], "val_accuracy": [0.5170000195503235, 0.6293333172798157, 0.6663333177566528, 0.6909999847412109, 0.7139999866485596, 0.7329999804496765, 0.7493333220481873, 0.7613333463668823, 0.7666666507720947, 0.778333306312561, 0.7876666784286499, 0.7956666946411133, 0.7986666560173035, 0.79666668176651, 0.8083333373069763, 0.8066666722297668, 0.8166666626930237, 0.8180000185966492, 0.8259999752044678, 0.8243333101272583, 0.831333339214325, 0.8289999961853027, 0.8360000252723694, 0.8330000042915344, 0.8389999866485596, 0.8410000205039978, 0.843666672706604, 0.8429999947547913, 0.8453333377838135, 0.846666693687439, 0.8486666679382324, 0.8460000157356262, 0.8463333249092102, 0.8533333539962769, 0.859000027179718, 0.8556666374206543, 0.8550000190734863, 0.8566666841506958, 0.8569999933242798, 0.8603333234786987, 0.8619999885559082, 0.8523333072662354, 0.8573333621025085, 0.8629999756813049, 0.862666666507721, 0.8603333234786987, 0.8613333106040955, 0.862333357334137, 0.859666645526886]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1], [0, 2, 3, 2, 3, 4, 1, 8], [0, 1, 0, 2, 1, 0, 3], [64, 39, 23], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 9, 5], [0, 2, 3, 3], [16, 16], [0, 1], [8], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 4, 0, 3, 3, 1, 2, 0], [16, 99, 96, 99, 61, 95]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 8, 7, 3, 7, 5, 2, 2, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.pow(alpha, tf.math.subtract(tf.math.sqrt(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(grad, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.subtract(tf.math.pow(sigma, sigma), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [6, 2, 3, 0, 3, 8], [0, 1, 0, 2, 0], [17, 91, 22], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [3, 2, 6, 0, 3, 5, 1], [0, 2, 0, 3, 4, 5], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 3, 1, 8, 1, 4, 1, 4, 2, 8, 0, 6, 5], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0, 5], [16, 99, 96, 85, 61, 83]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 3, 13, 7, 6, 2, 1, 0, 1, 1, 25, 14, 11, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha))), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), grad), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.subtract(grad, grad)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))), tf.math.subtract(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), tf.math.add(tf.math.sqrt(tf.math.negative(alpha)), beta)), tf.math.divide_no_nan(tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [0, 4, 3, 0, 3, 1, 1, 7, 2, 4, 1, 2, 6, 0, 0, 2], [0, 1, 0, 2, 1, 0, 2, 1, 1, 0, 0, 1, 1], [39, 99, 45, 21, 85], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 3, 9, 3, 5, 8, 6, 0, 4, 8], [0, 2, 0, 3, 3], [16, 16, 35], [0, 1], [0], [4], [99], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 0, 2, 8], [4, 0, 0, 3, 0, 0, 3, 1, 4, 0], [16, 67, 96, 99, 61, 16]], "fitness": -0.10000000149011612, "mapping_values": [1, 29, 16, 13, 5, 16, 11, 5, 3, 2, 1, 1, 0, 17, 9, 8, 4], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.subtract(alpha, tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(tf.math.add(tf.math.pow(grad, alpha), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.math.add(tf.math.divide_no_nan(alpha, alpha), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.negative(tf.math.add(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), alpha)))))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(tf.math.sqrt(tf.math.divide_no_nan(beta, tf.math.negative(tf.math.pow(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), grad))))), tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)))), sigma)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 0], [1, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [97, 16], [0, 1], [0], [0], [80], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 8, 3, 6, 8, 1, 4, 1, 4, 3, 8, 8], [0, 3, 0, 3, 0, 0, 3, 1, 2, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.09200000017881393, "mapping_values": [1, 9, 5, 4, 2, 1, 0, 1, 1, 2, 1, 1, 1, 21, 12, 9, 4], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), sigma)), tf.math.sqrt(tf.math.sqrt(alpha))))), beta)", "other_info": {"loss": [2.3097851276397705, 2.3090457916259766, 2.3114099502563477, 2.3096771240234375, 2.3112080097198486, 2.310868740081787], "accuracy": [0.09311848133802414, 0.09496764093637466, 0.08730682730674744, 0.09351472556591034, 0.08889182657003403, 0.09179764986038208], "val_loss": [2.308504819869995, 2.308504819869995, 2.308504819869995, 2.308504819869995, 2.308504819869995, 2.308504819869995], "val_accuracy": [0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341]}}]