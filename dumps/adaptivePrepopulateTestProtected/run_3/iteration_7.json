[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8734285831451416, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2255282402038574, 1.8721107244491577, 1.4010379314422607, 1.1106735467910767, 0.940341055393219, 0.8359335660934448, 0.7731297612190247, 0.7296580672264099, 0.6895313262939453, 0.6571158170700073, 0.633295476436615, 0.6155224442481995, 0.5889805555343628, 0.5725106596946716, 0.556487500667572, 0.5408687591552734, 0.5278533697128296, 0.5128424763679504, 0.512872576713562, 0.4899774193763733, 0.4817979633808136, 0.47892409563064575, 0.46546685695648193, 0.4566666781902313, 0.451609343290329, 0.43633145093917847, 0.4428727924823761, 0.42452678084373474, 0.42050766944885254, 0.4092382490634918, 0.40380609035491943, 0.39615246653556824, 0.39049798250198364, 0.38757410645484924, 0.37997010350227356, 0.3791789710521698, 0.3691047430038452, 0.36647623777389526, 0.362128347158432, 0.35865068435668945, 0.34899047017097473, 0.34528470039367676, 0.34164324402809143, 0.3404218256473541, 0.329362154006958, 0.32548993825912476, 0.3200454115867615, 0.319357693195343, 0.3098825216293335, 0.3054966330528259], "accuracy": [0.2689208686351776, 0.48368775844573975, 0.5597675442695618, 0.6098269820213318, 0.6647734642028809, 0.7030775547027588, 0.7220974564552307, 0.7411174178123474, 0.7464007139205933, 0.763967752456665, 0.7684586048126221, 0.7718927264213562, 0.7889314293861389, 0.7909126877784729, 0.7968564033508301, 0.8092722296714783, 0.81112140417099, 0.8166688680648804, 0.8145555257797241, 0.8244617581367493, 0.8317263126373291, 0.8261788487434387, 0.8339717388153076, 0.8411042094230652, 0.8413683772087097, 0.8438779711723328, 0.8467837572097778, 0.846387505531311, 0.8527275323867798, 0.8576145768165588, 0.8529917001724243, 0.8617091774940491, 0.8622375130653381, 0.8621054291725159, 0.8650112152099609, 0.8644828796386719, 0.8721436858177185, 0.8687095642089844, 0.8734645247459412, 0.8747853636741638, 0.8800686597824097, 0.8786157965660095, 0.882710337638855, 0.8792761564254761, 0.8811253309249878, 0.885219931602478, 0.8856161832809448, 0.886672854423523, 0.886672854423523, 0.8899748921394348], "val_loss": [2.046873092651367, 1.5288923978805542, 1.0626829862594604, 0.856019914150238, 0.7606016993522644, 0.7008227705955505, 0.6582002639770508, 0.6210333704948425, 0.5941072702407837, 0.5707116723060608, 0.5571823120117188, 0.5361080169677734, 0.5217938423156738, 0.5068894624710083, 0.49441617727279663, 0.4871320128440857, 0.47810932993888855, 0.47213321924209595, 0.4643647372722626, 0.4517059624195099, 0.4470732808113098, 0.44019225239753723, 0.4363744854927063, 0.43239396810531616, 0.42653128504753113, 0.4212285280227661, 0.41591763496398926, 0.4089317321777344, 0.40691429376602173, 0.4042397439479828, 0.39867520332336426, 0.4001860022544861, 0.38896405696868896, 0.3901083469390869, 0.3860934376716614, 0.38403454422950745, 0.3824399709701538, 0.3795788884162903, 0.37650981545448303, 0.37731820344924927, 0.3719942271709442, 0.37503206729888916, 0.3734400272369385, 0.3695981800556183, 0.3660171627998352, 0.36835432052612305, 0.3619896173477173, 0.36234453320503235, 0.36134591698646545, 0.3571830987930298], "val_accuracy": [0.5239999890327454, 0.6553333401679993, 0.6856666803359985, 0.7023333311080933, 0.7279999852180481, 0.7490000128746033, 0.762333333492279, 0.7716666460037231, 0.7816666960716248, 0.7889999747276306, 0.7993333339691162, 0.8040000200271606, 0.8073333501815796, 0.8183333277702332, 0.8243333101272583, 0.8226666450500488, 0.8220000267028809, 0.8273333311080933, 0.8326666951179504, 0.8353333473205566, 0.8360000252723694, 0.8389999866485596, 0.8379999995231628, 0.8420000076293945, 0.8403333425521851, 0.8489999771118164, 0.8493333458900452, 0.8483333587646484, 0.8500000238418579, 0.8503333330154419, 0.8543333411216736, 0.8493333458900452, 0.8546666502952576, 0.8550000190734863, 0.8579999804496765, 0.8566666841506958, 0.8576666712760925, 0.8606666922569275, 0.8603333234786987, 0.8576666712760925, 0.862666666507721, 0.8583333492279053, 0.8616666793823242, 0.8606666922569275, 0.8679999709129333, 0.862333357334137, 0.8650000095367432, 0.8663333058357239, 0.8663333058357239, 0.8663333058357239]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8514285683631897, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2230329513549805, 1.8666372299194336, 1.3898959159851074, 1.0933256149291992, 0.9349690675735474, 0.8368966579437256, 0.7652296423912048, 0.7244301438331604, 0.6849403381347656, 0.6557725071907043, 0.6280144453048706, 0.6109016537666321, 0.5992385745048523, 0.5776743292808533, 0.5660935044288635, 0.5517823100090027, 0.5330302715301514, 0.5258086323738098, 0.5129698514938354, 0.4972715675830841, 0.496972918510437, 0.4820307493209839, 0.46978306770324707, 0.4583643078804016, 0.4576672613620758, 0.45082423090934753, 0.4487628638744354, 0.4364622235298157, 0.4211307764053345, 0.41598430275917053, 0.40439876914024353, 0.40489181876182556, 0.4006478488445282, 0.38961389660835266, 0.3893283009529114, 0.38085541129112244, 0.3766087591648102, 0.3668498396873474, 0.3693404793739319, 0.3562149107456207, 0.349520742893219, 0.34831374883651733, 0.34906402230262756, 0.334103524684906, 0.3329603374004364, 0.32837677001953125, 0.3238375782966614, 0.3259832561016083, 0.311589777469635, 0.31628289818763733, 0.3087919354438782, 0.3026505708694458, 0.2951861619949341, 0.2883349359035492, 0.29302453994750977, 0.28513696789741516, 0.27741631865501404, 0.2780967354774475], "accuracy": [0.2769779562950134, 0.4913485646247864, 0.5703341960906982, 0.6236956715583801, 0.6662263870239258, 0.7046625018119812, 0.7289658188819885, 0.7386078238487244, 0.7541936039924622, 0.7648923397064209, 0.7725531458854675, 0.7808743715286255, 0.7804781198501587, 0.7960638999938965, 0.7979130744934082, 0.8030643463134766, 0.809140145778656, 0.8162726163864136, 0.8206313848495483, 0.8264430165290833, 0.8238013386726379, 0.8248580098152161, 0.833179235458374, 0.8403117060661316, 0.8350284099578857, 0.8416325449943542, 0.8399154543876648, 0.8479725122451782, 0.8531237840652466, 0.852859616279602, 0.8562937378883362, 0.8574824929237366, 0.8625016212463379, 0.863558292388916, 0.8625016212463379, 0.8638224601745605, 0.8652753829956055, 0.8697662353515625, 0.8661999702453613, 0.872407853603363, 0.8768987059593201, 0.8749174475669861, 0.8782195448875427, 0.8791441321372986, 0.8786157965660095, 0.885219931602478, 0.8821820020675659, 0.8833707571029663, 0.8869370222091675, 0.8881257176399231, 0.8906353116035461, 0.8907673954963684, 0.8931449055671692, 0.8961827754974365, 0.8945978283882141, 0.8956544995307922, 0.8960506916046143, 0.8982961177825928], "val_loss": [2.037628650665283, 1.5011767148971558, 1.0165852308273315, 0.8141977787017822, 0.7229703664779663, 0.6639783382415771, 0.6204615831375122, 0.5877391695976257, 0.5605388283729553, 0.5424505472183228, 0.524272084236145, 0.5061272382736206, 0.49329444766044617, 0.49175047874450684, 0.4743635356426239, 0.4618677496910095, 0.4518621563911438, 0.44555264711380005, 0.4415629208087921, 0.4331073462963104, 0.4289161264896393, 0.4319012761116028, 0.41060030460357666, 0.4118664264678955, 0.40235456824302673, 0.40622445940971375, 0.40285199880599976, 0.388907253742218, 0.3858394920825958, 0.38177669048309326, 0.37849485874176025, 0.37647631764411926, 0.37749624252319336, 0.3681972324848175, 0.3698192536830902, 0.3636356294155121, 0.3591766655445099, 0.3605104088783264, 0.35491496324539185, 0.3526128828525543, 0.35087698698043823, 0.3514528274536133, 0.3506311774253845, 0.3454199731349945, 0.3477688133716583, 0.3470059335231781, 0.3394903242588043, 0.3426983654499054, 0.3381504714488983, 0.339749276638031, 0.34118616580963135, 0.3365219235420227, 0.33433014154434204, 0.33398914337158203, 0.3337513506412506, 0.3293723165988922, 0.331973135471344, 0.3320656418800354], "val_accuracy": [0.5253333449363708, 0.6693333387374878, 0.6946666836738586, 0.7170000076293945, 0.7476666569709778, 0.7663333415985107, 0.7786666750907898, 0.784333348274231, 0.7979999780654907, 0.8026666641235352, 0.8063333630561829, 0.8140000104904175, 0.8176666498184204, 0.8233333230018616, 0.8240000009536743, 0.8326666951179504, 0.8356666564941406, 0.8366666436195374, 0.8386666774749756, 0.843999981880188, 0.8433333039283752, 0.843666672706604, 0.8513333201408386, 0.8456666469573975, 0.8543333411216736, 0.8506666421890259, 0.8566666841506958, 0.8610000014305115, 0.862333357334137, 0.8616666793823242, 0.8610000014305115, 0.8636666536331177, 0.862666666507721, 0.8696666955947876, 0.8643333315849304, 0.8636666536331177, 0.8700000047683716, 0.8696666955947876, 0.875, 0.8693333268165588, 0.8756666779518127, 0.875, 0.8740000128746033, 0.8759999871253967, 0.875, 0.8799999952316284, 0.8793333172798157, 0.8766666650772095, 0.8836666941642761, 0.8823333382606506, 0.8769999742507935, 0.8826666474342346, 0.8866666555404663, 0.8826666474342346, 0.8790000081062317, 0.8849999904632568, 0.8846666812896729, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 2, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 7], [16, 16, 96, 99, 61, 1]], "fitness": -0.10542856901884079, "mapping_values": [1, 2, 1, 1, 1, 10, 6, 4, 1, 2, 1, 1, 1, 21, 10, 11, 6], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)), alpha)), beta), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad))", "other_info": {"loss": [2.309664487838745, 2.310410737991333, 2.3093457221984863, 2.309281349182129, 2.3088409900665283, 2.3067984580993652, 2.3088951110839844, 2.3084299564361572, 2.3076398372650146, 2.3059487342834473, 2.3064844608306885, 2.30741024017334, 2.3060495853424072, 2.3027820587158203, 2.3012068271636963], "accuracy": [0.09206181764602661, 0.0886276587843895, 0.09232597798109055, 0.09853387624025345, 0.08994849026203156, 0.1018359512090683, 0.09298639744520187, 0.10500594228506088, 0.10381719470024109, 0.11042134463787079, 0.10276053100824356, 0.10196803510189056, 0.10553427785634995, 0.10791176557540894, 0.11042134463787079], "val_loss": [2.3081154823303223, 2.307851791381836, 2.3072097301483154, 2.306547164916992, 2.3056230545043945, 2.3053479194641113, 2.3071208000183105, 2.3059072494506836, 2.304140090942383, 2.3030953407287598, 2.304518461227417, 2.3023314476013184, 2.3004720211029053, 2.297635793685913, 2.293133497238159], "val_accuracy": [0.09666666388511658, 0.09733333438634872, 0.09566666930913925, 0.09600000083446503, 0.09666666388511658, 0.09266666322946548, 0.1003333330154419, 0.10366666316986084, 0.10366666316986084, 0.1080000028014183, 0.09799999743700027, 0.10066666454076767, 0.09799999743700027, 0.09933333098888397, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 2, 3, 9, 3], [0, 2, 0, 2], [39, 25, 70], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 1, 3, 2, 7], [3, 2, 0, 3, 3, 5, 3, 3], [16, 4], [0, 1, 1], [6], [0, 1], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 1, 3, 6, 8, 3, 4, 1, 4, 2, 8], [0, 0, 0, 2, 0, 4, 3, 1, 2, 0], [16, 2, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 18, 10, 8, 1, 3, 1, 2, 1, 21, 11, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), grad)), tf.math.multiply(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(grad, tf.math.square(beta))), tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(grad, grad), grad))), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), beta))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [6, 3, 3, 6, 8, 1, 2, 1, 5, 2, 8], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 99, 56, 99, 61, 71]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 10, 6, 4, 2, 2, 1, 1, 0, 17, 9, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(grad, tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32))))), sigma), alpha)", "other_info": {"loss": [2.3122994899749756, 2.3025853633880615, 2.302584409713745, 2.3025853633880615, 2.3025853633880615, 2.3025851249694824], "accuracy": [0.08241976052522659, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025848865509033, 2.302584409713745, 2.302584409713745, 2.302584171295166, 2.302584171295166, 2.302584409713745], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 2, 3, 0, 3, 5, 8], [0, 2, 0, 3], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 5, 1, 0, 2, 8], [0, 3, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 11, 7, 4, 2, 1, 0, 1, 1, 15, 8, 7, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(sigma, tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)))), sigma)), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}]