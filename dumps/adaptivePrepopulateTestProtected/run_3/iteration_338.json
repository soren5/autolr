[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8700000047683716, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2215077877044678, 1.8634088039398193, 1.3916141986846924, 1.0994102954864502, 0.9487208127975464, 0.8468910455703735, 0.786335825920105, 0.7345877289772034, 0.7004662752151489, 0.6718674898147583, 0.6441792845726013, 0.6284701824188232, 0.6043921113014221, 0.595058262348175, 0.5685339570045471, 0.5545299053192139, 0.545427680015564, 0.5311766862869263, 0.5207294821739197, 0.5091654062271118, 0.49860551953315735, 0.4868656396865845, 0.48414650559425354, 0.4720548391342163, 0.4590209424495697, 0.4502563774585724, 0.4454202353954315, 0.4401499330997467, 0.43733587861061096, 0.42501550912857056, 0.4240279793739319, 0.41522809863090515, 0.4082171618938446, 0.40511268377304077, 0.39736804366111755, 0.3986581861972809, 0.38790085911750793, 0.37834030389785767, 0.3686172366142273, 0.36869871616363525, 0.36074674129486084, 0.36220017075538635, 0.3525669574737549, 0.3487679362297058, 0.34898388385772705, 0.3383617699146271, 0.33592814207077026, 0.32643672823905945, 0.3212362825870514, 0.3244568705558777, 0.3100746273994446, 0.304573118686676, 0.3025887906551361, 0.30146732926368713, 0.297183096408844, 0.29398417472839355, 0.28841981291770935, 0.285932719707489, 0.277830570936203, 0.2776278555393219, 0.27759110927581787, 0.26460927724838257, 0.26641643047332764, 0.2637595534324646, 0.26044878363609314, 0.2561352550983429, 0.25369518995285034, 0.2442314177751541, 0.24400447309017181, 0.24200405180454254, 0.2405574768781662, 0.23052732646465302, 0.2281273454427719, 0.22545404732227325, 0.2177613377571106, 0.21828195452690125], "accuracy": [0.2814687490463257, 0.4963677227497101, 0.5708624720573425, 0.6213181614875793, 0.6664905548095703, 0.6947563290596008, 0.7201162576675415, 0.7400607466697693, 0.7464007139205933, 0.7577598690986633, 0.7660810947418213, 0.7728173136711121, 0.7804781198501587, 0.783119797706604, 0.7965922355651855, 0.7976489067077637, 0.8061022162437439, 0.8099326491355896, 0.8153480291366577, 0.8197067975997925, 0.8240655064582825, 0.8261788487434387, 0.8294808864593506, 0.8304054737091064, 0.8366134166717529, 0.8407079577445984, 0.8411042094230652, 0.8453308939933777, 0.8432175517082214, 0.8531237840652466, 0.8498216867446899, 0.852859616279602, 0.8565579056739807, 0.8564258217811584, 0.857218325138092, 0.8589354157447815, 0.8639545440673828, 0.8638224601745605, 0.8685774803161621, 0.8706908226013184, 0.8735966086387634, 0.871879518032074, 0.8734645247459412, 0.873860776424408, 0.8767666220664978, 0.8796724081039429, 0.882710337638855, 0.8820499181747437, 0.8815215826034546, 0.882710337638855, 0.8886540532112122, 0.8886540532112122, 0.8897107243537903, 0.8923524022102356, 0.8907673954963684, 0.8920882344245911, 0.8975036144256592, 0.8986923694610596, 0.8990886211395264, 0.8961827754974365, 0.9027869701385498, 0.9006736278533936, 0.9038436412811279, 0.9050323367118835, 0.9049002528190613, 0.9039757251739502, 0.9063531756401062, 0.9095231890678406, 0.9138818979263306, 0.9115044474601746, 0.9097873568534851, 0.9173160791397095, 0.917580246925354, 0.9202219247817993, 0.9212785363197327, 0.9236560463905334], "val_loss": [2.0375118255615234, 1.5053437948226929, 1.0370607376098633, 0.8351598978042603, 0.7502351999282837, 0.6922429800033569, 0.6449663639068604, 0.6070965528488159, 0.5825045704841614, 0.5589650869369507, 0.5409294366836548, 0.5265740752220154, 0.5146628022193909, 0.5017582774162292, 0.48827221989631653, 0.4776308536529541, 0.4726174771785736, 0.46568918228149414, 0.4533728361129761, 0.4424900710582733, 0.4434536397457123, 0.43737539649009705, 0.4296870827674866, 0.4223213195800781, 0.4152756333351135, 0.41440168023109436, 0.405131071805954, 0.4053724706172943, 0.4061117470264435, 0.4000411927700043, 0.39297208189964294, 0.39371663331985474, 0.3929019272327423, 0.38260146975517273, 0.3855865001678467, 0.38218507170677185, 0.37503355741500854, 0.36991405487060547, 0.3646393120288849, 0.3642617464065552, 0.3660072386264801, 0.36004534363746643, 0.35689663887023926, 0.35296010971069336, 0.3574010133743286, 0.35684943199157715, 0.3434724807739258, 0.3470621705055237, 0.3493231236934662, 0.3402486741542816, 0.34165266156196594, 0.3394571840763092, 0.34017568826675415, 0.3416498303413391, 0.3396404981613159, 0.33595776557922363, 0.3361903131008148, 0.3394591808319092, 0.3324224352836609, 0.3282739520072937, 0.32891207933425903, 0.3279529809951782, 0.3263947069644928, 0.3210001289844513, 0.32029497623443604, 0.32405632734298706, 0.3247614800930023, 0.3227788507938385, 0.32075637578964233, 0.31702274084091187, 0.315502405166626, 0.31692907214164734, 0.31340157985687256, 0.31905612349510193, 0.3134501874446869, 0.31147390604019165], "val_accuracy": [0.5463333129882812, 0.653333306312561, 0.6779999732971191, 0.7110000252723694, 0.7296666502952576, 0.7453333139419556, 0.7599999904632568, 0.7676666378974915, 0.7749999761581421, 0.7876666784286499, 0.8009999990463257, 0.8026666641235352, 0.8050000071525574, 0.8076666593551636, 0.8169999718666077, 0.8246666789054871, 0.8223333358764648, 0.8220000267028809, 0.8303333520889282, 0.8353333473205566, 0.8320000171661377, 0.8420000076293945, 0.8413333296775818, 0.8476666808128357, 0.8489999771118164, 0.8463333249092102, 0.8493333458900452, 0.8550000190734863, 0.8500000238418579, 0.8556666374206543, 0.8550000190734863, 0.8539999723434448, 0.8546666502952576, 0.8579999804496765, 0.8576666712760925, 0.8586666584014893, 0.859000027179718, 0.8643333315849304, 0.8613333106040955, 0.8669999837875366, 0.8666666746139526, 0.8653333187103271, 0.8673333525657654, 0.8676666617393494, 0.8666666746139526, 0.8669999837875366, 0.8696666955947876, 0.8703333139419556, 0.871666669845581, 0.8723333477973938, 0.8723333477973938, 0.8740000128746033, 0.8706666827201843, 0.8696666955947876, 0.875333309173584, 0.8726666569709778, 0.8759999871253967, 0.8759999871253967, 0.8776666522026062, 0.8820000290870667, 0.875333309173584, 0.8763333559036255, 0.8820000290870667, 0.8813333511352539, 0.8830000162124634, 0.8809999823570251, 0.8803333044052124, 0.8793333172798157, 0.8833333253860474, 0.8803333044052124, 0.887666642665863, 0.8846666812896729, 0.8846666812896729, 0.8836666941642761, 0.8866666555404663, 0.8853333592414856]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [8, 2, 3, 0, 3, 6, 6, 0, 8, 7, 3, 9, 4, 1, 6, 5, 7, 3, 0, 1, 1, 1, 5, 8, 8, 7, 4, 8, 0], [2, 1, 0, 1, 3, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 3, 3], [39, 67, 16, 0, 10], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [5, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 3], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [6, 8, 3, 6, 8, 1, 4, 3, 4, 2, 8, 4], [0, 0, 0, 4, 0, 3, 4, 1, 3, 0], [16, 99, 96, 99, 61, 80]], "fitness": -0.10000000149011612, "mapping_values": [1, 46, 29, 17, 5, 10, 6, 4, 1, 2, 1, 1, 1, 22, 12, 10, 5], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(grad, tf.math.divide_no_nan(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), alpha), tf.math.divide_no_nan(grad, tf.math.negative(tf.math.sqrt(tf.math.add(tf.math.multiply(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.divide_no_nan(tf.math.square(grad), tf.math.add(tf.math.multiply(grad, tf.math.negative(tf.math.subtract(grad, tf.math.subtract(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.math.square(alpha)))))), tf.math.sqrt(tf.math.sqrt(alpha)))), tf.math.add(tf.math.pow(grad, tf.math.sqrt(tf.math.negative(grad))), grad))))))))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(grad, tf.math.sqrt(tf.math.pow(alpha, sigma)))))))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 2, 5, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [6, 3, 3, 6, 4, 1, 4, 1, 4, 2, 8, 7], [0, 0, 0, 3, 0, 2, 3, 1, 2, 0, 4, 0], [16, 82, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 10, 6, 4, 2, 2, 1, 1, 1, 24, 12, 12, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(beta, sigma))), alpha)), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [44, 18], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 1, 8, 3, 6], [0, 2, 0, 1, 3, 5, 2], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 4, 0, 8, 1, 4, 1, 4, 3, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 74]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 17, 10, 7, 2, 2, 1, 1, 1, 11, 6, 5, 4], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha))), tf.math.multiply(tf.math.divide_no_nan(grad, grad), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.889643430709839, 4.704737186431885, 5.995113849639893, 6.868042469024658, 7.631795406341553, 8.354069709777832], "accuracy": [0.09655263274908066, 0.09708096832036972, 0.09826971590518951, 0.09906221181154251, 0.1026284471154213, 0.09972262382507324], "val_loss": [3.289710283279419, 4.3201518058776855, 5.1008453369140625, 5.729753017425537, 6.258849143981934, 6.717255115509033], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 2, 3, 3, 1], [0, 2, 0, 2, 0, 2, 1], [93, 39, 17], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [15, 16], [0, 1, 1], [2], [0, 2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 0, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 66, 61, 16]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 7, 7, 3, 10, 6, 4, 2, 3, 1, 2, 1, 11, 6, 5, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.multiply(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.subtract(grad, alpha)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}]