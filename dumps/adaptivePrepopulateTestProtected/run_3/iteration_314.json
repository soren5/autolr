[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.871999979019165, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224109649658203, 1.8705239295959473, 1.3945574760437012, 1.0995947122573853, 0.936837911605835, 0.8373270034790039, 0.7775356769561768, 0.7309661507606506, 0.6890318393707275, 0.6647195219993591, 0.6421065926551819, 0.6243996024131775, 0.6039313077926636, 0.5869879722595215, 0.5705764889717102, 0.5609862208366394, 0.5432102680206299, 0.5384409427642822, 0.5161364674568176, 0.5045350193977356, 0.5023948550224304, 0.48811066150665283, 0.4790424108505249, 0.4732872545719147, 0.45738863945007324, 0.45192354917526245, 0.45373550057411194, 0.44707000255584717, 0.4411391317844391, 0.42835718393325806, 0.4284397065639496, 0.41324737668037415, 0.4120878577232361, 0.4083305895328522, 0.3891400694847107, 0.3881966769695282, 0.38837480545043945, 0.38277047872543335, 0.3790367841720581, 0.3697064518928528, 0.3651127815246582, 0.36323028802871704, 0.3555637300014496, 0.35120850801467896, 0.3499537706375122], "accuracy": [0.28318583965301514, 0.5033681392669678, 0.5727116465568542, 0.6185444593429565, 0.6641130447387695, 0.7021529674530029, 0.715889573097229, 0.7327961921691895, 0.7504953145980835, 0.7589486241340637, 0.7697794437408447, 0.774270236492157, 0.7839123010635376, 0.7821952104568481, 0.7923656105995178, 0.7942147850990295, 0.8037247657775879, 0.8020076751708984, 0.8119139075279236, 0.8190463781356812, 0.8232730031013489, 0.8215559124946594, 0.8236692547798157, 0.8244617581367493, 0.835160493850708, 0.8343679904937744, 0.8364813327789307, 0.844010055065155, 0.8413683772087097, 0.846387505531311, 0.8473120927810669, 0.852859616279602, 0.8474441766738892, 0.8541803956031799, 0.8558974862098694, 0.859199583530426, 0.8588033318519592, 0.8601241707801819, 0.8589354157447815, 0.8673887252807617, 0.8660678863525391, 0.8704266548156738, 0.8689737319946289, 0.8766345381736755, 0.8726720213890076], "val_loss": [2.0459771156311035, 1.5245798826217651, 1.054019808769226, 0.8426908254623413, 0.7434912919998169, 0.6891826391220093, 0.6408379673957825, 0.606144905090332, 0.578540563583374, 0.558352530002594, 0.5391103625297546, 0.5212104916572571, 0.5097752213478088, 0.49114519357681274, 0.485301673412323, 0.470468670129776, 0.4640921652317047, 0.45334845781326294, 0.4450438618659973, 0.4377571642398834, 0.4281734526157379, 0.42579853534698486, 0.4167904853820801, 0.41328755021095276, 0.4081687033176422, 0.4018605053424835, 0.4023480713367462, 0.3931710720062256, 0.38795149326324463, 0.38614583015441895, 0.38381338119506836, 0.3751065731048584, 0.3734287917613983, 0.3714127540588379, 0.36348170042037964, 0.3628596067428589, 0.3598860204219818, 0.36333438754081726, 0.3560861051082611, 0.353697270154953, 0.35366275906562805, 0.3535255491733551, 0.3491840362548828, 0.3444059193134308, 0.35433435440063477], "val_accuracy": [0.5490000247955322, 0.6463333368301392, 0.6736666560173035, 0.6993333101272583, 0.7283333539962769, 0.7429999709129333, 0.7603333592414856, 0.7696666717529297, 0.7846666574478149, 0.7913333177566528, 0.8050000071525574, 0.8140000104904175, 0.8116666674613953, 0.8203333616256714, 0.824999988079071, 0.8339999914169312, 0.8386666774749756, 0.8386666774749756, 0.8396666646003723, 0.8433333039283752, 0.8463333249092102, 0.8460000157356262, 0.8533333539962769, 0.8533333539962769, 0.8543333411216736, 0.8576666712760925, 0.8576666712760925, 0.8633333444595337, 0.8643333315849304, 0.8613333106040955, 0.862666666507721, 0.8679999709129333, 0.871666669845581, 0.8703333139419556, 0.8730000257492065, 0.875, 0.8736666440963745, 0.871666669845581, 0.8740000128746033, 0.8763333559036255, 0.8733333349227905, 0.8743333220481873, 0.8763333559036255, 0.8743333220481873, 0.8723333477973938]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 6, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [6, 3, 3, 6, 8, 6, 5, 1, 4, 2, 3], [4, 0, 0, 3, 0, 0, 3, 0, 2, 0], [87, 99, 96, 6, 61, 1]], "fitness": -0.7645714282989502, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)))), sigma)), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), sigma))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.783974528312683, 1.0809969902038574, 0.9398004412651062, 0.8900286555290222, 0.852916955947876, 0.8357428312301636, 0.8249332308769226, 0.8030129075050354, 0.8018750548362732, 0.7850335836410522, 0.7816962599754333, 0.7829297780990601, 0.7777353525161743, 0.7738191485404968, 0.7702725529670715, 0.7623280882835388, 0.7527523040771484, 0.7576214671134949, 0.748379647731781, 0.73895663022995, 0.7514702081680298, 0.7392547726631165, 0.7409281730651855, 0.752596378326416, 0.7329590320587158, 0.733574628829956, 0.7434162497520447, 0.7369014024734497, 0.7361376881599426, 0.7206085324287415], "accuracy": [0.3855501115322113, 0.6144498586654663, 0.6656980514526367, 0.6811517477035522, 0.6906617283821106, 0.693831741809845, 0.7029454708099365, 0.7106062769889832, 0.707040011882782, 0.7141724824905396, 0.7140403985977173, 0.7177387475967407, 0.7078325152397156, 0.718399167060852, 0.7169462442398071, 0.7195879220962524, 0.7211728692054749, 0.7232862114906311, 0.7293620109558105, 0.7250033020973206, 0.7239466309547424, 0.7256637215614319, 0.728701651096344, 0.7210407853126526, 0.7302865982055664, 0.7317395210266113, 0.7289658188819885, 0.7327961921691895, 0.7288337349891663, 0.7342491149902344], "val_loss": [1.033184289932251, 0.8090488314628601, 0.7450965046882629, 0.7146317362785339, 0.6934090852737427, 0.6794354915618896, 0.6705474257469177, 0.6612047553062439, 0.6550971865653992, 0.6495314240455627, 0.6453555226325989, 0.6403191089630127, 0.6374925374984741, 0.6336772441864014, 0.6301289796829224, 0.6283989548683167, 0.6255666613578796, 0.6232081055641174, 0.6211344003677368, 0.6187212467193604, 0.6165916919708252, 0.6154564619064331, 0.6143503189086914, 0.6123833656311035, 0.610849916934967, 0.6092036366462708, 0.6073487997055054, 0.6061995029449463, 0.6055496335029602, 0.6045874953269958], "val_accuracy": [0.6510000228881836, 0.7043333053588867, 0.7306666374206543, 0.7360000014305115, 0.7419999837875366, 0.7446666955947876, 0.7463333606719971, 0.7493333220481873, 0.7516666650772095, 0.753000020980835, 0.7526666522026062, 0.7549999952316284, 0.7583333253860474, 0.7603333592414856, 0.762333333492279, 0.7636666893959045, 0.7630000114440918, 0.765333354473114, 0.765999972820282, 0.7670000195503235, 0.765333354473114, 0.7649999856948853, 0.7680000066757202, 0.7666666507720947, 0.7696666717529297, 0.768666684627533, 0.7696666717529297, 0.7689999938011169, 0.7693333625793457, 0.7689999938011169]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 1, 3, 0, 3, 8], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1], [6, 3, 3, 6, 3, 1, 4, 1, 4, 3, 8, 2, 2, 4, 4, 1, 5, 4, 1, 2, 9, 9, 1, 6, 5, 2, 2, 2, 1, 2, 8, 6, 3, 0, 6, 9, 7, 6, 5, 8, 6, 6, 2, 1, 9, 3, 0, 2, 4, 9, 0], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 2, 2, 3, 5, 1, 6, 0, 3, 1, 7, 2, 3, 5, 7, 1, 0, 0, 7, 5, 6, 0, 0, 5], [67, 99, 96, 99, 61, 1, 85, 75, 40, 72, 76, 49, 80, 58, 94, 63]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha)), tf.math.multiply(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, beta), tf.math.pow(tf.math.pow(tf.math.subtract(tf.math.square(tf.math.pow(tf.math.subtract(tf.math.add(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), sigma), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.divide_no_nan(tf.math.square(grad), alpha), tf.math.add(tf.math.add(grad, tf.math.add(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.negative(tf.math.divide_no_nan(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.divide_no_nan(tf.math.square(tf.math.sqrt(beta)), sigma), tf.math.divide_no_nan(grad, grad))))), alpha))), tf.math.divide_no_nan(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.negative(tf.math.add(tf.math.pow(grad, grad), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), grad)))))))), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}, "mapping_values": [1, 2, 1, 1, 1, 10, 6, 4, 2, 2, 1, 1, 1, 84, 51, 33, 16], "tree_depth": 43}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 0, 0, 3], [0, 1, 0, 0], [39, 39], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [6, 2, 3, 6, 8, 1, 4, 1, 4, 2, 8, 5, 6, 0, 1], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0, 0, 7], [16, 55, 84, 99, 61, 1, 43]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 10, 6, 4, 2, 2, 1, 1, 1, 27, 15, 12, 7], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.square(tf.math.divide_no_nan(grad, alpha)))), beta))), tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 1, 2], [39, 26], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [34, 16], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1], [0, 6, 2, 3, 4, 9], [0, 2, 2, 4], [99, 23], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 5, 6, 8, 1, 4, 1, 4, 2, 8], [0, 3, 4, 3, 0, 4, 4, 1, 2, 0], [26, 99, 96, 99, 61, 1]], "fitness": -0.09114285558462143, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 2, 10, 6, 4, 2, 17, 9, 8, 2], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(tf.math.pow(beta, beta), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(sigma, tf.math.pow(grad, sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, grad)))), alpha)", "other_info": {"loss": [2.309912919998169, 2.31022572517395, 2.308828830718994, 2.310129404067993, 2.3086893558502197, 2.3090720176696777], "accuracy": [0.09721305221319199, 0.08968432247638702, 0.09721305221319199, 0.09219389408826828, 0.0936468094587326, 0.0944393053650856], "val_loss": [2.3077173233032227, 2.3077173233032227, 2.3077173233032227, 2.3077173233032227, 2.3077173233032227, 2.3077173233032227], "val_accuracy": [0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925]}}]