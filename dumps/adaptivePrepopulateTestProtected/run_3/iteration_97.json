[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.878000020980835, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223759174346924, 1.8681567907333374, 1.3971633911132812, 1.1021500825881958, 0.9438490867614746, 0.8268281817436218, 0.7700234055519104, 0.7182450890541077, 0.6839274764060974, 0.655160665512085, 0.6316797733306885, 0.6046612858772278, 0.586663544178009, 0.5732303261756897, 0.5552444458007812, 0.5382086634635925, 0.5205084085464478, 0.5141545534133911, 0.49866363406181335, 0.4905571937561035, 0.48713892698287964, 0.4630949795246124, 0.46493759751319885, 0.4510720372200012, 0.4456666111946106, 0.4411585330963135, 0.43109801411628723, 0.4194287657737732, 0.41647717356681824, 0.4177640676498413, 0.39898860454559326, 0.3982110619544983, 0.3941095173358917, 0.3838343918323517, 0.38270825147628784, 0.38132011890411377, 0.3706604242324829, 0.3630581796169281, 0.35970449447631836, 0.3585955500602722, 0.3488880693912506, 0.3406795859336853, 0.3434852361679077, 0.34305644035339355, 0.32770219445228577, 0.3274216949939728, 0.3164256513118744, 0.31487780809402466, 0.31453031301498413, 0.3020377457141876, 0.3013147711753845, 0.29238083958625793, 0.30650538206100464, 0.2886098325252533, 0.28784143924713135, 0.28922179341316223, 0.27991431951522827, 0.27731093764305115, 0.27029022574424744, 0.2677718997001648, 0.2672445476055145], "accuracy": [0.27182671427726746, 0.4913485646247864, 0.5609562993049622, 0.6095628142356873, 0.6618676781654358, 0.6997754573822021, 0.7215691208839417, 0.7407211661338806, 0.7508915662765503, 0.7592127919197083, 0.7656848430633545, 0.7798177003860474, 0.7849689722061157, 0.789459764957428, 0.7991018295288086, 0.806630551815033, 0.81112140417099, 0.8088759779930115, 0.8210275769233704, 0.8181217908859253, 0.826310932636261, 0.8333113193511963, 0.8294808864593506, 0.8401796221733093, 0.8409721255302429, 0.8436138033866882, 0.8459912538528442, 0.8519350290298462, 0.8485008478164673, 0.8490291833877563, 0.856689989566803, 0.8573504090309143, 0.8615770936012268, 0.8644828796386719, 0.8605204224586487, 0.8614450097084045, 0.8671245574951172, 0.8726720213890076, 0.8732003569602966, 0.8689737319946289, 0.8762382864952087, 0.8798044919967651, 0.8717474341392517, 0.8825782537460327, 0.8840311765670776, 0.8845595121383667, 0.8885219693183899, 0.8865407705307007, 0.8887861371040344, 0.894069492816925, 0.8918240666389465, 0.8953903317451477, 0.8860124349594116, 0.8988244533538818, 0.8992207050323486, 0.8956544995307922, 0.9014661312103271, 0.89988112449646, 0.900409460067749, 0.9046360850334167, 0.9033153057098389], "val_loss": [2.0386126041412354, 1.5089809894561768, 1.0396978855133057, 0.8277255296707153, 0.7414798736572266, 0.6867381930351257, 0.6452507376670837, 0.6096968054771423, 0.5920496582984924, 0.5695558786392212, 0.550778865814209, 0.5315823554992676, 0.5166425704956055, 0.5040237307548523, 0.4927339255809784, 0.48035380244255066, 0.4752146899700165, 0.4640548527240753, 0.45926037430763245, 0.4498494863510132, 0.44989997148513794, 0.43486902117729187, 0.4302854835987091, 0.42699891328811646, 0.4222937822341919, 0.4179273545742035, 0.4156407117843628, 0.40615877509117126, 0.40567347407341003, 0.40483561158180237, 0.4008205533027649, 0.3957735300064087, 0.3910598158836365, 0.39842313528060913, 0.38378071784973145, 0.3824272155761719, 0.37983548641204834, 0.3832281529903412, 0.37993335723876953, 0.37290528416633606, 0.37028563022613525, 0.3697679340839386, 0.369826078414917, 0.3630952835083008, 0.3613884747028351, 0.3612003028392792, 0.3630628287792206, 0.35836127400398254, 0.35707563161849976, 0.3544061779975891, 0.35439038276672363, 0.35541149973869324, 0.34793493151664734, 0.355723112821579, 0.3566884696483612, 0.3480426073074341, 0.35176366567611694, 0.34468159079551697, 0.3469727337360382, 0.34757280349731445, 0.34379008412361145], "val_accuracy": [0.546999990940094, 0.6536666750907898, 0.6856666803359985, 0.7066666483879089, 0.7366666793823242, 0.7536666393280029, 0.7599999904632568, 0.7720000147819519, 0.7706666588783264, 0.7926666736602783, 0.7963333129882812, 0.7956666946411133, 0.8103333115577698, 0.809333324432373, 0.8220000267028809, 0.8226666450500488, 0.8243333101272583, 0.8330000042915344, 0.8349999785423279, 0.8370000123977661, 0.8333333134651184, 0.8429999947547913, 0.8463333249092102, 0.8446666598320007, 0.8476666808128357, 0.8479999899864197, 0.8450000286102295, 0.8506666421890259, 0.8496666550636292, 0.8529999852180481, 0.8556666374206543, 0.8556666374206543, 0.8586666584014893, 0.8526666760444641, 0.8576666712760925, 0.8610000014305115, 0.859000027179718, 0.8616666793823242, 0.8653333187103271, 0.8673333525657654, 0.8673333525657654, 0.8659999966621399, 0.8693333268165588, 0.8690000176429749, 0.8726666569709778, 0.8726666569709778, 0.8740000128746033, 0.8730000257492065, 0.871999979019165, 0.8759999871253967, 0.874666690826416, 0.871999979019165, 0.8806666731834412, 0.8776666522026062, 0.8706666827201843, 0.8820000290870667, 0.878333330154419, 0.878000020980835, 0.8806666731834412, 0.8793333172798157, 0.878333330154419]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8617143034934998, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2230563163757324, 1.8625428676605225, 1.380143642425537, 1.0889562368392944, 0.9270147681236267, 0.8187538385391235, 0.7604114413261414, 0.7209390997886658, 0.6851199269294739, 0.6432833075523376, 0.6280255317687988, 0.6088701486587524, 0.5821930766105652, 0.5699625015258789, 0.5529386401176453, 0.5497690439224243, 0.5233669281005859, 0.5104593634605408, 0.5020431280136108, 0.48461443185806274, 0.4719349443912506, 0.4644242227077484, 0.4590124487876892, 0.4446134865283966, 0.44197553396224976, 0.4450228214263916, 0.4303036630153656, 0.42238134145736694, 0.4198487401008606, 0.40770989656448364, 0.4027915596961975, 0.3919249475002289, 0.3919774293899536, 0.38518908619880676, 0.38015180826187134, 0.3782031834125519, 0.37156978249549866, 0.36154255270957947, 0.3580203652381897, 0.3493221700191498, 0.34378981590270996, 0.34564846754074097, 0.34382718801498413, 0.3354421555995941, 0.3330691456794739, 0.3312317132949829, 0.3200484812259674, 0.3157927691936493, 0.3130834102630615, 0.30917730927467346, 0.30598700046539307, 0.30001091957092285], "accuracy": [0.2731475234031677, 0.4892352521419525, 0.5654470920562744, 0.6227710843086243, 0.6687359809875488, 0.7028133869171143, 0.7280412316322327, 0.7368907928466797, 0.7497028112411499, 0.7648923397064209, 0.7640998363494873, 0.7773081660270691, 0.7865539789199829, 0.7935543656349182, 0.8009510040283203, 0.8006868362426758, 0.8107251524925232, 0.8137630224227905, 0.8191784620285034, 0.8257825970649719, 0.8296129703521729, 0.8318583965301514, 0.8341038227081299, 0.8428213000297546, 0.8411042094230652, 0.8413683772087097, 0.8436138033866882, 0.8459912538528442, 0.8487650156021118, 0.8564258217811584, 0.8548408150672913, 0.8557654023170471, 0.8605204224586487, 0.8594637513160706, 0.8623695969581604, 0.8625016212463379, 0.8671245574951172, 0.8668603897094727, 0.8709549307823181, 0.8721436858177185, 0.8771628737449646, 0.876370370388031, 0.8745211958885193, 0.8778232932090759, 0.8771628737449646, 0.8794082403182983, 0.8831065893173218, 0.8853520154953003, 0.8886540532112122, 0.8854840993881226, 0.8877294659614563, 0.8926165699958801], "val_loss": [2.035879611968994, 1.4974583387374878, 1.0265902280807495, 0.8293823003768921, 0.751423180103302, 0.6918237209320068, 0.6496959328651428, 0.6217209696769714, 0.5958920121192932, 0.5774737596511841, 0.5605610609054565, 0.5428167581558228, 0.5344545245170593, 0.5235724449157715, 0.5160942077636719, 0.5023302435874939, 0.4936378300189972, 0.48314493894577026, 0.48073798418045044, 0.4697502851486206, 0.46660104393959045, 0.4620650112628937, 0.45109957456588745, 0.44716909527778625, 0.4458892047405243, 0.44952136278152466, 0.4338824450969696, 0.44235822558403015, 0.4344336688518524, 0.42924991250038147, 0.4265195429325104, 0.4262460470199585, 0.4197690486907959, 0.4247056841850281, 0.41371965408325195, 0.41529279947280884, 0.4100596606731415, 0.4099690020084381, 0.4121609628200531, 0.4038035571575165, 0.4053688645362854, 0.40159595012664795, 0.40001171827316284, 0.39717644453048706, 0.4035884737968445, 0.39779844880104065, 0.39233022928237915, 0.3944530487060547, 0.3907112777233124, 0.39351361989974976, 0.39574405550956726, 0.3929605782032013], "val_accuracy": [0.5253333449363708, 0.6603333353996277, 0.6826666593551636, 0.7046666741371155, 0.7329999804496765, 0.7473333477973938, 0.7593333125114441, 0.7710000276565552, 0.7796666622161865, 0.7756666541099548, 0.7940000295639038, 0.8033333420753479, 0.8009999990463257, 0.8080000281333923, 0.8130000233650208, 0.8216666579246521, 0.8273333311080933, 0.8303333520889282, 0.8303333520889282, 0.8393333554267883, 0.8360000252723694, 0.8399999737739563, 0.8429999947547913, 0.8460000157356262, 0.8473333120346069, 0.8426666855812073, 0.8476666808128357, 0.8453333377838135, 0.846666693687439, 0.8533333539962769, 0.8513333201408386, 0.8506666421890259, 0.856333315372467, 0.8526666760444641, 0.8556666374206543, 0.8583333492279053, 0.8579999804496765, 0.8583333492279053, 0.856333315372467, 0.859333336353302, 0.8600000143051147, 0.8616666793823242, 0.8643333315849304, 0.8636666536331177, 0.862333357334137, 0.8646666407585144, 0.8690000176429749, 0.8669999837875366, 0.8659999966621399, 0.8650000095367432, 0.8666666746139526, 0.8673333525657654]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 6, 3, 0, 3, 6], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 6], [0, 4, 0, 0, 0, 0, 3, 1, 2, 4, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(beta, grad)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}, "mapping_values": [1, 9, 5, 4, 2, 2, 1, 1, 1, 2, 1, 1, 1, 23, 12, 11, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 6, 8, 3, 7, 6, 7, 7, 9, 0, 1, 6, 1, 8, 5], [0, 1, 0, 2, 0, 1, 3, 0, 2, 0, 3, 2], [39, 39, 98, 86, 16, 15], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 2, 0, 3, 5], [0, 1, 0, 3], [16, 16], [1, 1], [0], [0], [42], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [3, 0, 0, 3, 0, 0, 0, 4, 2, 0], [16, 99, 96, 99, 71, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 31, 19, 12, 6, 10, 6, 4, 2, 1, 0, 1, 1, 16, 8, 8, 5], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(alpha, tf.math.sqrt(tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(alpha, tf.math.add(tf.math.add(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad)), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), grad)))), tf.math.square(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 5, 1, 6, 3, 5], [0, 2, 0, 3], [16, 67], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 3, 8, 1, 4, 1, 4, 2, 8], [4, 0, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.09542857110500336, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.square(tf.math.subtract(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(sigma, tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [2.3100926876068115, 2.310448408126831, 2.3078083992004395, 2.3097236156463623, 2.3092544078826904, 2.308973789215088], "accuracy": [0.08968432247638702, 0.0886276587843895, 0.09206181764602661, 0.08981640636920929, 0.09272222965955734, 0.09192973375320435], "val_loss": [2.30774188041687, 2.3075923919677734, 2.3075029850006104, 2.307438373565674, 2.3073883056640625, 2.3073477745056152], "val_accuracy": [0.09466666728258133, 0.09466666728258133, 0.09433333575725555, 0.09433333575725555, 0.09399999678134918, 0.09399999678134918]}, "mapping_values": [1, 9, 5, 4, 2, 7, 4, 3, 2, 2, 1, 1, 1, 10, 5, 5, 3], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 6, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [5, 3, 3, 2, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 0, 4, 0, 3, 1, 1, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.0908571407198906, "mapping_values": [1, 10, 6, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 4, 2, 2, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.310577630996704, 2.3100969791412354, 2.309358596801758, 2.3096399307250977, 2.3090384006500244, 2.3087236881256104], "accuracy": [0.09100515395402908, 0.08915598690509796, 0.09377889335155487, 0.08849557489156723, 0.09206181764602661, 0.09272222965955734], "val_loss": [2.308530807495117, 2.3084514141082764, 2.3083763122558594, 2.3082969188690186, 2.3082144260406494, 2.3081283569335938], "val_accuracy": [0.08799999952316284, 0.08766666799783707, 0.08699999749660492, 0.08633333444595337, 0.08566666394472122, 0.08533333241939545]}}]