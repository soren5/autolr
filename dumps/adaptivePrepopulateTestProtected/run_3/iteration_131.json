[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.878000020980835, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223759174346924, 1.8681567907333374, 1.3971633911132812, 1.1021500825881958, 0.9438490867614746, 0.8268281817436218, 0.7700234055519104, 0.7182450890541077, 0.6839274764060974, 0.655160665512085, 0.6316797733306885, 0.6046612858772278, 0.586663544178009, 0.5732303261756897, 0.5552444458007812, 0.5382086634635925, 0.5205084085464478, 0.5141545534133911, 0.49866363406181335, 0.4905571937561035, 0.48713892698287964, 0.4630949795246124, 0.46493759751319885, 0.4510720372200012, 0.4456666111946106, 0.4411585330963135, 0.43109801411628723, 0.4194287657737732, 0.41647717356681824, 0.4177640676498413, 0.39898860454559326, 0.3982110619544983, 0.3941095173358917, 0.3838343918323517, 0.38270825147628784, 0.38132011890411377, 0.3706604242324829, 0.3630581796169281, 0.35970449447631836, 0.3585955500602722, 0.3488880693912506, 0.3406795859336853, 0.3434852361679077, 0.34305644035339355, 0.32770219445228577, 0.3274216949939728, 0.3164256513118744, 0.31487780809402466, 0.31453031301498413, 0.3020377457141876, 0.3013147711753845, 0.29238083958625793, 0.30650538206100464, 0.2886098325252533, 0.28784143924713135, 0.28922179341316223, 0.27991431951522827, 0.27731093764305115, 0.27029022574424744, 0.2677718997001648, 0.2672445476055145], "accuracy": [0.27182671427726746, 0.4913485646247864, 0.5609562993049622, 0.6095628142356873, 0.6618676781654358, 0.6997754573822021, 0.7215691208839417, 0.7407211661338806, 0.7508915662765503, 0.7592127919197083, 0.7656848430633545, 0.7798177003860474, 0.7849689722061157, 0.789459764957428, 0.7991018295288086, 0.806630551815033, 0.81112140417099, 0.8088759779930115, 0.8210275769233704, 0.8181217908859253, 0.826310932636261, 0.8333113193511963, 0.8294808864593506, 0.8401796221733093, 0.8409721255302429, 0.8436138033866882, 0.8459912538528442, 0.8519350290298462, 0.8485008478164673, 0.8490291833877563, 0.856689989566803, 0.8573504090309143, 0.8615770936012268, 0.8644828796386719, 0.8605204224586487, 0.8614450097084045, 0.8671245574951172, 0.8726720213890076, 0.8732003569602966, 0.8689737319946289, 0.8762382864952087, 0.8798044919967651, 0.8717474341392517, 0.8825782537460327, 0.8840311765670776, 0.8845595121383667, 0.8885219693183899, 0.8865407705307007, 0.8887861371040344, 0.894069492816925, 0.8918240666389465, 0.8953903317451477, 0.8860124349594116, 0.8988244533538818, 0.8992207050323486, 0.8956544995307922, 0.9014661312103271, 0.89988112449646, 0.900409460067749, 0.9046360850334167, 0.9033153057098389], "val_loss": [2.0386126041412354, 1.5089809894561768, 1.0396978855133057, 0.8277255296707153, 0.7414798736572266, 0.6867381930351257, 0.6452507376670837, 0.6096968054771423, 0.5920496582984924, 0.5695558786392212, 0.550778865814209, 0.5315823554992676, 0.5166425704956055, 0.5040237307548523, 0.4927339255809784, 0.48035380244255066, 0.4752146899700165, 0.4640548527240753, 0.45926037430763245, 0.4498494863510132, 0.44989997148513794, 0.43486902117729187, 0.4302854835987091, 0.42699891328811646, 0.4222937822341919, 0.4179273545742035, 0.4156407117843628, 0.40615877509117126, 0.40567347407341003, 0.40483561158180237, 0.4008205533027649, 0.3957735300064087, 0.3910598158836365, 0.39842313528060913, 0.38378071784973145, 0.3824272155761719, 0.37983548641204834, 0.3832281529903412, 0.37993335723876953, 0.37290528416633606, 0.37028563022613525, 0.3697679340839386, 0.369826078414917, 0.3630952835083008, 0.3613884747028351, 0.3612003028392792, 0.3630628287792206, 0.35836127400398254, 0.35707563161849976, 0.3544061779975891, 0.35439038276672363, 0.35541149973869324, 0.34793493151664734, 0.355723112821579, 0.3566884696483612, 0.3480426073074341, 0.35176366567611694, 0.34468159079551697, 0.3469727337360382, 0.34757280349731445, 0.34379008412361145], "val_accuracy": [0.546999990940094, 0.6536666750907898, 0.6856666803359985, 0.7066666483879089, 0.7366666793823242, 0.7536666393280029, 0.7599999904632568, 0.7720000147819519, 0.7706666588783264, 0.7926666736602783, 0.7963333129882812, 0.7956666946411133, 0.8103333115577698, 0.809333324432373, 0.8220000267028809, 0.8226666450500488, 0.8243333101272583, 0.8330000042915344, 0.8349999785423279, 0.8370000123977661, 0.8333333134651184, 0.8429999947547913, 0.8463333249092102, 0.8446666598320007, 0.8476666808128357, 0.8479999899864197, 0.8450000286102295, 0.8506666421890259, 0.8496666550636292, 0.8529999852180481, 0.8556666374206543, 0.8556666374206543, 0.8586666584014893, 0.8526666760444641, 0.8576666712760925, 0.8610000014305115, 0.859000027179718, 0.8616666793823242, 0.8653333187103271, 0.8673333525657654, 0.8673333525657654, 0.8659999966621399, 0.8693333268165588, 0.8690000176429749, 0.8726666569709778, 0.8726666569709778, 0.8740000128746033, 0.8730000257492065, 0.871999979019165, 0.8759999871253967, 0.874666690826416, 0.871999979019165, 0.8806666731834412, 0.8776666522026062, 0.8706666827201843, 0.8820000290870667, 0.878333330154419, 0.878000020980835, 0.8806666731834412, 0.8793333172798157, 0.878333330154419]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8662857413291931, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223543405532837, 1.868619441986084, 1.4112921953201294, 1.1025444269180298, 0.9378675222396851, 0.8401660919189453, 0.7715511918067932, 0.7152183055877686, 0.6920247673988342, 0.6583901643753052, 0.6351954340934753, 0.6069275140762329, 0.5921091437339783, 0.5744845271110535, 0.5640845894813538, 0.5487300753593445, 0.5355029106140137, 0.5206193923950195, 0.5113158226013184, 0.4946858882904053, 0.4898959994316101, 0.47261518239974976, 0.47313380241394043, 0.4665203392505646, 0.4513043761253357, 0.4373016059398651, 0.43507781624794006, 0.4292013645172119, 0.42306017875671387, 0.41390669345855713, 0.4101543426513672, 0.4027647376060486, 0.39805305004119873, 0.3902096748352051, 0.3858184814453125, 0.37443971633911133, 0.37115323543548584, 0.36746689677238464, 0.35609203577041626, 0.350956529378891, 0.34651219844818115, 0.3433930575847626, 0.3441072106361389, 0.33221057057380676, 0.3285829722881317, 0.33050188422203064, 0.31975406408309937, 0.3193400204181671, 0.3212757408618927, 0.3099685609340668, 0.30495864152908325, 0.30100512504577637, 0.29977190494537354, 0.28789085149765015, 0.2828625738620758, 0.279480516910553, 0.2772676944732666, 0.27633151412010193, 0.27887070178985596, 0.2691243886947632, 0.27456873655319214, 0.26107558608055115, 0.2555907368659973, 0.24843528866767883, 0.2482592910528183, 0.24175657331943512, 0.24332217872142792], "accuracy": [0.27539294958114624, 0.48566898703575134, 0.5670320987701416, 0.6235635876655579, 0.6696605682373047, 0.7003037929534912, 0.7250033020973206, 0.7421740889549255, 0.7493065595626831, 0.7640998363494873, 0.7697794437408447, 0.7841764688491821, 0.7880068421363831, 0.7913089394569397, 0.7993659973144531, 0.7981772422790527, 0.8076872229576111, 0.8148196935653687, 0.8191784620285034, 0.824329674243927, 0.8227446675300598, 0.833179235458374, 0.8333113193511963, 0.8343679904937744, 0.8408400416374207, 0.8412362933158875, 0.8473120927810669, 0.8479725122451782, 0.8492933511734009, 0.857218325138092, 0.8565579056739807, 0.8568220734596252, 0.8578787446022034, 0.8578787446022034, 0.8638224601745605, 0.8677849769592285, 0.8697662353515625, 0.8683133125305176, 0.8705587387084961, 0.8720116019248962, 0.8758420348167419, 0.8774270415306091, 0.878351628780365, 0.8787478804588318, 0.8837670087814331, 0.8812574148178101, 0.8857482671737671, 0.8849557638168335, 0.8860124349594116, 0.8879936337471008, 0.8919561505317688, 0.8914278149604797, 0.8912957310676575, 0.8969752788543701, 0.897899866104126, 0.8996169567108154, 0.8989565372467041, 0.8981640338897705, 0.9014661312103271, 0.9029190540313721, 0.8993527889251709, 0.902390718460083, 0.9071456789970398, 0.9097873568534851, 0.9078060984611511, 0.9095231890678406, 0.9117686152458191], "val_loss": [2.0375313758850098, 1.5197275876998901, 1.0494080781936646, 0.8313901424407959, 0.7387109398841858, 0.680234432220459, 0.6349177360534668, 0.6011374592781067, 0.5779520869255066, 0.5596839189529419, 0.5439820289611816, 0.5246361494064331, 0.5170218348503113, 0.5019504427909851, 0.4951227903366089, 0.4845236837863922, 0.4755478501319885, 0.4650719463825226, 0.4565398097038269, 0.4519941508769989, 0.4432593286037445, 0.4398825764656067, 0.4332357943058014, 0.43991348147392273, 0.42375072836875916, 0.41752293705940247, 0.4154759645462036, 0.4044179618358612, 0.40601956844329834, 0.404020756483078, 0.4013350009918213, 0.3990222215652466, 0.39612504839897156, 0.3934876620769501, 0.38674280047416687, 0.385284423828125, 0.38061922788619995, 0.3805078864097595, 0.37891528010368347, 0.3701157569885254, 0.37535929679870605, 0.3700978457927704, 0.37109026312828064, 0.3715039789676666, 0.36631760001182556, 0.3622991442680359, 0.35862165689468384, 0.3705899119377136, 0.3572216033935547, 0.35797110199928284, 0.3487870693206787, 0.3534384071826935, 0.3548020124435425, 0.35232311487197876, 0.35137230157852173, 0.3439028263092041, 0.34884747862815857, 0.35584843158721924, 0.34137430787086487, 0.3522959053516388, 0.34039872884750366, 0.3400295674800873, 0.3409770131111145, 0.34501126408576965, 0.3451807498931885, 0.33653852343559265, 0.3410022258758545], "val_accuracy": [0.5323333144187927, 0.6506666541099548, 0.684333324432373, 0.7099999785423279, 0.7323333621025085, 0.7566666603088379, 0.765666663646698, 0.7696666717529297, 0.7820000052452087, 0.7879999876022339, 0.7916666865348816, 0.8046666383743286, 0.8056666851043701, 0.8100000023841858, 0.8086666464805603, 0.8140000104904175, 0.8159999847412109, 0.8226666450500488, 0.8256666660308838, 0.82833331823349, 0.8326666951179504, 0.8349999785423279, 0.8389999866485596, 0.8339999914169312, 0.8370000123977661, 0.846666693687439, 0.8410000205039978, 0.8510000109672546, 0.8493333458900452, 0.8519999980926514, 0.8510000109672546, 0.8496666550636292, 0.8503333330154419, 0.8523333072662354, 0.859666645526886, 0.8546666502952576, 0.8603333234786987, 0.8579999804496765, 0.8583333492279053, 0.8619999885559082, 0.8610000014305115, 0.8653333187103271, 0.8640000224113464, 0.8573333621025085, 0.8633333444595337, 0.8636666536331177, 0.8666666746139526, 0.8603333234786987, 0.8706666827201843, 0.8679999709129333, 0.8723333477973938, 0.8706666827201843, 0.8663333058357239, 0.8679999709129333, 0.875, 0.871999979019165, 0.8733333349227905, 0.8693333268165588, 0.8776666522026062, 0.8713333606719971, 0.878000020980835, 0.8813333511352539, 0.8763333559036255, 0.8809999823570251, 0.8773333430290222, 0.878333330154419, 0.8786666393280029]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1], [0, 2, 3, 0, 0, 8], [0, 1, 0, 1], [39, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 2, 3, 1, 8, 5, 3, 6, 8, 7, 5, 1, 3, 6, 7, 7, 1, 5, 9, 6, 5, 7, 9], [0, 2, 0, 3, 4, 0, 3, 2, 1, 5, 4, 2, 3], [65, 16, 97, 25, 69], [0, 1], [0], [0], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1], [6, 3, 3, 6, 8, 1, 4, 5, 4, 2, 8], [4, 0, 0, 3, 0, 0, 3, 0, 2, 0], [16, 49, 63, 99, 61, 92]], "fitness": -0.2662857174873352, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.negative(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.square(tf.math.multiply(tf.math.divide_no_nan(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(grad, tf.math.square(grad))))))), tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(tf.math.subtract(grad, beta), alpha), grad)), grad), tf.math.square(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.square(tf.math.add(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), beta)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.3218743801116943, 2.236402750015259, 2.2279438972473145, 2.5552446842193604, 2.2661633491516113, 2.2947890758514404, 2.2035927772521973, 2.3065879344940186, 2.3044724464416504, 2.3034396171569824, 2.300248861312866], "accuracy": [0.2218993455171585, 0.18121780455112457, 0.1904636174440384, 0.15374454855918884, 0.1394795924425125, 0.12534672021865845, 0.23365473747253418, 0.09496764093637466, 0.09311848133802414, 0.10077928751707077, 0.1228371411561966], "val_loss": [2.2951903343200684, 2.2997488975524902, 3.9983441829681396, 2.1467292308807373, 2.302147388458252, 2.195798397064209, 2.306652307510376, 2.3027868270874023, 2.3023719787597656, 2.3017144203186035, 2.292231798171997], "val_accuracy": [0.10266666859388351, 0.16599999368190765, 0.25066667795181274, 0.11366666853427887, 0.1496666669845581, 0.26499998569488525, 0.10066666454076767, 0.10066666454076767, 0.10133333504199982, 0.18400000035762787, 0.1783333271741867]}, "mapping_values": [1, 9, 6, 3, 2, 36, 23, 13, 5, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 23}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 2], [0, 1, 0, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 0, 0, 3], [16, 16, 59], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 6, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.15000000596046448, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma), alpha)", "other_info": {"loss": [3.4083227686288753e+18, 3.925378007195189e+18, 3.771217131132158e+18, 3.825112992102482e+18, 3.994594463186944e+18, 3.9918382624140165e+18], "accuracy": [0.11478008329868317, 0.11557257920503616, 0.12495046854019165, 0.1208558976650238, 0.120459645986557, 0.12032756209373474], "val_loss": [3.5413133729328005e+18, 3.5413133729328005e+18, 3.5413133729328005e+18, 3.5413128231769866e+18, 3.541311448787452e+18, 3.541306775863034e+18], "val_accuracy": [0.16066665947437286, 0.16066665947437286, 0.16066665947437286, 0.16066665947437286, 0.16066665947437286, 0.16066665947437286]}, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 3, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 2], [0, 1, 0, 2, 3], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [1, 3, 0, 3], [16, 16], [1, 1], [8], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [6, 3, 3, 2, 8, 1, 4, 1, 4, 2, 9, 8, 7, 8], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 36, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 1, 0, 1, 1, 24, 14, 10, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.subtract(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, tf.math.add(grad, tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma)))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(alpha)), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 6], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 0, 1, 1], [2, 7], [0, 1, 0], [99, 63], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 2, 1, 4, 1, 5, 2, 8], [0, 4, 0, 3, 0, 4, 1, 1, 2, 0], [62, 99, 7, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 3, 3, 2, 5, 2, 3, 2, 17, 8, 9, 3], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), grad), tf.math.divide_no_nan(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))), tf.math.pow(grad, tf.math.subtract(alpha, alpha)))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}]