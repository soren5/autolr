[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8862857222557068, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222418785095215, 1.8632627725601196, 1.3950724601745605, 1.0979150533676147, 0.9474178552627563, 0.8543937802314758, 0.7783248424530029, 0.7376496195793152, 0.7006842494010925, 0.6746688485145569, 0.647553563117981, 0.6295329928398132, 0.6112891435623169, 0.58865886926651, 0.5667527914047241, 0.5575993657112122, 0.5467248558998108, 0.5289703011512756, 0.5205997824668884, 0.5110849142074585, 0.5064045786857605, 0.4867391884326935, 0.4731372892856598, 0.47443822026252747, 0.46410614252090454, 0.4545186161994934, 0.445819616317749, 0.4367676079273224, 0.4321127235889435, 0.4275900721549988, 0.4177286922931671, 0.40700381994247437, 0.40491974353790283, 0.3923063576221466, 0.38597339391708374, 0.37638187408447266, 0.3749813437461853, 0.3708414137363434, 0.369646281003952, 0.3635149896144867, 0.3594855070114136, 0.3503628671169281, 0.3338625133037567, 0.3396199643611908, 0.33679017424583435, 0.3303111493587494, 0.3275522291660309, 0.3153315782546997, 0.3093845844268799, 0.31660354137420654, 0.313541054725647, 0.3128948211669922, 0.2977619469165802, 0.30230653285980225, 0.298944890499115, 0.28947505354881287, 0.2822195291519165, 0.2778712213039398, 0.2668195366859436, 0.26853811740875244, 0.26283398270606995, 0.2662760019302368, 0.2576100528240204, 0.25102800130844116, 0.2539205849170685, 0.25087955594062805, 0.24508193135261536], "accuracy": [0.280940443277359, 0.48685774207115173, 0.5665037631988525, 0.616299033164978, 0.6625280380249023, 0.6930392384529114, 0.7169462442398071, 0.7320036888122559, 0.7375511527061462, 0.7491744756698608, 0.7672698497772217, 0.7670056819915771, 0.7745344042778015, 0.7876105904579163, 0.7906485199928284, 0.7994980812072754, 0.802800178527832, 0.8068947196006775, 0.8117818236351013, 0.8153480291366577, 0.8181217908859253, 0.829216718673706, 0.8300092220306396, 0.8238013386726379, 0.8325188159942627, 0.8385946154594421, 0.8372738361358643, 0.842028796672821, 0.8451988101005554, 0.8481045961380005, 0.8515387773513794, 0.8549728989601135, 0.8516708612442017, 0.8603883385658264, 0.8598600029945374, 0.8667283058166504, 0.8636903762817383, 0.8636903762817383, 0.8677849769592285, 0.8704266548156738, 0.8758420348167419, 0.8739928603172302, 0.8790120482444763, 0.8768987059593201, 0.8751816153526306, 0.8794082403182983, 0.8813894987106323, 0.8860124349594116, 0.8874653577804565, 0.8856161832809448, 0.8838990926742554, 0.8877294659614563, 0.8918240666389465, 0.8918240666389465, 0.8922203183174133, 0.8953903317451477, 0.89552241563797, 0.9002773761749268, 0.9049002528190613, 0.9034473896026611, 0.9035794734954834, 0.9038436412811279, 0.9085986018180847, 0.9095231890678406, 0.9095231890678406, 0.909259021282196, 0.910711944103241], "val_loss": [2.0414316654205322, 1.5168657302856445, 1.0494927167892456, 0.8396123051643372, 0.7532041668891907, 0.6975494027137756, 0.6532282829284668, 0.6188269853591919, 0.5909113883972168, 0.5747429728507996, 0.5562715530395508, 0.5392115712165833, 0.5226473808288574, 0.5080817937850952, 0.49551260471343994, 0.4949219524860382, 0.48097461462020874, 0.46894019842147827, 0.4645398259162903, 0.4554585814476013, 0.44845467805862427, 0.44272810220718384, 0.4365209937095642, 0.4303407371044159, 0.42757970094680786, 0.42137086391448975, 0.4158954322338104, 0.4094981253147125, 0.40614867210388184, 0.40746310353279114, 0.39686036109924316, 0.39440515637397766, 0.39069101214408875, 0.3898474872112274, 0.3889416456222534, 0.3833497166633606, 0.387736976146698, 0.3792175352573395, 0.3778442442417145, 0.37528878450393677, 0.3729557991027832, 0.37016138434410095, 0.36690768599510193, 0.36455467343330383, 0.36386409401893616, 0.3628668487071991, 0.365796834230423, 0.36076274514198303, 0.3599783480167389, 0.35867130756378174, 0.35705167055130005, 0.35411083698272705, 0.3552299737930298, 0.3651564121246338, 0.36276260018348694, 0.34837988018989563, 0.34821584820747375, 0.3528410792350769, 0.3496720790863037, 0.3506317138671875, 0.34951722621917725, 0.3443804085254669, 0.345913290977478, 0.3461855351924896, 0.3431210517883301, 0.348863810300827, 0.3426092565059662], "val_accuracy": [0.5373333096504211, 0.6570000052452087, 0.6759999990463257, 0.7110000252723694, 0.7286666631698608, 0.7419999837875366, 0.7590000033378601, 0.7616666555404663, 0.7836666703224182, 0.7903333306312561, 0.7886666655540466, 0.8006666898727417, 0.809333324432373, 0.8183333277702332, 0.8146666884422302, 0.8140000104904175, 0.8233333230018616, 0.8289999961853027, 0.8326666951179504, 0.8363333344459534, 0.8389999866485596, 0.8366666436195374, 0.8363333344459534, 0.8489999771118164, 0.847000002861023, 0.8519999980926514, 0.8533333539962769, 0.8560000061988831, 0.8573333621025085, 0.8539999723434448, 0.8619999885559082, 0.862666666507721, 0.8656666874885559, 0.8629999756813049, 0.8646666407585144, 0.8636666536331177, 0.8603333234786987, 0.8659999966621399, 0.8673333525657654, 0.8673333525657654, 0.8713333606719971, 0.8703333139419556, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8730000257492065, 0.871999979019165, 0.874666690826416, 0.875333309173584, 0.874666690826416, 0.875, 0.8786666393280029, 0.8776666522026062, 0.8743333220481873, 0.8723333477973938, 0.8833333253860474, 0.8826666474342346, 0.8790000081062317, 0.8836666941642761, 0.878333330154419, 0.8820000290870667, 0.887666642665863, 0.8820000290870667, 0.8803333044052124, 0.8830000162124634, 0.8846666812896729, 0.8856666684150696]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8582857251167297, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2231900691986084, 1.869710922241211, 1.406923532485962, 1.0959837436676025, 0.9421800374984741, 0.8427822589874268, 0.7687142491340637, 0.7226787209510803, 0.6882616281509399, 0.6541658043861389, 0.633019208908081, 0.6122960448265076, 0.5817956924438477, 0.5816370248794556, 0.5570018887519836, 0.5437235832214355, 0.534119725227356, 0.5207470059394836, 0.5118340849876404, 0.49466681480407715, 0.48591604828834534, 0.4792802333831787, 0.4715433418750763, 0.46604689955711365, 0.4643116593360901, 0.43960702419281006, 0.438602089881897, 0.43103083968162537, 0.42263999581336975, 0.41793715953826904, 0.4113679826259613, 0.40858885645866394, 0.4019966423511505, 0.3914768397808075, 0.3858822286128998, 0.3822575509548187, 0.37819939851760864, 0.3628031015396118, 0.3628000319004059, 0.35539746284484863, 0.3511350750923157, 0.3477049171924591, 0.3403552770614624, 0.33580371737480164, 0.33599963784217834, 0.33152857422828674, 0.31977716088294983, 0.3219440281391144, 0.3115004003047943, 0.30418673157691956, 0.3154418468475342, 0.303534597158432, 0.29811573028564453, 0.2922859787940979, 0.29113441705703735, 0.2877231538295746, 0.2803065776824951, 0.27664339542388916, 0.2771663963794708, 0.27192938327789307, 0.27105051279067993, 0.2594124972820282, 0.2514647841453552, 0.2525777816772461, 0.249281108379364, 0.2508540451526642, 0.24036343395709991, 0.2369954138994217, 0.23457643389701843, 0.23582668602466583, 0.2282339483499527, 0.2288655936717987, 0.22484314441680908, 0.22047059237957, 0.2112899273633957, 0.2170814722776413, 0.2181365042924881, 0.2105921506881714, 0.20940813422203064, 0.203427255153656, 0.19723773002624512], "accuracy": [0.27777042984962463, 0.4850085973739624, 0.5659754276275635, 0.6217144131660461, 0.6674151420593262, 0.6993792057037354, 0.7280412316322327, 0.7411174178123474, 0.7473253011703491, 0.7633073329925537, 0.7729493975639343, 0.7791573405265808, 0.7909126877784729, 0.7905164361000061, 0.7936864495277405, 0.8087438941001892, 0.8088759779930115, 0.8150838613510132, 0.8149517774581909, 0.8224804997444153, 0.8245938420295715, 0.8310658931732178, 0.8329150676727295, 0.8372738361358643, 0.8333113193511963, 0.8457271456718445, 0.8425571322441101, 0.8466516733169556, 0.8488970994949341, 0.8491612672805786, 0.8555012345314026, 0.8524633646011353, 0.8545766472816467, 0.8598600029945374, 0.8634262084960938, 0.8651432991027832, 0.8643507957458496, 0.872407853603363, 0.8721436858177185, 0.8713511824607849, 0.8745211958885193, 0.8767666220664978, 0.8813894987106323, 0.8786157965660095, 0.8767666220664978, 0.883238673210144, 0.8831065893173218, 0.8829745054244995, 0.8850878477096558, 0.8905032277107239, 0.887597382068634, 0.8931449055671692, 0.8902390599250793, 0.893541157245636, 0.8914278149604797, 0.8931449055671692, 0.8963148593902588, 0.8992207050323486, 0.897899866104126, 0.9021265506744385, 0.8996169567108154, 0.9066173434257507, 0.910711944103241, 0.9080702662467957, 0.9109761118888855, 0.9083344340324402, 0.9120327830314636, 0.9115044474601746, 0.9186369180679321, 0.9125610589981079, 0.9159952402114868, 0.9157310724258423, 0.9202219247817993, 0.9206181764602661, 0.9224672913551331, 0.9214106202125549, 0.9183727502822876, 0.9222031235694885, 0.9215427041053772, 0.9289394021034241, 0.927882730960846], "val_loss": [2.0445010662078857, 1.5311334133148193, 1.0597646236419678, 0.8450967669487, 0.753623366355896, 0.6999531984329224, 0.6544144749641418, 0.6216890215873718, 0.6017517447471619, 0.5752196311950684, 0.5561802387237549, 0.5418576598167419, 0.5317183136940002, 0.5138230919837952, 0.5010949969291687, 0.4903213381767273, 0.48053792119026184, 0.48136401176452637, 0.4664820432662964, 0.4605725407600403, 0.4505344331264496, 0.4478071331977844, 0.44173145294189453, 0.4386460781097412, 0.43593087792396545, 0.42323535680770874, 0.42374756932258606, 0.41814616322517395, 0.40877506136894226, 0.4187797009944916, 0.4034108817577362, 0.40338703989982605, 0.3999485671520233, 0.3919758200645447, 0.3859274983406067, 0.391194611787796, 0.3831501603126526, 0.38755175471305847, 0.383226603269577, 0.37548649311065674, 0.37542805075645447, 0.3731178343296051, 0.37274637818336487, 0.3653090000152588, 0.3677433133125305, 0.36415645480155945, 0.3670160174369812, 0.3588469326496124, 0.35711973905563354, 0.35539960861206055, 0.3561045229434967, 0.35569319128990173, 0.3534698784351349, 0.35008665919303894, 0.35001444816589355, 0.3484570384025574, 0.3519820272922516, 0.35123562812805176, 0.3496679663658142, 0.3501342236995697, 0.3454221487045288, 0.34716978669166565, 0.34580785036087036, 0.34554433822631836, 0.34098029136657715, 0.34974390268325806, 0.3437357246875763, 0.3400898575782776, 0.3447871804237366, 0.3485250771045685, 0.33301088213920593, 0.3424588739871979, 0.33583423495292664, 0.33768630027770996, 0.3422793745994568, 0.33852458000183105, 0.3446643352508545, 0.3397987186908722, 0.3370667099952698, 0.3394043445587158, 0.34590113162994385], "val_accuracy": [0.5226666927337646, 0.653333306312561, 0.6746666431427002, 0.7046666741371155, 0.7273333072662354, 0.7416666746139526, 0.7509999871253967, 0.768666684627533, 0.7726666927337646, 0.7803333401679993, 0.7900000214576721, 0.7916666865348816, 0.8006666898727417, 0.8016666769981384, 0.8116666674613953, 0.8146666884422302, 0.8199999928474426, 0.8199999928474426, 0.8240000009536743, 0.8289999961853027, 0.8373333215713501, 0.8376666903495789, 0.8356666564941406, 0.8363333344459534, 0.8376666903495789, 0.847000002861023, 0.8423333168029785, 0.8453333377838135, 0.8489999771118164, 0.8460000157356262, 0.8493333458900452, 0.8476666808128357, 0.8506666421890259, 0.8526666760444641, 0.8573333621025085, 0.8583333492279053, 0.859666645526886, 0.859000027179718, 0.8606666922569275, 0.8663333058357239, 0.8576666712760925, 0.8646666407585144, 0.8676666617393494, 0.8690000176429749, 0.8700000047683716, 0.8700000047683716, 0.8690000176429749, 0.8700000047683716, 0.8703333139419556, 0.8709999918937683, 0.8706666827201843, 0.8709999918937683, 0.871999979019165, 0.8736666440963745, 0.8756666779518127, 0.875, 0.8766666650772095, 0.875333309173584, 0.8756666779518127, 0.8769999742507935, 0.8790000081062317, 0.8766666650772095, 0.8763333559036255, 0.878333330154419, 0.8813333511352539, 0.8740000128746033, 0.8809999823570251, 0.8833333253860474, 0.8799999952316284, 0.8786666393280029, 0.8859999775886536, 0.8853333592414856, 0.8853333592414856, 0.8809999823570251, 0.8809999823570251, 0.8863333463668823, 0.8790000081062317, 0.8799999952316284, 0.8833333253860474, 0.8826666474342346, 0.8813333511352539]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 9, 3, 0, 3], [0, 1, 0, 2], [95, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [2, 2, 3, 0, 3, 5, 0, 7, 4], [0, 2, 0, 3, 4, 0, 3], [16, 16, 19], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 3, 8, 0, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 0, 1, 16, 9, 7, 3, 2, 1, 1, 0, 17, 9, 8, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.negative(tf.math.add(grad, tf.math.pow(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.sqrt(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 2, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 9, 0, 3, 5], [0, 2, 2, 3], [16, 16], [0, 0, 0, 1, 1], [0, 4, 5], [4, 0], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 5, 4, 1, 2, 5, 3, 2, 1, 1, 0, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.square(grad), tf.constant(1.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.30325984954834, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 0], [2, 3, 3, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [51, 16], [1, 1], [0], [0], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 2, 2, 8], [0, 0, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 94]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 1, 10, 6, 4, 2, 1, 0, 1, 1, 16, 8, 8, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.multiply(grad, tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 6, 1, 3, 3, 8, 1, 4, 6, 6, 0, 6, 5, 0, 1, 2, 4, 9, 3, 2, 2, 1, 5, 0], [0, 1, 0, 2, 3, 0, 2, 3, 2, 0, 2, 1, 1, 2, 3, 3, 0, 1, 0], [39, 39, 4, 17, 42, 35, 18], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [4, 2, 3, 0, 3, 5, 2], [0, 2, 0, 3, 3, 0], [16, 16, 17], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 1, 8, 1, 4, 2, 4, 2, 8], [0, 0, 2, 3, 2, 0, 3, 1, 2, 0], [7, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 47, 28, 19, 7, 13, 7, 6, 3, 2, 1, 1, 1, 21, 11, 10, 4], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.multiply(tf.math.multiply(tf.math.sqrt(grad), tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), grad), tf.math.divide_no_nan(grad, grad)), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), grad)), tf.math.square(tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.math.pow(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), grad)))))), tf.math.multiply(grad, tf.math.add(tf.math.add(tf.math.subtract(tf.math.square(grad), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), alpha), tf.math.negative(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.add(grad, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(beta, sigma))), tf.math.add(beta, tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}]