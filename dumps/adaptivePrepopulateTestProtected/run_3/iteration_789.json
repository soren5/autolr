[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8822857141494751, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585750579834, 1.8655762672424316, 1.394430160522461, 1.0773245096206665, 0.9378393888473511, 0.8425824046134949, 0.7776632308959961, 0.736241340637207, 0.6971188187599182, 0.6732122302055359, 0.644855797290802, 0.6276965141296387, 0.6100340485572815, 0.5899673104286194, 0.5746485590934753, 0.5484329462051392, 0.5425268411636353, 0.5357900857925415, 0.5214410424232483, 0.5127171874046326, 0.4895091950893402, 0.4932740032672882, 0.48551443219184875, 0.47113916277885437, 0.46571049094200134, 0.450914591550827, 0.438728004693985, 0.4414178729057312, 0.4245515465736389, 0.4182806611061096, 0.4126766324043274, 0.41352686285972595, 0.4031256139278412, 0.40064555406570435, 0.3982388377189636, 0.38566267490386963, 0.38400527834892273, 0.3741128146648407, 0.36422181129455566, 0.36170411109924316, 0.35991787910461426, 0.35666367411613464, 0.3521813750267029, 0.34583958983421326, 0.34736087918281555, 0.34181836247444153, 0.33650368452072144, 0.33141741156578064, 0.3230496346950531, 0.3225416839122772, 0.315096914768219, 0.3059031665325165, 0.3058394491672516, 0.3017319440841675, 0.29568877816200256, 0.2933836281299591, 0.28774771094322205, 0.2856961190700531, 0.2802303731441498, 0.2779994010925293, 0.274711549282074, 0.2719985842704773, 0.2586328387260437, 0.2598455548286438, 0.2622571289539337, 0.25739434361457825, 0.2502012252807617, 0.2544722855091095, 0.24556587636470795, 0.24580754339694977, 0.23948103189468384, 0.23949603736400604, 0.23484042286872864, 0.22871272265911102, 0.2256491780281067, 0.22479403018951416, 0.21744707226753235, 0.21390178799629211, 0.21272219717502594], "accuracy": [0.2785629332065582, 0.49451854825019836, 0.559899628162384, 0.6215823292732239, 0.6654338836669922, 0.6950204968452454, 0.7181349992752075, 0.7322678565979004, 0.7441553473472595, 0.7483819723129272, 0.7627789974212646, 0.7717606425285339, 0.7728173136711121, 0.78113853931427, 0.7882710099220276, 0.7993659973144531, 0.7976489067077637, 0.8074230551719666, 0.8128384351730347, 0.8198388814926147, 0.8212917447090149, 0.819970965385437, 0.8272355198860168, 0.8350284099578857, 0.8305375576019287, 0.8387266993522644, 0.846387505531311, 0.8433496356010437, 0.8504821062088013, 0.8524633646011353, 0.8535200357437134, 0.854708731174469, 0.856689989566803, 0.8551049828529358, 0.8593316674232483, 0.8615770936012268, 0.8628978729248047, 0.8702945709228516, 0.8691058158874512, 0.871879518032074, 0.8722757697105408, 0.8691058158874512, 0.8733324408531189, 0.8800686597824097, 0.8795403242111206, 0.8755778670310974, 0.8768987059593201, 0.8829745054244995, 0.8824461698532104, 0.8823140859603882, 0.887201189994812, 0.8897107243537903, 0.8889182209968567, 0.8927486538887024, 0.8902390599250793, 0.8953903317451477, 0.8980319499969482, 0.8976356983184814, 0.900409460067749, 0.89552241563797, 0.9025228023529053, 0.8989565372467041, 0.9056927561759949, 0.9085986018180847, 0.9030511379241943, 0.9066173434257507, 0.9101836085319519, 0.9083344340324402, 0.909259021282196, 0.9099194407463074, 0.9126931428909302, 0.9140139818191528, 0.9119006991386414, 0.9171839952468872, 0.9169198274612427, 0.9185048341751099, 0.9218068718910217, 0.9185048341751099, 0.9196935892105103], "val_loss": [2.033445358276367, 1.5042319297790527, 1.0271512269973755, 0.8147247433662415, 0.7278039455413818, 0.68117356300354, 0.6306353211402893, 0.5966841578483582, 0.5751398801803589, 0.5460951328277588, 0.5314993858337402, 0.509799063205719, 0.4957965612411499, 0.4792602062225342, 0.46671679615974426, 0.45267683267593384, 0.4441072940826416, 0.4356139600276947, 0.42943108081817627, 0.4255247414112091, 0.41811680793762207, 0.4163394272327423, 0.39929893612861633, 0.3969916105270386, 0.39089226722717285, 0.387652188539505, 0.3844633102416992, 0.3824205696582794, 0.3749690353870392, 0.3701930642127991, 0.36967378854751587, 0.36689504981040955, 0.3585263788700104, 0.3587398827075958, 0.36267170310020447, 0.3561091423034668, 0.35379692912101746, 0.3499273955821991, 0.34701839089393616, 0.3467637896537781, 0.3424672484397888, 0.33951225876808167, 0.3386255204677582, 0.34044384956359863, 0.33945050835609436, 0.33684298396110535, 0.3322163224220276, 0.33181649446487427, 0.32827115058898926, 0.3312568664550781, 0.3297465741634369, 0.3256674110889435, 0.3234780728816986, 0.32119208574295044, 0.3232716917991638, 0.3209094703197479, 0.31944912672042847, 0.3157532513141632, 0.3144265413284302, 0.31676045060157776, 0.31425556540489197, 0.3131799101829529, 0.3147056996822357, 0.3154993951320648, 0.31771615147590637, 0.31545644998550415, 0.3127000629901886, 0.31382524967193604, 0.31026333570480347, 0.3147730529308319, 0.30829918384552, 0.3107443153858185, 0.31316936016082764, 0.30297672748565674, 0.30325081944465637, 0.30436232686042786, 0.3072424829006195, 0.30681705474853516, 0.3061434030532837], "val_accuracy": [0.5526666641235352, 0.6666666865348816, 0.687333345413208, 0.7083333134651184, 0.731333315372467, 0.7446666955947876, 0.7606666684150696, 0.762666642665863, 0.7873333096504211, 0.7889999747276306, 0.7973333597183228, 0.8056666851043701, 0.8193333148956299, 0.8259999752044678, 0.8289999961853027, 0.8410000205039978, 0.8453333377838135, 0.8450000286102295, 0.8489999771118164, 0.847000002861023, 0.8516666889190674, 0.856333315372467, 0.859333336353302, 0.856333315372467, 0.8633333444595337, 0.8640000224113464, 0.8656666874885559, 0.8646666407585144, 0.8679999709129333, 0.8696666955947876, 0.8640000224113464, 0.8686666488647461, 0.8713333606719971, 0.8709999918937683, 0.8703333139419556, 0.8723333477973938, 0.871999979019165, 0.874666690826416, 0.8723333477973938, 0.8759999871253967, 0.8726666569709778, 0.875333309173584, 0.8790000081062317, 0.8756666779518127, 0.8726666569709778, 0.8769999742507935, 0.8796666860580444, 0.8796666860580444, 0.8806666731834412, 0.8793333172798157, 0.8813333511352539, 0.8840000033378601, 0.8840000033378601, 0.8843333125114441, 0.8809999823570251, 0.8856666684150696, 0.8866666555404663, 0.8833333253860474, 0.8866666555404663, 0.8843333125114441, 0.8856666684150696, 0.8880000114440918, 0.887333333492279, 0.8883333206176758, 0.8866666555404663, 0.8896666765213013, 0.8863333463668823, 0.8853333592414856, 0.890999972820282, 0.8870000243186951, 0.8883333206176758, 0.8883333206176758, 0.8916666507720947, 0.8939999938011169, 0.8896666765213013, 0.8916666507720947, 0.890999972820282, 0.8926666378974915, 0.8913333415985107]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8619999885559082, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2213995456695557, 1.8625520467758179, 1.3784111738204956, 1.0783594846725464, 0.9222057461738586, 0.8254246711730957, 0.7522416710853577, 0.7111421823501587, 0.6754446625709534, 0.6577453017234802, 0.6225627064704895, 0.5988421440124512, 0.5891973376274109, 0.5631622076034546, 0.5485353469848633, 0.5388484001159668, 0.5276179313659668, 0.5058732628822327, 0.5052850842475891, 0.49147576093673706, 0.4822378158569336, 0.47563767433166504, 0.46405279636383057, 0.45854413509368896, 0.4539664387702942, 0.4451279938220978, 0.4364699423313141, 0.4289036691188812, 0.42337045073509216, 0.4138587713241577, 0.4011513292789459, 0.4001947343349457, 0.39451560378074646, 0.3899049162864685, 0.3823782503604889, 0.3780103325843811, 0.3724251687526703, 0.3711199462413788, 0.3698444962501526, 0.35370662808418274, 0.35062167048454285, 0.3504042327404022, 0.33988338708877563, 0.3366253972053528, 0.3366754353046417, 0.3258499801158905, 0.3223211169242859, 0.32384446263313293, 0.31921759247779846, 0.3164384365081787, 0.31088998913764954, 0.30296334624290466, 0.3042810261249542, 0.292459100484848, 0.29250481724739075, 0.2836552858352661, 0.2820938229560852, 0.281551718711853, 0.27006444334983826, 0.2690656781196594, 0.270903617143631, 0.26358115673065186, 0.2601022720336914, 0.2504546344280243, 0.2505030930042267, 0.25209975242614746, 0.24019797146320343, 0.23872196674346924, 0.23343494534492493, 0.22982938587665558], "accuracy": [0.2851670980453491, 0.4897635579109192, 0.5739004015922546, 0.6236956715583801, 0.6676793098449707, 0.7013604640960693, 0.7260599732398987, 0.7396644949913025, 0.7577598690986633, 0.76106196641922, 0.7771760821342468, 0.7816668748855591, 0.7882710099220276, 0.796328067779541, 0.8000264167785645, 0.8006868362426758, 0.8112534880638123, 0.8158763647079468, 0.8191784620285034, 0.8210275769233704, 0.8302733898162842, 0.8286884427070618, 0.8321225643157959, 0.8333113193511963, 0.8366134166717529, 0.8374059200286865, 0.8469158411026001, 0.844010055065155, 0.8504821062088013, 0.850350022315979, 0.8533879518508911, 0.856689989566803, 0.8621054291725159, 0.8643507957458496, 0.8615770936012268, 0.8639545440673828, 0.867520809173584, 0.8665962219238281, 0.8673887252807617, 0.8720116019248962, 0.8732003569602966, 0.8742570281028748, 0.8771628737449646, 0.8776912093162537, 0.8800686597824097, 0.8767666220664978, 0.8823140859603882, 0.8829745054244995, 0.8836349248886108, 0.8795403242111206, 0.8881257176399231, 0.8865407705307007, 0.8908994793891907, 0.8923524022102356, 0.8911636471748352, 0.8971073627471924, 0.8963148593902588, 0.8938053250312805, 0.9019944667816162, 0.9037115573883057, 0.9000132083892822, 0.9051644206047058, 0.9088627696037292, 0.9080702662467957, 0.9075419306755066, 0.9039757251739502, 0.9095231890678406, 0.9128252267837524, 0.9148064851760864, 0.9152027368545532], "val_loss": [2.0406150817871094, 1.513339638710022, 1.0437837839126587, 0.8345468044281006, 0.7503101229667664, 0.6945101022720337, 0.648118793964386, 0.6178197860717773, 0.5922069549560547, 0.5684742331504822, 0.5503871440887451, 0.5410072207450867, 0.5328348278999329, 0.5116887092590332, 0.5050490498542786, 0.4922766387462616, 0.48472264409065247, 0.4761926531791687, 0.4673326015472412, 0.465562105178833, 0.45556551218032837, 0.4516066014766693, 0.4411782920360565, 0.4384132921695709, 0.4354599118232727, 0.4304720163345337, 0.424828439950943, 0.42199259996414185, 0.4190751910209656, 0.41273233294487, 0.410731703042984, 0.409507155418396, 0.40142032504081726, 0.40003398060798645, 0.3998965919017792, 0.39676904678344727, 0.39629900455474854, 0.3880425691604614, 0.3863050043582916, 0.38599780201911926, 0.38674303889274597, 0.38106590509414673, 0.3765459656715393, 0.3775421977043152, 0.37085941433906555, 0.3812193274497986, 0.368929922580719, 0.376679003238678, 0.36943987011909485, 0.3634334206581116, 0.36469799280166626, 0.3620572090148926, 0.3596222698688507, 0.35945940017700195, 0.35764452815055847, 0.36649730801582336, 0.35975489020347595, 0.35881006717681885, 0.3540198504924774, 0.3514268696308136, 0.35315388441085815, 0.3498738706111908, 0.3520844578742981, 0.3572878837585449, 0.34667542576789856, 0.3470388948917389, 0.3508801758289337, 0.34955403208732605, 0.3557959794998169, 0.3498801290988922], "val_accuracy": [0.5396666526794434, 0.6526666879653931, 0.6779999732971191, 0.7039999961853027, 0.722000002861023, 0.7480000257492065, 0.7646666765213013, 0.7723333239555359, 0.7826666831970215, 0.7910000085830688, 0.7996666431427002, 0.8009999990463257, 0.800000011920929, 0.8116666674613953, 0.8223333358764648, 0.8199999928474426, 0.8246666789054871, 0.824999988079071, 0.8323333263397217, 0.8289999961853027, 0.8326666951179504, 0.8360000252723694, 0.8399999737739563, 0.8379999995231628, 0.8416666388511658, 0.847000002861023, 0.8456666469573975, 0.8450000286102295, 0.8486666679382324, 0.8546666502952576, 0.8489999771118164, 0.8510000109672546, 0.8539999723434448, 0.8566666841506958, 0.8573333621025085, 0.859000027179718, 0.859000027179718, 0.8636666536331177, 0.8643333315849304, 0.862333357334137, 0.862666666507721, 0.8640000224113464, 0.8700000047683716, 0.8690000176429749, 0.8723333477973938, 0.8650000095367432, 0.8709999918937683, 0.8730000257492065, 0.8736666440963745, 0.8743333220481873, 0.8713333606719971, 0.8723333477973938, 0.871999979019165, 0.8730000257492065, 0.875333309173584, 0.8730000257492065, 0.8740000128746033, 0.8773333430290222, 0.8733333349227905, 0.878000020980835, 0.874666690826416, 0.8759999871253967, 0.8773333430290222, 0.878333330154419, 0.8823333382606506, 0.8786666393280029, 0.875333309173584, 0.8796666860580444, 0.8790000081062317, 0.8806666731834412]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 3, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [6, 3, 4, 3, 8, 5, 4, 1, 4, 2, 8, 8, 5, 0, 3], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0], [16, 99, 96, 97, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 25, 15, 10, 6], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.sqrt(tf.math.square(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.add(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))), sigma)), tf.math.sqrt(tf.math.sqrt(alpha))), tf.math.square(tf.math.negative(tf.math.multiply(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 2, 0, 0, 1], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 6, 3, 5, 0, 6, 2, 7, 5], [0, 0, 0, 3, 3, 4, 5, 5], [16, 16, 80], [1, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1], [6, 1, 3, 6, 0, 1, 4, 1, 4, 2, 8, 4, 2, 6, 7, 9, 2, 9, 5, 0, 6, 9], [0, 0, 0, 0, 0, 0, 3, 1, 2, 0, 7, 6, 4], [16, 99, 96, 99, 61, 1, 37, 64, 40, 17]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 6, 3, 1, 19, 11, 8, 3, 1, 0, 1, 1, 35, 22, 13, 10], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(grad, tf.math.add(grad, grad))), tf.math.add(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), sigma), tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), alpha))))), beta)), tf.math.square(tf.math.negative(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), grad)), grad), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 0, 3], [1, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 0, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [6, 3, 3, 0, 8, 1, 4, 6, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 64, 99, 79, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 8, 5, 3, 2, 2, 1, 1, 0, 20, 11, 9, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(alpha, alpha), tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), sigma))))), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, alpha)))), tf.math.sqrt(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 8, 3, 0, 1], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 3, 3, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 11, 99, 61, 1]], "fitness": -0.08714285492897034, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.multiply(sigma, alpha)))", "other_info": {"loss": [2.3090856075286865, 2.3090968132019043, 2.3085663318634033, 2.308695077896118, 2.308223247528076, 2.3075110912323], "accuracy": [0.09219389408826828, 0.0956280529499054, 0.08889182657003403, 0.0878351628780365, 0.09047681838274002, 0.09192973375320435], "val_loss": [2.3078808784484863, 2.307708978652954, 2.307614803314209, 2.3075478076934814, 2.307497501373291, 2.3074557781219482], "val_accuracy": [0.09066666662693024, 0.08900000154972076, 0.08733333647251129, 0.08799999952316284, 0.08699999749660492, 0.08766666799783707]}, "mapping_values": [1, 6, 4, 2, 1, 9, 5, 4, 2, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 12}]