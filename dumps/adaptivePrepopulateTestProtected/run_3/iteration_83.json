[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.878000020980835, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223759174346924, 1.8681567907333374, 1.3971633911132812, 1.1021500825881958, 0.9438490867614746, 0.8268281817436218, 0.7700234055519104, 0.7182450890541077, 0.6839274764060974, 0.655160665512085, 0.6316797733306885, 0.6046612858772278, 0.586663544178009, 0.5732303261756897, 0.5552444458007812, 0.5382086634635925, 0.5205084085464478, 0.5141545534133911, 0.49866363406181335, 0.4905571937561035, 0.48713892698287964, 0.4630949795246124, 0.46493759751319885, 0.4510720372200012, 0.4456666111946106, 0.4411585330963135, 0.43109801411628723, 0.4194287657737732, 0.41647717356681824, 0.4177640676498413, 0.39898860454559326, 0.3982110619544983, 0.3941095173358917, 0.3838343918323517, 0.38270825147628784, 0.38132011890411377, 0.3706604242324829, 0.3630581796169281, 0.35970449447631836, 0.3585955500602722, 0.3488880693912506, 0.3406795859336853, 0.3434852361679077, 0.34305644035339355, 0.32770219445228577, 0.3274216949939728, 0.3164256513118744, 0.31487780809402466, 0.31453031301498413, 0.3020377457141876, 0.3013147711753845, 0.29238083958625793, 0.30650538206100464, 0.2886098325252533, 0.28784143924713135, 0.28922179341316223, 0.27991431951522827, 0.27731093764305115, 0.27029022574424744, 0.2677718997001648, 0.2672445476055145], "accuracy": [0.27182671427726746, 0.4913485646247864, 0.5609562993049622, 0.6095628142356873, 0.6618676781654358, 0.6997754573822021, 0.7215691208839417, 0.7407211661338806, 0.7508915662765503, 0.7592127919197083, 0.7656848430633545, 0.7798177003860474, 0.7849689722061157, 0.789459764957428, 0.7991018295288086, 0.806630551815033, 0.81112140417099, 0.8088759779930115, 0.8210275769233704, 0.8181217908859253, 0.826310932636261, 0.8333113193511963, 0.8294808864593506, 0.8401796221733093, 0.8409721255302429, 0.8436138033866882, 0.8459912538528442, 0.8519350290298462, 0.8485008478164673, 0.8490291833877563, 0.856689989566803, 0.8573504090309143, 0.8615770936012268, 0.8644828796386719, 0.8605204224586487, 0.8614450097084045, 0.8671245574951172, 0.8726720213890076, 0.8732003569602966, 0.8689737319946289, 0.8762382864952087, 0.8798044919967651, 0.8717474341392517, 0.8825782537460327, 0.8840311765670776, 0.8845595121383667, 0.8885219693183899, 0.8865407705307007, 0.8887861371040344, 0.894069492816925, 0.8918240666389465, 0.8953903317451477, 0.8860124349594116, 0.8988244533538818, 0.8992207050323486, 0.8956544995307922, 0.9014661312103271, 0.89988112449646, 0.900409460067749, 0.9046360850334167, 0.9033153057098389], "val_loss": [2.0386126041412354, 1.5089809894561768, 1.0396978855133057, 0.8277255296707153, 0.7414798736572266, 0.6867381930351257, 0.6452507376670837, 0.6096968054771423, 0.5920496582984924, 0.5695558786392212, 0.550778865814209, 0.5315823554992676, 0.5166425704956055, 0.5040237307548523, 0.4927339255809784, 0.48035380244255066, 0.4752146899700165, 0.4640548527240753, 0.45926037430763245, 0.4498494863510132, 0.44989997148513794, 0.43486902117729187, 0.4302854835987091, 0.42699891328811646, 0.4222937822341919, 0.4179273545742035, 0.4156407117843628, 0.40615877509117126, 0.40567347407341003, 0.40483561158180237, 0.4008205533027649, 0.3957735300064087, 0.3910598158836365, 0.39842313528060913, 0.38378071784973145, 0.3824272155761719, 0.37983548641204834, 0.3832281529903412, 0.37993335723876953, 0.37290528416633606, 0.37028563022613525, 0.3697679340839386, 0.369826078414917, 0.3630952835083008, 0.3613884747028351, 0.3612003028392792, 0.3630628287792206, 0.35836127400398254, 0.35707563161849976, 0.3544061779975891, 0.35439038276672363, 0.35541149973869324, 0.34793493151664734, 0.355723112821579, 0.3566884696483612, 0.3480426073074341, 0.35176366567611694, 0.34468159079551697, 0.3469727337360382, 0.34757280349731445, 0.34379008412361145], "val_accuracy": [0.546999990940094, 0.6536666750907898, 0.6856666803359985, 0.7066666483879089, 0.7366666793823242, 0.7536666393280029, 0.7599999904632568, 0.7720000147819519, 0.7706666588783264, 0.7926666736602783, 0.7963333129882812, 0.7956666946411133, 0.8103333115577698, 0.809333324432373, 0.8220000267028809, 0.8226666450500488, 0.8243333101272583, 0.8330000042915344, 0.8349999785423279, 0.8370000123977661, 0.8333333134651184, 0.8429999947547913, 0.8463333249092102, 0.8446666598320007, 0.8476666808128357, 0.8479999899864197, 0.8450000286102295, 0.8506666421890259, 0.8496666550636292, 0.8529999852180481, 0.8556666374206543, 0.8556666374206543, 0.8586666584014893, 0.8526666760444641, 0.8576666712760925, 0.8610000014305115, 0.859000027179718, 0.8616666793823242, 0.8653333187103271, 0.8673333525657654, 0.8673333525657654, 0.8659999966621399, 0.8693333268165588, 0.8690000176429749, 0.8726666569709778, 0.8726666569709778, 0.8740000128746033, 0.8730000257492065, 0.871999979019165, 0.8759999871253967, 0.874666690826416, 0.871999979019165, 0.8806666731834412, 0.8776666522026062, 0.8706666827201843, 0.8820000290870667, 0.878333330154419, 0.878000020980835, 0.8806666731834412, 0.8793333172798157, 0.878333330154419]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8665714263916016, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.22525954246521, 1.8717066049575806, 1.3961095809936523, 1.0976414680480957, 0.9271154999732971, 0.8356379270553589, 0.7668529748916626, 0.7156981229782104, 0.6913104057312012, 0.6583790183067322, 0.6293162107467651, 0.6077767014503479, 0.5887705087661743, 0.5837417244911194, 0.5537204742431641, 0.542065441608429, 0.5255879759788513, 0.5276235938072205, 0.5091249346733093, 0.49520841240882874, 0.4891358017921448, 0.4811922311782837, 0.47567448019981384, 0.4727861285209656, 0.45769253373146057, 0.44598981738090515, 0.4343123733997345, 0.4363946318626404, 0.4233311414718628, 0.42413729429244995, 0.41211244463920593, 0.4096071422100067, 0.4051191806793213, 0.400233656167984, 0.38779404759407043, 0.38097989559173584, 0.3672619163990021, 0.37330302596092224, 0.3681304156780243, 0.3611266016960144, 0.3509312570095062, 0.3500267267227173, 0.341213196516037, 0.34402143955230713, 0.33489859104156494, 0.33040133118629456, 0.3262704908847809, 0.32149192690849304, 0.3178654611110687, 0.31138432025909424, 0.31570643186569214, 0.30151641368865967, 0.3015716075897217, 0.2938118875026703, 0.2891225218772888, 0.28789645433425903, 0.2847144901752472, 0.2810456156730652, 0.2774762213230133, 0.27446526288986206, 0.2666573226451874, 0.26320552825927734, 0.2611370384693146, 0.2547854781150818, 0.24876925349235535, 0.2524971663951874, 0.2495265156030655, 0.24383856356143951, 0.2413284331560135], "accuracy": [0.27143046259880066, 0.4877823293209076, 0.568220853805542, 0.6174877882003784, 0.6688680648803711, 0.700700044631958, 0.7264562249183655, 0.7440232634544373, 0.7520803213119507, 0.759080708026886, 0.7726852297782898, 0.7788931727409363, 0.7860256433486938, 0.7889314293861389, 0.8005547523498535, 0.8039889335632324, 0.8109893202781677, 0.8054417967796326, 0.8202351331710815, 0.8238013386726379, 0.8224804997444153, 0.8297450542449951, 0.8334434032440186, 0.8335754871368408, 0.8330471515655518, 0.8428213000297546, 0.8411042094230652, 0.8459912538528442, 0.8510104417800903, 0.8481045961380005, 0.8540483713150024, 0.8515387773513794, 0.8584070801734924, 0.8555012345314026, 0.8593316674232483, 0.8646149635314941, 0.8706908226013184, 0.8623695969581604, 0.872407853603363, 0.8737286925315857, 0.873860776424408, 0.8749174475669861, 0.8799365758895874, 0.8796724081039429, 0.8815215826034546, 0.8823140859603882, 0.887201189994812, 0.887201189994812, 0.8883898854255676, 0.889578640460968, 0.8857482671737671, 0.8911636471748352, 0.8923524022102356, 0.8931449055671692, 0.8967111110687256, 0.8972394466400146, 0.897899866104126, 0.8976356983184814, 0.8994848728179932, 0.9015982151031494, 0.902390718460083, 0.9037115573883057, 0.909259021282196, 0.9109761118888855, 0.9100515246391296, 0.908730685710907, 0.9099194407463074, 0.9113723635673523, 0.9115044474601746], "val_loss": [2.0404152870178223, 1.517018437385559, 1.0475775003433228, 0.8512457013130188, 0.763452410697937, 0.7012009024620056, 0.6656587719917297, 0.625494122505188, 0.6005480885505676, 0.5812343955039978, 0.5591641068458557, 0.5432746410369873, 0.5362961292266846, 0.5205770134925842, 0.5052399635314941, 0.49810177087783813, 0.49261751770973206, 0.4827456772327423, 0.47481828927993774, 0.4723312258720398, 0.4628545045852661, 0.45696619153022766, 0.4547666907310486, 0.44344988465309143, 0.44472232460975647, 0.43672099709510803, 0.43143153190612793, 0.4249956011772156, 0.4214537739753723, 0.4133876860141754, 0.416228711605072, 0.41255590319633484, 0.4068106710910797, 0.40811100602149963, 0.39860326051712036, 0.39724600315093994, 0.3985723555088043, 0.3957808315753937, 0.39220109581947327, 0.3877470791339874, 0.38234302401542664, 0.3836548328399658, 0.38141390681266785, 0.3767205476760864, 0.3823995292186737, 0.3743506669998169, 0.37504979968070984, 0.37511011958122253, 0.37302538752555847, 0.37428197264671326, 0.3654114902019501, 0.3699377179145813, 0.36378419399261475, 0.3644579350948334, 0.35955607891082764, 0.3596756160259247, 0.3598814010620117, 0.36178648471832275, 0.35460254549980164, 0.3596324026584625, 0.35457542538642883, 0.3593170940876007, 0.3567788898944855, 0.35074689984321594, 0.3613390624523163, 0.35155293345451355, 0.35257473587989807, 0.34816858172416687, 0.3489692509174347], "val_accuracy": [0.5406666398048401, 0.656000018119812, 0.6840000152587891, 0.7036666870117188, 0.7276666760444641, 0.7483333349227905, 0.753333330154419, 0.7696666717529297, 0.778333306312561, 0.7919999957084656, 0.800000011920929, 0.8006666898727417, 0.8029999732971191, 0.8166666626930237, 0.8196666836738586, 0.8186666369438171, 0.8216666579246521, 0.8220000267028809, 0.82833331823349, 0.828000009059906, 0.8330000042915344, 0.8316666483879089, 0.8370000123977661, 0.8399999737739563, 0.8416666388511658, 0.8393333554267883, 0.843666672706604, 0.8483333587646484, 0.8473333120346069, 0.8529999852180481, 0.8456666469573975, 0.8489999771118164, 0.8543333411216736, 0.8476666808128357, 0.8543333411216736, 0.8556666374206543, 0.8539999723434448, 0.8533333539962769, 0.8579999804496765, 0.8600000143051147, 0.8606666922569275, 0.8659999966621399, 0.862666666507721, 0.8653333187103271, 0.8603333234786987, 0.8683333396911621, 0.8663333058357239, 0.8686666488647461, 0.8643333315849304, 0.8666666746139526, 0.8693333268165588, 0.8653333187103271, 0.8700000047683716, 0.8703333139419556, 0.8713333606719971, 0.871666669845581, 0.871999979019165, 0.871999979019165, 0.8709999918937683, 0.8723333477973938, 0.8740000128746033, 0.8713333606719971, 0.8759999871253967, 0.878333330154419, 0.8736666440963745, 0.8740000128746033, 0.875, 0.8773333430290222, 0.878333330154419]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [4, 2, 3, 0, 5], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [1, 1], [0], [0], [98], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [4, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 2, 7, 4, 3, 2, 1, 0, 1, 1, 16, 8, 8, 3], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, grad)), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09496764093637466, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 1, 2], [39, 77], [0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 9, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 1], [2], [0, 2], [80], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [1, 3, 3, 6, 0, 1, 4, 1, 4, 2, 4, 3, 6, 0, 6], [0, 0, 2, 3, 0, 4, 3, 3, 2, 0, 2, 3, 6, 6], [16, 99, 96, 99, 61, 94]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 5, 3, 2, 2, 3, 1, 2, 1, 29, 15, 14, 4], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(beta, sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma)))), tf.math.add(tf.math.pow(tf.math.multiply(sigma, beta), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(beta, tf.math.negative(sigma)))), tf.math.divide_no_nan(grad, grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 0], [2, 9], [0], [99, 5], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 0, 3, 6, 8, 1, 4, 0, 4, 4, 8, 5], [0, 3, 0, 3, 0, 0, 0, 1, 2, 0], [16, 41, 96, 26, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 2, 3, 2, 1, 2, 20, 12, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(sigma, tf.math.pow(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.negative(tf.math.pow(tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.square(alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 2, 3, 0, 3], [1, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [2, 5, 3, 0, 3, 5], [0, 2, 0, 3], [41, 16], [0, 1], [0], [1], [99], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 5, 7, 7, 5, 4], [0, 4, 0, 3, 0, 0, 4, 1, 2, 0, 3, 4, 7], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 2, 2, 1, 1, 0, 29, 16, 13, 5], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.square(tf.math.multiply(tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), beta)), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.sqrt(tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.square(beta)), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))))))), grad), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1026284471154213, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}]