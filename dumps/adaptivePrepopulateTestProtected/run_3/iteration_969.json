[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8862857222557068, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222418785095215, 1.8632627725601196, 1.3950724601745605, 1.0979150533676147, 0.9474178552627563, 0.8543937802314758, 0.7783248424530029, 0.7376496195793152, 0.7006842494010925, 0.6746688485145569, 0.647553563117981, 0.6295329928398132, 0.6112891435623169, 0.58865886926651, 0.5667527914047241, 0.5575993657112122, 0.5467248558998108, 0.5289703011512756, 0.5205997824668884, 0.5110849142074585, 0.5064045786857605, 0.4867391884326935, 0.4731372892856598, 0.47443822026252747, 0.46410614252090454, 0.4545186161994934, 0.445819616317749, 0.4367676079273224, 0.4321127235889435, 0.4275900721549988, 0.4177286922931671, 0.40700381994247437, 0.40491974353790283, 0.3923063576221466, 0.38597339391708374, 0.37638187408447266, 0.3749813437461853, 0.3708414137363434, 0.369646281003952, 0.3635149896144867, 0.3594855070114136, 0.3503628671169281, 0.3338625133037567, 0.3396199643611908, 0.33679017424583435, 0.3303111493587494, 0.3275522291660309, 0.3153315782546997, 0.3093845844268799, 0.31660354137420654, 0.313541054725647, 0.3128948211669922, 0.2977619469165802, 0.30230653285980225, 0.298944890499115, 0.28947505354881287, 0.2822195291519165, 0.2778712213039398, 0.2668195366859436, 0.26853811740875244, 0.26283398270606995, 0.2662760019302368, 0.2576100528240204, 0.25102800130844116, 0.2539205849170685, 0.25087955594062805, 0.24508193135261536], "accuracy": [0.280940443277359, 0.48685774207115173, 0.5665037631988525, 0.616299033164978, 0.6625280380249023, 0.6930392384529114, 0.7169462442398071, 0.7320036888122559, 0.7375511527061462, 0.7491744756698608, 0.7672698497772217, 0.7670056819915771, 0.7745344042778015, 0.7876105904579163, 0.7906485199928284, 0.7994980812072754, 0.802800178527832, 0.8068947196006775, 0.8117818236351013, 0.8153480291366577, 0.8181217908859253, 0.829216718673706, 0.8300092220306396, 0.8238013386726379, 0.8325188159942627, 0.8385946154594421, 0.8372738361358643, 0.842028796672821, 0.8451988101005554, 0.8481045961380005, 0.8515387773513794, 0.8549728989601135, 0.8516708612442017, 0.8603883385658264, 0.8598600029945374, 0.8667283058166504, 0.8636903762817383, 0.8636903762817383, 0.8677849769592285, 0.8704266548156738, 0.8758420348167419, 0.8739928603172302, 0.8790120482444763, 0.8768987059593201, 0.8751816153526306, 0.8794082403182983, 0.8813894987106323, 0.8860124349594116, 0.8874653577804565, 0.8856161832809448, 0.8838990926742554, 0.8877294659614563, 0.8918240666389465, 0.8918240666389465, 0.8922203183174133, 0.8953903317451477, 0.89552241563797, 0.9002773761749268, 0.9049002528190613, 0.9034473896026611, 0.9035794734954834, 0.9038436412811279, 0.9085986018180847, 0.9095231890678406, 0.9095231890678406, 0.909259021282196, 0.910711944103241], "val_loss": [2.0414316654205322, 1.5168657302856445, 1.0494927167892456, 0.8396123051643372, 0.7532041668891907, 0.6975494027137756, 0.6532282829284668, 0.6188269853591919, 0.5909113883972168, 0.5747429728507996, 0.5562715530395508, 0.5392115712165833, 0.5226473808288574, 0.5080817937850952, 0.49551260471343994, 0.4949219524860382, 0.48097461462020874, 0.46894019842147827, 0.4645398259162903, 0.4554585814476013, 0.44845467805862427, 0.44272810220718384, 0.4365209937095642, 0.4303407371044159, 0.42757970094680786, 0.42137086391448975, 0.4158954322338104, 0.4094981253147125, 0.40614867210388184, 0.40746310353279114, 0.39686036109924316, 0.39440515637397766, 0.39069101214408875, 0.3898474872112274, 0.3889416456222534, 0.3833497166633606, 0.387736976146698, 0.3792175352573395, 0.3778442442417145, 0.37528878450393677, 0.3729557991027832, 0.37016138434410095, 0.36690768599510193, 0.36455467343330383, 0.36386409401893616, 0.3628668487071991, 0.365796834230423, 0.36076274514198303, 0.3599783480167389, 0.35867130756378174, 0.35705167055130005, 0.35411083698272705, 0.3552299737930298, 0.3651564121246338, 0.36276260018348694, 0.34837988018989563, 0.34821584820747375, 0.3528410792350769, 0.3496720790863037, 0.3506317138671875, 0.34951722621917725, 0.3443804085254669, 0.345913290977478, 0.3461855351924896, 0.3431210517883301, 0.348863810300827, 0.3426092565059662], "val_accuracy": [0.5373333096504211, 0.6570000052452087, 0.6759999990463257, 0.7110000252723694, 0.7286666631698608, 0.7419999837875366, 0.7590000033378601, 0.7616666555404663, 0.7836666703224182, 0.7903333306312561, 0.7886666655540466, 0.8006666898727417, 0.809333324432373, 0.8183333277702332, 0.8146666884422302, 0.8140000104904175, 0.8233333230018616, 0.8289999961853027, 0.8326666951179504, 0.8363333344459534, 0.8389999866485596, 0.8366666436195374, 0.8363333344459534, 0.8489999771118164, 0.847000002861023, 0.8519999980926514, 0.8533333539962769, 0.8560000061988831, 0.8573333621025085, 0.8539999723434448, 0.8619999885559082, 0.862666666507721, 0.8656666874885559, 0.8629999756813049, 0.8646666407585144, 0.8636666536331177, 0.8603333234786987, 0.8659999966621399, 0.8673333525657654, 0.8673333525657654, 0.8713333606719971, 0.8703333139419556, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8730000257492065, 0.871999979019165, 0.874666690826416, 0.875333309173584, 0.874666690826416, 0.875, 0.8786666393280029, 0.8776666522026062, 0.8743333220481873, 0.8723333477973938, 0.8833333253860474, 0.8826666474342346, 0.8790000081062317, 0.8836666941642761, 0.878333330154419, 0.8820000290870667, 0.887666642665863, 0.8820000290870667, 0.8803333044052124, 0.8830000162124634, 0.8846666812896729, 0.8856666684150696]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8608571290969849, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.220146417617798, 1.8594547510147095, 1.383985161781311, 1.0879604816436768, 0.9228910803794861, 0.8358258605003357, 0.7701132297515869, 0.7200673222541809, 0.687222957611084, 0.6525195240974426, 0.6256561875343323, 0.6133154034614563, 0.5865072011947632, 0.5725892186164856, 0.5527797937393188, 0.54790198802948, 0.5366970896720886, 0.5247831344604492, 0.503764271736145, 0.5093519687652588, 0.4920503497123718, 0.4804256856441498, 0.4727397561073303, 0.462030291557312, 0.45273828506469727, 0.4494679272174835, 0.44486504793167114, 0.4380086064338684, 0.420072466135025, 0.4137389063835144, 0.4136893153190613, 0.4063724875450134, 0.4005025029182434, 0.39375659823417664, 0.3860655128955841, 0.3705828785896301, 0.3794921636581421, 0.3716810643672943, 0.3694477677345276, 0.3630516827106476, 0.3493545651435852, 0.3483697772026062, 0.3476720154285431, 0.34523871541023254, 0.3438122272491455, 0.3333299160003662, 0.32966136932373047, 0.32148316502571106, 0.31987544894218445, 0.3127792775630951, 0.3106590807437897, 0.3041636645793915, 0.2972630560398102, 0.2962608337402344, 0.2969647943973541, 0.28863632678985596, 0.2821809947490692, 0.27844786643981934, 0.27620312571525574, 0.27683931589126587, 0.26870813965797424, 0.2662246525287628, 0.2618958353996277, 0.24843300879001617, 0.258771151304245, 0.2508269250392914, 0.24139755964279175, 0.2420806884765625, 0.23616814613342285, 0.22999921441078186, 0.23279881477355957, 0.22967709600925446], "accuracy": [0.2709021270275116, 0.49187690019607544, 0.5729758143424988, 0.6194690465927124, 0.6749438643455505, 0.7003037929534912, 0.7231541275978088, 0.7425703406333923, 0.7543256878852844, 0.7623828053474426, 0.7729493975639343, 0.7769119143486023, 0.785629391670227, 0.7938185334205627, 0.8079513907432556, 0.8098005652427673, 0.8063663840293884, 0.8100647330284119, 0.8182538747787476, 0.8204993009567261, 0.8247259259223938, 0.8315942287445068, 0.8376700282096863, 0.834632158279419, 0.8358209133148193, 0.8413683772087097, 0.8436138033866882, 0.8492933511734009, 0.8521991968154907, 0.8548408150672913, 0.8549728989601135, 0.8545766472816467, 0.8622375130653381, 0.8603883385658264, 0.8638224601745605, 0.8687095642089844, 0.8647470474243164, 0.8659358024597168, 0.8713511824607849, 0.8709549307823181, 0.8768987059593201, 0.8775591254234314, 0.8790120482444763, 0.8778232932090759, 0.8734645247459412, 0.8798044919967651, 0.8820499181747437, 0.885219931602478, 0.8828424215316772, 0.8878615498542786, 0.8874653577804565, 0.8910315632820129, 0.8916919827461243, 0.8923524022102356, 0.8908994793891907, 0.8947299122810364, 0.902390718460083, 0.9002773761749268, 0.9010698795318604, 0.9005415439605713, 0.9029190540313721, 0.9049002528190613, 0.904768168926239, 0.91124027967453, 0.9043719172477722, 0.9121648669242859, 0.91559898853302, 0.9083344340324402, 0.913617730140686, 0.91559898853302, 0.9154669046401978, 0.9163914918899536], "val_loss": [2.0359556674957275, 1.5063445568084717, 1.0385618209838867, 0.8341552019119263, 0.751131534576416, 0.6990628242492676, 0.655234694480896, 0.6214176416397095, 0.5993902087211609, 0.5771342515945435, 0.5611011385917664, 0.5456050634384155, 0.5309647917747498, 0.5179673433303833, 0.5106741786003113, 0.504223644733429, 0.4955497980117798, 0.4845747947692871, 0.48026737570762634, 0.46777284145355225, 0.46463483572006226, 0.45781055092811584, 0.4536720812320709, 0.4457005560398102, 0.4373428523540497, 0.43665120005607605, 0.438403844833374, 0.4282378852367401, 0.4212193489074707, 0.41992613673210144, 0.4142391085624695, 0.41209176182746887, 0.4094277024269104, 0.4082188010215759, 0.3998573422431946, 0.40359988808631897, 0.3968387544155121, 0.4012551009654999, 0.39165788888931274, 0.3893360197544098, 0.3898428976535797, 0.3873478174209595, 0.38987696170806885, 0.3830675482749939, 0.382704496383667, 0.3811694383621216, 0.3804751932621002, 0.37943562865257263, 0.381440132856369, 0.3734949231147766, 0.3736712336540222, 0.37435677647590637, 0.37685319781303406, 0.36797627806663513, 0.3746393322944641, 0.36878588795661926, 0.37026989459991455, 0.3718006908893585, 0.36550962924957275, 0.3677885830402374, 0.3697710633277893, 0.3674929141998291, 0.3643943667411804, 0.36690595746040344, 0.36996471881866455, 0.3679254651069641, 0.37196794152259827, 0.3675268292427063, 0.36585912108421326, 0.3701973557472229, 0.36665645241737366, 0.37038785219192505], "val_accuracy": [0.5410000085830688, 0.6579999923706055, 0.6803333163261414, 0.7083333134651184, 0.7316666841506958, 0.7459999918937683, 0.7576666474342346, 0.7706666588783264, 0.7770000100135803, 0.7893333435058594, 0.793666660785675, 0.8043333292007446, 0.812666654586792, 0.8136666417121887, 0.8130000233650208, 0.8190000057220459, 0.8196666836738586, 0.8226666450500488, 0.8246666789054871, 0.8323333263397217, 0.8293333053588867, 0.8309999704360962, 0.8316666483879089, 0.8360000252723694, 0.8399999737739563, 0.8386666774749756, 0.8416666388511658, 0.843666672706604, 0.843666672706604, 0.8450000286102295, 0.846666693687439, 0.8483333587646484, 0.8486666679382324, 0.8556666374206543, 0.8519999980926514, 0.8553333282470703, 0.8606666922569275, 0.8560000061988831, 0.8579999804496765, 0.8613333106040955, 0.8603333234786987, 0.8600000143051147, 0.8619999885559082, 0.8600000143051147, 0.8616666793823242, 0.8653333187103271, 0.8636666536331177, 0.8610000014305115, 0.8619999885559082, 0.8666666746139526, 0.8653333187103271, 0.8679999709129333, 0.8676666617393494, 0.8679999709129333, 0.8633333444595337, 0.8700000047683716, 0.8683333396911621, 0.8666666746139526, 0.8709999918937683, 0.8703333139419556, 0.8713333606719971, 0.8686666488647461, 0.8706666827201843, 0.871999979019165, 0.8683333396911621, 0.8696666955947876, 0.8776666522026062, 0.8740000128746033, 0.875, 0.8733333349227905, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 1, 0], [0, 2, 3, 0, 3], [0, 1, 0, 2], [8, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0], [0, 2, 4, 0, 3, 2, 9], [0, 2, 0, 3], [16, 16, 39], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 4, 4, 3, 0, 0, 3, 1, 4, 4], [16, 99, 96, 76, 15, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 11, 7, 4, 3, 2, 1, 1, 1, 16, 8, 8, 3], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09206181764602661, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 2, 3, 8, 3, 3], [0, 1, 0, 2, 1, 0], [39, 15, 98], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 1, 3], [89, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 6, 2, 5, 0, 4, 1, 8, 1, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 0, 6], [16, 55, 82, 99, 61, 1, 50, 31]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 6, 6, 3, 10, 6, 4, 1, 2, 1, 1, 1, 29, 17, 12, 8], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(alpha, tf.math.sqrt(tf.math.multiply(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.multiply(grad, alpha)))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(alpha, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma)), tf.math.square(tf.math.negative(alpha)))), beta), tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.sqrt(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 9, 6], [1, 1, 1, 2], [39, 65], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 6, 3, 0, 3, 5, 7, 3, 3, 2, 0], [0, 1, 0, 3, 2, 1, 3, 3, 4], [16, 16], [0, 1], [0], [0], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 2], [0, 0, 0, 3, 1, 0, 3, 1, 3, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.divide_no_nan(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(grad, beta)))), tf.math.multiply(alpha, tf.math.multiply(tf.math.add(grad, grad), tf.math.negative(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, alpha)), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))))", "other_info": {"loss": [2.3035781383514404, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}, "mapping_values": [1, 9, 6, 3, 1, 20, 11, 9, 2, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [3, 3, 3, 0, 3], [1, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 0, 0], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 37, 99, 40, 1]], "fitness": -0.0925714299082756, "mapping_values": [1, 8, 4, 4, 0, 10, 6, 4, 2, 2, 1, 1, 1, 14, 7, 7, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.multiply(tf.math.multiply(alpha, alpha), grad), tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), sigma))), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), grad)", "other_info": {"loss": [2.3106026649475098, 2.3101086616516113, 2.311229705810547, 2.310861587524414, 2.308499336242676, 2.309011459350586], "accuracy": [0.09391097724437714, 0.09245806187391281, 0.08928807079792023, 0.08440100401639938, 0.09285431355237961, 0.09840179979801178], "val_loss": [2.3088948726654053, 2.30865740776062, 2.3084208965301514, 2.3081867694854736, 2.3079521656036377, 2.3077189922332764], "val_accuracy": [0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869]}}]