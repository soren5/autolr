[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8631428480148315, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2225024700164795, 1.863538146018982, 1.3742872476577759, 1.0852015018463135, 0.9182164072990417, 0.8292263150215149, 0.7700237035751343, 0.7172576189041138, 0.6851915717124939, 0.6548795104026794, 0.6327103972434998, 0.5996288657188416, 0.587132453918457, 0.5657047629356384, 0.5511245131492615, 0.536697268486023, 0.5260968804359436, 0.5122374892234802, 0.4998987913131714, 0.4919237196445465, 0.4841574728488922, 0.46526387333869934, 0.46099889278411865, 0.45413926243782043, 0.442452073097229, 0.43494558334350586, 0.4299718141555786, 0.42822903394699097, 0.40671443939208984, 0.40808743238449097, 0.40035533905029297, 0.3990074396133423, 0.39067789912223816, 0.37986961007118225, 0.3670641779899597, 0.37512272596359253, 0.36787185072898865, 0.35967254638671875, 0.3588784635066986, 0.35771551728248596, 0.34558743238449097, 0.3448440432548523, 0.3421333134174347, 0.3297082185745239, 0.3248775005340576, 0.3101509213447571, 0.31749022006988525, 0.3137449622154236, 0.3078731298446655], "accuracy": [0.2740721106529236, 0.4896314740180969, 0.5779950022697449, 0.6301677227020264, 0.6781138777732849, 0.7033417224884033, 0.7226257920265198, 0.7395324110984802, 0.7441553473472595, 0.7535332441329956, 0.7712323069572449, 0.7836481332778931, 0.7862898111343384, 0.7940827012062073, 0.8005547523498535, 0.8021397590637207, 0.8103289008140564, 0.8108572363853455, 0.8222163319587708, 0.8164047002792358, 0.8210275769233704, 0.8317263126373291, 0.8300092220306396, 0.8362171649932861, 0.842028796672821, 0.8448025584220886, 0.8449346423149109, 0.8473120927810669, 0.8549728989601135, 0.857218325138092, 0.8594637513160706, 0.8558974862098694, 0.858671247959137, 0.8625016212463379, 0.8660678863525391, 0.8652753829956055, 0.8672566413879395, 0.8681812286376953, 0.8663320541381836, 0.8684453964233398, 0.8754457831382751, 0.8761062026023865, 0.8759741187095642, 0.8782195448875427, 0.8829745054244995, 0.8878615498542786, 0.8811253309249878, 0.883238673210144, 0.883238673210144], "val_loss": [2.0387251377105713, 1.510586142539978, 1.0362509489059448, 0.8335074782371521, 0.7359254360198975, 0.6837661862373352, 0.6355338096618652, 0.6072261333465576, 0.5736373066902161, 0.5499182343482971, 0.5385982990264893, 0.5156124830245972, 0.4990638792514801, 0.49244824051856995, 0.48290225863456726, 0.47126689553260803, 0.4595780074596405, 0.44908952713012695, 0.44994857907295227, 0.4425694942474365, 0.4375649392604828, 0.4267862141132355, 0.4278063178062439, 0.41638118028640747, 0.41479793190956116, 0.4037547707557678, 0.4057190716266632, 0.3993317484855652, 0.3998822569847107, 0.3947938084602356, 0.3892427682876587, 0.3883104622364044, 0.38828906416893005, 0.38071656227111816, 0.3796764314174652, 0.3743019104003906, 0.37170085310935974, 0.3701656758785248, 0.37454792857170105, 0.3674875497817993, 0.36271971464157104, 0.3600122332572937, 0.36538973450660706, 0.35550883412361145, 0.3578247129917145, 0.35613033175468445, 0.3542414605617523, 0.3526994585990906, 0.3528483211994171], "val_accuracy": [0.515999972820282, 0.6520000100135803, 0.6766666769981384, 0.7039999961853027, 0.7310000061988831, 0.7456666827201843, 0.7649999856948853, 0.7763333320617676, 0.7839999794960022, 0.796999990940094, 0.7973333597183228, 0.8076666593551636, 0.8136666417121887, 0.8143333196640015, 0.8149999976158142, 0.8273333311080933, 0.8270000219345093, 0.8330000042915344, 0.82833331823349, 0.8360000252723694, 0.8339999914169312, 0.8389999866485596, 0.8413333296775818, 0.8473333120346069, 0.8486666679382324, 0.8543333411216736, 0.8529999852180481, 0.8506666421890259, 0.8546666502952576, 0.8553333282470703, 0.8556666374206543, 0.8550000190734863, 0.8526666760444641, 0.8603333234786987, 0.8643333315849304, 0.8616666793823242, 0.8629999756813049, 0.8666666746139526, 0.8616666793823242, 0.8640000224113464, 0.8683333396911621, 0.8673333525657654, 0.8653333187103271, 0.8736666440963745, 0.8656666874885559, 0.8673333525657654, 0.8683333396911621, 0.8693333268165588, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 0, 5], [2, 2, 1, 3], [16, 16], [0, 1, 1], [3], [0, 6], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [4, 3, 9, 6, 8, 2, 3, 1, 2, 4, 8], [0, 0, 0, 3, 0, 4, 3, 1, 4, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 8, 5, 3, 0, 3, 1, 2, 1, 8, 5, 3, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(beta), beta), tf.math.negative(alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.30319881439209, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 2, 3, 0, 3, 9], [0, 1, 2, 2], [60, 13], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 0, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 8], [4, 0, 0, 2, 0, 0, 3, 1, 2, 4], [62, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 6, 3, 2, 8, 5, 3, 2, 2, 1, 1, 1, 22, 12, 10, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), beta))), tf.math.subtract(tf.math.pow(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), sigma), tf.math.sqrt(tf.math.sqrt(alpha))))), beta), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10196803510189056, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1], [0, 2, 3, 0, 3, 4, 7, 8, 3, 4, 7, 4, 9, 2, 6, 7, 3, 0, 5, 5, 8, 7, 8], [0, 0, 2, 2, 3, 0, 1, 3, 1, 3, 2, 2, 2, 1], [39, 11, 89, 60], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [2, 2, 3, 0, 3, 0], [0, 2, 0, 3, 5], [16, 16], [0, 1], [0], [0], [9], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 5, 3, 6, 8, 1, 2, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0], [16, 99, 96, 99, 61, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 37, 23, 14, 4, 11, 6, 5, 2, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.pow(tf.math.add(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(grad)), tf.math.multiply(tf.math.pow(tf.math.add(grad, tf.math.pow(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.multiply(alpha, grad), tf.math.negative(alpha)), grad)))), tf.math.square(grad)), tf.math.square(tf.math.sqrt(tf.math.add(grad, grad)))))), tf.math.sqrt(alpha))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(grad))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.square(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 2, 8], [0, 2, 0, 3, 3], [55, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 0], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 10, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 12, 7, 5, 2, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.sqrt(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha))))", "other_info": {"loss": [2.3038341999053955, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}]