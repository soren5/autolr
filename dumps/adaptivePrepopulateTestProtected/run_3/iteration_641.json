[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8822857141494751, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585750579834, 1.8655762672424316, 1.394430160522461, 1.0773245096206665, 0.9378393888473511, 0.8425824046134949, 0.7776632308959961, 0.736241340637207, 0.6971188187599182, 0.6732122302055359, 0.644855797290802, 0.6276965141296387, 0.6100340485572815, 0.5899673104286194, 0.5746485590934753, 0.5484329462051392, 0.5425268411636353, 0.5357900857925415, 0.5214410424232483, 0.5127171874046326, 0.4895091950893402, 0.4932740032672882, 0.48551443219184875, 0.47113916277885437, 0.46571049094200134, 0.450914591550827, 0.438728004693985, 0.4414178729057312, 0.4245515465736389, 0.4182806611061096, 0.4126766324043274, 0.41352686285972595, 0.4031256139278412, 0.40064555406570435, 0.3982388377189636, 0.38566267490386963, 0.38400527834892273, 0.3741128146648407, 0.36422181129455566, 0.36170411109924316, 0.35991787910461426, 0.35666367411613464, 0.3521813750267029, 0.34583958983421326, 0.34736087918281555, 0.34181836247444153, 0.33650368452072144, 0.33141741156578064, 0.3230496346950531, 0.3225416839122772, 0.315096914768219, 0.3059031665325165, 0.3058394491672516, 0.3017319440841675, 0.29568877816200256, 0.2933836281299591, 0.28774771094322205, 0.2856961190700531, 0.2802303731441498, 0.2779994010925293, 0.274711549282074, 0.2719985842704773, 0.2586328387260437, 0.2598455548286438, 0.2622571289539337, 0.25739434361457825, 0.2502012252807617, 0.2544722855091095, 0.24556587636470795, 0.24580754339694977, 0.23948103189468384, 0.23949603736400604, 0.23484042286872864, 0.22871272265911102, 0.2256491780281067, 0.22479403018951416, 0.21744707226753235, 0.21390178799629211, 0.21272219717502594], "accuracy": [0.2785629332065582, 0.49451854825019836, 0.559899628162384, 0.6215823292732239, 0.6654338836669922, 0.6950204968452454, 0.7181349992752075, 0.7322678565979004, 0.7441553473472595, 0.7483819723129272, 0.7627789974212646, 0.7717606425285339, 0.7728173136711121, 0.78113853931427, 0.7882710099220276, 0.7993659973144531, 0.7976489067077637, 0.8074230551719666, 0.8128384351730347, 0.8198388814926147, 0.8212917447090149, 0.819970965385437, 0.8272355198860168, 0.8350284099578857, 0.8305375576019287, 0.8387266993522644, 0.846387505531311, 0.8433496356010437, 0.8504821062088013, 0.8524633646011353, 0.8535200357437134, 0.854708731174469, 0.856689989566803, 0.8551049828529358, 0.8593316674232483, 0.8615770936012268, 0.8628978729248047, 0.8702945709228516, 0.8691058158874512, 0.871879518032074, 0.8722757697105408, 0.8691058158874512, 0.8733324408531189, 0.8800686597824097, 0.8795403242111206, 0.8755778670310974, 0.8768987059593201, 0.8829745054244995, 0.8824461698532104, 0.8823140859603882, 0.887201189994812, 0.8897107243537903, 0.8889182209968567, 0.8927486538887024, 0.8902390599250793, 0.8953903317451477, 0.8980319499969482, 0.8976356983184814, 0.900409460067749, 0.89552241563797, 0.9025228023529053, 0.8989565372467041, 0.9056927561759949, 0.9085986018180847, 0.9030511379241943, 0.9066173434257507, 0.9101836085319519, 0.9083344340324402, 0.909259021282196, 0.9099194407463074, 0.9126931428909302, 0.9140139818191528, 0.9119006991386414, 0.9171839952468872, 0.9169198274612427, 0.9185048341751099, 0.9218068718910217, 0.9185048341751099, 0.9196935892105103], "val_loss": [2.033445358276367, 1.5042319297790527, 1.0271512269973755, 0.8147247433662415, 0.7278039455413818, 0.68117356300354, 0.6306353211402893, 0.5966841578483582, 0.5751398801803589, 0.5460951328277588, 0.5314993858337402, 0.509799063205719, 0.4957965612411499, 0.4792602062225342, 0.46671679615974426, 0.45267683267593384, 0.4441072940826416, 0.4356139600276947, 0.42943108081817627, 0.4255247414112091, 0.41811680793762207, 0.4163394272327423, 0.39929893612861633, 0.3969916105270386, 0.39089226722717285, 0.387652188539505, 0.3844633102416992, 0.3824205696582794, 0.3749690353870392, 0.3701930642127991, 0.36967378854751587, 0.36689504981040955, 0.3585263788700104, 0.3587398827075958, 0.36267170310020447, 0.3561091423034668, 0.35379692912101746, 0.3499273955821991, 0.34701839089393616, 0.3467637896537781, 0.3424672484397888, 0.33951225876808167, 0.3386255204677582, 0.34044384956359863, 0.33945050835609436, 0.33684298396110535, 0.3322163224220276, 0.33181649446487427, 0.32827115058898926, 0.3312568664550781, 0.3297465741634369, 0.3256674110889435, 0.3234780728816986, 0.32119208574295044, 0.3232716917991638, 0.3209094703197479, 0.31944912672042847, 0.3157532513141632, 0.3144265413284302, 0.31676045060157776, 0.31425556540489197, 0.3131799101829529, 0.3147056996822357, 0.3154993951320648, 0.31771615147590637, 0.31545644998550415, 0.3127000629901886, 0.31382524967193604, 0.31026333570480347, 0.3147730529308319, 0.30829918384552, 0.3107443153858185, 0.31316936016082764, 0.30297672748565674, 0.30325081944465637, 0.30436232686042786, 0.3072424829006195, 0.30681705474853516, 0.3061434030532837], "val_accuracy": [0.5526666641235352, 0.6666666865348816, 0.687333345413208, 0.7083333134651184, 0.731333315372467, 0.7446666955947876, 0.7606666684150696, 0.762666642665863, 0.7873333096504211, 0.7889999747276306, 0.7973333597183228, 0.8056666851043701, 0.8193333148956299, 0.8259999752044678, 0.8289999961853027, 0.8410000205039978, 0.8453333377838135, 0.8450000286102295, 0.8489999771118164, 0.847000002861023, 0.8516666889190674, 0.856333315372467, 0.859333336353302, 0.856333315372467, 0.8633333444595337, 0.8640000224113464, 0.8656666874885559, 0.8646666407585144, 0.8679999709129333, 0.8696666955947876, 0.8640000224113464, 0.8686666488647461, 0.8713333606719971, 0.8709999918937683, 0.8703333139419556, 0.8723333477973938, 0.871999979019165, 0.874666690826416, 0.8723333477973938, 0.8759999871253967, 0.8726666569709778, 0.875333309173584, 0.8790000081062317, 0.8756666779518127, 0.8726666569709778, 0.8769999742507935, 0.8796666860580444, 0.8796666860580444, 0.8806666731834412, 0.8793333172798157, 0.8813333511352539, 0.8840000033378601, 0.8840000033378601, 0.8843333125114441, 0.8809999823570251, 0.8856666684150696, 0.8866666555404663, 0.8833333253860474, 0.8866666555404663, 0.8843333125114441, 0.8856666684150696, 0.8880000114440918, 0.887333333492279, 0.8883333206176758, 0.8866666555404663, 0.8896666765213013, 0.8863333463668823, 0.8853333592414856, 0.890999972820282, 0.8870000243186951, 0.8883333206176758, 0.8883333206176758, 0.8916666507720947, 0.8939999938011169, 0.8896666765213013, 0.8916666507720947, 0.890999972820282, 0.8926666378974915, 0.8913333415985107]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8531428575515747, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2238333225250244, 1.8682066202163696, 1.3907318115234375, 1.0954439640045166, 0.9470294713973999, 0.8254233002662659, 0.769296407699585, 0.7172515392303467, 0.6893166303634644, 0.6625416278839111, 0.6347358226776123, 0.6092699766159058, 0.5882158279418945, 0.5758269429206848, 0.552653431892395, 0.5394500494003296, 0.5291963815689087, 0.5077670216560364, 0.4999810755252838, 0.49340614676475525, 0.48701441287994385, 0.4740435481071472, 0.4627366364002228, 0.4618660509586334, 0.44846582412719727, 0.4380214214324951, 0.4376600980758667, 0.4289785921573639, 0.41413575410842896, 0.41740235686302185, 0.4031204581260681, 0.40087464451789856, 0.39218148589134216, 0.38987278938293457, 0.389631986618042, 0.36997756361961365, 0.36987823247909546, 0.36145439743995667, 0.36633238196372986, 0.34787556529045105, 0.3451746702194214, 0.3377372622489929, 0.33922335505485535, 0.3401508331298828, 0.3316878080368042, 0.3244454264640808, 0.3214558959007263, 0.3199799060821533, 0.31787174940109253, 0.30792340636253357, 0.305002897977829, 0.2985314726829529, 0.2900131940841675, 0.2911149263381958, 0.2924565374851227, 0.2781556248664856, 0.2784979045391083, 0.2777913808822632, 0.27123311161994934, 0.26024383306503296, 0.26046594977378845, 0.25849419832229614, 0.25537627935409546, 0.2485569417476654, 0.2505597174167633, 0.24686254560947418, 0.24010290205478668, 0.23326969146728516, 0.22984565794467926, 0.22379037737846375, 0.22003740072250366, 0.22415132820606232, 0.22046691179275513, 0.21672040224075317, 0.21089708805084229, 0.2054939568042755, 0.20243465900421143, 0.19773909449577332], "accuracy": [0.27882710099220276, 0.4893673360347748, 0.5698058605194092, 0.618280291557312, 0.6633205413818359, 0.700700044631958, 0.7209087014198303, 0.7376832365989685, 0.7429665923118591, 0.7602694630622864, 0.7627789974212646, 0.778761088848114, 0.7807422876358032, 0.7938185334205627, 0.7976489067077637, 0.8006868362426758, 0.8101968169212341, 0.8186501264572144, 0.819970965385437, 0.8219521641731262, 0.8241975903511047, 0.8296129703521729, 0.8350284099578857, 0.8376700282096863, 0.8428213000297546, 0.8445383906364441, 0.8444063067436218, 0.8428213000297546, 0.8539162874221802, 0.8539162874221802, 0.8557654023170471, 0.8562937378883362, 0.8602562546730042, 0.8626337051391602, 0.8639545440673828, 0.8705587387084961, 0.8642187118530273, 0.8714832663536072, 0.8683133125305176, 0.8761062026023865, 0.8778232932090759, 0.8802007436752319, 0.8782195448875427, 0.8741249442100525, 0.8798044919967651, 0.8820499181747437, 0.8874653577804565, 0.884691596031189, 0.8874653577804565, 0.8920882344245911, 0.8887861371040344, 0.8908994793891907, 0.895918607711792, 0.897899866104126, 0.896446943283081, 0.9005415439605713, 0.898428201675415, 0.9006736278533936, 0.9041078090667725, 0.9055606722831726, 0.906749427318573, 0.9074098467826843, 0.9068815112113953, 0.9153348207473755, 0.9099194407463074, 0.9103156924247742, 0.913089394569397, 0.9140139818191528, 0.9148064851760864, 0.9187690019607544, 0.9187690019607544, 0.9186369180679321, 0.9228635430335999, 0.9249768853187561, 0.9243164658546448, 0.9257693886756897, 0.9273543953895569, 0.9298639297485352], "val_loss": [2.039881706237793, 1.5116952657699585, 1.0358295440673828, 0.8377698659896851, 0.7468692064285278, 0.6901067495346069, 0.643723726272583, 0.6137829422950745, 0.5865397453308105, 0.566513180732727, 0.5547300577163696, 0.5361266732215881, 0.5171550512313843, 0.5090989470481873, 0.4960785210132599, 0.4876832365989685, 0.48508551716804504, 0.46786734461784363, 0.4622945189476013, 0.4522841274738312, 0.44961845874786377, 0.4451747238636017, 0.43624454736709595, 0.4309665560722351, 0.43255171179771423, 0.42453938722610474, 0.42360547184944153, 0.41232722997665405, 0.41181644797325134, 0.40295109152793884, 0.4031718075275421, 0.3979465365409851, 0.39330965280532837, 0.39919978380203247, 0.3943871259689331, 0.38804349303245544, 0.38430818915367126, 0.385364830493927, 0.3762834370136261, 0.3784887194633484, 0.37426790595054626, 0.3771478235721588, 0.37487828731536865, 0.373355507850647, 0.3679075539112091, 0.3643281161785126, 0.36158427596092224, 0.36545810103416443, 0.3640275001525879, 0.35656335949897766, 0.3588140904903412, 0.3616586923599243, 0.3551725149154663, 0.35769832134246826, 0.35315290093421936, 0.3527759909629822, 0.35060954093933105, 0.3461441099643707, 0.35397541522979736, 0.35112065076828003, 0.34799692034721375, 0.35292914509773254, 0.3464025855064392, 0.3499464988708496, 0.34722647070884705, 0.34388992190361023, 0.34279513359069824, 0.3425072729587555, 0.3451939821243286, 0.3428809344768524, 0.3403526246547699, 0.34418001770973206, 0.3395860493183136, 0.33814120292663574, 0.34426644444465637, 0.34551653265953064, 0.3423391580581665, 0.35362085700035095], "val_accuracy": [0.5516666769981384, 0.6589999794960022, 0.6899999976158142, 0.7113333344459534, 0.7336666584014893, 0.7513333559036255, 0.7643333077430725, 0.7733333110809326, 0.777999997138977, 0.7896666526794434, 0.7976666688919067, 0.8023333549499512, 0.8119999766349792, 0.8100000023841858, 0.8140000104904175, 0.8176666498184204, 0.8173333406448364, 0.8253333568572998, 0.8266666531562805, 0.8336666822433472, 0.8339999914169312, 0.8326666951179504, 0.8376666903495789, 0.8389999866485596, 0.8399999737739563, 0.8413333296775818, 0.8426666855812073, 0.8489999771118164, 0.8463333249092102, 0.8500000238418579, 0.8523333072662354, 0.8506666421890259, 0.8513333201408386, 0.8543333411216736, 0.8550000190734863, 0.8536666631698608, 0.859666645526886, 0.859333336353302, 0.862333357334137, 0.8600000143051147, 0.8613333106040955, 0.8619999885559082, 0.8616666793823242, 0.8633333444595337, 0.8653333187103271, 0.8646666407585144, 0.8673333525657654, 0.8663333058357239, 0.8666666746139526, 0.8679999709129333, 0.8733333349227905, 0.8693333268165588, 0.8696666955947876, 0.871666669845581, 0.8709999918937683, 0.8736666440963745, 0.874666690826416, 0.8723333477973938, 0.871666669845581, 0.8726666569709778, 0.8756666779518127, 0.874666690826416, 0.8759999871253967, 0.8740000128746033, 0.8769999742507935, 0.8740000128746033, 0.8773333430290222, 0.878000020980835, 0.8763333559036255, 0.875, 0.8763333559036255, 0.875333309173584, 0.8806666731834412, 0.8763333559036255, 0.878333330154419, 0.8763333559036255, 0.8786666393280029, 0.8773333430290222]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [4, 2, 3, 0, 3], [2, 1, 0, 2], [39, 89], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [3, 2, 5, 0, 3, 0, 8, 9], [0, 2, 3, 3], [16, 16], [0, 1], [8], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 5, 0, 6, 3, 2, 5, 9, 5, 7, 7, 8, 5, 7, 0, 6, 7, 0], [1, 0, 0, 3, 0, 0, 3, 1, 2, 0, 5, 7, 6, 2, 2, 0, 3], [16, 99, 42, 99, 29, 1, 79]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 1, 11, 8, 3, 2, 2, 1, 1, 1, 45, 28, 17, 7], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(grad, tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.square(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(beta)))), tf.math.sqrt(grad)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.math.square(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad)), tf.math.square(tf.math.add(grad, tf.math.add(tf.math.sqrt(tf.math.square(grad)), tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(beta, tf.math.add(tf.math.negative(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), sigma)))))))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 2, 1, 4, 3, 1], [0, 0, 0, 2, 2, 1], [39, 39, 86], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 5, 5, 3, 4, 8], [1, 2, 0, 3, 1], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [6, 3, 3, 6, 8, 5, 4, 1, 4, 2, 8], [0, 2, 0, 3, 0, 0, 3, 1, 2, 0], [16, 55, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 6, 6, 3, 14, 9, 5, 1, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(grad, alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.square(alpha)), tf.math.square(beta)), tf.math.multiply(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.square(beta)), tf.math.pow(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 6, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [0, 2, 3, 0, 3, 5, 4, 0, 4, 1], [0, 2, 0, 3, 5, 0, 1], [16, 16, 58], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 4, 8, 1, 2, 1, 4, 2, 8], [0, 0, 0, 4, 0, 4, 3, 1, 2, 0], [90, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 17, 10, 7, 3, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.pow(tf.math.subtract(grad, grad), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(grad, sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 19], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [1, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 1, 3, 1, 4, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 3, 3, 2, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(alpha, sigma)))), alpha), tf.math.add(tf.math.sqrt(grad), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}]