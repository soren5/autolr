[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8708571195602417, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2209584712982178, 1.8717578649520874, 1.393837571144104, 1.093549370765686, 0.9290405511856079, 0.839874267578125, 0.7754119038581848, 0.7318230867385864, 0.6994075179100037, 0.6670289635658264, 0.6424258947372437, 0.6157774925231934, 0.6021709442138672, 0.5827792286872864, 0.5632219910621643, 0.5611121654510498, 0.543936550617218, 0.525885283946991, 0.5194571614265442, 0.5082411766052246, 0.49265405535697937, 0.48628300428390503, 0.47811585664749146, 0.4669620096683502, 0.46156495809555054, 0.45475059747695923, 0.4430905878543854, 0.43255048990249634, 0.4300566017627716, 0.41574329137802124, 0.4150456488132477, 0.4092234671115875, 0.4031895697116852, 0.4007841646671295, 0.39271581172943115, 0.3834591805934906, 0.37677839398384094, 0.37167102098464966, 0.3638429045677185, 0.36118659377098083, 0.3630208969116211, 0.35307571291923523, 0.3405515253543854, 0.34024152159690857, 0.33368709683418274, 0.3313051462173462, 0.33144357800483704, 0.32809266448020935, 0.3150838315486908, 0.3173593580722809, 0.3185625970363617, 0.29868727922439575, 0.2996281385421753, 0.3026690185070038, 0.2924025356769562, 0.28149110078811646, 0.28409162163734436, 0.28074806928634644], "accuracy": [0.2790912687778473, 0.4803856909275055, 0.5658433437347412, 0.6100911498069763, 0.6713775992393494, 0.7000396251678467, 0.7223616242408752, 0.7349095344543457, 0.7474573850631714, 0.7584202885627747, 0.7685906887054443, 0.7790252566337585, 0.7816668748855591, 0.7918372750282288, 0.7992339134216309, 0.8000264167785645, 0.8037247657775879, 0.8083476424217224, 0.8125742673873901, 0.8203672170639038, 0.8211596608161926, 0.8257825970649719, 0.8286884427070618, 0.8337075710296631, 0.8333113193511963, 0.837141752243042, 0.846387505531311, 0.8453308939933777, 0.8471800088882446, 0.8540483713150024, 0.8500858545303345, 0.8535200357437134, 0.8602562546730042, 0.858671247959137, 0.8626337051391602, 0.8631620407104492, 0.8644828796386719, 0.8689737319946289, 0.869502067565918, 0.8684453964233398, 0.8720116019248962, 0.8747853636741638, 0.8780874609947205, 0.8750495314598083, 0.8809932470321655, 0.8836349248886108, 0.8815215826034546, 0.8808611631393433, 0.8861445188522339, 0.8848236799240112, 0.8854840993881226, 0.8919561505317688, 0.8914278149604797, 0.8901069760322571, 0.896446943283081, 0.8988244533538818, 0.8927486538887024, 0.8971073627471924], "val_loss": [2.037682056427002, 1.5133662223815918, 1.0363752841949463, 0.8303910493850708, 0.7444700598716736, 0.695204496383667, 0.6532502174377441, 0.6201517581939697, 0.5938736796379089, 0.5777191519737244, 0.5553737282752991, 0.5404482483863831, 0.5307192206382751, 0.513337254524231, 0.5012134313583374, 0.49378731846809387, 0.48465242981910706, 0.4748303294181824, 0.46607306599617004, 0.46007999777793884, 0.4570854902267456, 0.44332659244537354, 0.4369870126247406, 0.43660563230514526, 0.4273824989795685, 0.42583969235420227, 0.41894763708114624, 0.4165365695953369, 0.4141499102115631, 0.40549755096435547, 0.4016159176826477, 0.39975517988204956, 0.3959590196609497, 0.3962501585483551, 0.39273691177368164, 0.38660529255867004, 0.3854505121707916, 0.38282540440559387, 0.37993285059928894, 0.378239244222641, 0.3774382472038269, 0.37411245703697205, 0.37105366587638855, 0.3697403073310852, 0.3678359389305115, 0.3656280040740967, 0.3694634735584259, 0.3614829182624817, 0.36359626054763794, 0.36455509066581726, 0.35654357075691223, 0.3622417449951172, 0.3582606911659241, 0.35398954153060913, 0.3587389588356018, 0.35380256175994873, 0.35487592220306396, 0.3556273579597473], "val_accuracy": [0.5473333597183228, 0.6573333144187927, 0.6893333196640015, 0.7120000123977661, 0.734666645526886, 0.7429999709129333, 0.7526666522026062, 0.7673333287239075, 0.7799999713897705, 0.784333348274231, 0.7956666946411133, 0.8040000200271606, 0.8043333292007446, 0.8119999766349792, 0.8103333115577698, 0.8140000104904175, 0.824999988079071, 0.8266666531562805, 0.8299999833106995, 0.8320000171661377, 0.8349999785423279, 0.8416666388511658, 0.8453333377838135, 0.8420000076293945, 0.843999981880188, 0.8460000157356262, 0.8473333120346069, 0.847000002861023, 0.8500000238418579, 0.8496666550636292, 0.8556666374206543, 0.8560000061988831, 0.8566666841506958, 0.859333336353302, 0.8586666584014893, 0.8586666584014893, 0.859666645526886, 0.859333336353302, 0.8629999756813049, 0.8613333106040955, 0.8613333106040955, 0.8650000095367432, 0.8646666407585144, 0.8663333058357239, 0.8676666617393494, 0.8700000047683716, 0.8690000176429749, 0.8733333349227905, 0.8713333606719971, 0.8676666617393494, 0.8709999918937683, 0.8686666488647461, 0.875, 0.871999979019165, 0.8736666440963745, 0.8743333220481873, 0.8740000128746033, 0.874666690826416]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [8, 2, 3, 0, 3, 8], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [14, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 7, 4, 3, 2, 2, 1, 1, 1, 22, 12, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0], [0, 2, 3, 5, 3, 6, 4, 3, 4, 6, 3, 1, 6, 6, 2, 6, 7, 8, 3, 8, 1, 8, 4, 8, 4, 4, 7, 0, 2, 6, 4, 5, 9], [0, 1, 0, 2, 3, 0, 3, 3, 3, 0, 1, 1, 1, 3, 3, 3, 2, 1, 1, 2, 2, 0, 2, 2], [39, 39, 87, 88, 39, 97], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 4, 5], [0, 2, 0, 3], [16, 16], [0, 1, 0, 0, 1, 1], [1, 8, 2], [0, 0, 0], [99, 62, 12], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 3, 4, 2, 8], [0, 0, 2, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 3, 61, 46]], "fitness": -0.10000000149011612, "mapping_values": [1, 57, 33, 24, 6, 10, 6, 4, 2, 6, 3, 3, 3, 21, 11, 10, 5], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.multiply(grad, tf.math.pow(tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.subtract(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(grad), grad), tf.math.multiply(tf.math.sqrt(grad), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(alpha, tf.math.sqrt(tf.math.pow(alpha, alpha)))), tf.math.sqrt(grad)), grad)), tf.math.pow(tf.math.pow(grad, grad), tf.math.add(alpha, alpha))), tf.math.negative(tf.math.add(grad, tf.math.divide_no_nan(grad, tf.math.pow(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)))))), grad))), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), beta)), tf.math.pow(tf.math.add(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), sigma), tf.math.sqrt(alpha)), beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 2, 0, 2], [39, 3], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 0], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [6, 3, 3, 0, 8, 1, 4, 1, 4, 2, 8], [0, 0, 1, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 11, 7, 4, 2, 2, 1, 1, 1, 19, 10, 9, 4], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), alpha)), tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))))), sigma), alpha), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 0], [0, 2, 3, 0, 5], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0], [0, 2, 3, 0, 3, 5, 2, 2, 7, 9], [0, 2, 0, 3, 0, 5], [16, 16, 92, 32], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 8, 8, 1, 5, 1, 4, 2, 8], [0, 0, 0, 4, 0, 0, 3, 4, 2, 0], [16, 99, 96, 95, 39, 1]], "fitness": -0.08828571438789368, "mapping_values": [1, 6, 3, 3, 1, 16, 10, 6, 4, 2, 1, 1, 1, 11, 6, 5, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(tf.math.add(tf.math.add(grad, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), grad), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))), grad), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3098607063293457, 2.308685779571533, 2.3099656105041504, 2.3092293739318848, 2.309307098388672, 2.3098771572113037, 2.308983325958252, 2.3090500831604004, 2.3080666065216064], "accuracy": [0.09100515395402908, 0.09311848133802414, 0.08942015469074249, 0.09074098616838455, 0.0948355570435524, 0.09338264167308807, 0.09338264167308807, 0.09325055778026581, 0.09655263274908066], "val_loss": [2.309389591217041, 2.309213161468506, 2.309037446975708, 2.3088603019714355, 2.308684825897217, 2.30850887298584, 2.308333396911621, 2.3081579208374023, 2.3079848289489746], "val_accuracy": [0.09000000357627869, 0.09000000357627869, 0.09033333510160446, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09033333510160446, 0.09066666662693024]}}]