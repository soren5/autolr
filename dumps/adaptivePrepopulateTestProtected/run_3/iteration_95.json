[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.878000020980835, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223759174346924, 1.8681567907333374, 1.3971633911132812, 1.1021500825881958, 0.9438490867614746, 0.8268281817436218, 0.7700234055519104, 0.7182450890541077, 0.6839274764060974, 0.655160665512085, 0.6316797733306885, 0.6046612858772278, 0.586663544178009, 0.5732303261756897, 0.5552444458007812, 0.5382086634635925, 0.5205084085464478, 0.5141545534133911, 0.49866363406181335, 0.4905571937561035, 0.48713892698287964, 0.4630949795246124, 0.46493759751319885, 0.4510720372200012, 0.4456666111946106, 0.4411585330963135, 0.43109801411628723, 0.4194287657737732, 0.41647717356681824, 0.4177640676498413, 0.39898860454559326, 0.3982110619544983, 0.3941095173358917, 0.3838343918323517, 0.38270825147628784, 0.38132011890411377, 0.3706604242324829, 0.3630581796169281, 0.35970449447631836, 0.3585955500602722, 0.3488880693912506, 0.3406795859336853, 0.3434852361679077, 0.34305644035339355, 0.32770219445228577, 0.3274216949939728, 0.3164256513118744, 0.31487780809402466, 0.31453031301498413, 0.3020377457141876, 0.3013147711753845, 0.29238083958625793, 0.30650538206100464, 0.2886098325252533, 0.28784143924713135, 0.28922179341316223, 0.27991431951522827, 0.27731093764305115, 0.27029022574424744, 0.2677718997001648, 0.2672445476055145], "accuracy": [0.27182671427726746, 0.4913485646247864, 0.5609562993049622, 0.6095628142356873, 0.6618676781654358, 0.6997754573822021, 0.7215691208839417, 0.7407211661338806, 0.7508915662765503, 0.7592127919197083, 0.7656848430633545, 0.7798177003860474, 0.7849689722061157, 0.789459764957428, 0.7991018295288086, 0.806630551815033, 0.81112140417099, 0.8088759779930115, 0.8210275769233704, 0.8181217908859253, 0.826310932636261, 0.8333113193511963, 0.8294808864593506, 0.8401796221733093, 0.8409721255302429, 0.8436138033866882, 0.8459912538528442, 0.8519350290298462, 0.8485008478164673, 0.8490291833877563, 0.856689989566803, 0.8573504090309143, 0.8615770936012268, 0.8644828796386719, 0.8605204224586487, 0.8614450097084045, 0.8671245574951172, 0.8726720213890076, 0.8732003569602966, 0.8689737319946289, 0.8762382864952087, 0.8798044919967651, 0.8717474341392517, 0.8825782537460327, 0.8840311765670776, 0.8845595121383667, 0.8885219693183899, 0.8865407705307007, 0.8887861371040344, 0.894069492816925, 0.8918240666389465, 0.8953903317451477, 0.8860124349594116, 0.8988244533538818, 0.8992207050323486, 0.8956544995307922, 0.9014661312103271, 0.89988112449646, 0.900409460067749, 0.9046360850334167, 0.9033153057098389], "val_loss": [2.0386126041412354, 1.5089809894561768, 1.0396978855133057, 0.8277255296707153, 0.7414798736572266, 0.6867381930351257, 0.6452507376670837, 0.6096968054771423, 0.5920496582984924, 0.5695558786392212, 0.550778865814209, 0.5315823554992676, 0.5166425704956055, 0.5040237307548523, 0.4927339255809784, 0.48035380244255066, 0.4752146899700165, 0.4640548527240753, 0.45926037430763245, 0.4498494863510132, 0.44989997148513794, 0.43486902117729187, 0.4302854835987091, 0.42699891328811646, 0.4222937822341919, 0.4179273545742035, 0.4156407117843628, 0.40615877509117126, 0.40567347407341003, 0.40483561158180237, 0.4008205533027649, 0.3957735300064087, 0.3910598158836365, 0.39842313528060913, 0.38378071784973145, 0.3824272155761719, 0.37983548641204834, 0.3832281529903412, 0.37993335723876953, 0.37290528416633606, 0.37028563022613525, 0.3697679340839386, 0.369826078414917, 0.3630952835083008, 0.3613884747028351, 0.3612003028392792, 0.3630628287792206, 0.35836127400398254, 0.35707563161849976, 0.3544061779975891, 0.35439038276672363, 0.35541149973869324, 0.34793493151664734, 0.355723112821579, 0.3566884696483612, 0.3480426073074341, 0.35176366567611694, 0.34468159079551697, 0.3469727337360382, 0.34757280349731445, 0.34379008412361145], "val_accuracy": [0.546999990940094, 0.6536666750907898, 0.6856666803359985, 0.7066666483879089, 0.7366666793823242, 0.7536666393280029, 0.7599999904632568, 0.7720000147819519, 0.7706666588783264, 0.7926666736602783, 0.7963333129882812, 0.7956666946411133, 0.8103333115577698, 0.809333324432373, 0.8220000267028809, 0.8226666450500488, 0.8243333101272583, 0.8330000042915344, 0.8349999785423279, 0.8370000123977661, 0.8333333134651184, 0.8429999947547913, 0.8463333249092102, 0.8446666598320007, 0.8476666808128357, 0.8479999899864197, 0.8450000286102295, 0.8506666421890259, 0.8496666550636292, 0.8529999852180481, 0.8556666374206543, 0.8556666374206543, 0.8586666584014893, 0.8526666760444641, 0.8576666712760925, 0.8610000014305115, 0.859000027179718, 0.8616666793823242, 0.8653333187103271, 0.8673333525657654, 0.8673333525657654, 0.8659999966621399, 0.8693333268165588, 0.8690000176429749, 0.8726666569709778, 0.8726666569709778, 0.8740000128746033, 0.8730000257492065, 0.871999979019165, 0.8759999871253967, 0.874666690826416, 0.871999979019165, 0.8806666731834412, 0.8776666522026062, 0.8706666827201843, 0.8820000290870667, 0.878333330154419, 0.878000020980835, 0.8806666731834412, 0.8793333172798157, 0.878333330154419]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8602856993675232, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221388816833496, 1.8685261011123657, 1.3928660154342651, 1.1014677286148071, 0.9408524632453918, 0.8428432941436768, 0.7776322960853577, 0.7293348908424377, 0.6853911876678467, 0.6635370850563049, 0.6325316429138184, 0.6151977777481079, 0.5885956883430481, 0.5728843212127686, 0.5630044937133789, 0.5445237755775452, 0.5272914171218872, 0.5225156545639038, 0.5043879151344299, 0.5023360848426819, 0.4877638816833496, 0.4818868637084961, 0.4719332754611969, 0.46921858191490173, 0.4555005133152008, 0.4424579441547394, 0.43916329741477966, 0.43651819229125977, 0.42320939898490906, 0.41682273149490356, 0.4083019495010376, 0.41199421882629395, 0.4032749533653259, 0.39385831356048584, 0.38579151034355164, 0.38942816853523254, 0.38318806886672974, 0.37323662638664246, 0.36328980326652527, 0.362256795167923, 0.3556821346282959, 0.3569299876689911, 0.34183862805366516, 0.34514930844306946, 0.33333462476730347, 0.3284176290035248, 0.3295649290084839, 0.322061687707901, 0.32216450572013855, 0.3155762553215027, 0.3145180344581604, 0.3046027421951294, 0.3056173026561737, 0.29901471734046936, 0.29248324036598206, 0.2949138581752777, 0.29234015941619873, 0.28532177209854126, 0.2777438759803772, 0.2831451892852783, 0.2749103307723999, 0.2677669823169708, 0.26539158821105957, 0.2591532766819, 0.2569199502468109, 0.24916806817054749, 0.2544844150543213, 0.24342525005340576, 0.24303263425827026, 0.24173259735107422, 0.24094392359256744, 0.22923189401626587], "accuracy": [0.27222296595573425, 0.4765552878379822, 0.5608242154121399, 0.6110157370567322, 0.6573768258094788, 0.6983225345611572, 0.7182670831680298, 0.7302865982055664, 0.7506273984909058, 0.7607977986335754, 0.7725531458854675, 0.7744023203849792, 0.7853652238845825, 0.7955356240272522, 0.7992339134216309, 0.8058380484580994, 0.8119139075279236, 0.81112140417099, 0.8204993009567261, 0.8195747137069702, 0.8249900937080383, 0.8277638554573059, 0.8285563588142395, 0.8379341959953308, 0.8342359066009521, 0.8454629778862, 0.8477083444595337, 0.8449346423149109, 0.8473120927810669, 0.8521991968154907, 0.8529917001724243, 0.8564258217811584, 0.8560295701026917, 0.857218325138092, 0.8669924736022949, 0.8590674996376038, 0.8628978729248047, 0.8687095642089844, 0.8701624870300293, 0.8709549307823181, 0.8729361891746521, 0.8730682730674744, 0.8794082403182983, 0.8791441321372986, 0.8824461698532104, 0.8820499181747437, 0.8861445188522339, 0.8837670087814331, 0.8833707571029663, 0.8879936337471008, 0.8845595121383667, 0.8894465565681458, 0.8902390599250793, 0.8945978283882141, 0.8957865834236145, 0.8927486538887024, 0.8985602855682373, 0.8977677822113037, 0.8989565372467041, 0.8996169567108154, 0.9015982151031494, 0.904768168926239, 0.9052965044975281, 0.9091269373893738, 0.9096552729606628, 0.91124027967453, 0.910711944103241, 0.9162594079971313, 0.9128252267837524, 0.9157310724258423, 0.9149385690689087, 0.9182406663894653], "val_loss": [2.042544364929199, 1.5253784656524658, 1.0705031156539917, 0.8702515363693237, 0.7784210443496704, 0.7208174467086792, 0.6786541938781738, 0.6409684419631958, 0.618417501449585, 0.6034597754478455, 0.5821495056152344, 0.5615050196647644, 0.5478098392486572, 0.5424623489379883, 0.5333178639411926, 0.515427827835083, 0.5148782730102539, 0.5014406442642212, 0.4984705448150635, 0.49497005343437195, 0.4794074594974518, 0.4785236418247223, 0.47333166003227234, 0.46213388442993164, 0.46148428320884705, 0.4560195207595825, 0.44604557752609253, 0.4525497257709503, 0.4446501135826111, 0.4389984905719757, 0.4322758913040161, 0.43148550391197205, 0.4333387017250061, 0.42879021167755127, 0.42546671628952026, 0.4235647916793823, 0.4182444214820862, 0.41596394777297974, 0.4129132032394409, 0.41066503524780273, 0.40653732419013977, 0.40293657779693604, 0.4060444235801697, 0.4006509482860565, 0.3975392282009125, 0.3978511691093445, 0.3956010341644287, 0.39475512504577637, 0.39428719878196716, 0.3917864263057709, 0.39468619227409363, 0.38966605067253113, 0.3860168159008026, 0.38990795612335205, 0.3891749382019043, 0.39160481095314026, 0.38645225763320923, 0.3836558163166046, 0.3819884955883026, 0.3837134540081024, 0.38126054406166077, 0.391777902841568, 0.3772755563259125, 0.3776237666606903, 0.38363704085350037, 0.38209375739097595, 0.37454861402511597, 0.3906647861003876, 0.3809460401535034, 0.3800903260707855, 0.379576712846756, 0.3823513090610504], "val_accuracy": [0.5073333382606506, 0.6466666460037231, 0.6759999990463257, 0.6990000009536743, 0.7243333458900452, 0.7400000095367432, 0.7506666779518127, 0.7663333415985107, 0.7723333239555359, 0.7736666798591614, 0.7850000262260437, 0.7950000166893005, 0.8006666898727417, 0.8019999861717224, 0.8006666898727417, 0.8113333582878113, 0.8080000281333923, 0.8209999799728394, 0.8206666707992554, 0.8206666707992554, 0.8263333439826965, 0.8293333053588867, 0.8330000042915344, 0.8360000252723694, 0.8320000171661377, 0.8366666436195374, 0.8420000076293945, 0.8370000123977661, 0.8373333215713501, 0.846666693687439, 0.8460000157356262, 0.843999981880188, 0.8433333039283752, 0.8489999771118164, 0.8516666889190674, 0.8433333039283752, 0.8473333120346069, 0.8506666421890259, 0.8543333411216736, 0.8496666550636292, 0.8560000061988831, 0.8543333411216736, 0.8573333621025085, 0.8560000061988831, 0.8523333072662354, 0.856333315372467, 0.859000027179718, 0.8610000014305115, 0.8610000014305115, 0.8573333621025085, 0.8603333234786987, 0.8610000014305115, 0.862666666507721, 0.8576666712760925, 0.862666666507721, 0.8610000014305115, 0.8610000014305115, 0.8633333444595337, 0.8633333444595337, 0.8643333315849304, 0.8610000014305115, 0.8616666793823242, 0.8669999837875366, 0.8679999709129333, 0.8679999709129333, 0.8656666874885559, 0.8690000176429749, 0.8636666536331177, 0.8656666874885559, 0.8673333525657654, 0.8673333525657654, 0.8659999966621399]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [50, 39], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 8, 5, 1, 2, 2, 8], [0, 2, 0, 3, 4, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [2, 3, 3, 6, 8, 1, 4, 2, 4, 2, 8, 2, 3, 2, 4, 1, 7, 9, 6, 4, 1], [2, 0, 0, 3, 4, 4, 3, 1, 2, 0, 2, 1, 5, 7, 7, 0, 2, 2], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 16, 10, 6, 2, 2, 1, 1, 1, 39, 21, 18, 5], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.math.square(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad))))), tf.math.sqrt(grad)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), grad)), grad), tf.math.add(tf.math.pow(tf.math.add(sigma, tf.math.sqrt(tf.math.add(alpha, beta))), tf.math.multiply(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), beta), tf.math.pow(tf.math.subtract(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.pow(alpha, tf.math.subtract(grad, grad)), grad)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), beta))), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 9, 3], [0, 1, 2, 1], [39, 20], [1, 0, 1, 0, 1, 0, 0, 1, 0, 1], [2, 2, 3, 0, 3, 5], [0, 3, 0, 3], [16, 16], [0, 1, 0, 1, 1], [6, 3], [0, 2, 3], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 2, 4, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 1, 0, 1, 1, 5, 2, 3, 1, 21, 11, 10, 6], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(beta, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.subtract(tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 2, 2], [93, 51], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 8, 3, 6, 8, 1, 4, 1, 4, 2, 8, 8], [0, 0, 1, 3, 0, 0, 3, 1, 2, 0], [16, 99, 7, 99, 61, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 0, 6, 3, 3, 2, 2, 1, 1, 1, 21, 12, 9, 4], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(grad, alpha), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma)))), tf.math.sqrt(tf.math.sqrt(alpha))))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 8, 3, 0, 3], [0, 1, 0, 2], [97, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 5], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 0, 4, 2, 8], [0, 0, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 3, 99, 61, 1]], "fitness": -0.0965714305639267, "mapping_values": [1, 5, 3, 2, 1, 10, 6, 4, 2, 2, 1, 1, 1, 10, 5, 5, 3], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)), sigma), tf.math.sqrt(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [5.734392909163003e+24, 6.504178421662664e+24, 6.541165296451957e+24, 6.54340599939616e+24, 6.47054943075554e+24, 6.490918671438181e+24], "accuracy": [0.09615638852119446, 0.0948355570435524, 0.09509972482919693, 0.09126931428909302, 0.09245806187391281, 0.09417514503002167], "val_loss": [4.2964498971821415e+24, 4.2964498971821415e+24, 4.2964498971821415e+24, 4.2964498971821415e+24, 4.2964498971821415e+24, 4.2964498971821415e+24], "val_accuracy": [0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071]}}]