[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8822857141494751, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585750579834, 1.8655762672424316, 1.394430160522461, 1.0773245096206665, 0.9378393888473511, 0.8425824046134949, 0.7776632308959961, 0.736241340637207, 0.6971188187599182, 0.6732122302055359, 0.644855797290802, 0.6276965141296387, 0.6100340485572815, 0.5899673104286194, 0.5746485590934753, 0.5484329462051392, 0.5425268411636353, 0.5357900857925415, 0.5214410424232483, 0.5127171874046326, 0.4895091950893402, 0.4932740032672882, 0.48551443219184875, 0.47113916277885437, 0.46571049094200134, 0.450914591550827, 0.438728004693985, 0.4414178729057312, 0.4245515465736389, 0.4182806611061096, 0.4126766324043274, 0.41352686285972595, 0.4031256139278412, 0.40064555406570435, 0.3982388377189636, 0.38566267490386963, 0.38400527834892273, 0.3741128146648407, 0.36422181129455566, 0.36170411109924316, 0.35991787910461426, 0.35666367411613464, 0.3521813750267029, 0.34583958983421326, 0.34736087918281555, 0.34181836247444153, 0.33650368452072144, 0.33141741156578064, 0.3230496346950531, 0.3225416839122772, 0.315096914768219, 0.3059031665325165, 0.3058394491672516, 0.3017319440841675, 0.29568877816200256, 0.2933836281299591, 0.28774771094322205, 0.2856961190700531, 0.2802303731441498, 0.2779994010925293, 0.274711549282074, 0.2719985842704773, 0.2586328387260437, 0.2598455548286438, 0.2622571289539337, 0.25739434361457825, 0.2502012252807617, 0.2544722855091095, 0.24556587636470795, 0.24580754339694977, 0.23948103189468384, 0.23949603736400604, 0.23484042286872864, 0.22871272265911102, 0.2256491780281067, 0.22479403018951416, 0.21744707226753235, 0.21390178799629211, 0.21272219717502594], "accuracy": [0.2785629332065582, 0.49451854825019836, 0.559899628162384, 0.6215823292732239, 0.6654338836669922, 0.6950204968452454, 0.7181349992752075, 0.7322678565979004, 0.7441553473472595, 0.7483819723129272, 0.7627789974212646, 0.7717606425285339, 0.7728173136711121, 0.78113853931427, 0.7882710099220276, 0.7993659973144531, 0.7976489067077637, 0.8074230551719666, 0.8128384351730347, 0.8198388814926147, 0.8212917447090149, 0.819970965385437, 0.8272355198860168, 0.8350284099578857, 0.8305375576019287, 0.8387266993522644, 0.846387505531311, 0.8433496356010437, 0.8504821062088013, 0.8524633646011353, 0.8535200357437134, 0.854708731174469, 0.856689989566803, 0.8551049828529358, 0.8593316674232483, 0.8615770936012268, 0.8628978729248047, 0.8702945709228516, 0.8691058158874512, 0.871879518032074, 0.8722757697105408, 0.8691058158874512, 0.8733324408531189, 0.8800686597824097, 0.8795403242111206, 0.8755778670310974, 0.8768987059593201, 0.8829745054244995, 0.8824461698532104, 0.8823140859603882, 0.887201189994812, 0.8897107243537903, 0.8889182209968567, 0.8927486538887024, 0.8902390599250793, 0.8953903317451477, 0.8980319499969482, 0.8976356983184814, 0.900409460067749, 0.89552241563797, 0.9025228023529053, 0.8989565372467041, 0.9056927561759949, 0.9085986018180847, 0.9030511379241943, 0.9066173434257507, 0.9101836085319519, 0.9083344340324402, 0.909259021282196, 0.9099194407463074, 0.9126931428909302, 0.9140139818191528, 0.9119006991386414, 0.9171839952468872, 0.9169198274612427, 0.9185048341751099, 0.9218068718910217, 0.9185048341751099, 0.9196935892105103], "val_loss": [2.033445358276367, 1.5042319297790527, 1.0271512269973755, 0.8147247433662415, 0.7278039455413818, 0.68117356300354, 0.6306353211402893, 0.5966841578483582, 0.5751398801803589, 0.5460951328277588, 0.5314993858337402, 0.509799063205719, 0.4957965612411499, 0.4792602062225342, 0.46671679615974426, 0.45267683267593384, 0.4441072940826416, 0.4356139600276947, 0.42943108081817627, 0.4255247414112091, 0.41811680793762207, 0.4163394272327423, 0.39929893612861633, 0.3969916105270386, 0.39089226722717285, 0.387652188539505, 0.3844633102416992, 0.3824205696582794, 0.3749690353870392, 0.3701930642127991, 0.36967378854751587, 0.36689504981040955, 0.3585263788700104, 0.3587398827075958, 0.36267170310020447, 0.3561091423034668, 0.35379692912101746, 0.3499273955821991, 0.34701839089393616, 0.3467637896537781, 0.3424672484397888, 0.33951225876808167, 0.3386255204677582, 0.34044384956359863, 0.33945050835609436, 0.33684298396110535, 0.3322163224220276, 0.33181649446487427, 0.32827115058898926, 0.3312568664550781, 0.3297465741634369, 0.3256674110889435, 0.3234780728816986, 0.32119208574295044, 0.3232716917991638, 0.3209094703197479, 0.31944912672042847, 0.3157532513141632, 0.3144265413284302, 0.31676045060157776, 0.31425556540489197, 0.3131799101829529, 0.3147056996822357, 0.3154993951320648, 0.31771615147590637, 0.31545644998550415, 0.3127000629901886, 0.31382524967193604, 0.31026333570480347, 0.3147730529308319, 0.30829918384552, 0.3107443153858185, 0.31316936016082764, 0.30297672748565674, 0.30325081944465637, 0.30436232686042786, 0.3072424829006195, 0.30681705474853516, 0.3061434030532837], "val_accuracy": [0.5526666641235352, 0.6666666865348816, 0.687333345413208, 0.7083333134651184, 0.731333315372467, 0.7446666955947876, 0.7606666684150696, 0.762666642665863, 0.7873333096504211, 0.7889999747276306, 0.7973333597183228, 0.8056666851043701, 0.8193333148956299, 0.8259999752044678, 0.8289999961853027, 0.8410000205039978, 0.8453333377838135, 0.8450000286102295, 0.8489999771118164, 0.847000002861023, 0.8516666889190674, 0.856333315372467, 0.859333336353302, 0.856333315372467, 0.8633333444595337, 0.8640000224113464, 0.8656666874885559, 0.8646666407585144, 0.8679999709129333, 0.8696666955947876, 0.8640000224113464, 0.8686666488647461, 0.8713333606719971, 0.8709999918937683, 0.8703333139419556, 0.8723333477973938, 0.871999979019165, 0.874666690826416, 0.8723333477973938, 0.8759999871253967, 0.8726666569709778, 0.875333309173584, 0.8790000081062317, 0.8756666779518127, 0.8726666569709778, 0.8769999742507935, 0.8796666860580444, 0.8796666860580444, 0.8806666731834412, 0.8793333172798157, 0.8813333511352539, 0.8840000033378601, 0.8840000033378601, 0.8843333125114441, 0.8809999823570251, 0.8856666684150696, 0.8866666555404663, 0.8833333253860474, 0.8866666555404663, 0.8843333125114441, 0.8856666684150696, 0.8880000114440918, 0.887333333492279, 0.8883333206176758, 0.8866666555404663, 0.8896666765213013, 0.8863333463668823, 0.8853333592414856, 0.890999972820282, 0.8870000243186951, 0.8883333206176758, 0.8883333206176758, 0.8916666507720947, 0.8939999938011169, 0.8896666765213013, 0.8916666507720947, 0.890999972820282, 0.8926666378974915, 0.8913333415985107]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8628571629524231, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222792863845825, 1.8663758039474487, 1.3819522857666016, 1.0965425968170166, 0.9311267137527466, 0.8296200633049011, 0.7616804242134094, 0.7207537293434143, 0.6737022399902344, 0.6415103077888489, 0.6275493502616882, 0.6030939221382141, 0.5821295976638794, 0.5676619410514832, 0.5458222031593323, 0.5318931341171265, 0.5235677361488342, 0.5063731670379639, 0.49411270022392273, 0.4961635172367096, 0.47839227318763733, 0.46145814657211304, 0.4574950039386749, 0.4590754508972168, 0.4493090510368347, 0.4385170042514801, 0.4391319453716278, 0.41994425654411316, 0.4227524399757385, 0.4109940826892853, 0.4052673280239105, 0.38948097825050354, 0.39247485995292664, 0.3862898349761963, 0.3732815682888031, 0.3775233328342438, 0.36918893456459045, 0.37120291590690613, 0.3634096682071686, 0.36486080288887024, 0.35196343064308167, 0.34865397214889526, 0.33953940868377686, 0.3286328613758087, 0.3334991931915283, 0.3285059630870819, 0.3277193307876587, 0.31306347250938416, 0.3093726336956024, 0.30532509088516235], "accuracy": [0.2747325301170349, 0.4835556745529175, 0.5758816599845886, 0.6210539937019348, 0.6692643165588379, 0.7040021419525146, 0.7210407853126526, 0.7325320243835449, 0.7537974119186401, 0.7656848430633545, 0.7701756954193115, 0.7774402499198914, 0.7884030938148499, 0.7893276810646057, 0.798309326171875, 0.8053097128868103, 0.8079513907432556, 0.8153480291366577, 0.8173292875289917, 0.8212917447090149, 0.8247259259223938, 0.8309338092803955, 0.8319904804229736, 0.8363492488861084, 0.8352925777435303, 0.8393871188163757, 0.8397833704948425, 0.8441421389579773, 0.8481045961380005, 0.8499537706375122, 0.8532558679580688, 0.8610487580299377, 0.8590674996376038, 0.8607845902442932, 0.863558292388916, 0.8623695969581604, 0.8667283058166504, 0.8693699836730957, 0.8688416481018066, 0.8660678863525391, 0.8729361891746521, 0.8730682730674744, 0.8811253309249878, 0.8828424215316772, 0.8795403242111206, 0.8825782537460327, 0.8796724081039429, 0.886672854423523, 0.8864086866378784, 0.8908994793891907], "val_loss": [2.0364089012145996, 1.5050550699234009, 1.028120756149292, 0.8279153108596802, 0.736218273639679, 0.6841223239898682, 0.6370106339454651, 0.601945161819458, 0.5782055258750916, 0.5555004477500916, 0.5451895594596863, 0.5325480103492737, 0.5101516842842102, 0.49782422184944153, 0.4866473078727722, 0.476787269115448, 0.47084611654281616, 0.4618762135505676, 0.4527961313724518, 0.44729137420654297, 0.439626008272171, 0.43570148944854736, 0.43028050661087036, 0.42179495096206665, 0.42338114976882935, 0.4123890697956085, 0.4145938754081726, 0.4069056510925293, 0.4028012752532959, 0.39806994795799255, 0.3924432098865509, 0.3891735076904297, 0.3868523836135864, 0.39103832840919495, 0.3832376301288605, 0.3816509544849396, 0.38179752230644226, 0.38541170954704285, 0.37656229734420776, 0.37261882424354553, 0.3723885118961334, 0.3688892126083374, 0.3624977171421051, 0.362286776304245, 0.3632887303829193, 0.3606508672237396, 0.360108882188797, 0.35409703850746155, 0.3558410704135895, 0.3542433977127075], "val_accuracy": [0.5230000019073486, 0.643666684627533, 0.6863333582878113, 0.70333331823349, 0.7250000238418579, 0.746666669845581, 0.7536666393280029, 0.7706666588783264, 0.7789999842643738, 0.7850000262260437, 0.7913333177566528, 0.7953333258628845, 0.8040000200271606, 0.8086666464805603, 0.809333324432373, 0.8209999799728394, 0.8253333568572998, 0.831333339214325, 0.8356666564941406, 0.8349999785423279, 0.8450000286102295, 0.8460000157356262, 0.8473333120346069, 0.8510000109672546, 0.8460000157356262, 0.8546666502952576, 0.8539999723434448, 0.8526666760444641, 0.8546666502952576, 0.856333315372467, 0.8616666793823242, 0.8579999804496765, 0.8606666922569275, 0.859000027179718, 0.862666666507721, 0.8650000095367432, 0.8633333444595337, 0.859666645526886, 0.8606666922569275, 0.8659999966621399, 0.8646666407585144, 0.8679999709129333, 0.8676666617393494, 0.8669999837875366, 0.8723333477973938, 0.8706666827201843, 0.8706666827201843, 0.8700000047683716, 0.8683333396911621, 0.8700000047683716]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 2, 0, 2], [0, 1, 0, 2], [39, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 3, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [6, 3, 3, 6, 8, 9, 4, 1, 4, 1, 8], [0, 0, 0, 4, 0, 0, 4, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.168857142329216, "mapping_values": [1, 9, 5, 4, 2, 1, 0, 1, 1, 2, 1, 1, 1, 16, 9, 7, 6], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad)))", "other_info": {"loss": [559.25048828125, 1569.8636474609375, 1510.9835205078125, 2294.237548828125, 9346.7578125, 22817.8046875], "accuracy": [0.09219389408826828, 0.10540219396352768, 0.10962884873151779, 0.08611807972192764, 0.09602430462837219, 0.11002509295940399], "val_loss": [901.1243896484375, 723.496337890625, 1788.5235595703125, 1468.6820068359375, 21024.052734375, 9553.537109375], "val_accuracy": [0.17399999499320984, 0.09733333438634872, 0.04500000178813934, 0.10866666585206985, 0.09799999743700027, 0.12566666305065155]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [3, 5, 3, 0, 3], [2, 1, 0, 0], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [2, 1, 2, 7, 0, 9, 6, 8, 0, 9], [0, 1, 0, 1], [99, 98, 30, 40], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 2, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 1, 0, 3, 0, 4, 2, 1, 2, 0], [16, 99, 96, 99, 61, 17]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 7, 4, 3, 2, 14, 10, 4, 4, 16, 8, 8, 3], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.square(tf.math.multiply(tf.math.negative(grad), alpha)), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(tf.math.add(tf.math.negative(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.negative(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), alpha)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(alpha, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), grad), tf.math.subtract(beta, alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 0], [39, 39], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 0], [16, 16], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [2, 0, 6, 4, 3, 2, 4, 3, 9, 4, 5, 3, 7], [0, 7, 6, 2, 6, 2, 7, 6, 1, 3], [99, 20], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 0, 8, 1, 4, 1, 2, 2, 8, 1], [4, 0, 0, 3, 4, 0, 3, 4, 2, 0], [80, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 1, 0, 1, 1, 23, 13, 10, 2, 22, 12, 10, 4], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.multiply(grad, grad), beta))), tf.math.add(tf.math.pow(grad, tf.math.multiply(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), beta)), tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(grad, grad), alpha)), sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(sigma, tf.math.add(grad, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma)))))), tf.math.sqrt(tf.math.subtract(grad, beta))), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [0, 2, 3, 6, 3, 8, 6, 3, 6, 3, 2, 1, 5, 9, 6, 3, 5, 0, 2, 5, 0, 7, 7, 6], [0, 0, 0, 2, 3, 3, 3, 1, 1, 0, 0, 0, 2, 3, 0, 1], [39, 39, 94, 88, 4, 26, 22, 52], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 40], [0, 1], [0], [0], [96], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [6, 5, 3, 6, 0, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [16, 99, 96, 99, 87, 1]], "fitness": -0.09399999678134918, "mapping_values": [1, 40, 24, 16, 8, 10, 6, 4, 2, 2, 1, 1, 1, 13, 7, 6, 4], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(grad, tf.math.subtract(grad, tf.math.square(grad))), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.math.negative(alpha)), tf.math.add(tf.math.square(alpha), tf.math.negative(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), grad))), grad)))), tf.math.divide_no_nan(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.constant(1.0, shape=shape, dtype=tf.float32)))), grad)", "other_info": {"loss": [2.3119256496429443, 2.310373306274414, 2.30985951423645, 2.3123111724853516, 2.3089170455932617, 2.309272289276123], "accuracy": [0.08981640636920929, 0.09457138925790787, 0.0944393053650856, 0.08955223858356476, 0.09377889335155487, 0.09602430462837219], "val_loss": [2.309516668319702, 2.3094398975372314, 2.309326171875, 2.309257745742798, 2.308972120285034, 2.308711290359497], "val_accuracy": [0.09033333510160446, 0.09000000357627869, 0.08966666460037231, 0.09000000357627869, 0.08966666460037231, 0.08866667002439499]}}]