[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8822857141494751, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585750579834, 1.8655762672424316, 1.394430160522461, 1.0773245096206665, 0.9378393888473511, 0.8425824046134949, 0.7776632308959961, 0.736241340637207, 0.6971188187599182, 0.6732122302055359, 0.644855797290802, 0.6276965141296387, 0.6100340485572815, 0.5899673104286194, 0.5746485590934753, 0.5484329462051392, 0.5425268411636353, 0.5357900857925415, 0.5214410424232483, 0.5127171874046326, 0.4895091950893402, 0.4932740032672882, 0.48551443219184875, 0.47113916277885437, 0.46571049094200134, 0.450914591550827, 0.438728004693985, 0.4414178729057312, 0.4245515465736389, 0.4182806611061096, 0.4126766324043274, 0.41352686285972595, 0.4031256139278412, 0.40064555406570435, 0.3982388377189636, 0.38566267490386963, 0.38400527834892273, 0.3741128146648407, 0.36422181129455566, 0.36170411109924316, 0.35991787910461426, 0.35666367411613464, 0.3521813750267029, 0.34583958983421326, 0.34736087918281555, 0.34181836247444153, 0.33650368452072144, 0.33141741156578064, 0.3230496346950531, 0.3225416839122772, 0.315096914768219, 0.3059031665325165, 0.3058394491672516, 0.3017319440841675, 0.29568877816200256, 0.2933836281299591, 0.28774771094322205, 0.2856961190700531, 0.2802303731441498, 0.2779994010925293, 0.274711549282074, 0.2719985842704773, 0.2586328387260437, 0.2598455548286438, 0.2622571289539337, 0.25739434361457825, 0.2502012252807617, 0.2544722855091095, 0.24556587636470795, 0.24580754339694977, 0.23948103189468384, 0.23949603736400604, 0.23484042286872864, 0.22871272265911102, 0.2256491780281067, 0.22479403018951416, 0.21744707226753235, 0.21390178799629211, 0.21272219717502594], "accuracy": [0.2785629332065582, 0.49451854825019836, 0.559899628162384, 0.6215823292732239, 0.6654338836669922, 0.6950204968452454, 0.7181349992752075, 0.7322678565979004, 0.7441553473472595, 0.7483819723129272, 0.7627789974212646, 0.7717606425285339, 0.7728173136711121, 0.78113853931427, 0.7882710099220276, 0.7993659973144531, 0.7976489067077637, 0.8074230551719666, 0.8128384351730347, 0.8198388814926147, 0.8212917447090149, 0.819970965385437, 0.8272355198860168, 0.8350284099578857, 0.8305375576019287, 0.8387266993522644, 0.846387505531311, 0.8433496356010437, 0.8504821062088013, 0.8524633646011353, 0.8535200357437134, 0.854708731174469, 0.856689989566803, 0.8551049828529358, 0.8593316674232483, 0.8615770936012268, 0.8628978729248047, 0.8702945709228516, 0.8691058158874512, 0.871879518032074, 0.8722757697105408, 0.8691058158874512, 0.8733324408531189, 0.8800686597824097, 0.8795403242111206, 0.8755778670310974, 0.8768987059593201, 0.8829745054244995, 0.8824461698532104, 0.8823140859603882, 0.887201189994812, 0.8897107243537903, 0.8889182209968567, 0.8927486538887024, 0.8902390599250793, 0.8953903317451477, 0.8980319499969482, 0.8976356983184814, 0.900409460067749, 0.89552241563797, 0.9025228023529053, 0.8989565372467041, 0.9056927561759949, 0.9085986018180847, 0.9030511379241943, 0.9066173434257507, 0.9101836085319519, 0.9083344340324402, 0.909259021282196, 0.9099194407463074, 0.9126931428909302, 0.9140139818191528, 0.9119006991386414, 0.9171839952468872, 0.9169198274612427, 0.9185048341751099, 0.9218068718910217, 0.9185048341751099, 0.9196935892105103], "val_loss": [2.033445358276367, 1.5042319297790527, 1.0271512269973755, 0.8147247433662415, 0.7278039455413818, 0.68117356300354, 0.6306353211402893, 0.5966841578483582, 0.5751398801803589, 0.5460951328277588, 0.5314993858337402, 0.509799063205719, 0.4957965612411499, 0.4792602062225342, 0.46671679615974426, 0.45267683267593384, 0.4441072940826416, 0.4356139600276947, 0.42943108081817627, 0.4255247414112091, 0.41811680793762207, 0.4163394272327423, 0.39929893612861633, 0.3969916105270386, 0.39089226722717285, 0.387652188539505, 0.3844633102416992, 0.3824205696582794, 0.3749690353870392, 0.3701930642127991, 0.36967378854751587, 0.36689504981040955, 0.3585263788700104, 0.3587398827075958, 0.36267170310020447, 0.3561091423034668, 0.35379692912101746, 0.3499273955821991, 0.34701839089393616, 0.3467637896537781, 0.3424672484397888, 0.33951225876808167, 0.3386255204677582, 0.34044384956359863, 0.33945050835609436, 0.33684298396110535, 0.3322163224220276, 0.33181649446487427, 0.32827115058898926, 0.3312568664550781, 0.3297465741634369, 0.3256674110889435, 0.3234780728816986, 0.32119208574295044, 0.3232716917991638, 0.3209094703197479, 0.31944912672042847, 0.3157532513141632, 0.3144265413284302, 0.31676045060157776, 0.31425556540489197, 0.3131799101829529, 0.3147056996822357, 0.3154993951320648, 0.31771615147590637, 0.31545644998550415, 0.3127000629901886, 0.31382524967193604, 0.31026333570480347, 0.3147730529308319, 0.30829918384552, 0.3107443153858185, 0.31316936016082764, 0.30297672748565674, 0.30325081944465637, 0.30436232686042786, 0.3072424829006195, 0.30681705474853516, 0.3061434030532837], "val_accuracy": [0.5526666641235352, 0.6666666865348816, 0.687333345413208, 0.7083333134651184, 0.731333315372467, 0.7446666955947876, 0.7606666684150696, 0.762666642665863, 0.7873333096504211, 0.7889999747276306, 0.7973333597183228, 0.8056666851043701, 0.8193333148956299, 0.8259999752044678, 0.8289999961853027, 0.8410000205039978, 0.8453333377838135, 0.8450000286102295, 0.8489999771118164, 0.847000002861023, 0.8516666889190674, 0.856333315372467, 0.859333336353302, 0.856333315372467, 0.8633333444595337, 0.8640000224113464, 0.8656666874885559, 0.8646666407585144, 0.8679999709129333, 0.8696666955947876, 0.8640000224113464, 0.8686666488647461, 0.8713333606719971, 0.8709999918937683, 0.8703333139419556, 0.8723333477973938, 0.871999979019165, 0.874666690826416, 0.8723333477973938, 0.8759999871253967, 0.8726666569709778, 0.875333309173584, 0.8790000081062317, 0.8756666779518127, 0.8726666569709778, 0.8769999742507935, 0.8796666860580444, 0.8796666860580444, 0.8806666731834412, 0.8793333172798157, 0.8813333511352539, 0.8840000033378601, 0.8840000033378601, 0.8843333125114441, 0.8809999823570251, 0.8856666684150696, 0.8866666555404663, 0.8833333253860474, 0.8866666555404663, 0.8843333125114441, 0.8856666684150696, 0.8880000114440918, 0.887333333492279, 0.8883333206176758, 0.8866666555404663, 0.8896666765213013, 0.8863333463668823, 0.8853333592414856, 0.890999972820282, 0.8870000243186951, 0.8883333206176758, 0.8883333206176758, 0.8916666507720947, 0.8939999938011169, 0.8896666765213013, 0.8916666507720947, 0.890999972820282, 0.8926666378974915, 0.8913333415985107]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8694285750389099, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223331928253174, 1.8665963411331177, 1.3942376375198364, 1.0985618829727173, 0.9356383085250854, 0.8389332294464111, 0.7806100845336914, 0.7329415678977966, 0.6897709965705872, 0.6673067808151245, 0.634712278842926, 0.6090028285980225, 0.5900653600692749, 0.5783919095993042, 0.5594808459281921, 0.5556172132492065, 0.5418269038200378, 0.5248345136642456, 0.5147621035575867, 0.5045995116233826, 0.4907199442386627, 0.4843291640281677, 0.4707200527191162, 0.4592350423336029, 0.4589978754520416, 0.4513775110244751, 0.4373835027217865, 0.43668460845947266, 0.43040189146995544, 0.4243091642856598, 0.4160889685153961, 0.40470725297927856, 0.40130165219306946, 0.3949856758117676, 0.38724398612976074, 0.38093772530555725, 0.3845193684101105, 0.3735767900943756, 0.3640238046646118, 0.3585032820701599, 0.35703763365745544, 0.3540967106819153, 0.3415992856025696, 0.3407352864742279, 0.3401617109775543, 0.3340594172477722, 0.33494117856025696, 0.31639987230300903, 0.3178887665271759, 0.3169456124305725, 0.30440351366996765, 0.30300265550613403, 0.310512900352478, 0.29298022389411926, 0.2906961441040039, 0.28236639499664307, 0.28301289677619934, 0.2800181806087494, 0.2771419584751129, 0.2747207283973694, 0.26904913783073425, 0.2653099298477173, 0.2616346776485443, 0.25896039605140686, 0.2475469708442688, 0.24755725264549255, 0.24768629670143127, 0.23902662098407745, 0.2379947006702423, 0.2345687747001648, 0.2313579022884369, 0.23752105236053467, 0.2263917475938797, 0.22154933214187622, 0.21865874528884888, 0.21586847305297852, 0.20761053264141083, 0.20817266404628754, 0.2123522311449051, 0.2020084410905838, 0.20547102391719818, 0.20093649625778198, 0.1955449879169464, 0.18657320737838745, 0.1933719366788864, 0.18703095614910126], "accuracy": [0.26561880111694336, 0.48606523871421814, 0.5746929049491882, 0.6192048788070679, 0.6682076454162598, 0.7016246318817139, 0.7185312509536743, 0.7334566116333008, 0.7503632307052612, 0.7568352818489075, 0.772288978099823, 0.783119797706604, 0.7816668748855591, 0.7886672616004944, 0.7979130744934082, 0.7956677079200745, 0.8047813773155212, 0.8076872229576111, 0.8107251524925232, 0.8191784620285034, 0.8249900937080383, 0.8285563588142395, 0.8315942287445068, 0.8341038227081299, 0.8380662798881531, 0.8437458872795105, 0.8465195894241333, 0.8442742228507996, 0.8474441766738892, 0.8490291833877563, 0.8498216867446899, 0.8532558679580688, 0.8570862412452698, 0.8590674996376038, 0.8634262084960938, 0.8607845902442932, 0.8595958352088928, 0.8672566413879395, 0.8698983192443848, 0.8683133125305176, 0.8737286925315857, 0.8717474341392517, 0.872407853603363, 0.8768987059593201, 0.8791441321372986, 0.8821820020675659, 0.8791441321372986, 0.886672854423523, 0.8836349248886108, 0.8820499181747437, 0.8912957310676575, 0.8887861371040344, 0.8862766027450562, 0.8887861371040344, 0.8953903317451477, 0.8973715305328369, 0.8961827754974365, 0.8997490406036377, 0.8986923694610596, 0.897899866104126, 0.9046360850334167, 0.9010698795318604, 0.9078060984611511, 0.9043719172477722, 0.9100515246391296, 0.9088627696037292, 0.9108440279960632, 0.9116365313529968, 0.9141460657119751, 0.9117686152458191, 0.9170519113540649, 0.9101836085319519, 0.9174481630325317, 0.9211464524269104, 0.9211464524269104, 0.9214106202125549, 0.928411066532135, 0.9225993752479553, 0.9227314591407776, 0.9236560463905334, 0.9256373047828674, 0.928411066532135, 0.9301280975341797, 0.930260181427002, 0.9298639297485352, 0.9329018592834473], "val_loss": [2.039092779159546, 1.5151728391647339, 1.0417251586914062, 0.84018474817276, 0.7460185289382935, 0.6906437873840332, 0.6418954133987427, 0.6049819588661194, 0.5787655711174011, 0.557436466217041, 0.5353723764419556, 0.5184246897697449, 0.5042581558227539, 0.4953247010707855, 0.4829845428466797, 0.4725736081600189, 0.46364712715148926, 0.4578363001346588, 0.44933170080184937, 0.44419416785240173, 0.43244457244873047, 0.43128150701522827, 0.425162136554718, 0.41630351543426514, 0.41021472215652466, 0.41044458746910095, 0.4040457308292389, 0.39831554889678955, 0.4049839675426483, 0.39460289478302, 0.392498254776001, 0.3854975998401642, 0.38798078894615173, 0.3807905316352844, 0.3788912892341614, 0.37445324659347534, 0.37214016914367676, 0.3775119483470917, 0.3676055371761322, 0.368790864944458, 0.36381909251213074, 0.3612397313117981, 0.3623299300670624, 0.3585129678249359, 0.3573104739189148, 0.35801592469215393, 0.3533133268356323, 0.3531326353549957, 0.35231372714042664, 0.34893667697906494, 0.3511595129966736, 0.3520330786705017, 0.34655994176864624, 0.35043254494667053, 0.34440913796424866, 0.3485596477985382, 0.3430602550506592, 0.3469877243041992, 0.3473447263240814, 0.3396044373512268, 0.34678250551223755, 0.3459613025188446, 0.3418766260147095, 0.3386765718460083, 0.3400351107120514, 0.34368425607681274, 0.3411323130130768, 0.34140917658805847, 0.3378268778324127, 0.3399433195590973, 0.3397931456565857, 0.33515986800193787, 0.3402046859264374, 0.3354044556617737, 0.337352454662323, 0.33586400747299194, 0.3374742865562439, 0.34324178099632263, 0.33918172121047974, 0.34167343378067017, 0.33172547817230225, 0.3426162600517273, 0.3408298194408417, 0.3428061604499817, 0.3490559756755829, 0.3464694023132324], "val_accuracy": [0.515999972820282, 0.6639999747276306, 0.6850000023841858, 0.7143333554267883, 0.7419999837875366, 0.7580000162124634, 0.7710000276565552, 0.7796666622161865, 0.7919999957084656, 0.7950000166893005, 0.8080000281333923, 0.8083333373069763, 0.8159999847412109, 0.8293333053588867, 0.828000009059906, 0.8353333473205566, 0.8293333053588867, 0.8309999704360962, 0.8339999914169312, 0.8356666564941406, 0.8433333039283752, 0.8489999771118164, 0.843999981880188, 0.8516666889190674, 0.8560000061988831, 0.8496666550636292, 0.8519999980926514, 0.8576666712760925, 0.8576666712760925, 0.856333315372467, 0.856333315372467, 0.8619999885559082, 0.8579999804496765, 0.8666666746139526, 0.8650000095367432, 0.8683333396911621, 0.871999979019165, 0.862666666507721, 0.8709999918937683, 0.8663333058357239, 0.871999979019165, 0.8726666569709778, 0.871999979019165, 0.8743333220481873, 0.875, 0.871999979019165, 0.8743333220481873, 0.8726666569709778, 0.8776666522026062, 0.8759999871253967, 0.8763333559036255, 0.875333309173584, 0.8816666603088379, 0.8759999871253967, 0.8793333172798157, 0.8806666731834412, 0.8833333253860474, 0.8736666440963745, 0.8803333044052124, 0.8840000033378601, 0.878333330154419, 0.878000020980835, 0.878000020980835, 0.8843333125114441, 0.8830000162124634, 0.8826666474342346, 0.8846666812896729, 0.8799999952316284, 0.8843333125114441, 0.8859999775886536, 0.8826666474342346, 0.8856666684150696, 0.8823333382606506, 0.8866666555404663, 0.8833333253860474, 0.887666642665863, 0.8836666941642761, 0.8809999823570251, 0.8849999904632568, 0.8849999904632568, 0.8896666765213013, 0.8866666555404663, 0.887666642665863, 0.8859999775886536, 0.8840000033378601, 0.8849999904632568]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 0, 0, 1], [2, 6, 9], [0, 3], [99, 80], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 5, 6, 6, 3, 0, 9, 4, 2, 8], [0, 0, 0, 3, 2, 4, 3, 1, 2, 1], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 10, 6, 4, 2, 5, 3, 2, 2, 13, 8, 5, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma), tf.constant(1.0, shape=shape, dtype=tf.float32))), beta)", "other_info": {"loss": [122186232758272.0, 920212245315584.0, 728134596952064.0, 1024917172649984.0, 1055302791200768.0, 516109174308864.0], "accuracy": [0.10170386731624603, 0.09866596013307571, 0.09893012791872025, 0.09945846349000931, 0.09932637959718704, 0.09945846349000931], "val_loss": [532440418353152.0, 588596075560960.0, 588605269475328.0, 588610369748992.0, 588613859409920.0, 588616476655616.0], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 8], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 2, 3, 0, 3, 8], [0, 2, 0, 3, 2], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1], [6, 2, 1, 6, 8, 1, 4, 4, 4, 2, 8, 1, 5, 1, 3, 7, 4, 0, 6, 9], [3, 3, 0, 3, 0, 0, 3, 4, 2, 0, 3, 0, 7, 5, 5], [89, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 5, 3, 1, 11, 6, 5, 2, 2, 1, 1, 1, 35, 20, 15, 6], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.sqrt(grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(grad))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.subtract(sigma, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(sigma, tf.math.pow(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.pow(sigma, tf.math.add(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.square(tf.math.subtract(sigma, tf.math.multiply(grad, beta))), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.pow(grad, tf.math.negative(grad))), tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 0], [16, 1, 67], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 3, 8, 6], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 2], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 3, 2, 1, 1, 1, 23, 12, 11, 6], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma)), tf.math.sqrt(tf.math.divide_no_nan(alpha, beta)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 1, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 9, 5], [0, 2, 0, 3], [16, 16], [1, 1], [0], [0], [99], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 8, 8, 6, 5, 5, 6], [0, 0, 0, 3, 0, 0, 0, 1, 2, 0, 2], [16, 99, 96, 99, 61, 1, 7]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 7, 5, 2, 2, 1, 0, 1, 1, 26, 15, 11, 7], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.math.pow(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), alpha))), tf.math.square(beta))), tf.math.divide_no_nan(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}]