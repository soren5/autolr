[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8862857222557068, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222418785095215, 1.8632627725601196, 1.3950724601745605, 1.0979150533676147, 0.9474178552627563, 0.8543937802314758, 0.7783248424530029, 0.7376496195793152, 0.7006842494010925, 0.6746688485145569, 0.647553563117981, 0.6295329928398132, 0.6112891435623169, 0.58865886926651, 0.5667527914047241, 0.5575993657112122, 0.5467248558998108, 0.5289703011512756, 0.5205997824668884, 0.5110849142074585, 0.5064045786857605, 0.4867391884326935, 0.4731372892856598, 0.47443822026252747, 0.46410614252090454, 0.4545186161994934, 0.445819616317749, 0.4367676079273224, 0.4321127235889435, 0.4275900721549988, 0.4177286922931671, 0.40700381994247437, 0.40491974353790283, 0.3923063576221466, 0.38597339391708374, 0.37638187408447266, 0.3749813437461853, 0.3708414137363434, 0.369646281003952, 0.3635149896144867, 0.3594855070114136, 0.3503628671169281, 0.3338625133037567, 0.3396199643611908, 0.33679017424583435, 0.3303111493587494, 0.3275522291660309, 0.3153315782546997, 0.3093845844268799, 0.31660354137420654, 0.313541054725647, 0.3128948211669922, 0.2977619469165802, 0.30230653285980225, 0.298944890499115, 0.28947505354881287, 0.2822195291519165, 0.2778712213039398, 0.2668195366859436, 0.26853811740875244, 0.26283398270606995, 0.2662760019302368, 0.2576100528240204, 0.25102800130844116, 0.2539205849170685, 0.25087955594062805, 0.24508193135261536], "accuracy": [0.280940443277359, 0.48685774207115173, 0.5665037631988525, 0.616299033164978, 0.6625280380249023, 0.6930392384529114, 0.7169462442398071, 0.7320036888122559, 0.7375511527061462, 0.7491744756698608, 0.7672698497772217, 0.7670056819915771, 0.7745344042778015, 0.7876105904579163, 0.7906485199928284, 0.7994980812072754, 0.802800178527832, 0.8068947196006775, 0.8117818236351013, 0.8153480291366577, 0.8181217908859253, 0.829216718673706, 0.8300092220306396, 0.8238013386726379, 0.8325188159942627, 0.8385946154594421, 0.8372738361358643, 0.842028796672821, 0.8451988101005554, 0.8481045961380005, 0.8515387773513794, 0.8549728989601135, 0.8516708612442017, 0.8603883385658264, 0.8598600029945374, 0.8667283058166504, 0.8636903762817383, 0.8636903762817383, 0.8677849769592285, 0.8704266548156738, 0.8758420348167419, 0.8739928603172302, 0.8790120482444763, 0.8768987059593201, 0.8751816153526306, 0.8794082403182983, 0.8813894987106323, 0.8860124349594116, 0.8874653577804565, 0.8856161832809448, 0.8838990926742554, 0.8877294659614563, 0.8918240666389465, 0.8918240666389465, 0.8922203183174133, 0.8953903317451477, 0.89552241563797, 0.9002773761749268, 0.9049002528190613, 0.9034473896026611, 0.9035794734954834, 0.9038436412811279, 0.9085986018180847, 0.9095231890678406, 0.9095231890678406, 0.909259021282196, 0.910711944103241], "val_loss": [2.0414316654205322, 1.5168657302856445, 1.0494927167892456, 0.8396123051643372, 0.7532041668891907, 0.6975494027137756, 0.6532282829284668, 0.6188269853591919, 0.5909113883972168, 0.5747429728507996, 0.5562715530395508, 0.5392115712165833, 0.5226473808288574, 0.5080817937850952, 0.49551260471343994, 0.4949219524860382, 0.48097461462020874, 0.46894019842147827, 0.4645398259162903, 0.4554585814476013, 0.44845467805862427, 0.44272810220718384, 0.4365209937095642, 0.4303407371044159, 0.42757970094680786, 0.42137086391448975, 0.4158954322338104, 0.4094981253147125, 0.40614867210388184, 0.40746310353279114, 0.39686036109924316, 0.39440515637397766, 0.39069101214408875, 0.3898474872112274, 0.3889416456222534, 0.3833497166633606, 0.387736976146698, 0.3792175352573395, 0.3778442442417145, 0.37528878450393677, 0.3729557991027832, 0.37016138434410095, 0.36690768599510193, 0.36455467343330383, 0.36386409401893616, 0.3628668487071991, 0.365796834230423, 0.36076274514198303, 0.3599783480167389, 0.35867130756378174, 0.35705167055130005, 0.35411083698272705, 0.3552299737930298, 0.3651564121246338, 0.36276260018348694, 0.34837988018989563, 0.34821584820747375, 0.3528410792350769, 0.3496720790863037, 0.3506317138671875, 0.34951722621917725, 0.3443804085254669, 0.345913290977478, 0.3461855351924896, 0.3431210517883301, 0.348863810300827, 0.3426092565059662], "val_accuracy": [0.5373333096504211, 0.6570000052452087, 0.6759999990463257, 0.7110000252723694, 0.7286666631698608, 0.7419999837875366, 0.7590000033378601, 0.7616666555404663, 0.7836666703224182, 0.7903333306312561, 0.7886666655540466, 0.8006666898727417, 0.809333324432373, 0.8183333277702332, 0.8146666884422302, 0.8140000104904175, 0.8233333230018616, 0.8289999961853027, 0.8326666951179504, 0.8363333344459534, 0.8389999866485596, 0.8366666436195374, 0.8363333344459534, 0.8489999771118164, 0.847000002861023, 0.8519999980926514, 0.8533333539962769, 0.8560000061988831, 0.8573333621025085, 0.8539999723434448, 0.8619999885559082, 0.862666666507721, 0.8656666874885559, 0.8629999756813049, 0.8646666407585144, 0.8636666536331177, 0.8603333234786987, 0.8659999966621399, 0.8673333525657654, 0.8673333525657654, 0.8713333606719971, 0.8703333139419556, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8730000257492065, 0.871999979019165, 0.874666690826416, 0.875333309173584, 0.874666690826416, 0.875, 0.8786666393280029, 0.8776666522026062, 0.8743333220481873, 0.8723333477973938, 0.8833333253860474, 0.8826666474342346, 0.8790000081062317, 0.8836666941642761, 0.878333330154419, 0.8820000290870667, 0.887666642665863, 0.8820000290870667, 0.8803333044052124, 0.8830000162124634, 0.8846666812896729, 0.8856666684150696]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8537142872810364, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223457098007202, 1.875684142112732, 1.3857306241989136, 1.0925527811050415, 0.9403434991836548, 0.8437128663063049, 0.7750888466835022, 0.7226067185401917, 0.6905427575111389, 0.6614193320274353, 0.6340336203575134, 0.6093733906745911, 0.5905283689498901, 0.5823191404342651, 0.5572510957717896, 0.5437513589859009, 0.5327931642532349, 0.511469841003418, 0.5024959444999695, 0.4963540732860565, 0.4802124798297882, 0.47273439168930054, 0.45740675926208496, 0.4572919011116028, 0.45279139280319214, 0.4473167955875397, 0.4226941466331482, 0.4278962314128876, 0.4132271707057953, 0.41380757093429565, 0.4035326838493347, 0.40310895442962646, 0.3951580822467804, 0.38914600014686584, 0.3797546327114105, 0.37793636322021484, 0.3725859522819519, 0.37117210030555725, 0.3545331358909607, 0.349995493888855, 0.3474852740764618, 0.35016557574272156, 0.3412408232688904, 0.3394148647785187, 0.33171364665031433, 0.3223438858985901, 0.31331944465637207, 0.3217163681983948, 0.3163300156593323, 0.3066035509109497, 0.30217522382736206, 0.2905600070953369, 0.3028518557548523, 0.2972193956375122, 0.2911261022090912, 0.28710439801216125, 0.2819404602050781, 0.2726622223854065, 0.2697112262248993, 0.26844844222068787, 0.2665785253047943, 0.2589319050312042, 0.2553381323814392, 0.25131046772003174, 0.2454102486371994, 0.2450244426727295, 0.2406943440437317, 0.23975658416748047, 0.2423512488603592, 0.23609772324562073, 0.22645331919193268, 0.22519618272781372, 0.2150924652814865], "accuracy": [0.26958128809928894, 0.4842160940170288, 0.5680887699127197, 0.6133931875228882, 0.6626601219177246, 0.6976621150970459, 0.7199841737747192, 0.7384757399559021, 0.7425703406333923, 0.7607977986335754, 0.7677981853485107, 0.7786290049552917, 0.783119797706604, 0.7898560166358948, 0.8001585006713867, 0.8042530417442322, 0.8026680946350098, 0.8141592741012573, 0.8193105459213257, 0.8215559124946594, 0.828292191028595, 0.8327829837799072, 0.8359529972076416, 0.8348963260650635, 0.8337075710296631, 0.8389908671379089, 0.8475762605667114, 0.8461233377456665, 0.8556333184242249, 0.8504821062088013, 0.8521991968154907, 0.8545766472816467, 0.8532558679580688, 0.8599920868873596, 0.8644828796386719, 0.8632941246032715, 0.8654074668884277, 0.8684453964233398, 0.876370370388031, 0.8762382864952087, 0.8766345381736755, 0.8737286925315857, 0.8778232932090759, 0.8775591254234314, 0.8811253309249878, 0.8816536664962769, 0.8893144726753235, 0.8811253309249878, 0.8858803510665894, 0.8877294659614563, 0.891559898853302, 0.895918607711792, 0.8881257176399231, 0.8939374089241028, 0.8948619961738586, 0.8960506916046143, 0.8975036144256592, 0.9038436412811279, 0.9010698795318604, 0.9045040011405945, 0.9055606722831726, 0.9063531756401062, 0.9076740145683289, 0.9095231890678406, 0.91124027967453, 0.9115044474601746, 0.9149385690689087, 0.9157310724258423, 0.9154669046401978, 0.9121648669242859, 0.9169198274612427, 0.9202219247817993, 0.9182406663894653], "val_loss": [2.0478909015655518, 1.524705410003662, 1.0415533781051636, 0.8281896710395813, 0.7360292673110962, 0.6807203888893127, 0.635558009147644, 0.6093088388442993, 0.5750150084495544, 0.559201717376709, 0.5394850373268127, 0.5186979174613953, 0.5060700178146362, 0.49157780408859253, 0.47704654932022095, 0.46911516785621643, 0.45965689420700073, 0.45064446330070496, 0.43959978222846985, 0.4332107603549957, 0.4299057126045227, 0.4215288758277893, 0.4124095141887665, 0.40965375304222107, 0.40716230869293213, 0.39896655082702637, 0.3937927782535553, 0.39337867498397827, 0.3906210958957672, 0.3884824514389038, 0.37876227498054504, 0.38151440024375916, 0.3749942183494568, 0.37478402256965637, 0.37139758467674255, 0.37642911076545715, 0.36403027176856995, 0.36245307326316833, 0.3632095158100128, 0.36033421754837036, 0.35414445400238037, 0.35423383116722107, 0.3514370024204254, 0.35067957639694214, 0.35047200322151184, 0.34852898120880127, 0.3459607660770416, 0.34452229738235474, 0.3428134620189667, 0.34016117453575134, 0.33925387263298035, 0.33849087357521057, 0.337016761302948, 0.33394697308540344, 0.33657705783843994, 0.3319711983203888, 0.3303248882293701, 0.32878684997558594, 0.3305624723434448, 0.3239597976207733, 0.32879626750946045, 0.3267175257205963, 0.32383841276168823, 0.32671549916267395, 0.32448211312294006, 0.3272637724876404, 0.3243950605392456, 0.32243016362190247, 0.3243052661418915, 0.32818305492401123, 0.3229197859764099, 0.32266777753829956, 0.3206673562526703], "val_accuracy": [0.4933333396911621, 0.6706666946411133, 0.6936666369438171, 0.7139999866485596, 0.7386666536331177, 0.7570000290870667, 0.7689999938011169, 0.7680000066757202, 0.7900000214576721, 0.7943333387374878, 0.7983333468437195, 0.8130000233650208, 0.8190000057220459, 0.8206666707992554, 0.82833331823349, 0.8296666741371155, 0.8393333554267883, 0.8389999866485596, 0.8413333296775818, 0.8426666855812073, 0.843999981880188, 0.8516666889190674, 0.8529999852180481, 0.8550000190734863, 0.8560000061988831, 0.8553333282470703, 0.8583333492279053, 0.8569999933242798, 0.8603333234786987, 0.8613333106040955, 0.8659999966621399, 0.8619999885559082, 0.8616666793823242, 0.8679999709129333, 0.8640000224113464, 0.8633333444595337, 0.8669999837875366, 0.8703333139419556, 0.8650000095367432, 0.8726666569709778, 0.8726666569709778, 0.871666669845581, 0.871666669845581, 0.8713333606719971, 0.8736666440963745, 0.8740000128746033, 0.874666690826416, 0.874666690826416, 0.875, 0.8756666779518127, 0.8766666650772095, 0.8803333044052124, 0.8763333559036255, 0.8820000290870667, 0.878000020980835, 0.8806666731834412, 0.8820000290870667, 0.8833333253860474, 0.8823333382606506, 0.8859999775886536, 0.8840000033378601, 0.8846666812896729, 0.8856666684150696, 0.887333333492279, 0.8859999775886536, 0.8870000243186951, 0.8866666555404663, 0.8880000114440918, 0.8830000162124634, 0.887666642665863, 0.8863333463668823, 0.8853333592414856, 0.887666642665863]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 1], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 1, 0, 3], [16, 16], [0, 1], [0], [0], [75], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 2, 1, 4, 1, 5, 2, 8], [0, 0, 4, 3, 0, 0, 3, 1, 4, 0], [65, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 1, 10, 6, 4, 2, 2, 1, 1, 1, 17, 8, 9, 4], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma)), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma)), alpha), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 2, 8, 0, 3, 3, 6, 7, 8, 6], [0, 1, 0, 2, 0, 1, 1], [39, 4, 96], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 5, 3, 0, 3, 5], [0, 1, 1, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 2, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 1, 3, 1, 2, 0], [16, 99, 12, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 10, 7, 3, 6, 4, 2, 1, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.add(grad, tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), sigma), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(alpha, sigma))))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [8.506994247436523, 71.55636596679688, 256.2674560546875, 635.0079345703125, 1300.5430908203125, 2368.4736328125], "accuracy": [0.09932637959718704, 0.1022322028875351, 0.09893012791872025, 0.10460969805717468, 0.10210011899471283, 0.09919429570436478], "val_loss": [24.920066833496094, 119.89761352539062, 338.88836669921875, 746.2151489257812, 1405.9127197265625, 2381.6962890625], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [60, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0], [6, 3, 3, 3, 8, 1, 4, 1, 4, 2, 8, 2, 7, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4, 6], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 10, 6, 4, 2, 2, 1, 1, 1, 25, 14, 11, 6], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.math.add(alpha, beta)))))))), grad), tf.math.add(grad, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [16.39958381652832, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.10606260597705841, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [15.689825057983398, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.08866667002439499, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1], [9, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 5], [3, 3, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 2, 6, 8, 5, 4, 1, 4, 2, 8], [0, 4, 0, 2, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.09057142585515976, "mapping_values": [1, 1, 1, 0, 1, 11, 7, 4, 1, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(grad, tf.math.square(grad))), tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.square(grad)), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), beta))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [2.3083183765411377, 2.309134006500244, 2.3092310428619385, 2.3106038570404053, 2.3103883266448975, 2.310319423675537], "accuracy": [0.09087307006120682, 0.09760929644107819, 0.09166556596755981, 0.09272222965955734, 0.09100515395402908, 0.08809932321310043], "val_loss": [2.3095879554748535, 2.309572458267212, 2.309562921524048, 2.309555768966675, 2.3095498085021973, 2.3095452785491943], "val_accuracy": [0.09300000220537186, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548]}}]