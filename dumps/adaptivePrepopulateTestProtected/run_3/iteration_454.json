[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8811428546905518, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2237746715545654, 1.8723686933517456, 1.3995952606201172, 1.0951578617095947, 0.9308109879493713, 0.8378576636314392, 0.7867980003356934, 0.7403825521469116, 0.7074968218803406, 0.6667766571044922, 0.6467143297195435, 0.6252685785293579, 0.6010545492172241, 0.592832088470459, 0.5694352388381958, 0.5546401739120483, 0.5457968711853027, 0.5263527035713196, 0.5090768933296204, 0.5048046112060547, 0.4915485680103302, 0.4950409531593323, 0.48390650749206543, 0.4653860628604889, 0.45890092849731445, 0.4539474546909332, 0.45054811239242554, 0.4434168338775635, 0.4299618601799011, 0.42732325196266174, 0.42083144187927246, 0.41875892877578735, 0.4139094650745392, 0.40237316489219666, 0.3879244327545166, 0.38828617334365845, 0.3872472941875458, 0.38174712657928467, 0.37753409147262573, 0.37368708848953247, 0.3667537569999695, 0.3609304130077362, 0.3514280617237091, 0.3454590141773224, 0.34209492802619934, 0.3294583857059479, 0.32658490538597107, 0.3237888813018799, 0.32169947028160095, 0.32040613889694214, 0.31856244802474976, 0.3111935555934906, 0.3040423095226288, 0.3039085268974304, 0.29984933137893677, 0.29860955476760864, 0.28763389587402344, 0.28644928336143494, 0.2838956117630005, 0.28346431255340576, 0.28013065457344055, 0.2724190354347229, 0.27310502529144287], "accuracy": [0.27420419454574585, 0.48051777482032776, 0.5654470920562744, 0.6198652982711792, 0.6709813475608826, 0.7000396251678467, 0.7174745798110962, 0.7283053994178772, 0.7400607466697693, 0.7589486241340637, 0.7675340175628662, 0.774798572063446, 0.7807422876358032, 0.7844406366348267, 0.793422281742096, 0.7984414100646973, 0.8030643463134766, 0.8128384351730347, 0.8185180425643921, 0.8169330358505249, 0.8182538747787476, 0.8228767514228821, 0.8251221776008606, 0.8399154543876648, 0.8416325449943542, 0.8403117060661316, 0.837537944316864, 0.8465195894241333, 0.8466516733169556, 0.8490291833877563, 0.8502179384231567, 0.8535200357437134, 0.8474441766738892, 0.858671247959137, 0.8619733452796936, 0.8652753829956055, 0.8643507957458496, 0.8625016212463379, 0.8665962219238281, 0.8665962219238281, 0.8704266548156738, 0.8721436858177185, 0.8747853636741638, 0.8749174475669861, 0.8805969953536987, 0.8824461698532104, 0.8840311765670776, 0.8821820020675659, 0.8858803510665894, 0.8850878477096558, 0.8824461698532104, 0.8881257176399231, 0.8928807377815247, 0.8902390599250793, 0.8939374089241028, 0.89552241563797, 0.8973715305328369, 0.8942015767097473, 0.89988112449646, 0.8997490406036377, 0.8969752788543701, 0.9014661312103271, 0.9029190540313721], "val_loss": [2.037389039993286, 1.511842966079712, 1.0359350442886353, 0.8279245495796204, 0.7450146675109863, 0.6904571652412415, 0.6491749286651611, 0.6089303493499756, 0.584378719329834, 0.558230996131897, 0.5482743382453918, 0.526901125907898, 0.5176275968551636, 0.49789905548095703, 0.48785078525543213, 0.4802698493003845, 0.4741758704185486, 0.4558241367340088, 0.446842759847641, 0.4397415220737457, 0.43689489364624023, 0.43105411529541016, 0.42206501960754395, 0.41691854596138, 0.41364946961402893, 0.4036501348018646, 0.4026815593242645, 0.40334782004356384, 0.3973897397518158, 0.3922448456287384, 0.386177659034729, 0.3828100562095642, 0.3804466128349304, 0.3790411651134491, 0.37225663661956787, 0.3669360876083374, 0.36680835485458374, 0.3673231899738312, 0.3597688376903534, 0.35926786065101624, 0.36098331212997437, 0.35272863507270813, 0.3481261432170868, 0.3572690486907959, 0.34953010082244873, 0.34897640347480774, 0.3506835401058197, 0.34860289096832275, 0.34379568696022034, 0.3427906930446625, 0.34296849370002747, 0.3384943902492523, 0.33897867798805237, 0.33991867303848267, 0.338674932718277, 0.3346634805202484, 0.3385751247406006, 0.33232465386390686, 0.332682728767395, 0.3382399082183838, 0.3326888978481293, 0.3314237594604492, 0.3316805958747864], "val_accuracy": [0.5120000243186951, 0.6606666445732117, 0.6880000233650208, 0.7093333601951599, 0.7293333411216736, 0.7519999742507935, 0.762333333492279, 0.7699999809265137, 0.7879999876022339, 0.7946666479110718, 0.7926666736602783, 0.8096666932106018, 0.8113333582878113, 0.8176666498184204, 0.8233333230018616, 0.8213333487510681, 0.824999988079071, 0.8360000252723694, 0.8379999995231628, 0.8379999995231628, 0.8423333168029785, 0.8443333506584167, 0.8483333587646484, 0.8460000157356262, 0.8496666550636292, 0.8569999933242798, 0.8519999980926514, 0.8516666889190674, 0.8583333492279053, 0.8550000190734863, 0.856333315372467, 0.8610000014305115, 0.859000027179718, 0.8640000224113464, 0.8629999756813049, 0.8646666407585144, 0.8676666617393494, 0.8656666874885559, 0.8673333525657654, 0.8650000095367432, 0.8700000047683716, 0.8713333606719971, 0.8730000257492065, 0.8696666955947876, 0.8726666569709778, 0.8733333349227905, 0.8726666569709778, 0.8736666440963745, 0.8726666569709778, 0.8730000257492065, 0.8740000128746033, 0.8790000081062317, 0.878333330154419, 0.878333330154419, 0.8776666522026062, 0.878000020980835, 0.8793333172798157, 0.8846666812896729, 0.8759999871253967, 0.8769999742507935, 0.8823333382606506, 0.878333330154419, 0.8826666474342346]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8625714182853699, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224597454071045, 1.8782252073287964, 1.406738042831421, 1.1049140691757202, 0.9464682340621948, 0.8473066091537476, 0.7772341370582581, 0.7311294674873352, 0.6847058534622192, 0.6581867337226868, 0.6351392865180969, 0.6041851043701172, 0.5902594923973083, 0.57667475938797, 0.5595734715461731, 0.5462033748626709, 0.5312408208847046, 0.5107802152633667, 0.5078376531600952, 0.49394911527633667, 0.4909279942512512, 0.4786612391471863, 0.4723994731903076, 0.45759117603302, 0.4464810788631439, 0.4383627772331238, 0.4371674358844757, 0.42082005739212036, 0.4226083755493164, 0.41704967617988586, 0.40874892473220825, 0.40629395842552185, 0.39624544978141785, 0.3897285759449005, 0.3836832046508789, 0.374544620513916, 0.3733254373073578, 0.37095916271209717, 0.36871129274368286, 0.3682482838630676, 0.34989479184150696, 0.34930551052093506, 0.35295459628105164, 0.3424180746078491, 0.3386381268501282, 0.3335939049720764, 0.32728686928749084, 0.32775959372520447, 0.3222011923789978, 0.3148995041847229, 0.31051120162010193, 0.3128666877746582, 0.30553168058395386, 0.2992422580718994], "accuracy": [0.26680755615234375, 0.4831594228744507, 0.555408775806427, 0.6188086271286011, 0.6634526252746582, 0.7000396251678467, 0.7180029153823853, 0.7314753532409668, 0.7516840696334839, 0.7604015469551086, 0.7692511081695557, 0.7779685854911804, 0.7835160493850708, 0.7915731072425842, 0.7961959838867188, 0.8035926818847656, 0.8041210174560547, 0.8153480291366577, 0.8178576231002808, 0.8228767514228821, 0.8220842480659485, 0.8247259259223938, 0.8285563588142395, 0.8318583965301514, 0.8393871188163757, 0.8438779711723328, 0.8425571322441101, 0.8481045961380005, 0.8444063067436218, 0.8467837572097778, 0.8536521196365356, 0.8521991968154907, 0.8610487580299377, 0.8602562546730042, 0.8617091774940491, 0.8650112152099609, 0.8643507957458496, 0.8663320541381836, 0.8693699836730957, 0.8673887252807617, 0.8753136992454529, 0.873860776424408, 0.8728041052818298, 0.8771628737449646, 0.8771628737449646, 0.8787478804588318, 0.8802007436752319, 0.884691596031189, 0.8835028409957886, 0.887201189994812, 0.8899748921394348, 0.8887861371040344, 0.8885219693183899, 0.8939374089241028], "val_loss": [2.0387890338897705, 1.5170758962631226, 1.0340123176574707, 0.820236325263977, 0.7315329313278198, 0.6764798760414124, 0.6292420029640198, 0.6000168919563293, 0.569824755191803, 0.5488826036453247, 0.530421793460846, 0.5115557312965393, 0.5018112063407898, 0.48865267634391785, 0.476650595664978, 0.4736216366291046, 0.4550010859966278, 0.4514143764972687, 0.44091832637786865, 0.4410741329193115, 0.43554189801216125, 0.43713757395744324, 0.42199772596359253, 0.4151524305343628, 0.4077441096305847, 0.4027576446533203, 0.40518343448638916, 0.393351286649704, 0.39764416217803955, 0.38824906945228577, 0.3883071839809418, 0.38751813769340515, 0.3807775378227234, 0.3755072355270386, 0.3808352053165436, 0.3819064199924469, 0.3728451728820801, 0.3716239333152771, 0.36779436469078064, 0.36444780230522156, 0.3644348084926605, 0.3627571165561676, 0.3634106516838074, 0.35932663083076477, 0.3576914966106415, 0.35562410950660706, 0.35427790880203247, 0.3574325442314148, 0.35095134377479553, 0.3502087891101837, 0.34863603115081787, 0.3474373519420624, 0.3487115502357483, 0.34425196051597595], "val_accuracy": [0.5496666431427002, 0.6439999938011169, 0.6859999895095825, 0.7043333053588867, 0.734333336353302, 0.7556666731834412, 0.765666663646698, 0.7723333239555359, 0.7873333096504211, 0.793666660785675, 0.8023333549499512, 0.812333345413208, 0.8103333115577698, 0.8193333148956299, 0.8289999961853027, 0.8233333230018616, 0.8323333263397217, 0.8376666903495789, 0.8429999947547913, 0.8396666646003723, 0.8393333554267883, 0.8416666388511658, 0.8500000238418579, 0.8546666502952576, 0.8519999980926514, 0.8533333539962769, 0.8529999852180481, 0.8586666584014893, 0.859000027179718, 0.8640000224113464, 0.8619999885559082, 0.8619999885559082, 0.8659999966621399, 0.8676666617393494, 0.8659999966621399, 0.8629999756813049, 0.8676666617393494, 0.8693333268165588, 0.8700000047683716, 0.8693333268165588, 0.8693333268165588, 0.8706666827201843, 0.8706666827201843, 0.8709999918937683, 0.8733333349227905, 0.8723333477973938, 0.871999979019165, 0.875333309173584, 0.8759999871253967, 0.874666690826416, 0.875, 0.8730000257492065, 0.875, 0.8756666779518127]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 2, 4, 0, 3, 5, 5, 4, 7, 0, 1, 5, 4, 9, 6, 0, 4, 2, 4, 4, 3, 7, 4, 3, 3, 2, 9, 1, 5, 0, 0, 6, 3, 3, 1, 9, 4, 2, 0, 9, 8, 0, 0], [0, 2, 0, 3, 1, 5, 2, 4, 4, 5, 1, 1, 5, 0, 4, 4, 5, 0, 5, 3, 0, 5], [19, 16, 15, 61, 32, 29, 13, 3, 66], [0, 1], [0], [0], [74], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 0, 1, 4, 1, 2, 2, 8], [4, 0, 0, 3, 0, 0, 3, 4, 2, 0], [11, 99, 96, 99, 61, 1]], "fitness": -0.7491428852081299, "mapping_values": [1, 9, 5, 4, 2, 65, 43, 22, 9, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 36, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.negative(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.pow(grad, tf.math.add(tf.math.negative(tf.math.subtract(alpha, tf.math.square(tf.math.pow(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), grad)))), tf.math.divide_no_nan(beta, tf.math.negative(tf.math.pow(tf.math.add(tf.math.pow(tf.math.pow(tf.math.multiply(tf.math.add(tf.math.pow(tf.math.multiply(grad, tf.math.multiply(grad, tf.math.add(grad, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), alpha), alpha), grad), tf.math.subtract(tf.math.square(tf.math.negative(tf.math.negative(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), grad)), tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.subtract(grad, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(grad, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.negative(grad))), grad), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.negative(tf.math.negative(grad)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, grad)))", "other_info": {"loss": [1.795939564704895, 1.1029959917068481, 0.9693333506584167, 0.9368250370025635, 0.9042689204216003, 0.8791893124580383, 0.8663588762283325, 0.8586825132369995, 0.8460274338722229, 0.8324888944625854, 0.8261422514915466, 0.8212644457817078, 0.8179577589035034, 0.8045558929443359, 0.8078948855400085, 0.8014897108078003, 0.7954230904579163, 0.8073727488517761, 0.798382580280304, 0.800065279006958, 0.7831981182098389, 0.7937769889831543, 0.7937929630279541, 0.780704140663147], "accuracy": [0.3928146958351135, 0.6092986464500427, 0.6491876840591431, 0.6651697158813477, 0.6749438643455505, 0.6823405027389526, 0.6856426000595093, 0.6863030195236206, 0.6955488324165344, 0.7062475085258484, 0.7016246318817139, 0.7003037929534912, 0.7043983340263367, 0.7055870890617371, 0.7049266695976257, 0.7063795924186707, 0.7086250185966492, 0.7043983340263367, 0.7024171352386475, 0.7045304179191589, 0.7162858247756958, 0.7071720957756042, 0.7055870890617371, 0.7107383608818054], "val_loss": [1.0352356433868408, 0.8453966379165649, 0.7912285923957825, 0.7585498094558716, 0.7354984283447266, 0.7279563546180725, 0.7165374159812927, 0.7082052230834961, 0.6994608044624329, 0.6949108242988586, 0.6881617903709412, 0.6849282383918762, 0.6808169484138489, 0.6781007647514343, 0.6742581129074097, 0.6716467142105103, 0.668982207775116, 0.6668299436569214, 0.6645262837409973, 0.6637625098228455, 0.6610494256019592, 0.6587977409362793, 0.6575255393981934, 0.6556801795959473], "val_accuracy": [0.6396666765213013, 0.7003333568572998, 0.7133333086967468, 0.7250000238418579, 0.7319999933242798, 0.7283333539962769, 0.734666645526886, 0.7329999804496765, 0.7386666536331177, 0.7426666617393494, 0.746999979019165, 0.7443333268165588, 0.7456666827201843, 0.7473333477973938, 0.7480000257492065, 0.7493333220481873, 0.75, 0.7509999871253967, 0.7536666393280029, 0.7513333559036255, 0.7513333559036255, 0.753333330154419, 0.75, 0.7536666393280029]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 4, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 8, 3, 0, 6, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 6, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0], [16, 99, 96, 99, 61, 64]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 4, 2, 1, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(grad), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 8, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [2], [68], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 96, 62, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 6, 4, 2, 1, 2, 1, 1, 0, 16, 8, 8, 5], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1], [0, 6, 3, 0, 3, 2, 0], [0, 1, 2, 2, 2], [39, 37], [0, 1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 1, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 0], [0, 0, 0, 3, 0, 3, 3, 1, 4, 0], [16, 99, 17, 99, 70, 1]], "fitness": -0.08971428871154785, "mapping_values": [1, 12, 7, 5, 1, 2, 1, 1, 1, 2, 1, 1, 1, 22, 12, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, tf.math.add(tf.math.negative(grad), grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(sigma, sigma)))), tf.math.add(tf.math.sqrt(tf.math.negative(alpha)), grad)), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.310499906539917, 2.3101768493652344, 2.309232234954834, 2.3105287551879883, 2.3096601963043213, 2.3103253841400146], "accuracy": [0.08994849026203156, 0.09192973375320435, 0.09351472556591034, 0.0936468094587326, 0.09100515395402908, 0.09259014576673508], "val_loss": [2.3086657524108887, 2.3086657524108887, 2.3086657524108887, 2.3086657524108887, 2.3086657524108887, 2.3086657524108887], "val_accuracy": [0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024]}}]