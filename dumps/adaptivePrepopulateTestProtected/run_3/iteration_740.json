[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8822857141494751, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585750579834, 1.8655762672424316, 1.394430160522461, 1.0773245096206665, 0.9378393888473511, 0.8425824046134949, 0.7776632308959961, 0.736241340637207, 0.6971188187599182, 0.6732122302055359, 0.644855797290802, 0.6276965141296387, 0.6100340485572815, 0.5899673104286194, 0.5746485590934753, 0.5484329462051392, 0.5425268411636353, 0.5357900857925415, 0.5214410424232483, 0.5127171874046326, 0.4895091950893402, 0.4932740032672882, 0.48551443219184875, 0.47113916277885437, 0.46571049094200134, 0.450914591550827, 0.438728004693985, 0.4414178729057312, 0.4245515465736389, 0.4182806611061096, 0.4126766324043274, 0.41352686285972595, 0.4031256139278412, 0.40064555406570435, 0.3982388377189636, 0.38566267490386963, 0.38400527834892273, 0.3741128146648407, 0.36422181129455566, 0.36170411109924316, 0.35991787910461426, 0.35666367411613464, 0.3521813750267029, 0.34583958983421326, 0.34736087918281555, 0.34181836247444153, 0.33650368452072144, 0.33141741156578064, 0.3230496346950531, 0.3225416839122772, 0.315096914768219, 0.3059031665325165, 0.3058394491672516, 0.3017319440841675, 0.29568877816200256, 0.2933836281299591, 0.28774771094322205, 0.2856961190700531, 0.2802303731441498, 0.2779994010925293, 0.274711549282074, 0.2719985842704773, 0.2586328387260437, 0.2598455548286438, 0.2622571289539337, 0.25739434361457825, 0.2502012252807617, 0.2544722855091095, 0.24556587636470795, 0.24580754339694977, 0.23948103189468384, 0.23949603736400604, 0.23484042286872864, 0.22871272265911102, 0.2256491780281067, 0.22479403018951416, 0.21744707226753235, 0.21390178799629211, 0.21272219717502594], "accuracy": [0.2785629332065582, 0.49451854825019836, 0.559899628162384, 0.6215823292732239, 0.6654338836669922, 0.6950204968452454, 0.7181349992752075, 0.7322678565979004, 0.7441553473472595, 0.7483819723129272, 0.7627789974212646, 0.7717606425285339, 0.7728173136711121, 0.78113853931427, 0.7882710099220276, 0.7993659973144531, 0.7976489067077637, 0.8074230551719666, 0.8128384351730347, 0.8198388814926147, 0.8212917447090149, 0.819970965385437, 0.8272355198860168, 0.8350284099578857, 0.8305375576019287, 0.8387266993522644, 0.846387505531311, 0.8433496356010437, 0.8504821062088013, 0.8524633646011353, 0.8535200357437134, 0.854708731174469, 0.856689989566803, 0.8551049828529358, 0.8593316674232483, 0.8615770936012268, 0.8628978729248047, 0.8702945709228516, 0.8691058158874512, 0.871879518032074, 0.8722757697105408, 0.8691058158874512, 0.8733324408531189, 0.8800686597824097, 0.8795403242111206, 0.8755778670310974, 0.8768987059593201, 0.8829745054244995, 0.8824461698532104, 0.8823140859603882, 0.887201189994812, 0.8897107243537903, 0.8889182209968567, 0.8927486538887024, 0.8902390599250793, 0.8953903317451477, 0.8980319499969482, 0.8976356983184814, 0.900409460067749, 0.89552241563797, 0.9025228023529053, 0.8989565372467041, 0.9056927561759949, 0.9085986018180847, 0.9030511379241943, 0.9066173434257507, 0.9101836085319519, 0.9083344340324402, 0.909259021282196, 0.9099194407463074, 0.9126931428909302, 0.9140139818191528, 0.9119006991386414, 0.9171839952468872, 0.9169198274612427, 0.9185048341751099, 0.9218068718910217, 0.9185048341751099, 0.9196935892105103], "val_loss": [2.033445358276367, 1.5042319297790527, 1.0271512269973755, 0.8147247433662415, 0.7278039455413818, 0.68117356300354, 0.6306353211402893, 0.5966841578483582, 0.5751398801803589, 0.5460951328277588, 0.5314993858337402, 0.509799063205719, 0.4957965612411499, 0.4792602062225342, 0.46671679615974426, 0.45267683267593384, 0.4441072940826416, 0.4356139600276947, 0.42943108081817627, 0.4255247414112091, 0.41811680793762207, 0.4163394272327423, 0.39929893612861633, 0.3969916105270386, 0.39089226722717285, 0.387652188539505, 0.3844633102416992, 0.3824205696582794, 0.3749690353870392, 0.3701930642127991, 0.36967378854751587, 0.36689504981040955, 0.3585263788700104, 0.3587398827075958, 0.36267170310020447, 0.3561091423034668, 0.35379692912101746, 0.3499273955821991, 0.34701839089393616, 0.3467637896537781, 0.3424672484397888, 0.33951225876808167, 0.3386255204677582, 0.34044384956359863, 0.33945050835609436, 0.33684298396110535, 0.3322163224220276, 0.33181649446487427, 0.32827115058898926, 0.3312568664550781, 0.3297465741634369, 0.3256674110889435, 0.3234780728816986, 0.32119208574295044, 0.3232716917991638, 0.3209094703197479, 0.31944912672042847, 0.3157532513141632, 0.3144265413284302, 0.31676045060157776, 0.31425556540489197, 0.3131799101829529, 0.3147056996822357, 0.3154993951320648, 0.31771615147590637, 0.31545644998550415, 0.3127000629901886, 0.31382524967193604, 0.31026333570480347, 0.3147730529308319, 0.30829918384552, 0.3107443153858185, 0.31316936016082764, 0.30297672748565674, 0.30325081944465637, 0.30436232686042786, 0.3072424829006195, 0.30681705474853516, 0.3061434030532837], "val_accuracy": [0.5526666641235352, 0.6666666865348816, 0.687333345413208, 0.7083333134651184, 0.731333315372467, 0.7446666955947876, 0.7606666684150696, 0.762666642665863, 0.7873333096504211, 0.7889999747276306, 0.7973333597183228, 0.8056666851043701, 0.8193333148956299, 0.8259999752044678, 0.8289999961853027, 0.8410000205039978, 0.8453333377838135, 0.8450000286102295, 0.8489999771118164, 0.847000002861023, 0.8516666889190674, 0.856333315372467, 0.859333336353302, 0.856333315372467, 0.8633333444595337, 0.8640000224113464, 0.8656666874885559, 0.8646666407585144, 0.8679999709129333, 0.8696666955947876, 0.8640000224113464, 0.8686666488647461, 0.8713333606719971, 0.8709999918937683, 0.8703333139419556, 0.8723333477973938, 0.871999979019165, 0.874666690826416, 0.8723333477973938, 0.8759999871253967, 0.8726666569709778, 0.875333309173584, 0.8790000081062317, 0.8756666779518127, 0.8726666569709778, 0.8769999742507935, 0.8796666860580444, 0.8796666860580444, 0.8806666731834412, 0.8793333172798157, 0.8813333511352539, 0.8840000033378601, 0.8840000033378601, 0.8843333125114441, 0.8809999823570251, 0.8856666684150696, 0.8866666555404663, 0.8833333253860474, 0.8866666555404663, 0.8843333125114441, 0.8856666684150696, 0.8880000114440918, 0.887333333492279, 0.8883333206176758, 0.8866666555404663, 0.8896666765213013, 0.8863333463668823, 0.8853333592414856, 0.890999972820282, 0.8870000243186951, 0.8883333206176758, 0.8883333206176758, 0.8916666507720947, 0.8939999938011169, 0.8896666765213013, 0.8916666507720947, 0.890999972820282, 0.8926666378974915, 0.8913333415985107]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8574285507202148, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2235124111175537, 1.8655757904052734, 1.3870302438735962, 1.0873392820358276, 0.9178357124328613, 0.8301859498023987, 0.7660291194915771, 0.713653028011322, 0.6822980642318726, 0.6537939310073853, 0.6229372620582581, 0.606471061706543, 0.5894666314125061, 0.5568585991859436, 0.5531079173088074, 0.5321710109710693, 0.517709493637085, 0.5114889740943909, 0.4987943470478058, 0.49157020449638367, 0.4786140024662018, 0.470176100730896, 0.449323832988739, 0.4592074155807495, 0.4414156973361969, 0.4375137388706207, 0.42599567770957947, 0.42091235518455505, 0.4092988073825836, 0.3999183773994446, 0.3991885185241699, 0.3843715190887451, 0.3913993239402771, 0.37497884035110474, 0.37915560603141785, 0.3693818747997284, 0.3652147650718689, 0.35773077607154846, 0.3492269217967987, 0.3460206687450409, 0.33943548798561096, 0.3472454249858856, 0.3408453166484833, 0.3300430476665497, 0.32134953141212463, 0.31654220819473267, 0.31787294149398804, 0.3176303505897522, 0.31319600343704224, 0.3028252422809601, 0.293636679649353, 0.289754718542099, 0.2941255271434784, 0.2870093584060669], "accuracy": [0.2751287817955017, 0.48606523871421814, 0.5692775249481201, 0.6148461103439331, 0.6637167930603027, 0.7017567157745361, 0.7228899598121643, 0.7392682433128357, 0.7458723783493042, 0.7618544697761536, 0.7708360552787781, 0.7773081660270691, 0.7833839654922485, 0.7957997918128967, 0.7969884872436523, 0.8053097128868103, 0.8099326491355896, 0.8138951063156128, 0.8208954930305481, 0.8227446675300598, 0.8305375576019287, 0.833179235458374, 0.8343679904937744, 0.8309338092803955, 0.8384625315666199, 0.8405758738517761, 0.8492933511734009, 0.8470479249954224, 0.8512746095657349, 0.8544445633888245, 0.8519350290298462, 0.8618412613868713, 0.8553691506385803, 0.8626337051391602, 0.8597279191017151, 0.8687095642089844, 0.8697662353515625, 0.8691058158874512, 0.8749174475669861, 0.8729361891746521, 0.876370370388031, 0.872407853603363, 0.8782195448875427, 0.8838990926742554, 0.8841632604598999, 0.8891823887825012, 0.8821820020675659, 0.8844274282455444, 0.8862766027450562, 0.8883898854255676, 0.8938053250312805, 0.8953903317451477, 0.8924844861030579, 0.8957865834236145], "val_loss": [2.037322759628296, 1.5079947710037231, 1.0296032428741455, 0.8220838308334351, 0.7297229170799255, 0.674233615398407, 0.6325685977935791, 0.5938954949378967, 0.5706703662872314, 0.5519048571586609, 0.529769241809845, 0.5163509845733643, 0.4993511438369751, 0.48613831400871277, 0.4763568937778473, 0.4740491807460785, 0.4554630517959595, 0.45599380135536194, 0.44356152415275574, 0.4352235198020935, 0.43353474140167236, 0.4240351617336273, 0.41891226172447205, 0.41875186562538147, 0.4083614945411682, 0.41150960326194763, 0.400608628988266, 0.3966042995452881, 0.39218708872795105, 0.3887483775615692, 0.3826758563518524, 0.3846208155155182, 0.37903329730033875, 0.37618571519851685, 0.3771815896034241, 0.3728002607822418, 0.3698175847530365, 0.36500969529151917, 0.3706941604614258, 0.36545711755752563, 0.35955217480659485, 0.361781507730484, 0.3601435422897339, 0.35356298089027405, 0.35229983925819397, 0.3540557324886322, 0.35540056228637695, 0.34847432374954224, 0.3451736271381378, 0.34463736414909363, 0.3424369692802429, 0.34926721453666687, 0.34811511635780334, 0.3413258492946625], "val_accuracy": [0.5616666674613953, 0.6586666703224182, 0.6896666884422302, 0.7099999785423279, 0.7323333621025085, 0.7523333430290222, 0.7683333158493042, 0.7866666913032532, 0.7940000295639038, 0.8013333082199097, 0.812333345413208, 0.8169999718666077, 0.8270000219345093, 0.8306666612625122, 0.8383333086967468, 0.8333333134651184, 0.8366666436195374, 0.8396666646003723, 0.843999981880188, 0.847000002861023, 0.8496666550636292, 0.8513333201408386, 0.8579999804496765, 0.8543333411216736, 0.8569999933242798, 0.8556666374206543, 0.8603333234786987, 0.8600000143051147, 0.862333357334137, 0.8616666793823242, 0.8650000095367432, 0.8683333396911621, 0.8663333058357239, 0.8676666617393494, 0.8676666617393494, 0.8686666488647461, 0.8690000176429749, 0.8696666955947876, 0.8690000176429749, 0.8733333349227905, 0.875333309173584, 0.871999979019165, 0.874666690826416, 0.8799999952316284, 0.8756666779518127, 0.8756666779518127, 0.875333309173584, 0.8763333559036255, 0.8823333382606506, 0.878333330154419, 0.8773333430290222, 0.8776666522026062, 0.8793333172798157, 0.8799999952316284]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [24, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [72, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 2, 3, 6, 8, 1, 6, 1, 4, 2, 8], [0, 0, 0, 0, 0, 0, 0, 2, 2, 0], [16, 99, 96, 99, 61, 1, 46, 42]], "fitness": -0.10028571635484695, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))))), beta), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3066017627716064, 2.3029985427856445, 2.302588939666748, 2.3025853633880615, 2.3025851249694824, 2.3025853633880615, 2.3025851249694824], "accuracy": [0.0874389111995697, 0.09166556596755981, 0.10038304328918457, 0.09998679161071777, 0.09655263274908066, 0.09998679161071777, 0.09826971590518951], "val_loss": [2.3035709857940674, 2.3025856018066406, 2.3025848865509033, 2.3025848865509033, 2.3025848865509033, 2.3025848865509033, 2.3025848865509033], "val_accuracy": [0.07999999821186066, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.09733333438634872, 0.09733333438634872, 0.10233332961797714]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 20, 10, 10, 8], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 4, 3, 1, 2, 3], [0, 1, 0, 2, 2, 0, 1, 1, 0], [39, 39, 70, 82], [0, 1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 2, 3, 0, 1, 5], [0, 2, 0, 0], [16, 16], [0, 1], [0], [0], [81], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [6, 3, 3, 6, 3, 1, 4, 1, 5, 2, 8, 1, 5], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 0], [16, 99, 96, 99, 61, 1, 64]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 10, 9, 4, 2, 1, 1, 1, 2, 1, 1, 1, 24, 13, 11, 7], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.pow(tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.subtract(grad, tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, alpha))))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.square(sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.sqrt(tf.math.subtract(alpha, beta))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 8, 3], [0, 1, 0, 0], [39, 39, 3], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 6, 0, 3, 5, 4, 6], [0, 2, 0, 3, 5, 0], [16, 16, 8], [0, 1], [0], [0], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 3, 4, 4, 1, 4, 1, 4, 2, 3], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 98, 60, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 14, 8, 6, 3, 2, 1, 1, 1, 2, 1, 1, 1], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, grad)))), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [7.531765937805176, 58.63130187988281, 202.71617126464844, 492.8377380371094, 997.9117431640625, 1786.0694580078125], "accuracy": [0.10474177449941635, 0.1014397069811821, 0.10051512718200684, 0.09642054885625839, 0.10077928751707077, 0.0936468094587326], "val_loss": [20.639266967773438, 96.60098266601562, 267.6328125, 583.0659790039062, 1091.9052734375, 1843.572021484375], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 4, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 2, 2, 3, 7], [3, 0, 0, 2, 5, 0, 1], [16, 30, 7], [0, 1], [0], [0], [30], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 5, 4, 2, 8], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.09200000017881393, "mapping_values": [1, 6, 3, 3, 2, 15, 8, 7, 3, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(grad, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), grad)), alpha)", "other_info": {"loss": [2.3111884593963623, 2.310187339782715, 2.3103411197662354, 2.3097128868103027, 2.310443878173828, 2.309499740600586], "accuracy": [0.09113723784685135, 0.08849557489156723, 0.09272222965955734, 0.09232597798109055, 0.09325055778026581, 0.08955223858356476], "val_loss": [2.308337450027466, 2.308337450027466, 2.308337450027466, 2.308337450027466, 2.308337450027466, 2.308337450027466], "val_accuracy": [0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133]}}]