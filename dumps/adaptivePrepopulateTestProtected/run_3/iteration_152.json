[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.878000020980835, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223759174346924, 1.8681567907333374, 1.3971633911132812, 1.1021500825881958, 0.9438490867614746, 0.8268281817436218, 0.7700234055519104, 0.7182450890541077, 0.6839274764060974, 0.655160665512085, 0.6316797733306885, 0.6046612858772278, 0.586663544178009, 0.5732303261756897, 0.5552444458007812, 0.5382086634635925, 0.5205084085464478, 0.5141545534133911, 0.49866363406181335, 0.4905571937561035, 0.48713892698287964, 0.4630949795246124, 0.46493759751319885, 0.4510720372200012, 0.4456666111946106, 0.4411585330963135, 0.43109801411628723, 0.4194287657737732, 0.41647717356681824, 0.4177640676498413, 0.39898860454559326, 0.3982110619544983, 0.3941095173358917, 0.3838343918323517, 0.38270825147628784, 0.38132011890411377, 0.3706604242324829, 0.3630581796169281, 0.35970449447631836, 0.3585955500602722, 0.3488880693912506, 0.3406795859336853, 0.3434852361679077, 0.34305644035339355, 0.32770219445228577, 0.3274216949939728, 0.3164256513118744, 0.31487780809402466, 0.31453031301498413, 0.3020377457141876, 0.3013147711753845, 0.29238083958625793, 0.30650538206100464, 0.2886098325252533, 0.28784143924713135, 0.28922179341316223, 0.27991431951522827, 0.27731093764305115, 0.27029022574424744, 0.2677718997001648, 0.2672445476055145], "accuracy": [0.27182671427726746, 0.4913485646247864, 0.5609562993049622, 0.6095628142356873, 0.6618676781654358, 0.6997754573822021, 0.7215691208839417, 0.7407211661338806, 0.7508915662765503, 0.7592127919197083, 0.7656848430633545, 0.7798177003860474, 0.7849689722061157, 0.789459764957428, 0.7991018295288086, 0.806630551815033, 0.81112140417099, 0.8088759779930115, 0.8210275769233704, 0.8181217908859253, 0.826310932636261, 0.8333113193511963, 0.8294808864593506, 0.8401796221733093, 0.8409721255302429, 0.8436138033866882, 0.8459912538528442, 0.8519350290298462, 0.8485008478164673, 0.8490291833877563, 0.856689989566803, 0.8573504090309143, 0.8615770936012268, 0.8644828796386719, 0.8605204224586487, 0.8614450097084045, 0.8671245574951172, 0.8726720213890076, 0.8732003569602966, 0.8689737319946289, 0.8762382864952087, 0.8798044919967651, 0.8717474341392517, 0.8825782537460327, 0.8840311765670776, 0.8845595121383667, 0.8885219693183899, 0.8865407705307007, 0.8887861371040344, 0.894069492816925, 0.8918240666389465, 0.8953903317451477, 0.8860124349594116, 0.8988244533538818, 0.8992207050323486, 0.8956544995307922, 0.9014661312103271, 0.89988112449646, 0.900409460067749, 0.9046360850334167, 0.9033153057098389], "val_loss": [2.0386126041412354, 1.5089809894561768, 1.0396978855133057, 0.8277255296707153, 0.7414798736572266, 0.6867381930351257, 0.6452507376670837, 0.6096968054771423, 0.5920496582984924, 0.5695558786392212, 0.550778865814209, 0.5315823554992676, 0.5166425704956055, 0.5040237307548523, 0.4927339255809784, 0.48035380244255066, 0.4752146899700165, 0.4640548527240753, 0.45926037430763245, 0.4498494863510132, 0.44989997148513794, 0.43486902117729187, 0.4302854835987091, 0.42699891328811646, 0.4222937822341919, 0.4179273545742035, 0.4156407117843628, 0.40615877509117126, 0.40567347407341003, 0.40483561158180237, 0.4008205533027649, 0.3957735300064087, 0.3910598158836365, 0.39842313528060913, 0.38378071784973145, 0.3824272155761719, 0.37983548641204834, 0.3832281529903412, 0.37993335723876953, 0.37290528416633606, 0.37028563022613525, 0.3697679340839386, 0.369826078414917, 0.3630952835083008, 0.3613884747028351, 0.3612003028392792, 0.3630628287792206, 0.35836127400398254, 0.35707563161849976, 0.3544061779975891, 0.35439038276672363, 0.35541149973869324, 0.34793493151664734, 0.355723112821579, 0.3566884696483612, 0.3480426073074341, 0.35176366567611694, 0.34468159079551697, 0.3469727337360382, 0.34757280349731445, 0.34379008412361145], "val_accuracy": [0.546999990940094, 0.6536666750907898, 0.6856666803359985, 0.7066666483879089, 0.7366666793823242, 0.7536666393280029, 0.7599999904632568, 0.7720000147819519, 0.7706666588783264, 0.7926666736602783, 0.7963333129882812, 0.7956666946411133, 0.8103333115577698, 0.809333324432373, 0.8220000267028809, 0.8226666450500488, 0.8243333101272583, 0.8330000042915344, 0.8349999785423279, 0.8370000123977661, 0.8333333134651184, 0.8429999947547913, 0.8463333249092102, 0.8446666598320007, 0.8476666808128357, 0.8479999899864197, 0.8450000286102295, 0.8506666421890259, 0.8496666550636292, 0.8529999852180481, 0.8556666374206543, 0.8556666374206543, 0.8586666584014893, 0.8526666760444641, 0.8576666712760925, 0.8610000014305115, 0.859000027179718, 0.8616666793823242, 0.8653333187103271, 0.8673333525657654, 0.8673333525657654, 0.8659999966621399, 0.8693333268165588, 0.8690000176429749, 0.8726666569709778, 0.8726666569709778, 0.8740000128746033, 0.8730000257492065, 0.871999979019165, 0.8759999871253967, 0.874666690826416, 0.871999979019165, 0.8806666731834412, 0.8776666522026062, 0.8706666827201843, 0.8820000290870667, 0.878333330154419, 0.878000020980835, 0.8806666731834412, 0.8793333172798157, 0.878333330154419]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8671428561210632, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2205069065093994, 1.8560813665390015, 1.3794362545013428, 1.072395920753479, 0.9221593141555786, 0.8268689513206482, 0.7606960535049438, 0.7074993252754211, 0.6729753017425537, 0.6457793116569519, 0.6151155829429626, 0.594430148601532, 0.5843521952629089, 0.5653848052024841, 0.5459344387054443, 0.5292828679084778, 0.5213927626609802, 0.5116922855377197, 0.48663634061813354, 0.48511672019958496, 0.469998300075531, 0.4643497169017792, 0.459222674369812, 0.44711607694625854, 0.44439345598220825, 0.4282137453556061, 0.4301684498786926, 0.4210018515586853, 0.4156452417373657, 0.4024491608142853, 0.40454402565956116, 0.39547911286354065, 0.3885166347026825, 0.3878757357597351, 0.3765872120857239, 0.3676210045814514, 0.36564984917640686, 0.3636074960231781, 0.356100857257843, 0.34916210174560547, 0.3507125675678253, 0.33741286396980286, 0.33948221802711487, 0.3308230936527252, 0.3312166631221771, 0.3244113028049469, 0.3106972873210907, 0.3067598044872284, 0.3106655180454254, 0.30261874198913574, 0.30068543553352356, 0.2945939898490906, 0.2982582449913025, 0.2921939194202423], "accuracy": [0.27565711736679077, 0.49610355496406555, 0.5683529376983643, 0.629507303237915, 0.6699247360229492, 0.7021529674530029, 0.7256637215614319, 0.7465327978134155, 0.7531369924545288, 0.7635715007781982, 0.7741381525993347, 0.7820631265640259, 0.7819310426712036, 0.7893276810646057, 0.8010830879211426, 0.8103289008140564, 0.8067626357078552, 0.81548011302948, 0.8185180425643921, 0.824329674243927, 0.8251221776008606, 0.8300092220306396, 0.830669641494751, 0.837537944316864, 0.8385946154594421, 0.8428213000297546, 0.8408400416374207, 0.8475762605667114, 0.8514066934585571, 0.8537842035293579, 0.8536521196365356, 0.8553691506385803, 0.8595958352088928, 0.8602562546730042, 0.8656716346740723, 0.8668603897094727, 0.8669924736022949, 0.867520809173584, 0.8692378997802734, 0.872407853603363, 0.8706908226013184, 0.8779553771018982, 0.8787478804588318, 0.8809932470321655, 0.878879964351654, 0.8836349248886108, 0.8865407705307007, 0.8899748921394348, 0.8908994793891907, 0.8901069760322571, 0.8928807377815247, 0.8908994793891907, 0.8928807377815247, 0.8936732411384583], "val_loss": [2.031592607498169, 1.4995123147964478, 1.0338531732559204, 0.8312268853187561, 0.7497809529304504, 0.696762204170227, 0.6539336442947388, 0.619508683681488, 0.5993844270706177, 0.5759761929512024, 0.5560224652290344, 0.5483531355857849, 0.536450207233429, 0.5184241533279419, 0.5099340677261353, 0.49917367100715637, 0.49029141664505005, 0.4805534780025482, 0.4684971570968628, 0.46582740545272827, 0.4590305685997009, 0.45530614256858826, 0.44748055934906006, 0.4408820867538452, 0.43527913093566895, 0.4345587491989136, 0.42663314938545227, 0.43247973918914795, 0.42045024037361145, 0.4199369251728058, 0.41595879197120667, 0.4131236672401428, 0.4104444980621338, 0.40553539991378784, 0.3996840715408325, 0.3998490273952484, 0.3934555649757385, 0.3942945897579193, 0.39141443371772766, 0.3974553346633911, 0.38882288336753845, 0.3829455077648163, 0.3810332119464874, 0.3861417770385742, 0.37799403071403503, 0.37829649448394775, 0.3743632733821869, 0.3736850619316101, 0.3745778501033783, 0.3734574019908905, 0.37220498919487, 0.36669719219207764, 0.3757442533969879, 0.371255099773407], "val_accuracy": [0.5766666531562805, 0.656333327293396, 0.6890000104904175, 0.7163333296775818, 0.7366666793823242, 0.7516666650772095, 0.7643333077430725, 0.7703333497047424, 0.7853333353996277, 0.7919999957084656, 0.8006666898727417, 0.8080000281333923, 0.8109999895095825, 0.8190000057220459, 0.815666675567627, 0.8230000138282776, 0.8256666660308838, 0.8306666612625122, 0.8316666483879089, 0.8349999785423279, 0.8339999914169312, 0.840666651725769, 0.8446666598320007, 0.8416666388511658, 0.8456666469573975, 0.8423333168029785, 0.846666693687439, 0.8433333039283752, 0.8510000109672546, 0.8493333458900452, 0.8523333072662354, 0.8546666502952576, 0.8523333072662354, 0.8529999852180481, 0.8556666374206543, 0.856333315372467, 0.8610000014305115, 0.8600000143051147, 0.8566666841506958, 0.8583333492279053, 0.8633333444595337, 0.8603333234786987, 0.8576666712760925, 0.8686666488647461, 0.8633333444595337, 0.8693333268165588, 0.8640000224113464, 0.8666666746139526, 0.8703333139419556, 0.8659999966621399, 0.8653333187103271, 0.8700000047683716, 0.8659999966621399, 0.8700000047683716]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 2, 3, 0, 3, 6, 7, 1, 2, 7, 9, 4, 0, 4, 4, 7, 6, 7, 7, 1, 4, 5, 6], [0, 1, 0, 2, 3, 2, 3, 2, 0, 3, 1, 0, 2, 1, 3, 3, 0, 1, 0], [39, 39, 92, 41, 32, 75, 4], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 1], [3], [0, 0], [99, 43], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 2, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0], [75, 99, 96, 63, 59, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 42, 23, 19, 7, 10, 6, 4, 2, 3, 1, 2, 2, 1, 0, 1, 1], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(grad, grad)), tf.math.add(tf.math.subtract(grad, tf.math.add(tf.math.add(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), grad), grad)), tf.math.pow(tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.pow(tf.math.add(tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(tf.math.subtract(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), grad)), alpha), tf.math.pow(grad, grad)), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.divide_no_nan(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.304093599319458, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1], [2, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [2, 2, 3, 0, 3, 5], [0, 2, 0, 0, 0], [16, 73, 34, 13], [0, 1], [0], [2], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 79, 99, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 3, 4, 2, 11, 6, 5, 4, 2, 1, 1, 0, 12, 6, 6, 5], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [7.643604278564453, 69.5469741821289, 313.17889404296875, 1119.2816162109375, 3565.167236328125, 10286.1005859375], "accuracy": [0.10077928751707077, 0.09972262382507324, 0.09906221181154251, 0.1014397069811821, 0.10011887550354004, 0.09998679161071777], "val_loss": [22.10592269897461, 127.18085479736328, 495.9068298339844, 1658.3087158203125, 4980.3779296875, 13695.818359375], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 6, 0, 8, 0], [1, 1, 0, 2, 1], [37, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 6, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [4, 3, 3, 6, 8, 3, 4, 1, 9, 2, 3], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 70]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 9, 5, 1, 9, 5, 4, 2, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), alpha), tf.math.multiply(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.negative(tf.math.sqrt(grad)), tf.math.negative(alpha))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3035364151000977, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1], [4, 2, 9, 0, 3], [0, 1, 0, 2], [39, 39, 67], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 2, 1, 4, 4, 5, 2, 8, 7, 3, 9], [4, 0, 0, 3, 0, 4, 3, 1, 2, 2, 5], [46, 99, 96, 99, 61, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 5, 3, 3, 10, 6, 4, 2, 2, 1, 1, 1, 25, 14, 11, 4], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(sigma)), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))), sigma), tf.math.sqrt(tf.math.add(alpha, beta)))), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), beta)), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}]