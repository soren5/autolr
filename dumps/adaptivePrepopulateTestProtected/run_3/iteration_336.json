[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8625714182853699, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2239344120025635, 1.8702512979507446, 1.4013468027114868, 1.0796873569488525, 0.9470725059509277, 0.8416024446487427, 0.7790616154670715, 0.7324283123016357, 0.7066930532455444, 0.6652279496192932, 0.6397593021392822, 0.6149480938911438, 0.6007547378540039, 0.5830374956130981, 0.5567978620529175, 0.5505006909370422, 0.5330457091331482, 0.5193272829055786, 0.5078517198562622, 0.4935094118118286, 0.4968593418598175, 0.46943381428718567, 0.46410536766052246, 0.4521770179271698, 0.44637107849121094, 0.44255340099334717, 0.437065064907074, 0.43033188581466675, 0.4188610315322876, 0.4099947512149811, 0.40077394247055054, 0.39877569675445557, 0.3918565809726715, 0.3901478946208954, 0.3758902847766876, 0.36873701214790344, 0.3690464496612549, 0.36904630064964294, 0.35607442259788513, 0.36060830950737, 0.3500629663467407, 0.3501800000667572, 0.3470965325832367, 0.33581000566482544, 0.3348698318004608, 0.3299632668495178, 0.317762166261673, 0.3214598298072815], "accuracy": [0.27103421092033386, 0.4819706678390503, 0.5506538152694702, 0.6243560910224915, 0.6645092964172363, 0.7016246318817139, 0.7215691208839417, 0.7382115721702576, 0.7424382567405701, 0.7574957013130188, 0.7667415142059326, 0.7754589915275574, 0.7819310426712036, 0.7890635132789612, 0.8037247657775879, 0.8038568496704102, 0.8082155585289001, 0.8132346868515015, 0.8178576231002808, 0.8253863453865051, 0.8208954930305481, 0.8284242749214172, 0.830669641494751, 0.8405758738517761, 0.8405758738517761, 0.8403117060661316, 0.845859169960022, 0.8477083444595337, 0.8471800088882446, 0.8545766472816467, 0.8561616539955139, 0.8582749962806702, 0.8603883385658264, 0.8626337051391602, 0.8665962219238281, 0.8652753829956055, 0.8696341514587402, 0.8650112152099609, 0.8714832663536072, 0.8702945709228516, 0.8735966086387634, 0.869502067565918, 0.8751816153526306, 0.883238673210144, 0.8774270415306091, 0.8842953443527222, 0.8862766027450562, 0.8841632604598999], "val_loss": [2.038411855697632, 1.5101715326309204, 1.0353446006774902, 0.822495698928833, 0.7317118048667908, 0.6796553730964661, 0.633756697177887, 0.592829167842865, 0.5747365951538086, 0.5492518544197083, 0.5309819579124451, 0.519472062587738, 0.506712794303894, 0.4876020550727844, 0.4722866117954254, 0.4678517282009125, 0.45062321424484253, 0.4446328580379486, 0.4396190941333771, 0.4352249801158905, 0.42419809103012085, 0.4154949188232422, 0.4139418601989746, 0.40405675768852234, 0.4038033187389374, 0.39655178785324097, 0.3936164677143097, 0.39067965745925903, 0.3846765160560608, 0.37969082593917847, 0.38452601432800293, 0.3738929033279419, 0.37127619981765747, 0.37187984585762024, 0.36652499437332153, 0.3635050356388092, 0.36151182651519775, 0.36260929703712463, 0.35739144682884216, 0.35727059841156006, 0.35758405923843384, 0.35312867164611816, 0.34975308179855347, 0.35160374641418457, 0.3474094569683075, 0.34774845838546753, 0.344970703125, 0.34676074981689453], "val_accuracy": [0.5393333435058594, 0.6586666703224182, 0.6880000233650208, 0.7116666436195374, 0.7329999804496765, 0.7523333430290222, 0.7636666893959045, 0.7803333401679993, 0.793666660785675, 0.79666668176651, 0.8040000200271606, 0.8143333196640015, 0.8116666674613953, 0.8240000009536743, 0.8363333344459534, 0.8363333344459534, 0.8426666855812073, 0.8456666469573975, 0.8479999899864197, 0.8523333072662354, 0.859333336353302, 0.8556666374206543, 0.8586666584014893, 0.8619999885559082, 0.8576666712760925, 0.8656666874885559, 0.8659999966621399, 0.8673333525657654, 0.8663333058357239, 0.8693333268165588, 0.8650000095367432, 0.8703333139419556, 0.8713333606719971, 0.8703333139419556, 0.8766666650772095, 0.8743333220481873, 0.8776666522026062, 0.878333330154419, 0.878333330154419, 0.878333330154419, 0.8733333349227905, 0.8773333430290222, 0.8830000162124634, 0.8756666779518127, 0.8803333044052124, 0.8820000290870667, 0.8796666860580444, 0.878000020980835]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 1, 3, 0, 3, 5], [0, 2, 0, 3], [16, 21], [0, 0, 0, 1, 1, 1], [0, 1, 7], [0, 4, 6], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 2, 1, 4, 3, 8, 4, 4, 3, 0, 7, 8, 3, 6, 6, 0, 2, 5, 3, 0], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 3, 6, 1, 4, 5, 0, 5, 4, 4], [83, 99, 96, 88, 61, 1, 55]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 10, 6, 4, 2, 6, 3, 3, 1, 44, 25, 19, 7], "tree_depth": 30, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.multiply(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma))), tf.math.sqrt(tf.math.pow(tf.math.pow(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.multiply(beta, tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), sigma))), grad)), tf.math.divide_no_nan(alpha, tf.math.negative(tf.math.add(grad, tf.math.square(tf.math.multiply(grad, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))))))), grad)))), tf.math.negative(grad)), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 2, 3, 4, 3], [0, 1, 0, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 8, 7], [0, 2, 0, 3, 0], [16, 16, 41], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1], [6, 3, 2, 6, 8, 1, 4, 1, 4, 2, 8], [2, 0, 0, 3, 0, 0, 0, 1, 2, 0], [16, 99, 65, 42, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 4, 5, 2, 13, 8, 5, 3, 2, 1, 1, 1, 14, 7, 7, 5], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303109645843506, 2.3026466369628906, 2.3026702404022217, 2.3027052879333496, 2.302860736846924, 2.303090810775757], "accuracy": [0.0956280529499054, 0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09708096832036972, 0.09747721254825592], "val_loss": [2.302577495574951, 2.3026018142700195, 2.3026540279388428, 2.3027238845825195, 2.3027658462524414, 2.303095817565918], "val_accuracy": [0.10400000214576721, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.10000000149011612, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0], [0, 2, 3, 0, 3, 7, 9, 0, 5, 5, 4, 3, 2, 1, 3, 4, 8, 6, 2, 8, 9, 1, 3, 3, 7, 4, 2, 3, 6, 9, 9, 9], [0, 1, 0, 2, 2, 3, 1, 0, 3, 3, 1, 1, 2, 0, 3, 1], [39, 39, 63, 55, 45, 61, 84, 38, 55], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1], [0, 4, 3, 0, 3, 5], [0, 3, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 9, 4, 2, 8, 1], [0, 0, 0, 4, 0, 0, 3, 1, 2, 2], [16, 99, 96, 99, 61, 74]], "fitness": -0.10000000149011612, "mapping_values": [1, 48, 32, 16, 9, 10, 6, 4, 2, 2, 1, 1, 1, 21, 12, 9, 6], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.square(tf.math.square(tf.math.pow(tf.math.multiply(tf.math.add(tf.math.subtract(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), grad), grad), tf.math.multiply(grad, alpha)), tf.math.pow(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.multiply(grad, tf.math.multiply(grad, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.multiply(tf.math.divide_no_nan(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), grad))))), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), alpha)))))))), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), sigma), tf.math.sqrt(tf.math.subtract(alpha, beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09391097724437714, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 9], [0, 2, 0, 0], [39, 39, 99], [0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 3, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 2, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.08514285832643509, "mapping_values": [1, 9, 6, 3, 3, 6, 3, 3, 2, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad), tf.constant(1.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(beta, tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [2.3094985485076904, 2.3101892471313477, 2.3096923828125, 2.311016082763672, 2.3111140727996826, 2.3096868991851807, 2.309871196746826, 2.310424327850342, 2.3113317489624023, 2.3115007877349854, 2.311008930206299], "accuracy": [0.09179764986038208, 0.09219389408826828, 0.09153348207473755, 0.08677849918603897, 0.09206181764602661, 0.08875974267721176, 0.09285431355237961, 0.08915598690509796, 0.08558975160121918, 0.0870426595211029, 0.08994849026203156], "val_loss": [2.308558940887451, 2.308638572692871, 2.308690071105957, 2.308716058731079, 2.308746814727783, 2.308767318725586, 2.3087823390960693, 2.308797597885132, 2.3088197708129883, 2.308837890625, 2.3088529109954834], "val_accuracy": [0.08966666460037231, 0.08866667002439499, 0.08933333307504654, 0.08966666460037231, 0.08933333307504654, 0.09000000357627869, 0.09000000357627869, 0.08866667002439499, 0.08866667002439499, 0.08833333104848862, 0.08766666799783707]}}]