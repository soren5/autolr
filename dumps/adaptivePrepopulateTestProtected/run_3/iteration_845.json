[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8822857141494751, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585750579834, 1.8655762672424316, 1.394430160522461, 1.0773245096206665, 0.9378393888473511, 0.8425824046134949, 0.7776632308959961, 0.736241340637207, 0.6971188187599182, 0.6732122302055359, 0.644855797290802, 0.6276965141296387, 0.6100340485572815, 0.5899673104286194, 0.5746485590934753, 0.5484329462051392, 0.5425268411636353, 0.5357900857925415, 0.5214410424232483, 0.5127171874046326, 0.4895091950893402, 0.4932740032672882, 0.48551443219184875, 0.47113916277885437, 0.46571049094200134, 0.450914591550827, 0.438728004693985, 0.4414178729057312, 0.4245515465736389, 0.4182806611061096, 0.4126766324043274, 0.41352686285972595, 0.4031256139278412, 0.40064555406570435, 0.3982388377189636, 0.38566267490386963, 0.38400527834892273, 0.3741128146648407, 0.36422181129455566, 0.36170411109924316, 0.35991787910461426, 0.35666367411613464, 0.3521813750267029, 0.34583958983421326, 0.34736087918281555, 0.34181836247444153, 0.33650368452072144, 0.33141741156578064, 0.3230496346950531, 0.3225416839122772, 0.315096914768219, 0.3059031665325165, 0.3058394491672516, 0.3017319440841675, 0.29568877816200256, 0.2933836281299591, 0.28774771094322205, 0.2856961190700531, 0.2802303731441498, 0.2779994010925293, 0.274711549282074, 0.2719985842704773, 0.2586328387260437, 0.2598455548286438, 0.2622571289539337, 0.25739434361457825, 0.2502012252807617, 0.2544722855091095, 0.24556587636470795, 0.24580754339694977, 0.23948103189468384, 0.23949603736400604, 0.23484042286872864, 0.22871272265911102, 0.2256491780281067, 0.22479403018951416, 0.21744707226753235, 0.21390178799629211, 0.21272219717502594], "accuracy": [0.2785629332065582, 0.49451854825019836, 0.559899628162384, 0.6215823292732239, 0.6654338836669922, 0.6950204968452454, 0.7181349992752075, 0.7322678565979004, 0.7441553473472595, 0.7483819723129272, 0.7627789974212646, 0.7717606425285339, 0.7728173136711121, 0.78113853931427, 0.7882710099220276, 0.7993659973144531, 0.7976489067077637, 0.8074230551719666, 0.8128384351730347, 0.8198388814926147, 0.8212917447090149, 0.819970965385437, 0.8272355198860168, 0.8350284099578857, 0.8305375576019287, 0.8387266993522644, 0.846387505531311, 0.8433496356010437, 0.8504821062088013, 0.8524633646011353, 0.8535200357437134, 0.854708731174469, 0.856689989566803, 0.8551049828529358, 0.8593316674232483, 0.8615770936012268, 0.8628978729248047, 0.8702945709228516, 0.8691058158874512, 0.871879518032074, 0.8722757697105408, 0.8691058158874512, 0.8733324408531189, 0.8800686597824097, 0.8795403242111206, 0.8755778670310974, 0.8768987059593201, 0.8829745054244995, 0.8824461698532104, 0.8823140859603882, 0.887201189994812, 0.8897107243537903, 0.8889182209968567, 0.8927486538887024, 0.8902390599250793, 0.8953903317451477, 0.8980319499969482, 0.8976356983184814, 0.900409460067749, 0.89552241563797, 0.9025228023529053, 0.8989565372467041, 0.9056927561759949, 0.9085986018180847, 0.9030511379241943, 0.9066173434257507, 0.9101836085319519, 0.9083344340324402, 0.909259021282196, 0.9099194407463074, 0.9126931428909302, 0.9140139818191528, 0.9119006991386414, 0.9171839952468872, 0.9169198274612427, 0.9185048341751099, 0.9218068718910217, 0.9185048341751099, 0.9196935892105103], "val_loss": [2.033445358276367, 1.5042319297790527, 1.0271512269973755, 0.8147247433662415, 0.7278039455413818, 0.68117356300354, 0.6306353211402893, 0.5966841578483582, 0.5751398801803589, 0.5460951328277588, 0.5314993858337402, 0.509799063205719, 0.4957965612411499, 0.4792602062225342, 0.46671679615974426, 0.45267683267593384, 0.4441072940826416, 0.4356139600276947, 0.42943108081817627, 0.4255247414112091, 0.41811680793762207, 0.4163394272327423, 0.39929893612861633, 0.3969916105270386, 0.39089226722717285, 0.387652188539505, 0.3844633102416992, 0.3824205696582794, 0.3749690353870392, 0.3701930642127991, 0.36967378854751587, 0.36689504981040955, 0.3585263788700104, 0.3587398827075958, 0.36267170310020447, 0.3561091423034668, 0.35379692912101746, 0.3499273955821991, 0.34701839089393616, 0.3467637896537781, 0.3424672484397888, 0.33951225876808167, 0.3386255204677582, 0.34044384956359863, 0.33945050835609436, 0.33684298396110535, 0.3322163224220276, 0.33181649446487427, 0.32827115058898926, 0.3312568664550781, 0.3297465741634369, 0.3256674110889435, 0.3234780728816986, 0.32119208574295044, 0.3232716917991638, 0.3209094703197479, 0.31944912672042847, 0.3157532513141632, 0.3144265413284302, 0.31676045060157776, 0.31425556540489197, 0.3131799101829529, 0.3147056996822357, 0.3154993951320648, 0.31771615147590637, 0.31545644998550415, 0.3127000629901886, 0.31382524967193604, 0.31026333570480347, 0.3147730529308319, 0.30829918384552, 0.3107443153858185, 0.31316936016082764, 0.30297672748565674, 0.30325081944465637, 0.30436232686042786, 0.3072424829006195, 0.30681705474853516, 0.3061434030532837], "val_accuracy": [0.5526666641235352, 0.6666666865348816, 0.687333345413208, 0.7083333134651184, 0.731333315372467, 0.7446666955947876, 0.7606666684150696, 0.762666642665863, 0.7873333096504211, 0.7889999747276306, 0.7973333597183228, 0.8056666851043701, 0.8193333148956299, 0.8259999752044678, 0.8289999961853027, 0.8410000205039978, 0.8453333377838135, 0.8450000286102295, 0.8489999771118164, 0.847000002861023, 0.8516666889190674, 0.856333315372467, 0.859333336353302, 0.856333315372467, 0.8633333444595337, 0.8640000224113464, 0.8656666874885559, 0.8646666407585144, 0.8679999709129333, 0.8696666955947876, 0.8640000224113464, 0.8686666488647461, 0.8713333606719971, 0.8709999918937683, 0.8703333139419556, 0.8723333477973938, 0.871999979019165, 0.874666690826416, 0.8723333477973938, 0.8759999871253967, 0.8726666569709778, 0.875333309173584, 0.8790000081062317, 0.8756666779518127, 0.8726666569709778, 0.8769999742507935, 0.8796666860580444, 0.8796666860580444, 0.8806666731834412, 0.8793333172798157, 0.8813333511352539, 0.8840000033378601, 0.8840000033378601, 0.8843333125114441, 0.8809999823570251, 0.8856666684150696, 0.8866666555404663, 0.8833333253860474, 0.8866666555404663, 0.8843333125114441, 0.8856666684150696, 0.8880000114440918, 0.887333333492279, 0.8883333206176758, 0.8866666555404663, 0.8896666765213013, 0.8863333463668823, 0.8853333592414856, 0.890999972820282, 0.8870000243186951, 0.8883333206176758, 0.8883333206176758, 0.8916666507720947, 0.8939999938011169, 0.8896666765213013, 0.8916666507720947, 0.890999972820282, 0.8926666378974915, 0.8913333415985107]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8751428723335266, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2226030826568604, 1.8644531965255737, 1.3884310722351074, 1.1013660430908203, 0.9432392120361328, 0.8369030952453613, 0.7774771451950073, 0.7317471504211426, 0.693755030632019, 0.6671550869941711, 0.6432257294654846, 0.618739902973175, 0.6008225083351135, 0.5881786346435547, 0.5687642097473145, 0.5520086288452148, 0.539259135723114, 0.5380644798278809, 0.5185948610305786, 0.5138029456138611, 0.49070850014686584, 0.48580968379974365, 0.48804211616516113, 0.4688205420970917, 0.46188679337501526, 0.4544273614883423, 0.444179892539978, 0.4444292485713959, 0.4375656247138977, 0.4371536672115326, 0.4196830689907074, 0.40630006790161133, 0.4143806993961334, 0.39901137351989746, 0.3931899964809418, 0.3934084177017212, 0.3835042119026184, 0.38223403692245483, 0.3806907832622528], "accuracy": [0.27063795924186707, 0.48751816153526306, 0.572579562664032, 0.6168273687362671, 0.6641130447387695, 0.7028133869171143, 0.7234182953834534, 0.7358341217041016, 0.7453441023826599, 0.7543256878852844, 0.7655527591705322, 0.7775723338127136, 0.7798177003860474, 0.7874785661697388, 0.7948752045631409, 0.7998943328857422, 0.8082155585289001, 0.8031964302062988, 0.8136309385299683, 0.8127063512802124, 0.8255184292793274, 0.8273676037788391, 0.8235371708869934, 0.8322546482086182, 0.8372738361358643, 0.8405758738517761, 0.8393871188163757, 0.8381983637809753, 0.8430854678153992, 0.8391229510307312, 0.8532558679580688, 0.8539162874221802, 0.8539162874221802, 0.8556333184242249, 0.8557654023170471, 0.8590674996376038, 0.8632941246032715, 0.8623695969581604, 0.8684453964233398], "val_loss": [2.033766269683838, 1.5014835596084595, 1.0235826969146729, 0.8139167428016663, 0.7229380011558533, 0.6668290495872498, 0.6243839263916016, 0.5906649827957153, 0.5633255243301392, 0.5423299074172974, 0.5264249444007874, 0.5089065432548523, 0.49327391386032104, 0.4832305610179901, 0.47154590487480164, 0.46995809674263, 0.45561671257019043, 0.4469965398311615, 0.4449275732040405, 0.43415284156799316, 0.42911386489868164, 0.42570799589157104, 0.4159983992576599, 0.40814900398254395, 0.40406522154808044, 0.4002595543861389, 0.3956502377986908, 0.3922150731086731, 0.3908492922782898, 0.38879671692848206, 0.3817697763442993, 0.384023517370224, 0.37494221329689026, 0.3689037263393402, 0.37046271562576294, 0.3714185655117035, 0.3665192723274231, 0.3625914454460144, 0.37178343534469604], "val_accuracy": [0.5600000023841858, 0.6733333468437195, 0.6886666417121887, 0.7173333168029785, 0.7446666955947876, 0.7576666474342346, 0.7720000147819519, 0.7749999761581421, 0.7866666913032532, 0.793666660785675, 0.8069999814033508, 0.815666675567627, 0.8226666450500488, 0.8286666870117188, 0.8316666483879089, 0.8306666612625122, 0.8393333554267883, 0.8416666388511658, 0.8450000286102295, 0.846666693687439, 0.8399999737739563, 0.8493333458900452, 0.8519999980926514, 0.8546666502952576, 0.8566666841506958, 0.859333336353302, 0.8616666793823242, 0.8613333106040955, 0.8586666584014893, 0.8610000014305115, 0.8633333444595337, 0.8640000224113464, 0.8659999966621399, 0.8743333220481873, 0.8679999709129333, 0.8696666955947876, 0.8703333139419556, 0.8730000257492065, 0.8679999709129333]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1], [3, 2, 3, 0, 3, 5, 5, 5], [0, 1, 0, 2, 2], [76, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 1], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [4, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.3711428642272949, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.square(tf.math.square(tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(tf.math.multiply(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [5.331830024719238, 5.4702982902526855, 5.3761396408081055, 5.214385032653809, 5.186147689819336, 5.156491756439209, 5.079570293426514, 5.082625389099121, 4.969224452972412, 5.041455268859863, 4.954635143280029, 5.065362930297852, 4.982020378112793, 4.920539379119873, 4.92618989944458, 4.9254231452941895, 4.928555011749268, 4.930384635925293, 4.882946491241455, 4.934842109680176, 4.924569606781006, 4.914665222167969, 4.838595390319824, 4.903390407562256, 4.80378532409668, 4.791833877563477, 4.81752347946167, 4.867883682250977, 4.813688278198242, 4.843807220458984, 4.839052677154541, 4.796576499938965, 4.778628826141357, 4.795712471008301, 4.830619812011719, 4.829797267913818, 4.787454128265381, 4.8237624168396, 4.78159761428833, 4.759129524230957, 4.800500392913818, 4.771300315856934, 4.7468366622924805, 4.793571472167969, 4.7375054359436035, 4.746481895446777, 4.701634407043457, 4.765398979187012, 4.68108606338501, 4.798279285430908, 4.765971660614014, 4.721499919891357, 4.732264041900635], "accuracy": [0.14317791163921356, 0.15968827903270721, 0.15400871634483337, 0.160084530711174, 0.16378284990787506, 0.15863162279129028, 0.16642451286315918, 0.16100911796092987, 0.17395325005054474, 0.16378284990787506, 0.16853784024715424, 0.15968827903270721, 0.15982036292552948, 0.17051908373832703, 0.17091533541679382, 0.16378284990787506, 0.16721701622009277, 0.16219785809516907, 0.16655659675598145, 0.16074495017528534, 0.16602826118469238, 0.16999074816703796, 0.16695284843444824, 0.16378284990787506, 0.16629242897033691, 0.16655659675598145, 0.15797120332717896, 0.16497160494327545, 0.1728965789079666, 0.16510368883609772, 0.1706511676311493, 0.16576409339904785, 0.17355699837207794, 0.1632545292377472, 0.16351869702339172, 0.16972659528255463, 0.16814158856868744, 0.16814158856868744, 0.16933034360408783, 0.16629242897033691, 0.16695284843444824, 0.1710474193096161, 0.17250032722949982, 0.1678774207830429, 0.17210407555103302, 0.1690661758184433, 0.17316074669361115, 0.16576409339904785, 0.17316074669361115, 0.16523577272891998, 0.16774533689022064, 0.16629242897033691, 0.17183992266654968], "val_loss": [3.341487407684326, 3.2117323875427246, 3.1412761211395264, 3.094794988632202, 3.0595078468322754, 3.0319466590881348, 3.009228467941284, 2.9900171756744385, 2.9733173847198486, 2.958676338195801, 2.9454498291015625, 2.9334468841552734, 2.922657012939453, 2.9129395484924316, 2.903956413269043, 2.895385980606079, 2.887453079223633, 2.880028009414673, 2.873037099838257, 2.866421937942505, 2.860164165496826, 2.8542630672454834, 2.848721742630005, 2.843311309814453, 2.8382577896118164, 2.8333756923675537, 2.828686475753784, 2.8241209983825684, 2.8197922706604004, 2.815660238265991, 2.8116118907928467, 2.8078184127807617, 2.8042054176330566, 2.800614356994629, 2.7971184253692627, 2.7937493324279785, 2.7904696464538574, 2.787324905395508, 2.784259796142578, 2.7812705039978027, 2.7783873081207275, 2.7755606174468994, 2.772805690765381, 2.770096778869629, 2.767483711242676, 2.764965057373047, 2.762495756149292, 2.760040044784546, 2.7576711177825928, 2.7553601264953613, 2.753105878829956, 2.7508952617645264, 2.7487261295318604], "val_accuracy": [0.2786666750907898, 0.2933333218097687, 0.30433332920074463, 0.3096666634082794, 0.3166666626930237, 0.32199999690055847, 0.32600000500679016, 0.33033332228660583, 0.3330000042915344, 0.33399999141693115, 0.33766666054725647, 0.3386666774749756, 0.34066668152809143, 0.343666672706604, 0.34566667675971985, 0.3479999899864197, 0.3499999940395355, 0.3513333201408386, 0.35199999809265137, 0.3540000021457672, 0.35499998927116394, 0.35766667127609253, 0.3580000102519989, 0.35866665840148926, 0.35899999737739563, 0.35899999737739563, 0.36000001430511475, 0.3610000014305115, 0.3623333275318146, 0.3630000054836273, 0.3643333315849304, 0.3646666705608368, 0.36500000953674316, 0.3656666576862335, 0.3659999966621399, 0.36633333563804626, 0.36666667461395264, 0.36666667461395264, 0.36666667461395264, 0.367000013589859, 0.367000013589859, 0.367333322763443, 0.36766666173934937, 0.36766666173934937, 0.36766666173934937, 0.36766666173934937, 0.36766666173934937, 0.3683333396911621, 0.3683333396911621, 0.3683333396911621, 0.3683333396911621, 0.3683333396911621, 0.3683333396911621]}, "mapping_values": [1, 13, 8, 5, 2, 10, 6, 4, 2, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [8, 2, 3, 0, 3], [0, 1, 0, 2], [39, 59], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 5, 6, 4, 2, 2, 7, 0, 2, 9], [0, 0, 0, 3, 0, 4, 0, 1, 2, 0, 4, 6, 4, 3, 5], [16, 99, 0, 99, 61, 1, 59]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 9, 5, 4, 2, 2, 1, 1, 1, 35, 20, 15, 7], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), grad))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.square(alpha)))), tf.math.divide_no_nan(tf.math.pow(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad)), tf.math.add(grad, tf.math.add(grad, tf.math.add(tf.math.negative(sigma), tf.math.add(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), grad)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 2, 3, 0, 3, 7, 7, 0], [0, 1, 0, 1, 3, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [5, 16], [0, 1, 0, 1], [4, 8], [0, 6], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 3, 9, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [80, 99, 96, 99, 61, 1, 51]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 8, 6, 2, 10, 6, 4, 2, 4, 2, 2, 1, 24, 14, 10, 7], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(tf.math.sqrt(sigma), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), sigma))), alpha)), beta), tf.math.sqrt(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3, 1, 4, 1, 3], [0, 1, 0, 2, 2, 0, 2, 3], [39, 39, 58], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 2], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.0908571407198906, "mapping_values": [1, 17, 9, 8, 3, 10, 6, 4, 1, 1, 0, 1, 1, 10, 5, 5, 3], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.math.multiply(grad, grad), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad)), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3109850883483887, 2.310478925704956, 2.3097565174102783, 2.3105156421661377, 2.3109912872314453, 2.3100733757019043], "accuracy": [0.08466517180204391, 0.08902391046285629, 0.09668471664190292, 0.08994849026203156, 0.08572183549404144, 0.09338264167308807], "val_loss": [2.3087096214294434, 2.3088631629943848, 2.3089547157287598, 2.3090198040008545, 2.3090713024139404, 2.309112548828125], "val_accuracy": [0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288]}}]