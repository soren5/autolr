[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8822857141494751, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585750579834, 1.8655762672424316, 1.394430160522461, 1.0773245096206665, 0.9378393888473511, 0.8425824046134949, 0.7776632308959961, 0.736241340637207, 0.6971188187599182, 0.6732122302055359, 0.644855797290802, 0.6276965141296387, 0.6100340485572815, 0.5899673104286194, 0.5746485590934753, 0.5484329462051392, 0.5425268411636353, 0.5357900857925415, 0.5214410424232483, 0.5127171874046326, 0.4895091950893402, 0.4932740032672882, 0.48551443219184875, 0.47113916277885437, 0.46571049094200134, 0.450914591550827, 0.438728004693985, 0.4414178729057312, 0.4245515465736389, 0.4182806611061096, 0.4126766324043274, 0.41352686285972595, 0.4031256139278412, 0.40064555406570435, 0.3982388377189636, 0.38566267490386963, 0.38400527834892273, 0.3741128146648407, 0.36422181129455566, 0.36170411109924316, 0.35991787910461426, 0.35666367411613464, 0.3521813750267029, 0.34583958983421326, 0.34736087918281555, 0.34181836247444153, 0.33650368452072144, 0.33141741156578064, 0.3230496346950531, 0.3225416839122772, 0.315096914768219, 0.3059031665325165, 0.3058394491672516, 0.3017319440841675, 0.29568877816200256, 0.2933836281299591, 0.28774771094322205, 0.2856961190700531, 0.2802303731441498, 0.2779994010925293, 0.274711549282074, 0.2719985842704773, 0.2586328387260437, 0.2598455548286438, 0.2622571289539337, 0.25739434361457825, 0.2502012252807617, 0.2544722855091095, 0.24556587636470795, 0.24580754339694977, 0.23948103189468384, 0.23949603736400604, 0.23484042286872864, 0.22871272265911102, 0.2256491780281067, 0.22479403018951416, 0.21744707226753235, 0.21390178799629211, 0.21272219717502594], "accuracy": [0.2785629332065582, 0.49451854825019836, 0.559899628162384, 0.6215823292732239, 0.6654338836669922, 0.6950204968452454, 0.7181349992752075, 0.7322678565979004, 0.7441553473472595, 0.7483819723129272, 0.7627789974212646, 0.7717606425285339, 0.7728173136711121, 0.78113853931427, 0.7882710099220276, 0.7993659973144531, 0.7976489067077637, 0.8074230551719666, 0.8128384351730347, 0.8198388814926147, 0.8212917447090149, 0.819970965385437, 0.8272355198860168, 0.8350284099578857, 0.8305375576019287, 0.8387266993522644, 0.846387505531311, 0.8433496356010437, 0.8504821062088013, 0.8524633646011353, 0.8535200357437134, 0.854708731174469, 0.856689989566803, 0.8551049828529358, 0.8593316674232483, 0.8615770936012268, 0.8628978729248047, 0.8702945709228516, 0.8691058158874512, 0.871879518032074, 0.8722757697105408, 0.8691058158874512, 0.8733324408531189, 0.8800686597824097, 0.8795403242111206, 0.8755778670310974, 0.8768987059593201, 0.8829745054244995, 0.8824461698532104, 0.8823140859603882, 0.887201189994812, 0.8897107243537903, 0.8889182209968567, 0.8927486538887024, 0.8902390599250793, 0.8953903317451477, 0.8980319499969482, 0.8976356983184814, 0.900409460067749, 0.89552241563797, 0.9025228023529053, 0.8989565372467041, 0.9056927561759949, 0.9085986018180847, 0.9030511379241943, 0.9066173434257507, 0.9101836085319519, 0.9083344340324402, 0.909259021282196, 0.9099194407463074, 0.9126931428909302, 0.9140139818191528, 0.9119006991386414, 0.9171839952468872, 0.9169198274612427, 0.9185048341751099, 0.9218068718910217, 0.9185048341751099, 0.9196935892105103], "val_loss": [2.033445358276367, 1.5042319297790527, 1.0271512269973755, 0.8147247433662415, 0.7278039455413818, 0.68117356300354, 0.6306353211402893, 0.5966841578483582, 0.5751398801803589, 0.5460951328277588, 0.5314993858337402, 0.509799063205719, 0.4957965612411499, 0.4792602062225342, 0.46671679615974426, 0.45267683267593384, 0.4441072940826416, 0.4356139600276947, 0.42943108081817627, 0.4255247414112091, 0.41811680793762207, 0.4163394272327423, 0.39929893612861633, 0.3969916105270386, 0.39089226722717285, 0.387652188539505, 0.3844633102416992, 0.3824205696582794, 0.3749690353870392, 0.3701930642127991, 0.36967378854751587, 0.36689504981040955, 0.3585263788700104, 0.3587398827075958, 0.36267170310020447, 0.3561091423034668, 0.35379692912101746, 0.3499273955821991, 0.34701839089393616, 0.3467637896537781, 0.3424672484397888, 0.33951225876808167, 0.3386255204677582, 0.34044384956359863, 0.33945050835609436, 0.33684298396110535, 0.3322163224220276, 0.33181649446487427, 0.32827115058898926, 0.3312568664550781, 0.3297465741634369, 0.3256674110889435, 0.3234780728816986, 0.32119208574295044, 0.3232716917991638, 0.3209094703197479, 0.31944912672042847, 0.3157532513141632, 0.3144265413284302, 0.31676045060157776, 0.31425556540489197, 0.3131799101829529, 0.3147056996822357, 0.3154993951320648, 0.31771615147590637, 0.31545644998550415, 0.3127000629901886, 0.31382524967193604, 0.31026333570480347, 0.3147730529308319, 0.30829918384552, 0.3107443153858185, 0.31316936016082764, 0.30297672748565674, 0.30325081944465637, 0.30436232686042786, 0.3072424829006195, 0.30681705474853516, 0.3061434030532837], "val_accuracy": [0.5526666641235352, 0.6666666865348816, 0.687333345413208, 0.7083333134651184, 0.731333315372467, 0.7446666955947876, 0.7606666684150696, 0.762666642665863, 0.7873333096504211, 0.7889999747276306, 0.7973333597183228, 0.8056666851043701, 0.8193333148956299, 0.8259999752044678, 0.8289999961853027, 0.8410000205039978, 0.8453333377838135, 0.8450000286102295, 0.8489999771118164, 0.847000002861023, 0.8516666889190674, 0.856333315372467, 0.859333336353302, 0.856333315372467, 0.8633333444595337, 0.8640000224113464, 0.8656666874885559, 0.8646666407585144, 0.8679999709129333, 0.8696666955947876, 0.8640000224113464, 0.8686666488647461, 0.8713333606719971, 0.8709999918937683, 0.8703333139419556, 0.8723333477973938, 0.871999979019165, 0.874666690826416, 0.8723333477973938, 0.8759999871253967, 0.8726666569709778, 0.875333309173584, 0.8790000081062317, 0.8756666779518127, 0.8726666569709778, 0.8769999742507935, 0.8796666860580444, 0.8796666860580444, 0.8806666731834412, 0.8793333172798157, 0.8813333511352539, 0.8840000033378601, 0.8840000033378601, 0.8843333125114441, 0.8809999823570251, 0.8856666684150696, 0.8866666555404663, 0.8833333253860474, 0.8866666555404663, 0.8843333125114441, 0.8856666684150696, 0.8880000114440918, 0.887333333492279, 0.8883333206176758, 0.8866666555404663, 0.8896666765213013, 0.8863333463668823, 0.8853333592414856, 0.890999972820282, 0.8870000243186951, 0.8883333206176758, 0.8883333206176758, 0.8916666507720947, 0.8939999938011169, 0.8896666765213013, 0.8916666507720947, 0.890999972820282, 0.8926666378974915, 0.8913333415985107]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8500000238418579, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2210257053375244, 1.8632718324661255, 1.3844654560089111, 1.0803251266479492, 0.9285300970077515, 0.8299515247344971, 0.7583423256874084, 0.7158082127571106, 0.6796170473098755, 0.6482325196266174, 0.6208942532539368, 0.5967037081718445, 0.5825825333595276, 0.5578362345695496, 0.545738697052002, 0.5391998291015625, 0.5250382423400879, 0.5039998888969421, 0.49612683057785034, 0.48239174485206604, 0.47399935126304626, 0.46205395460128784, 0.46199455857276917, 0.456467866897583, 0.44378018379211426, 0.4368927478790283, 0.42917174100875854, 0.4237026274204254, 0.41895005106925964, 0.40330982208251953, 0.40176698565483093, 0.39272865653038025, 0.3861982822418213, 0.38295498490333557, 0.37771740555763245, 0.37623196840286255, 0.36681118607521057, 0.359553724527359, 0.353798508644104, 0.34965917468070984], "accuracy": [0.28503501415252686, 0.4986131191253662, 0.563730001449585, 0.6299035549163818, 0.6756042838096619, 0.7020208835601807, 0.7255316376686096, 0.7405890822410583, 0.752740740776062, 0.7656848430633545, 0.7758552432060242, 0.7864218950271606, 0.7891955971717834, 0.7984414100646973, 0.7996301651000977, 0.8050455451011658, 0.8092722296714783, 0.824329674243927, 0.8227446675300598, 0.8293488025665283, 0.8276317715644836, 0.8380662798881531, 0.8370096683502197, 0.8396512866020203, 0.8405758738517761, 0.8462554216384888, 0.8470479249954224, 0.8500858545303345, 0.8551049828529358, 0.8569541573524475, 0.8535200357437134, 0.8614450097084045, 0.8640866279602051, 0.8656716346740723, 0.8676528930664062, 0.8647470474243164, 0.8701624870300293, 0.871879518032074, 0.8726720213890076, 0.8770307898521423], "val_loss": [2.036123037338257, 1.5077611207962036, 1.045703411102295, 0.8378346562385559, 0.7555834054946899, 0.7000554800033569, 0.6554797887802124, 0.6194429993629456, 0.5903185606002808, 0.5733271241188049, 0.552919864654541, 0.5360344648361206, 0.5220889449119568, 0.5117626190185547, 0.5026326775550842, 0.48349690437316895, 0.4766547977924347, 0.46637794375419617, 0.4609840512275696, 0.45233210921287537, 0.4428466856479645, 0.44082459807395935, 0.4374871850013733, 0.43394190073013306, 0.42566707730293274, 0.42638131976127625, 0.4178069233894348, 0.41514143347740173, 0.408085435628891, 0.4094772934913635, 0.4015576243400574, 0.39827367663383484, 0.3952665328979492, 0.393853098154068, 0.39311662316322327, 0.3896212577819824, 0.39145219326019287, 0.3902362585067749, 0.3808581233024597, 0.3796086311340332], "val_accuracy": [0.5400000214576721, 0.6633333563804626, 0.6779999732971191, 0.7043333053588867, 0.7250000238418579, 0.7416666746139526, 0.7516666650772095, 0.7633333206176758, 0.7699999809265137, 0.7846666574478149, 0.7953333258628845, 0.8026666641235352, 0.8106666803359985, 0.815666675567627, 0.8173333406448364, 0.8270000219345093, 0.8266666531562805, 0.8356666564941406, 0.8356666564941406, 0.8383333086967468, 0.8420000076293945, 0.843666672706604, 0.8450000286102295, 0.8456666469573975, 0.8473333120346069, 0.843666672706604, 0.8483333587646484, 0.8500000238418579, 0.8556666374206543, 0.8510000109672546, 0.8573333621025085, 0.8566666841506958, 0.8566666841506958, 0.8616666793823242, 0.8663333058357239, 0.8633333444595337, 0.859333336353302, 0.8556666374206543, 0.8650000095367432, 0.8643333315849304]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [6, 2, 3, 0, 5], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [0, 2, 0, 0, 3, 5], [0, 0, 0, 3], [16, 16], [0, 1], [5], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 59, 96, 99, 28, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 2, 6, 4, 2, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.pow(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), sigma), alpha)), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 6, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [6, 3, 3, 8, 8, 1, 4, 1, 4, 2, 8, 0], [0, 4, 0, 3, 0, 0, 3, 4, 2, 0], [16, 16, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 2, 1, 1, 1, 2, 1, 1, 1, 21, 12, 9, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), sigma))))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.add(tf.math.sqrt(tf.math.negative(grad)), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [4, 2, 3, 0, 3], [0, 1, 0, 2], [39, 44], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 0, 0, 3], [16, 16, 36], [0, 1], [0], [0], [99], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0], [6, 3, 3, 6, 8, 0, 4, 1, 4, 2, 8], [0, 0, 0, 3, 3, 0, 3, 1, 2, 0], [16, 99, 39, 11, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 10, 6, 4, 3, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303722620010376, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.1022322028875351, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 2, 4, 0, 3, 0], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 2, 2, 8, 7, 2, 2, 8, 6, 6, 6], [0, 0, 3, 3, 0, 0, 3, 1, 2, 0, 0, 3, 6, 5, 5, 1], [16, 99, 96, 99, 61, 0]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)), tf.math.add(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))))), sigma), tf.math.sqrt(tf.math.add(tf.math.add(alpha, beta), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(0.0, shape=shape, dtype=tf.float32))))), tf.math.sqrt(sigma)), tf.math.divide_no_nan(grad, tf.math.divide_no_nan(grad, tf.math.divide_no_nan(grad, alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}, "mapping_values": [1, 9, 5, 4, 2, 8, 4, 4, 2, 2, 1, 1, 1, 34, 18, 16, 6], "tree_depth": 20}]