[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.87628573179245, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221153497695923, 1.8690768480300903, 1.3930829763412476, 1.0920813083648682, 0.946754515171051, 0.8386176228523254, 0.7666530013084412, 0.7169585227966309, 0.6927855014801025, 0.6578141450881958, 0.6284602284431458, 0.6175082921981812, 0.5932229161262512, 0.5866845846176147, 0.5698589086532593, 0.5537236928939819, 0.5400969386100769, 0.5237241387367249, 0.5110511779785156, 0.4987642467021942, 0.4859139025211334, 0.48274683952331543, 0.4702848792076111, 0.46559596061706543, 0.4571192264556885, 0.45048508048057556, 0.43323010206222534, 0.43672871589660645, 0.4228549599647522, 0.4158686399459839, 0.40923213958740234, 0.3978442847728729, 0.3938561677932739, 0.39290058612823486, 0.3881992995738983, 0.372427374124527, 0.3708527982234955, 0.3674342930316925, 0.3639999032020569, 0.3603408634662628, 0.34736937284469604, 0.34856680035591125, 0.3419991731643677, 0.3314146399497986, 0.33113908767700195, 0.3256821036338806, 0.32241684198379517, 0.31129369139671326, 0.31209611892700195, 0.31315377354621887, 0.29969727993011475, 0.30303266644477844, 0.2969401776790619, 0.2884080111980438, 0.2830028831958771, 0.2803061902523041, 0.284909725189209, 0.2756250500679016, 0.27255335450172424, 0.267034113407135, 0.26680734753608704, 0.26125890016555786, 0.25913572311401367, 0.2510053515434265, 0.24825863540172577, 0.2431088238954544, 0.24655894935131073], "accuracy": [0.27077004313468933, 0.488971084356308, 0.5671641826629639, 0.6252806782722473, 0.6592260003089905, 0.698718786239624, 0.7232862114906311, 0.7390040755271912, 0.7467969655990601, 0.7652885913848877, 0.7759873270988464, 0.7729493975639343, 0.7843085527420044, 0.7873464822769165, 0.7947431206703186, 0.7976489067077637, 0.8076872229576111, 0.8117818236351013, 0.8136309385299683, 0.8247259259223938, 0.8227446675300598, 0.8274996876716614, 0.8329150676727295, 0.829216718673706, 0.8379341959953308, 0.8426892161369324, 0.8479725122451782, 0.8446704745292664, 0.8507462739944458, 0.8500858545303345, 0.8543124794960022, 0.8582749962806702, 0.8609166741371155, 0.86118084192276, 0.8593316674232483, 0.8659358024597168, 0.8634262084960938, 0.872407853603363, 0.8688416481018066, 0.8714832663536072, 0.8737286925315857, 0.8730682730674744, 0.8749174475669861, 0.8821820020675659, 0.8799365758895874, 0.8815215826034546, 0.8837670087814331, 0.8878615498542786, 0.8838990926742554, 0.8853520154953003, 0.891559898853302, 0.8865407705307007, 0.8905032277107239, 0.8963148593902588, 0.896446943283081, 0.8969752788543701, 0.8951261639595032, 0.9002773761749268, 0.89988112449646, 0.8986923694610596, 0.901862382888794, 0.9029190540313721, 0.9019944667816162, 0.9062210917472839, 0.9074098467826843, 0.9082023501396179, 0.9084665179252625], "val_loss": [2.033933639526367, 1.5043776035308838, 1.0385841131210327, 0.8348872661590576, 0.748683512210846, 0.6962888240814209, 0.6452283263206482, 0.6097168326377869, 0.5908951163291931, 0.5654791593551636, 0.5485540628433228, 0.5308454632759094, 0.5217159986495972, 0.5026088356971741, 0.4924180805683136, 0.4941955506801605, 0.47913697361946106, 0.46788424253463745, 0.4600522518157959, 0.45553308725357056, 0.4523840844631195, 0.45103052258491516, 0.4417187571525574, 0.43125733733177185, 0.42781078815460205, 0.4263964891433716, 0.4191243350505829, 0.41350650787353516, 0.4158003032207489, 0.4085052013397217, 0.4044939875602722, 0.3971168100833893, 0.39628612995147705, 0.39976948499679565, 0.3952869176864624, 0.3888694643974304, 0.3912425935268402, 0.3875867426395416, 0.38649430871009827, 0.3814649283885956, 0.38066309690475464, 0.37854698300361633, 0.3797750174999237, 0.3766616880893707, 0.37332388758659363, 0.3710525631904602, 0.36949723958969116, 0.37775883078575134, 0.36838436126708984, 0.3662301003932953, 0.36757656931877136, 0.36328125, 0.36480098962783813, 0.3676953911781311, 0.3622332215309143, 0.36552929878234863, 0.35753536224365234, 0.368220716714859, 0.3614383041858673, 0.3567075729370117, 0.3559085726737976, 0.35341039299964905, 0.35565683245658875, 0.3598191440105438, 0.3541577160358429, 0.35910654067993164, 0.356111079454422], "val_accuracy": [0.5270000100135803, 0.6653333306312561, 0.6803333163261414, 0.7123333215713501, 0.734666645526886, 0.7536666393280029, 0.7680000066757202, 0.7770000100135803, 0.7826666831970215, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8040000200271606, 0.8149999976158142, 0.8186666369438171, 0.8149999976158142, 0.8223333358764648, 0.8259999752044678, 0.8303333520889282, 0.8316666483879089, 0.8326666951179504, 0.8306666612625122, 0.8346666693687439, 0.8429999947547913, 0.8423333168029785, 0.8420000076293945, 0.8479999899864197, 0.8500000238418579, 0.8456666469573975, 0.8443333506584167, 0.8479999899864197, 0.8539999723434448, 0.8560000061988831, 0.8486666679382324, 0.8513333201408386, 0.8603333234786987, 0.8546666502952576, 0.8569999933242798, 0.8569999933242798, 0.862333357334137, 0.8629999756813049, 0.8600000143051147, 0.8629999756813049, 0.862666666507721, 0.8650000095367432, 0.8643333315849304, 0.8629999756813049, 0.8636666536331177, 0.8679999709129333, 0.8650000095367432, 0.8683333396911621, 0.8690000176429749, 0.8683333396911621, 0.8666666746139526, 0.8703333139419556, 0.8686666488647461, 0.8736666440963745, 0.8679999709129333, 0.8706666827201843, 0.8709999918937683, 0.8730000257492065, 0.8743333220481873, 0.871999979019165, 0.8733333349227905, 0.8740000128746033, 0.8693333268165588, 0.8740000128746033]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8717142939567566, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2225050926208496, 1.866138219833374, 1.3883768320083618, 1.0987683534622192, 0.942936897277832, 0.8346825242042542, 0.7671259641647339, 0.71059250831604, 0.6846820116043091, 0.6518957018852234, 0.6197946667671204, 0.5978034734725952, 0.5856702923774719, 0.5739083290100098, 0.5630316138267517, 0.5381329655647278, 0.5222494006156921, 0.5136174559593201, 0.4954369366168976, 0.4929705262184143, 0.47427356243133545, 0.4625343978404999, 0.4642004668712616, 0.4492804706096649, 0.4409470856189728, 0.43612614274024963, 0.42797723412513733, 0.4265212118625641, 0.40850090980529785, 0.40318894386291504, 0.4003223180770874, 0.3916199505329132, 0.3845478594303131, 0.3838765025138855, 0.37391746044158936, 0.36374956369400024, 0.3679133355617523, 0.3531048595905304, 0.3547457158565521, 0.3445631265640259, 0.34666192531585693, 0.34206685423851013, 0.3345334827899933, 0.335414856672287, 0.32598066329956055, 0.32649630308151245, 0.3196142315864563, 0.31127795577049255, 0.31035637855529785, 0.2999943196773529, 0.298467755317688, 0.29339876770973206, 0.2880924642086029, 0.28586119413375854, 0.2806014120578766, 0.27504074573516846, 0.26947665214538574, 0.2650877833366394, 0.2643528878688812, 0.2598990499973297, 0.2588091790676117, 0.2532108426094055, 0.24533900618553162, 0.2466658353805542, 0.24556683003902435], "accuracy": [0.27077004313468933, 0.49425438046455383, 0.5683529376983643, 0.614317774772644, 0.6646413803100586, 0.7025492191314697, 0.7232862114906311, 0.7432307600975037, 0.7523444890975952, 0.7627789974212646, 0.774270236492157, 0.7844406366348267, 0.7893276810646057, 0.7891955971717834, 0.8004226684570312, 0.8109893202781677, 0.8105930685997009, 0.8169330358505249, 0.8234050869941711, 0.8208954930305481, 0.8321225643157959, 0.8337075710296631, 0.8330471515655518, 0.839519202709198, 0.8438779711723328, 0.850350022315979, 0.8508783578872681, 0.8492933511734009, 0.8551049828529358, 0.8531237840652466, 0.8593316674232483, 0.8619733452796936, 0.8654074668884277, 0.8607845902442932, 0.8676528930664062, 0.8732003569602966, 0.871879518032074, 0.8712190985679626, 0.8710870146751404, 0.8753136992454529, 0.8747853636741638, 0.8776912093162537, 0.8815215826034546, 0.8819178342819214, 0.8864086866378784, 0.8849557638168335, 0.8848236799240112, 0.8927486538887024, 0.8882578015327454, 0.8932769894599915, 0.8923524022102356, 0.8939374089241028, 0.8976356983184814, 0.8969752788543701, 0.900409460067749, 0.8975036144256592, 0.89988112449646, 0.904768168926239, 0.9052965044975281, 0.9025228023529053, 0.9089948534965515, 0.9082023501396179, 0.9146744012832642, 0.9108440279960632, 0.9124290347099304], "val_loss": [2.0390045642852783, 1.5184165239334106, 1.050554633140564, 0.8520479202270508, 0.7559358477592468, 0.6924270987510681, 0.6497254371643066, 0.6126003265380859, 0.5844493508338928, 0.5696395635604858, 0.5424420833587646, 0.5271251797676086, 0.5130427479743958, 0.4995899200439453, 0.49070414900779724, 0.4807642102241516, 0.4702816605567932, 0.4619317352771759, 0.45952174067497253, 0.4449084401130676, 0.43653902411460876, 0.43837806582450867, 0.4294370114803314, 0.42549410462379456, 0.4138185977935791, 0.4136480391025543, 0.40562039613723755, 0.4077132046222687, 0.40122339129447937, 0.3958113491535187, 0.3956820070743561, 0.3905866742134094, 0.38905224204063416, 0.38243767619132996, 0.38369426131248474, 0.37814950942993164, 0.3777894973754883, 0.378727525472641, 0.37019968032836914, 0.37404492497444153, 0.37235918641090393, 0.36242642998695374, 0.3707793056964874, 0.36940672993659973, 0.361084520816803, 0.35772672295570374, 0.36570000648498535, 0.35612374544143677, 0.3622022569179535, 0.35560762882232666, 0.3521062433719635, 0.3562593162059784, 0.35012415051460266, 0.35077449679374695, 0.34907105565071106, 0.34573453664779663, 0.34918075799942017, 0.3415960371494293, 0.3434508144855499, 0.3442656397819519, 0.3409515619277954, 0.3478943705558777, 0.34101244807243347, 0.34292611479759216, 0.34425875544548035], "val_accuracy": [0.5393333435058594, 0.6616666913032532, 0.6853333115577698, 0.7089999914169312, 0.7289999723434448, 0.7436666488647461, 0.7583333253860474, 0.7733333110809326, 0.781000018119812, 0.7776666879653931, 0.7986666560173035, 0.8026666641235352, 0.8083333373069763, 0.8209999799728394, 0.8240000009536743, 0.824999988079071, 0.8289999961853027, 0.8336666822433472, 0.8336666822433472, 0.8363333344459534, 0.8453333377838135, 0.8396666646003723, 0.8450000286102295, 0.8479999899864197, 0.8523333072662354, 0.8529999852180481, 0.8550000190734863, 0.8523333072662354, 0.8633333444595337, 0.859000027179718, 0.8650000095367432, 0.8606666922569275, 0.8586666584014893, 0.8663333058357239, 0.8666666746139526, 0.8673333525657654, 0.8656666874885559, 0.8690000176429749, 0.8673333525657654, 0.8666666746139526, 0.8679999709129333, 0.871666669845581, 0.8709999918937683, 0.8690000176429749, 0.8759999871253967, 0.8769999742507935, 0.8733333349227905, 0.8763333559036255, 0.874666690826416, 0.8743333220481873, 0.878333330154419, 0.8820000290870667, 0.8793333172798157, 0.878333330154419, 0.8826666474342346, 0.8796666860580444, 0.8813333511352539, 0.8813333511352539, 0.8833333253860474, 0.8836666941642761, 0.8836666941642761, 0.8820000290870667, 0.8809999823570251, 0.8793333172798157, 0.8826666474342346]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 0], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 9, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [4], [16], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 2, 2, 0, 1, 2, 1, 1, 0, 21, 11, 10, 6], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.subtract(tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), grad), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 0, 0, 2], [77, 39, 22], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 5, 3, 0, 3, 5], [0, 2, 0, 3], [16, 23], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 5, 6, 8, 1, 4, 2, 1, 2, 8, 3], [2, 0, 0, 3, 0, 0, 1, 1, 2, 0], [16, 99, 49, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 3, 6, 4, 2, 1, 2, 1, 1, 1, 22, 12, 10, 5], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(beta, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.math.add(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))))), alpha)), tf.math.sqrt(tf.math.multiply(alpha, beta))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 6], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [48], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 0], [0, 4, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 56]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 7, 4, 3, 2, 2, 1, 1, 1, 22, 12, 10, 4], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(grad, sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.math.negative(alpha)))))), beta), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 1, 2], [39, 23], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5, 0, 0], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1], [6, 3, 3, 6, 8, 4, 4, 1, 4, 2, 8, 1, 3, 4, 8, 6, 6, 9, 5, 6, 2, 3, 0, 7, 1, 8, 5, 0, 9, 2, 3, 2, 0, 4, 4, 2, 9], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0, 3, 3, 2, 6, 7, 6, 4, 7, 5, 2, 2, 5, 2], [16, 99, 96, 99, 61, 1, 71, 21, 89]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 12, 8, 4, 2, 2, 1, 1, 1, 60, 37, 23, 9], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.negative(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), grad)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.pow(tf.math.sqrt(tf.math.divide_no_nan(sigma, tf.math.divide_no_nan(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.square(sigma)))), tf.math.divide_no_nan(tf.math.add(tf.math.multiply(beta, tf.math.negative(grad)), tf.math.add(tf.math.subtract(grad, tf.math.sqrt(tf.math.square(tf.math.negative(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))), grad)), grad)), tf.math.add(tf.math.multiply(grad, tf.math.add(grad, tf.math.negative(tf.math.pow(beta, beta)))), tf.math.pow(grad, tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), beta)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}]