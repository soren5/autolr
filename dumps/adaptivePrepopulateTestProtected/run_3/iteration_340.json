[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8614285588264465, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.22218656539917, 1.863545298576355, 1.3900067806243896, 1.0934022665023804, 0.9445192217826843, 0.8515263795852661, 0.7719955444335938, 0.7290419340133667, 0.703493595123291, 0.6694689989089966, 0.6433890461921692, 0.6099529266357422, 0.5939387083053589, 0.5721328854560852, 0.5663973093032837, 0.5494264364242554, 0.5402329564094543, 0.5195533633232117, 0.5091373324394226, 0.5057076811790466, 0.48590314388275146, 0.4775838255882263, 0.4662104547023773, 0.4561665952205658, 0.45683953166007996, 0.4419970214366913, 0.4363194704055786, 0.4311119616031647, 0.42102885246276855, 0.4173140823841095, 0.4092118442058563, 0.40820419788360596, 0.3980715572834015, 0.39139530062675476, 0.38944074511528015, 0.37544435262680054, 0.37300610542297363, 0.3728136122226715, 0.3640367090702057, 0.3551873564720154, 0.3490745723247528, 0.34692269563674927, 0.3457232117652893, 0.33226877450942993, 0.33382242918014526, 0.32795250415802, 0.3210526406764984, 0.3207361400127411, 0.3072012662887573, 0.3011443614959717, 0.30244550108909607, 0.3036101758480072, 0.29443153738975525, 0.2936674952507019, 0.2986784875392914, 0.28303205966949463, 0.2835422456264496, 0.2693648040294647, 0.2670499384403229, 0.26715409755706787, 0.27145931124687195, 0.25668564438819885, 0.2581033706665039, 0.2568007707595825, 0.2543478012084961, 0.24539393186569214, 0.24512095749378204], "accuracy": [0.27605336904525757, 0.4943864643573761, 0.5695416927337646, 0.6214502453804016, 0.6621318459510803, 0.6909258961677551, 0.7235503792762756, 0.7323999404907227, 0.7401928305625916, 0.7578919529914856, 0.7652885913848877, 0.7766477465629578, 0.7854973077774048, 0.7913089394569397, 0.7921014428138733, 0.7996301651000977, 0.8047813773155212, 0.8099326491355896, 0.8195747137069702, 0.8158763647079468, 0.8257825970649719, 0.8280280232429504, 0.8378021121025085, 0.8396512866020203, 0.8392550349235535, 0.8457271456718445, 0.8477083444595337, 0.8433496356010437, 0.8487650156021118, 0.8529917001724243, 0.856689989566803, 0.8532558679580688, 0.8595958352088928, 0.8597279191017151, 0.859199583530426, 0.8672566413879395, 0.8673887252807617, 0.869502067565918, 0.8742570281028748, 0.8779553771018982, 0.8747853636741638, 0.8790120482444763, 0.8798044919967651, 0.8841632604598999, 0.8837670087814331, 0.8886540532112122, 0.8877294659614563, 0.8882578015327454, 0.8942015767097473, 0.889578640460968, 0.8922203183174133, 0.8945978283882141, 0.893541157245636, 0.8926165699958801, 0.8949940800666809, 0.9010698795318604, 0.8988244533538818, 0.9033153057098389, 0.9030511379241943, 0.9050323367118835, 0.9013340473175049, 0.9060890078544617, 0.9093911051750183, 0.9105798602104187, 0.9074098467826843, 0.910711944103241, 0.9108440279960632], "val_loss": [2.040250062942505, 1.5237327814102173, 1.0653926134109497, 0.8626469969749451, 0.7721001505851746, 0.715726375579834, 0.6680357456207275, 0.6340086460113525, 0.6153430938720703, 0.5854454040527344, 0.5680001378059387, 0.5522364974021912, 0.5377813577651978, 0.5294883251190186, 0.517171323299408, 0.509333074092865, 0.5037198066711426, 0.4913961589336395, 0.48861634731292725, 0.48050642013549805, 0.47243034839630127, 0.4687729477882385, 0.4671783745288849, 0.4583205282688141, 0.45178842544555664, 0.4498724341392517, 0.4445955753326416, 0.439307302236557, 0.43577879667282104, 0.43341341614723206, 0.4370864927768707, 0.432701051235199, 0.4275745451450348, 0.42306721210479736, 0.4216410219669342, 0.41577017307281494, 0.42663487792015076, 0.41516032814979553, 0.4111897349357605, 0.411060094833374, 0.4077511131763458, 0.4136095345020294, 0.4091484248638153, 0.40656423568725586, 0.40036678314208984, 0.3961049020290375, 0.39740192890167236, 0.39588525891304016, 0.396440714597702, 0.3943343162536621, 0.3903018832206726, 0.3894350230693817, 0.3921165466308594, 0.39401715993881226, 0.39004483819007874, 0.388796865940094, 0.38654303550720215, 0.3844684362411499, 0.3907501697540283, 0.3828692138195038, 0.395994633436203, 0.3849656879901886, 0.3893429636955261, 0.3853544592857361, 0.3868176341056824, 0.38601380586624146, 0.38246601819992065], "val_accuracy": [0.5556666851043701, 0.6439999938011169, 0.6650000214576721, 0.6916666626930237, 0.7200000286102295, 0.7333333492279053, 0.7526666522026062, 0.7606666684150696, 0.7676666378974915, 0.7786666750907898, 0.7893333435058594, 0.7943333387374878, 0.8059999942779541, 0.8063333630561829, 0.8106666803359985, 0.8149999976158142, 0.8169999718666077, 0.8220000267028809, 0.8226666450500488, 0.8286666870117188, 0.8326666951179504, 0.8299999833106995, 0.8360000252723694, 0.8343333601951599, 0.8346666693687439, 0.8363333344459534, 0.8399999737739563, 0.8389999866485596, 0.8389999866485596, 0.8443333506584167, 0.8393333554267883, 0.8403333425521851, 0.847000002861023, 0.847000002861023, 0.8500000238418579, 0.8496666550636292, 0.843999981880188, 0.8479999899864197, 0.847000002861023, 0.8533333539962769, 0.8493333458900452, 0.8500000238418579, 0.8500000238418579, 0.8523333072662354, 0.8546666502952576, 0.8536666631698608, 0.8536666631698608, 0.8526666760444641, 0.8539999723434448, 0.8553333282470703, 0.8576666712760925, 0.8539999723434448, 0.8519999980926514, 0.8576666712760925, 0.8579999804496765, 0.8566666841506958, 0.8550000190734863, 0.8583333492279053, 0.8573333621025085, 0.8583333492279053, 0.859000027179718, 0.8616666793823242, 0.8586666584014893, 0.8606666922569275, 0.859333336353302, 0.859000027179718, 0.8576666712760925]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [0, 2, 3, 0, 4, 2, 0, 1, 4, 6, 4, 9], [0, 2, 0, 3, 0, 1, 5, 0], [16, 16, 43, 43, 22], [0, 1], [0], [0], [99], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [9, 3, 3, 5, 8, 1, 4, 1, 4, 2, 4], [4, 0, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.2817142903804779, "mapping_values": [1, 9, 5, 4, 2, 20, 12, 8, 5, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.negative(tf.math.subtract(tf.math.pow(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, tf.math.pow(grad, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.3711562156677246, 2.312893867492676, 2.2874882221221924, 2.3042681217193604, 2.285383701324463, 2.4809157848358154, 2.3043954372406006, 2.246514320373535, 2.2940316200256348, 2.3042492866516113, 2.3033814430236816, 2.303628921508789], "accuracy": [0.20116232335567474, 0.1628582775592804, 0.16166952252388, 0.09853387624025345, 0.12561088800430298, 0.1582353711128235, 0.10870426893234253, 0.16259410977363586, 0.13934750854969025, 0.09760929644107819, 0.09879804402589798, 0.09945846349000931], "val_loss": [2.2793548107147217, 2.022469997406006, 2.304377794265747, 2.301759719848633, 2.005781650543213, 2.3087308406829834, 2.2915031909942627, 2.2981269359588623, 2.3041155338287354, 2.3026974201202393, 2.3025217056274414, 2.302565813064575], "val_accuracy": [0.09833333641290665, 0.23366667330265045, 0.09799999743700027, 0.09799999743700027, 0.15466666221618652, 0.10133333504199982, 0.27133333683013916, 0.11233333498239517, 0.10233332961797714, 0.10233332961797714, 0.10066666454076767, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 0, 0, 2], [39, 39, 7], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 2, 7, 4, 4, 0, 9, 1, 0, 7, 6, 4, 6, 8, 7, 4, 0], [3, 2, 0, 3, 3, 3, 0, 2, 3, 2, 1, 5, 0, 4], [16, 16, 39, 70], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 2, 5, 2, 4, 2, 8], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 54, 96, 99, 45, 25]], "fitness": -0.13371428847312927, "mapping_values": [1, 9, 5, 4, 3, 35, 21, 14, 4, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.pow(grad, tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad))), tf.math.subtract(tf.math.negative(tf.math.add(tf.math.divide_no_nan(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.pow(beta, tf.math.divide_no_nan(grad, tf.math.sqrt(beta))))), tf.math.add(tf.math.pow(alpha, tf.math.negative(grad)), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), sigma)), tf.math.add(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [29012742.0, 1333388.125, 972941.5, 893589.8125, 924742.1875, 899485.0625, 928103.25, 914976.9375, 930218.4375, 878594.0, 903951.0625, 978532.125], "accuracy": [0.10130762308835983, 0.10302469879388809, 0.09959053993225098, 0.10989301651716232, 0.11002509295940399, 0.11055342853069305, 0.11134592443704605, 0.11028926074504852, 0.11015717685222626, 0.11279883980751038, 0.10896842926740646, 0.11108175665140152], "val_loss": [961439.75, 1113433.75, 539443.0, 537306.0, 535252.5625, 534580.9375, 534239.8125, 538300.0625, 537698.75, 537038.0, 542828.0625, 543674.6875], "val_accuracy": [0.12033333629369736, 0.12266666442155838, 0.13466666638851166, 0.14233332872390747, 0.14166666567325592, 0.14233332872390747, 0.14399999380111694, 0.1420000046491623, 0.1420000046491623, 0.14100000262260437, 0.14300000667572021, 0.14399999380111694]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 0, 8], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0], [97, 99, 96, 43, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 1, 2, 1, 1, 1, 20, 11, 9, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, alpha), tf.math.negative(tf.math.sqrt(beta)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0], [0, 2, 3, 2, 3, 5, 4, 8, 0, 9], [0, 2, 0, 3, 3], [16, 16, 80], [0, 1], [0], [1], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 3, 1, 6, 8, 1, 4, 0, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 15, 10, 5, 3, 2, 1, 1, 0, 15, 8, 7, 5], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.pow(grad, tf.math.sqrt(tf.math.negative(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma)))", "other_info": {"loss": [2.304065227508545, 2.302914619445801, 2.3045027256011963, 2.307115077972412, 2.3163440227508545, 2.356297731399536], "accuracy": [0.0956280529499054, 0.09919429570436478, 0.09747721254825592, 0.10011887550354004, 0.09932637959718704, 0.09668471664190292], "val_loss": [2.3029282093048096, 2.302691698074341, 2.3079893589019775, 2.303300380706787, 2.3535003662109375, 2.322805643081665], "val_accuracy": [0.10199999809265137, 0.09833333641290665, 0.0989999994635582, 0.0989999994635582, 0.10199999809265137, 0.09666666388511658]}}]