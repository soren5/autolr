[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8822857141494751, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585750579834, 1.8655762672424316, 1.394430160522461, 1.0773245096206665, 0.9378393888473511, 0.8425824046134949, 0.7776632308959961, 0.736241340637207, 0.6971188187599182, 0.6732122302055359, 0.644855797290802, 0.6276965141296387, 0.6100340485572815, 0.5899673104286194, 0.5746485590934753, 0.5484329462051392, 0.5425268411636353, 0.5357900857925415, 0.5214410424232483, 0.5127171874046326, 0.4895091950893402, 0.4932740032672882, 0.48551443219184875, 0.47113916277885437, 0.46571049094200134, 0.450914591550827, 0.438728004693985, 0.4414178729057312, 0.4245515465736389, 0.4182806611061096, 0.4126766324043274, 0.41352686285972595, 0.4031256139278412, 0.40064555406570435, 0.3982388377189636, 0.38566267490386963, 0.38400527834892273, 0.3741128146648407, 0.36422181129455566, 0.36170411109924316, 0.35991787910461426, 0.35666367411613464, 0.3521813750267029, 0.34583958983421326, 0.34736087918281555, 0.34181836247444153, 0.33650368452072144, 0.33141741156578064, 0.3230496346950531, 0.3225416839122772, 0.315096914768219, 0.3059031665325165, 0.3058394491672516, 0.3017319440841675, 0.29568877816200256, 0.2933836281299591, 0.28774771094322205, 0.2856961190700531, 0.2802303731441498, 0.2779994010925293, 0.274711549282074, 0.2719985842704773, 0.2586328387260437, 0.2598455548286438, 0.2622571289539337, 0.25739434361457825, 0.2502012252807617, 0.2544722855091095, 0.24556587636470795, 0.24580754339694977, 0.23948103189468384, 0.23949603736400604, 0.23484042286872864, 0.22871272265911102, 0.2256491780281067, 0.22479403018951416, 0.21744707226753235, 0.21390178799629211, 0.21272219717502594], "accuracy": [0.2785629332065582, 0.49451854825019836, 0.559899628162384, 0.6215823292732239, 0.6654338836669922, 0.6950204968452454, 0.7181349992752075, 0.7322678565979004, 0.7441553473472595, 0.7483819723129272, 0.7627789974212646, 0.7717606425285339, 0.7728173136711121, 0.78113853931427, 0.7882710099220276, 0.7993659973144531, 0.7976489067077637, 0.8074230551719666, 0.8128384351730347, 0.8198388814926147, 0.8212917447090149, 0.819970965385437, 0.8272355198860168, 0.8350284099578857, 0.8305375576019287, 0.8387266993522644, 0.846387505531311, 0.8433496356010437, 0.8504821062088013, 0.8524633646011353, 0.8535200357437134, 0.854708731174469, 0.856689989566803, 0.8551049828529358, 0.8593316674232483, 0.8615770936012268, 0.8628978729248047, 0.8702945709228516, 0.8691058158874512, 0.871879518032074, 0.8722757697105408, 0.8691058158874512, 0.8733324408531189, 0.8800686597824097, 0.8795403242111206, 0.8755778670310974, 0.8768987059593201, 0.8829745054244995, 0.8824461698532104, 0.8823140859603882, 0.887201189994812, 0.8897107243537903, 0.8889182209968567, 0.8927486538887024, 0.8902390599250793, 0.8953903317451477, 0.8980319499969482, 0.8976356983184814, 0.900409460067749, 0.89552241563797, 0.9025228023529053, 0.8989565372467041, 0.9056927561759949, 0.9085986018180847, 0.9030511379241943, 0.9066173434257507, 0.9101836085319519, 0.9083344340324402, 0.909259021282196, 0.9099194407463074, 0.9126931428909302, 0.9140139818191528, 0.9119006991386414, 0.9171839952468872, 0.9169198274612427, 0.9185048341751099, 0.9218068718910217, 0.9185048341751099, 0.9196935892105103], "val_loss": [2.033445358276367, 1.5042319297790527, 1.0271512269973755, 0.8147247433662415, 0.7278039455413818, 0.68117356300354, 0.6306353211402893, 0.5966841578483582, 0.5751398801803589, 0.5460951328277588, 0.5314993858337402, 0.509799063205719, 0.4957965612411499, 0.4792602062225342, 0.46671679615974426, 0.45267683267593384, 0.4441072940826416, 0.4356139600276947, 0.42943108081817627, 0.4255247414112091, 0.41811680793762207, 0.4163394272327423, 0.39929893612861633, 0.3969916105270386, 0.39089226722717285, 0.387652188539505, 0.3844633102416992, 0.3824205696582794, 0.3749690353870392, 0.3701930642127991, 0.36967378854751587, 0.36689504981040955, 0.3585263788700104, 0.3587398827075958, 0.36267170310020447, 0.3561091423034668, 0.35379692912101746, 0.3499273955821991, 0.34701839089393616, 0.3467637896537781, 0.3424672484397888, 0.33951225876808167, 0.3386255204677582, 0.34044384956359863, 0.33945050835609436, 0.33684298396110535, 0.3322163224220276, 0.33181649446487427, 0.32827115058898926, 0.3312568664550781, 0.3297465741634369, 0.3256674110889435, 0.3234780728816986, 0.32119208574295044, 0.3232716917991638, 0.3209094703197479, 0.31944912672042847, 0.3157532513141632, 0.3144265413284302, 0.31676045060157776, 0.31425556540489197, 0.3131799101829529, 0.3147056996822357, 0.3154993951320648, 0.31771615147590637, 0.31545644998550415, 0.3127000629901886, 0.31382524967193604, 0.31026333570480347, 0.3147730529308319, 0.30829918384552, 0.3107443153858185, 0.31316936016082764, 0.30297672748565674, 0.30325081944465637, 0.30436232686042786, 0.3072424829006195, 0.30681705474853516, 0.3061434030532837], "val_accuracy": [0.5526666641235352, 0.6666666865348816, 0.687333345413208, 0.7083333134651184, 0.731333315372467, 0.7446666955947876, 0.7606666684150696, 0.762666642665863, 0.7873333096504211, 0.7889999747276306, 0.7973333597183228, 0.8056666851043701, 0.8193333148956299, 0.8259999752044678, 0.8289999961853027, 0.8410000205039978, 0.8453333377838135, 0.8450000286102295, 0.8489999771118164, 0.847000002861023, 0.8516666889190674, 0.856333315372467, 0.859333336353302, 0.856333315372467, 0.8633333444595337, 0.8640000224113464, 0.8656666874885559, 0.8646666407585144, 0.8679999709129333, 0.8696666955947876, 0.8640000224113464, 0.8686666488647461, 0.8713333606719971, 0.8709999918937683, 0.8703333139419556, 0.8723333477973938, 0.871999979019165, 0.874666690826416, 0.8723333477973938, 0.8759999871253967, 0.8726666569709778, 0.875333309173584, 0.8790000081062317, 0.8756666779518127, 0.8726666569709778, 0.8769999742507935, 0.8796666860580444, 0.8796666860580444, 0.8806666731834412, 0.8793333172798157, 0.8813333511352539, 0.8840000033378601, 0.8840000033378601, 0.8843333125114441, 0.8809999823570251, 0.8856666684150696, 0.8866666555404663, 0.8833333253860474, 0.8866666555404663, 0.8843333125114441, 0.8856666684150696, 0.8880000114440918, 0.887333333492279, 0.8883333206176758, 0.8866666555404663, 0.8896666765213013, 0.8863333463668823, 0.8853333592414856, 0.890999972820282, 0.8870000243186951, 0.8883333206176758, 0.8883333206176758, 0.8916666507720947, 0.8939999938011169, 0.8896666765213013, 0.8916666507720947, 0.890999972820282, 0.8926666378974915, 0.8913333415985107]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8557142615318298, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2246005535125732, 1.869473934173584, 1.3985687494277954, 1.0906749963760376, 0.9483680129051208, 0.8501512408256531, 0.7909613251686096, 0.7359933853149414, 0.7008103132247925, 0.66521817445755, 0.6535742878913879, 0.6261252164840698, 0.6002270579338074, 0.5876772999763489, 0.5761010646820068, 0.5661420226097107, 0.5439655780792236, 0.5372480750083923, 0.5182203650474548, 0.5130167007446289, 0.5004847645759583, 0.48903506994247437, 0.47390395402908325, 0.4712068438529968, 0.46650463342666626, 0.46270647644996643, 0.4589937627315521, 0.43623122572898865, 0.43757203221321106, 0.4201618432998657, 0.4245964288711548, 0.4189201891422272, 0.40285825729370117, 0.40082311630249023, 0.39641281962394714, 0.39403632283210754, 0.3853898048400879, 0.3790734112262726, 0.36990952491760254, 0.37381553649902344, 0.3672749102115631, 0.35496169328689575, 0.35377761721611023, 0.34617501497268677, 0.34012413024902344, 0.33600905537605286, 0.32912448048591614, 0.3267340064048767, 0.32848867774009705, 0.3221684694290161, 0.3152635395526886, 0.309369295835495, 0.3083077073097229, 0.3018341064453125, 0.28974467515945435, 0.29421380162239075, 0.2969799339771271, 0.28370848298072815, 0.27997860312461853, 0.2775871157646179], "accuracy": [0.26601505279541016, 0.49610355496406555, 0.5577862858772278, 0.6214502453804016, 0.6586976647377014, 0.6873596906661987, 0.7141724824905396, 0.7289658188819885, 0.7461365461349487, 0.7516840696334839, 0.7598732113838196, 0.7696473598480225, 0.7808743715286255, 0.7877426743507385, 0.7964601516723633, 0.7944789528846741, 0.8041210174560547, 0.8049134612083435, 0.8158763647079468, 0.8145555257797241, 0.8198388814926147, 0.8236692547798157, 0.8302733898162842, 0.8259146809577942, 0.8314621448516846, 0.8343679904937744, 0.8322546482086182, 0.837537944316864, 0.8408400416374207, 0.8499537706375122, 0.844010055065155, 0.8500858545303345, 0.8560295701026917, 0.8490291833877563, 0.8595958352088928, 0.8580108284950256, 0.8644828796386719, 0.8639545440673828, 0.8648791313171387, 0.8659358024597168, 0.8704266548156738, 0.8729361891746521, 0.8753136992454529, 0.8753136992454529, 0.8751816153526306, 0.8766345381736755, 0.8820499181747437, 0.8819178342819214, 0.8815215826034546, 0.8854840993881226, 0.8840311765670776, 0.8934090733528137, 0.886672854423523, 0.889050304889679, 0.8952582478523254, 0.8947299122810364, 0.8928807377815247, 0.8956544995307922, 0.8980319499969482, 0.8982961177825928], "val_loss": [2.0392003059387207, 1.5139720439910889, 1.0309929847717285, 0.8214519619941711, 0.7279396057128906, 0.6825710535049438, 0.6309220790863037, 0.5963212251663208, 0.576533854007721, 0.5499231219291687, 0.5359167456626892, 0.5149045586585999, 0.4982151985168457, 0.4892124831676483, 0.479657381772995, 0.46994686126708984, 0.4589357078075409, 0.4541211724281311, 0.4446217119693756, 0.43755221366882324, 0.4254191815853119, 0.4284110367298126, 0.41422826051712036, 0.40924254059791565, 0.40774935483932495, 0.4197658598423004, 0.41391894221305847, 0.39408284425735474, 0.391414999961853, 0.3828788995742798, 0.3865290582180023, 0.381133109331131, 0.3732995092868805, 0.3747822940349579, 0.3764840364456177, 0.3660242557525635, 0.3618561327457428, 0.3667522072792053, 0.3663168251514435, 0.35798144340515137, 0.3596339225769043, 0.3572346270084381, 0.35143545269966125, 0.3516218662261963, 0.3495289981365204, 0.34381213784217834, 0.3438349664211273, 0.34575513005256653, 0.3389757573604584, 0.34526199102401733, 0.3409465551376343, 0.3354816734790802, 0.33961084485054016, 0.3386847674846649, 0.33747878670692444, 0.3314778208732605, 0.3348253071308136, 0.33102428913116455, 0.3332224488258362, 0.34006038308143616], "val_accuracy": [0.5603333115577698, 0.6596666574478149, 0.6933333277702332, 0.7179999947547913, 0.7409999966621399, 0.7576666474342346, 0.7743333578109741, 0.7826666831970215, 0.7903333306312561, 0.8013333082199097, 0.8086666464805603, 0.8113333582878113, 0.8203333616256714, 0.8199999928474426, 0.8230000138282776, 0.8320000171661377, 0.8370000123977661, 0.8370000123977661, 0.8386666774749756, 0.843999981880188, 0.8500000238418579, 0.846666693687439, 0.8500000238418579, 0.8529999852180481, 0.8533333539962769, 0.8473333120346069, 0.8479999899864197, 0.8600000143051147, 0.8603333234786987, 0.8613333106040955, 0.862666666507721, 0.8646666407585144, 0.8619999885559082, 0.8616666793823242, 0.862333357334137, 0.8683333396911621, 0.8679999709129333, 0.8690000176429749, 0.8636666536331177, 0.871666669845581, 0.8730000257492065, 0.871999979019165, 0.8723333477973938, 0.871666669845581, 0.8686666488647461, 0.874666690826416, 0.8726666569709778, 0.8683333396911621, 0.8756666779518127, 0.8736666440963745, 0.8736666440963745, 0.875, 0.8766666650772095, 0.8773333430290222, 0.8806666731834412, 0.8803333044052124, 0.8790000081062317, 0.8799999952316284, 0.8763333559036255, 0.8756666779518127]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 2, 3, 0, 0], [0, 1, 0, 2], [75, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 79], [0, 0, 1, 0], [0, 6, 9], [0], [99, 47], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 2, 6, 3, 4, 2, 8, 5, 6, 6, 5, 6, 9, 1, 6, 2, 8, 3, 9], [0, 0, 0, 3, 0, 0, 3, 2, 2, 0, 3, 1, 3, 4, 4], [16, 99, 96, 99, 61, 1, 38, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 5, 3, 2, 10, 6, 4, 1, 4, 3, 1, 2, 38, 23, 15, 8], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.divide_no_nan(sigma, beta))), tf.math.divide_no_nan(beta, tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))))), tf.math.divide_no_nan(sigma, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(alpha), tf.math.multiply(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), sigma)), grad), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 80], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 1, 3, 0, 3, 5, 2, 2, 6, 6], [2, 2, 3, 3, 4, 1, 3, 2, 1], [16, 26], [0, 1], [0], [4], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 3], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 33, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 19, 10, 9, 0, 2, 1, 1, 0, 12, 6, 6, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.subtract(tf.math.multiply(tf.math.negative(beta), tf.math.multiply(tf.math.square(beta), tf.math.add(grad, grad))), tf.math.add(tf.math.divide_no_nan(grad, alpha), grad)), tf.math.divide_no_nan(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(grad, tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [9.354371958829106e+26, 636.6715087890625, 984.3595581054688, 1334.255615234375, 3550.815185546875, 3412.11181640625, 4263.20068359375, 4565.2275390625, 5711.8349609375], "accuracy": [0.09893012791872025, 0.09826971590518951, 0.10038304328918457, 0.10276053100824356, 0.10342095047235489, 0.09668471664190292, 0.09813763201236725, 0.1006472036242485, 0.09959053993225098], "val_loss": [733.9480590820312, 1329.608154296875, 1573.648681640625, 4669.55517578125, 3943.81201171875, 3726.78857421875, 3463.56103515625, 5962.419921875, 5046.775390625], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09833333641290665, 0.10233332961797714, 0.09833333641290665, 0.09866666793823242, 0.09933333098888397, 0.10233332961797714, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 4, 3, 0, 8], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 2, 3, 0, 3, 5, 7, 8, 6, 2, 2, 3, 3, 5, 4, 2, 4, 2, 0, 8, 1, 9], [0, 2, 0, 3, 1, 3, 0, 2, 0, 2, 4, 4, 2, 0], [16, 16, 58, 94, 10, 51], [0, 1, 0, 1, 1], [6, 2], [0, 3, 0], [99, 12], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0], [60, 99, 69, 99, 93, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(tf.math.add(tf.math.sqrt(beta), tf.math.divide_no_nan(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.add(tf.math.multiply(alpha, tf.math.multiply(tf.math.square(tf.math.pow(grad, tf.math.add(tf.math.pow(tf.math.add(tf.math.negative(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), beta), grad))), grad)), beta)))), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}, "mapping_values": [1, 8, 5, 3, 2, 36, 22, 14, 6, 5, 2, 3, 2, 21, 11, 10, 5], "tree_depth": 38}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 48], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 2, 6, 0, 3, 5, 9], [0, 2, 0, 3], [26, 21, 87], [0, 1], [8], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 5, 4, 1, 6, 9, 6], [4, 0, 0, 3, 0, 0, 4, 1, 2, 0, 5, 3, 0], [16, 53, 96, 99, 61, 1, 94]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 10, 7, 3, 3, 2, 1, 1, 1, 30, 17, 13, 7], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.pow(sigma, tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad))), tf.math.add(tf.math.sqrt(tf.math.square(alpha)), beta))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, sigma)), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}]