[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8657143115997314, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2206947803497314, 1.8518743515014648, 1.3903765678405762, 1.0882983207702637, 0.9395228624343872, 0.8340383172035217, 0.7687095999717712, 0.7285877466201782, 0.6914169788360596, 0.6589831709861755, 0.6282383799552917, 0.6151129603385925, 0.5937537550926208, 0.5695228576660156, 0.5505487322807312, 0.5420514941215515, 0.5231709480285645, 0.5212173461914062, 0.503444254398346, 0.48976942896842957, 0.4863797724246979, 0.4768538773059845, 0.4652458429336548, 0.45414239168167114, 0.450934499502182, 0.4381936490535736, 0.43679502606391907, 0.42333462834358215, 0.4257150888442993, 0.4181056618690491, 0.40042421221733093, 0.4037882089614868, 0.391743540763855, 0.3904615342617035, 0.38912931084632874, 0.37951114773750305, 0.369459867477417, 0.36651572585105896, 0.3640100955963135, 0.35847118496894836, 0.3521117568016052, 0.35340288281440735, 0.34336745738983154, 0.34259992837905884, 0.33514168858528137, 0.3286230266094208, 0.3249759376049042, 0.32254117727279663, 0.3205466568470001, 0.3093031942844391, 0.3050653040409088, 0.2965254485607147, 0.3012535870075226, 0.29447105526924133, 0.2878649830818176], "accuracy": [0.2763175368309021, 0.48632940649986267, 0.5639941692352295, 0.620261549949646, 0.6641130447387695, 0.6973979473114014, 0.7211728692054749, 0.7342491149902344, 0.7456082701683044, 0.7497028112411499, 0.767930269241333, 0.774798572063446, 0.7816668748855591, 0.7927618622779846, 0.793950617313385, 0.7998943328857422, 0.8104609847068787, 0.8131026029586792, 0.8206313848495483, 0.8265751004219055, 0.8271034359931946, 0.8347642421722412, 0.83119797706604, 0.8376700282096863, 0.8352925777435303, 0.8438779711723328, 0.8436138033866882, 0.8498216867446899, 0.8508783578872681, 0.8506141901016235, 0.8548408150672913, 0.8562937378883362, 0.8621054291725159, 0.8593316674232483, 0.86118084192276, 0.8639545440673828, 0.870030403137207, 0.8692378997802734, 0.8684453964233398, 0.8709549307823181, 0.8745211958885193, 0.8757099509239197, 0.8757099509239197, 0.8754457831382751, 0.8775591254234314, 0.8824461698532104, 0.8804649114608765, 0.883238673210144, 0.883238673210144, 0.8878615498542786, 0.8938053250312805, 0.8910315632820129, 0.8874653577804565, 0.8931449055671692, 0.8994848728179932], "val_loss": [2.034330129623413, 1.511081337928772, 1.051358938217163, 0.8535250425338745, 0.7639861106872559, 0.7133626937866211, 0.666333794593811, 0.6298803091049194, 0.6071635484695435, 0.5835338830947876, 0.5636224746704102, 0.5536137223243713, 0.5404607057571411, 0.5209872722625732, 0.5121403932571411, 0.5094081163406372, 0.48861876130104065, 0.48331180214881897, 0.4723687469959259, 0.4757435619831085, 0.4638816714286804, 0.45496875047683716, 0.44915908575057983, 0.44213971495628357, 0.4413049817085266, 0.4307996332645416, 0.4266238510608673, 0.4259427487850189, 0.4178740382194519, 0.42096561193466187, 0.4141964614391327, 0.40689441561698914, 0.4058011472225189, 0.4015706479549408, 0.3998062312602997, 0.3999553918838501, 0.3962680697441101, 0.39483171701431274, 0.3909650444984436, 0.38823556900024414, 0.3912128806114197, 0.3826397657394409, 0.3860231041908264, 0.3866748809814453, 0.38136181235313416, 0.3759789764881134, 0.3838351368904114, 0.3801206946372986, 0.3788261413574219, 0.37119996547698975, 0.3711582124233246, 0.37428563833236694, 0.3715721070766449, 0.3672946095466614, 0.37363073229789734], "val_accuracy": [0.512333333492279, 0.6646666526794434, 0.6776666641235352, 0.6959999799728394, 0.7296666502952576, 0.7400000095367432, 0.7526666522026062, 0.7670000195503235, 0.7723333239555359, 0.7799999713897705, 0.7913333177566528, 0.7910000085830688, 0.7929999828338623, 0.8100000023841858, 0.8096666932106018, 0.8066666722297668, 0.824999988079071, 0.8209999799728394, 0.831333339214325, 0.8240000009536743, 0.8420000076293945, 0.8399999737739563, 0.8463333249092102, 0.8450000286102295, 0.846666693687439, 0.8453333377838135, 0.8526666760444641, 0.8506666421890259, 0.8569999933242798, 0.856333315372467, 0.8583333492279053, 0.8543333411216736, 0.8600000143051147, 0.8610000014305115, 0.859333336353302, 0.8629999756813049, 0.8619999885559082, 0.8603333234786987, 0.8666666746139526, 0.8659999966621399, 0.8666666746139526, 0.8676666617393494, 0.8636666536331177, 0.8633333444595337, 0.8700000047683716, 0.871666669845581, 0.8690000176429749, 0.8709999918937683, 0.871999979019165, 0.878000020980835, 0.8766666650772095, 0.8740000128746033, 0.874666690826416, 0.8776666522026062, 0.878000020980835]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 1, 1, 0], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 5, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [6, 3, 3, 8, 8, 3, 4, 1, 4, 8, 8, 9, 6], [0, 0, 0, 3, 0, 3, 3, 1, 4, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.15399999916553497, "mapping_values": [1, 1, 0, 1, 1, 6, 3, 3, 2, 2, 1, 1, 0, 21, 13, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.sqrt(tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))))), tf.math.subtract(tf.math.pow(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), sigma), tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(sigma, alpha))", "other_info": {"loss": [35818.60546875, 130540.3359375, NaN, NaN, NaN, NaN], "accuracy": [0.11359133571386337, 0.10540219396352768, 0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [69726.921875, 139948.1875, NaN, NaN, NaN, NaN], "val_accuracy": [0.16633333265781403, 0.10199999809265137, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [8, 2, 4, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 2, 3, 0, 3, 5, 6, 4, 8, 3, 3, 9, 9], [0, 0, 0, 3, 4, 4], [16, 62, 39, 19, 41], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [8, 4, 8, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 2, 1, 2, 0], [16, 99, 96, 23, 61, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 1, 19, 13, 6, 5, 2, 1, 1, 0, 16, 9, 7, 5], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.math.pow(tf.math.negative(grad), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.sqrt(tf.math.multiply(grad, grad)), tf.math.multiply(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), grad)))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.pow(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), beta)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 2, 3, 8, 3, 6, 0], [0, 1, 0, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [2, 8, 7, 3, 5, 3, 1], [0, 7, 1, 7, 5, 3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 9, 4, 1, 5, 2, 8], [2, 0, 0, 3, 0, 0, 3, 4, 2, 0], [94, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 2, 7, 4, 3, 2, 13, 7, 6, 1, 12, 7, 5, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(grad)), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.sqrt(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)), tf.math.multiply(tf.math.square(tf.math.multiply(alpha, grad)), tf.math.subtract(grad, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3037471771240234, 2.3025851249694824, 2.3124444484710693, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09615638852119446, 0.09998679161071777, 0.09668471664190292, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.0989999994635582, 0.0989999994635582, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [9, 2, 3, 0, 3, 5], [0, 2, 0, 3], [12, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 2], [0, 0, 0, 3, 0, 1, 3, 1, 2, 0], [9, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 1, 1, 0, 1, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(alpha, tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}]