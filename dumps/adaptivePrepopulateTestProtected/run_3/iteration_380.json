[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.878000020980835, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2248713970184326, 1.8710205554962158, 1.389938473701477, 1.0859992504119873, 0.936397910118103, 0.83625328540802, 0.7686293721199036, 0.7178665399551392, 0.6833009719848633, 0.652707040309906, 0.6268638372421265, 0.6087449789047241, 0.591258704662323, 0.5694053173065186, 0.5630955696105957, 0.545283854007721, 0.5293194651603699, 0.5124086141586304, 0.5029646158218384, 0.4924637973308563, 0.48803237080574036, 0.47490066289901733, 0.45843175053596497, 0.45213717222213745, 0.45156556367874146, 0.4418409764766693, 0.44036391377449036, 0.42795759439468384, 0.417694091796875, 0.410001277923584, 0.40615957975387573, 0.4016440808773041, 0.389433354139328, 0.3848842978477478, 0.3796277344226837, 0.3746678829193115, 0.36619168519973755, 0.3623877465724945, 0.35594993829727173, 0.3589244484901428, 0.34547093510627747, 0.34588319063186646, 0.3390268385410309, 0.3411372900009155, 0.3348635733127594, 0.3274712860584259, 0.32415056228637695, 0.32858172059059143, 0.31110215187072754, 0.3180113434791565, 0.3080146610736847, 0.31391441822052, 0.2988112270832062, 0.2971894443035126, 0.29625794291496277, 0.28488996624946594, 0.2871520519256592, 0.28222033381462097, 0.27688300609588623, 0.27092602849006653, 0.2684865891933441], "accuracy": [0.27539294958114624, 0.49306565523147583, 0.5695416927337646, 0.6144498586654663, 0.6711134314537048, 0.7022850513458252, 0.7259278893470764, 0.7313432693481445, 0.7491744756698608, 0.759080708026886, 0.7750627398490906, 0.7749306559562683, 0.7824593782424927, 0.7897239327430725, 0.7968564033508301, 0.7997622489929199, 0.8042530417442322, 0.8072909712791443, 0.8120459914207458, 0.8214238286018372, 0.8248580098152161, 0.8297450542449951, 0.8319904804229736, 0.835160493850708, 0.8367455005645752, 0.8389908671379089, 0.8388587832450867, 0.8469158411026001, 0.8485008478164673, 0.8520671129226685, 0.852331280708313, 0.8564258217811584, 0.8580108284950256, 0.8573504090309143, 0.8659358024597168, 0.8646149635314941, 0.8665962219238281, 0.8669924736022949, 0.870030403137207, 0.8712190985679626, 0.8775591254234314, 0.8795403242111206, 0.8775591254234314, 0.8780874609947205, 0.8771628737449646, 0.8823140859603882, 0.8833707571029663, 0.8804649114608765, 0.8887861371040344, 0.8860124349594116, 0.8868049383163452, 0.8842953443527222, 0.8886540532112122, 0.8902390599250793, 0.8897107243537903, 0.8953903317451477, 0.8982961177825928, 0.8981640338897705, 0.8977677822113037, 0.9021265506744385, 0.9033153057098389], "val_loss": [2.04215407371521, 1.5188968181610107, 1.045701503753662, 0.8363615870475769, 0.7451866865158081, 0.6891209483146667, 0.6488282680511475, 0.6050627827644348, 0.5775038003921509, 0.5614414811134338, 0.5392304062843323, 0.5228520631790161, 0.50983065366745, 0.5017212629318237, 0.48757922649383545, 0.4809652864933014, 0.46868136525154114, 0.46116405725479126, 0.45189282298088074, 0.4544742703437805, 0.4358358681201935, 0.43246224522590637, 0.42467790842056274, 0.4198678433895111, 0.41662275791168213, 0.41137686371803284, 0.41104021668434143, 0.40034008026123047, 0.3994107246398926, 0.394735187292099, 0.3905183970928192, 0.3913259208202362, 0.38262301683425903, 0.3828696310520172, 0.3779536485671997, 0.3756750226020813, 0.378849595785141, 0.3753332197666168, 0.37067586183547974, 0.3690201938152313, 0.3653396666049957, 0.3645906448364258, 0.36521202325820923, 0.36012163758277893, 0.3611375689506531, 0.35835933685302734, 0.358955979347229, 0.3539515733718872, 0.3531323969364166, 0.3501172959804535, 0.35734546184539795, 0.3591928780078888, 0.3541131317615509, 0.34673213958740234, 0.34467747807502747, 0.3445722162723541, 0.3511354923248291, 0.3440832495689392, 0.3432035446166992, 0.34197187423706055, 0.3351135551929474], "val_accuracy": [0.5423333048820496, 0.6489999890327454, 0.6783333420753479, 0.7009999752044678, 0.7243333458900452, 0.7540000081062317, 0.7599999904632568, 0.7756666541099548, 0.7839999794960022, 0.7883333563804626, 0.8059999942779541, 0.8023333549499512, 0.8076666593551636, 0.8119999766349792, 0.8243333101272583, 0.8289999961853027, 0.8299999833106995, 0.8286666870117188, 0.8416666388511658, 0.8326666951179504, 0.8476666808128357, 0.843666672706604, 0.8539999723434448, 0.8496666550636292, 0.8510000109672546, 0.8583333492279053, 0.8539999723434448, 0.8606666922569275, 0.8586666584014893, 0.8659999966621399, 0.8636666536331177, 0.8640000224113464, 0.8650000095367432, 0.8646666407585144, 0.8703333139419556, 0.8679999709129333, 0.8659999966621399, 0.8713333606719971, 0.8766666650772095, 0.8743333220481873, 0.8769999742507935, 0.8756666779518127, 0.875333309173584, 0.875333309173584, 0.878333330154419, 0.8769999742507935, 0.8736666440963745, 0.8790000081062317, 0.8796666860580444, 0.8809999823570251, 0.875333309173584, 0.8726666569709778, 0.8793333172798157, 0.8833333253860474, 0.8790000081062317, 0.8853333592414856, 0.8809999823570251, 0.8809999823570251, 0.8823333382606506, 0.8830000162124634, 0.8836666941642761]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 76], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 57], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 3, 1, 4, 2, 8, 3, 6, 4, 6, 7, 7, 3, 7, 5, 3, 3, 8, 7, 6, 2, 6, 4, 1, 8, 6], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0, 2, 3, 6, 1, 5, 7, 4, 2, 1, 6, 7, 4, 4, 5, 3, 2, 7], [16, 99, 96, 99, 61, 73]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 10, 6, 4, 2, 2, 1, 1, 1, 58, 31, 27, 6], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.pow(tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.multiply(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), beta), sigma), tf.math.add(grad, tf.math.square(tf.math.multiply(tf.math.multiply(alpha, grad), tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(tf.math.add(grad, grad), beta), tf.math.divide_no_nan(alpha, tf.math.pow(grad, grad))))))))), grad)), grad), tf.math.subtract(tf.math.sqrt(grad), sigma)), tf.math.divide_no_nan(beta, grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 2, 6, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 0, 0, 1], [3, 0, 9], [0], [45, 61], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [2, 3, 3, 6, 8, 1, 4, 1, 4, 5, 4, 2, 9], [0, 0, 0, 3, 0, 1, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 7, 4, 3, 1, 4, 3, 1, 2, 23, 13, 10, 6], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32))))), alpha), sigma), tf.math.pow(tf.math.add(alpha, beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 5, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [4, 16], [0, 1], [9], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 3, 3, 6, 9, 1, 4, 1, 5, 2, 8], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [42, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), tf.math.subtract(grad, tf.math.square(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [5.008728045319983e+23, 1.6672664716397536e+22, 2.554795241215294e+21, 2246.0, 1938.0130615234375, 1713.444091796875, 1504.647705078125], "accuracy": [0.09893012791872025, 0.09245806187391281, 0.09668471664190292, 0.09681680053472519, 0.09417514503002167, 0.10487385839223862, 0.09826971590518951], "val_loss": [3.4042475396112956e+22, 2884.1630859375, 2469.3505859375, 2042.9686279296875, 1672.0413818359375, 1421.52587890625, 1493.2049560546875], "val_accuracy": [0.0989999994635582, 0.10199999809265137, 0.09700000286102295, 0.09700000286102295, 0.10100000351667404, 0.09933333098888397, 0.09833333641290665]}, "mapping_values": [1, 6, 4, 2, 1, 10, 6, 4, 2, 1, 1, 0, 1, 15, 9, 6, 5], "tree_depth": 16}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 3, 0, 8], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 2], [16, 16], [0, 1, 0], [4, 9], [0], [99, 83], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 5, 4, 1, 4, 2, 8], [0, 2, 4, 3, 0, 0, 3, 1, 2, 0], [16, 7, 96, 11, 61, 1]], "fitness": -0.09028571099042892, "mapping_values": [1, 8, 5, 3, 2, 10, 6, 4, 2, 3, 2, 1, 2, 17, 9, 8, 3], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.square(beta)), tf.math.pow(grad, sigma))), tf.math.subtract(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [2.3115062713623047, 2.3097877502441406, 2.30948805809021, 2.31037974357605, 2.308974027633667, 2.3099920749664307], "accuracy": [0.08889182657003403, 0.09642054885625839, 0.09298639744520187, 0.08994849026203156, 0.09496764093637466, 0.09140139818191528], "val_loss": [2.3076155185699463, 2.3076155185699463, 2.3076155185699463, 2.3076155185699463, 2.3076155185699463, 2.3076155185699463], "val_accuracy": [0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918]}}]