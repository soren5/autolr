[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8651428818702698, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2210190296173096, 1.8571722507476807, 1.38620126247406, 1.0985270738601685, 0.9420824646949768, 0.8384504914283752, 0.7702367901802063, 0.72520911693573, 0.6832329034805298, 0.6484555006027222, 0.6242583990097046, 0.6123615503311157, 0.579925000667572, 0.5705347061157227, 0.5441944599151611, 0.5431368350982666, 0.5193844437599182, 0.5067248940467834, 0.48948976397514343, 0.48919451236724854, 0.47798287868499756, 0.4681689143180847, 0.4575451910495758, 0.45282402634620667, 0.4505447745323181, 0.4348626434803009, 0.4247713088989258, 0.41424813866615295, 0.42220184206962585, 0.41341057419776917, 0.40209266543388367, 0.39918267726898193, 0.3918658196926117, 0.3810781240463257, 0.3773733377456665, 0.37276792526245117, 0.3577800989151001, 0.3627323508262634, 0.35650545358657837, 0.3484802544116974, 0.3418920934200287, 0.3495594561100006, 0.3374427258968353, 0.3320920765399933, 0.32914310693740845, 0.3244563043117523, 0.315810889005661, 0.31176242232322693, 0.31427115201950073, 0.30231618881225586, 0.30151572823524475, 0.29905760288238525, 0.2935156226158142, 0.28014206886291504, 0.2827164828777313, 0.2792489230632782, 0.2760655879974365, 0.27476003766059875, 0.2696608603000641, 0.2656698524951935, 0.26739269495010376, 0.26383745670318604, 0.2594301402568817, 0.24778315424919128, 0.2513617277145386, 0.23352818191051483, 0.2403508871793747, 0.23742878437042236, 0.23691704869270325, 0.2306358963251114, 0.22271426022052765], "accuracy": [0.27499669790267944, 0.4920089840888977, 0.5563333630561829, 0.6169594526290894, 0.6654338836669922, 0.702681303024292, 0.7210407853126526, 0.7415136694908142, 0.752212405204773, 0.7635715007781982, 0.7697794437408447, 0.774270236492157, 0.7854973077774048, 0.7926297783851624, 0.7996301651000977, 0.8041210174560547, 0.8080834746360779, 0.8153480291366577, 0.8206313848495483, 0.8241975903511047, 0.8276317715644836, 0.8302733898162842, 0.8315942287445068, 0.8368775844573975, 0.8356888294219971, 0.8392550349235535, 0.8442742228507996, 0.8502179384231567, 0.8481045961380005, 0.8487650156021118, 0.854708731174469, 0.8561616539955139, 0.8628978729248047, 0.8623695969581604, 0.8643507957458496, 0.8626337051391602, 0.8712190985679626, 0.8713511824607849, 0.8710870146751404, 0.8741249442100525, 0.8790120482444763, 0.8753136992454529, 0.8796724081039429, 0.8836349248886108, 0.8868049383163452, 0.8845595121383667, 0.8853520154953003, 0.8882578015327454, 0.885219931602478, 0.891559898853302, 0.8912957310676575, 0.8902390599250793, 0.8910315632820129, 0.8975036144256592, 0.8969752788543701, 0.8996169567108154, 0.8977677822113037, 0.9005415439605713, 0.9019944667816162, 0.9083344340324402, 0.9008057117462158, 0.9037115573883057, 0.9071456789970398, 0.9104477763175964, 0.9093911051750183, 0.9159952402114868, 0.9116365313529968, 0.9141460657119751, 0.913089394569397, 0.9145423173904419, 0.9198256731033325], "val_loss": [2.035667896270752, 1.5064911842346191, 1.0428560972213745, 0.8407055735588074, 0.7571825385093689, 0.6917273998260498, 0.6494213342666626, 0.618645429611206, 0.5910568833351135, 0.5672599077224731, 0.5520063638687134, 0.5397056341171265, 0.5227862596511841, 0.5131303071975708, 0.49628832936286926, 0.4849846661090851, 0.48117130994796753, 0.47125765681266785, 0.466575562953949, 0.4605272710323334, 0.45292484760284424, 0.44351038336753845, 0.4474371075630188, 0.4331492483615875, 0.4260944426059723, 0.42239615321159363, 0.42103898525238037, 0.4237080216407776, 0.4148426055908203, 0.40286511182785034, 0.40554144978523254, 0.3987734913825989, 0.4052257537841797, 0.3954901397228241, 0.3968493938446045, 0.391917884349823, 0.38905152678489685, 0.3851032853126526, 0.38258659839630127, 0.3818351924419403, 0.38354337215423584, 0.37502825260162354, 0.38108256459236145, 0.3749657869338989, 0.37836915254592896, 0.36887502670288086, 0.36851099133491516, 0.3719538450241089, 0.3658439815044403, 0.36779138445854187, 0.36882543563842773, 0.36713704466819763, 0.36777910590171814, 0.36523568630218506, 0.36538365483283997, 0.3606310486793518, 0.3617374002933502, 0.3664848208427429, 0.35755518078804016, 0.35813984274864197, 0.35741639137268066, 0.3566737174987793, 0.35400232672691345, 0.35521313548088074, 0.3532947897911072, 0.35326042771339417, 0.35259154438972473, 0.3496033549308777, 0.3539181649684906, 0.3539964258670807, 0.35401225090026855], "val_accuracy": [0.5393333435058594, 0.6546666622161865, 0.6766666769981384, 0.7009999752044678, 0.7413333058357239, 0.7543333172798157, 0.7683333158493042, 0.7726666927337646, 0.7863333225250244, 0.793666660785675, 0.7996666431427002, 0.8063333630561829, 0.8113333582878113, 0.8176666498184204, 0.8206666707992554, 0.8256666660308838, 0.8263333439826965, 0.8320000171661377, 0.831333339214325, 0.8356666564941406, 0.8346666693687439, 0.8396666646003723, 0.8376666903495789, 0.8416666388511658, 0.846666693687439, 0.8463333249092102, 0.8496666550636292, 0.8450000286102295, 0.8513333201408386, 0.8546666502952576, 0.8576666712760925, 0.8560000061988831, 0.8526666760444641, 0.859666645526886, 0.8543333411216736, 0.8576666712760925, 0.859666645526886, 0.8610000014305115, 0.862333357334137, 0.8610000014305115, 0.8603333234786987, 0.8663333058357239, 0.862666666507721, 0.8653333187103271, 0.8636666536331177, 0.8673333525657654, 0.8663333058357239, 0.8673333525657654, 0.8656666874885559, 0.8673333525657654, 0.8679999709129333, 0.8693333268165588, 0.8640000224113464, 0.8700000047683716, 0.8679999709129333, 0.8706666827201843, 0.8713333606719971, 0.8666666746139526, 0.8723333477973938, 0.8726666569709778, 0.8730000257492065, 0.875333309173584, 0.8726666569709778, 0.8740000128746033, 0.8743333220481873, 0.8776666522026062, 0.875333309173584, 0.8776666522026062, 0.8713333606719971, 0.8759999871253967, 0.8776666522026062]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 3, 3, 0, 3], [0, 0, 0, 2], [39, 39, 18], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1], [1, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 69], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 2, 3, 6, 8, 1, 4, 1, 0, 2, 8, 1, 1, 3, 6, 6, 0, 3, 7, 9, 3, 0, 4, 6, 5, 7, 4, 3, 2, 5, 2, 4, 8, 5, 0, 2, 1, 9, 8, 7, 2, 6, 5], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 7, 0, 3, 2, 6, 0, 4, 1, 6, 2, 0, 4, 5, 7, 3, 6, 7, 6], [16, 99, 96, 99, 61, 1, 81, 31, 54, 92, 78]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 1, 0, 1, 1, 2, 1, 1, 1, 71, 43, 28, 11], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), tf.math.add(sigma, tf.math.sqrt(tf.math.subtract(alpha, beta)))), tf.math.subtract(tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.negative(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(sigma, beta), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), tf.math.multiply(grad, tf.math.negative(tf.math.pow(tf.math.divide_no_nan(tf.math.square(tf.math.add(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.multiply(tf.math.add(tf.math.square(tf.math.add(tf.math.pow(tf.math.sqrt(tf.math.square(grad)), tf.math.negative(tf.math.add(tf.math.subtract(alpha, grad), beta))), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), grad), tf.math.sqrt(grad)))), grad), tf.math.add(tf.math.add(sigma, grad), tf.math.divide_no_nan(tf.math.square(grad), grad)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 0, 0, 2], [39, 39, 69], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 2, 3], [90, 16], [0, 1], [0], [0], [98], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 2, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 7, 4, 3, 1, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), beta), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [2.304170608520508, 2.302577018737793, 2.302572250366211, 2.3025667667388916, 2.302584648132324, 2.3026106357574463], "accuracy": [0.1022322028875351, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.302584648132324, 2.3025827407836914, 2.3025858402252197, 2.3025929927825928, 2.302598714828491, 2.3026304244995117], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 0, 3], [0, 1, 0, 2, 1], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 3, 7, 0, 2, 5, 1, 7, 8], [3, 2, 0, 3, 1, 4, 5, 5, 2], [16, 9], [0, 1], [0], [0], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 6, 8, 1, 4, 1, 4, 2, 6], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 25, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(grad, tf.math.square(beta))), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.square(tf.math.subtract(tf.math.add(grad, tf.math.sqrt(grad)), grad)), beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))))", "other_info": {"loss": [2.309800624847412, 2.308769941329956, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0948355570435524, 0.09153348207473755, 0.09179764986038208, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.308533191680908, 35.02461624145508, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09300000220537186, 0.06933332979679108, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908]}, "mapping_values": [1, 10, 5, 5, 2, 23, 14, 9, 1, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 21}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 2, 3, 0, 3, 5], [0, 2, 0, 3, 1], [16, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 6, 5, 6, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 3, 0], [16, 99, 96, 99, 61, 26]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(sigma), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}, "mapping_values": [1, 9, 5, 4, 2, 11, 6, 5, 2, 2, 1, 1, 0, 21, 11, 10, 6], "tree_depth": 16}]