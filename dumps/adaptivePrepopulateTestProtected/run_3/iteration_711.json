[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8822857141494751, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585750579834, 1.8655762672424316, 1.394430160522461, 1.0773245096206665, 0.9378393888473511, 0.8425824046134949, 0.7776632308959961, 0.736241340637207, 0.6971188187599182, 0.6732122302055359, 0.644855797290802, 0.6276965141296387, 0.6100340485572815, 0.5899673104286194, 0.5746485590934753, 0.5484329462051392, 0.5425268411636353, 0.5357900857925415, 0.5214410424232483, 0.5127171874046326, 0.4895091950893402, 0.4932740032672882, 0.48551443219184875, 0.47113916277885437, 0.46571049094200134, 0.450914591550827, 0.438728004693985, 0.4414178729057312, 0.4245515465736389, 0.4182806611061096, 0.4126766324043274, 0.41352686285972595, 0.4031256139278412, 0.40064555406570435, 0.3982388377189636, 0.38566267490386963, 0.38400527834892273, 0.3741128146648407, 0.36422181129455566, 0.36170411109924316, 0.35991787910461426, 0.35666367411613464, 0.3521813750267029, 0.34583958983421326, 0.34736087918281555, 0.34181836247444153, 0.33650368452072144, 0.33141741156578064, 0.3230496346950531, 0.3225416839122772, 0.315096914768219, 0.3059031665325165, 0.3058394491672516, 0.3017319440841675, 0.29568877816200256, 0.2933836281299591, 0.28774771094322205, 0.2856961190700531, 0.2802303731441498, 0.2779994010925293, 0.274711549282074, 0.2719985842704773, 0.2586328387260437, 0.2598455548286438, 0.2622571289539337, 0.25739434361457825, 0.2502012252807617, 0.2544722855091095, 0.24556587636470795, 0.24580754339694977, 0.23948103189468384, 0.23949603736400604, 0.23484042286872864, 0.22871272265911102, 0.2256491780281067, 0.22479403018951416, 0.21744707226753235, 0.21390178799629211, 0.21272219717502594], "accuracy": [0.2785629332065582, 0.49451854825019836, 0.559899628162384, 0.6215823292732239, 0.6654338836669922, 0.6950204968452454, 0.7181349992752075, 0.7322678565979004, 0.7441553473472595, 0.7483819723129272, 0.7627789974212646, 0.7717606425285339, 0.7728173136711121, 0.78113853931427, 0.7882710099220276, 0.7993659973144531, 0.7976489067077637, 0.8074230551719666, 0.8128384351730347, 0.8198388814926147, 0.8212917447090149, 0.819970965385437, 0.8272355198860168, 0.8350284099578857, 0.8305375576019287, 0.8387266993522644, 0.846387505531311, 0.8433496356010437, 0.8504821062088013, 0.8524633646011353, 0.8535200357437134, 0.854708731174469, 0.856689989566803, 0.8551049828529358, 0.8593316674232483, 0.8615770936012268, 0.8628978729248047, 0.8702945709228516, 0.8691058158874512, 0.871879518032074, 0.8722757697105408, 0.8691058158874512, 0.8733324408531189, 0.8800686597824097, 0.8795403242111206, 0.8755778670310974, 0.8768987059593201, 0.8829745054244995, 0.8824461698532104, 0.8823140859603882, 0.887201189994812, 0.8897107243537903, 0.8889182209968567, 0.8927486538887024, 0.8902390599250793, 0.8953903317451477, 0.8980319499969482, 0.8976356983184814, 0.900409460067749, 0.89552241563797, 0.9025228023529053, 0.8989565372467041, 0.9056927561759949, 0.9085986018180847, 0.9030511379241943, 0.9066173434257507, 0.9101836085319519, 0.9083344340324402, 0.909259021282196, 0.9099194407463074, 0.9126931428909302, 0.9140139818191528, 0.9119006991386414, 0.9171839952468872, 0.9169198274612427, 0.9185048341751099, 0.9218068718910217, 0.9185048341751099, 0.9196935892105103], "val_loss": [2.033445358276367, 1.5042319297790527, 1.0271512269973755, 0.8147247433662415, 0.7278039455413818, 0.68117356300354, 0.6306353211402893, 0.5966841578483582, 0.5751398801803589, 0.5460951328277588, 0.5314993858337402, 0.509799063205719, 0.4957965612411499, 0.4792602062225342, 0.46671679615974426, 0.45267683267593384, 0.4441072940826416, 0.4356139600276947, 0.42943108081817627, 0.4255247414112091, 0.41811680793762207, 0.4163394272327423, 0.39929893612861633, 0.3969916105270386, 0.39089226722717285, 0.387652188539505, 0.3844633102416992, 0.3824205696582794, 0.3749690353870392, 0.3701930642127991, 0.36967378854751587, 0.36689504981040955, 0.3585263788700104, 0.3587398827075958, 0.36267170310020447, 0.3561091423034668, 0.35379692912101746, 0.3499273955821991, 0.34701839089393616, 0.3467637896537781, 0.3424672484397888, 0.33951225876808167, 0.3386255204677582, 0.34044384956359863, 0.33945050835609436, 0.33684298396110535, 0.3322163224220276, 0.33181649446487427, 0.32827115058898926, 0.3312568664550781, 0.3297465741634369, 0.3256674110889435, 0.3234780728816986, 0.32119208574295044, 0.3232716917991638, 0.3209094703197479, 0.31944912672042847, 0.3157532513141632, 0.3144265413284302, 0.31676045060157776, 0.31425556540489197, 0.3131799101829529, 0.3147056996822357, 0.3154993951320648, 0.31771615147590637, 0.31545644998550415, 0.3127000629901886, 0.31382524967193604, 0.31026333570480347, 0.3147730529308319, 0.30829918384552, 0.3107443153858185, 0.31316936016082764, 0.30297672748565674, 0.30325081944465637, 0.30436232686042786, 0.3072424829006195, 0.30681705474853516, 0.3061434030532837], "val_accuracy": [0.5526666641235352, 0.6666666865348816, 0.687333345413208, 0.7083333134651184, 0.731333315372467, 0.7446666955947876, 0.7606666684150696, 0.762666642665863, 0.7873333096504211, 0.7889999747276306, 0.7973333597183228, 0.8056666851043701, 0.8193333148956299, 0.8259999752044678, 0.8289999961853027, 0.8410000205039978, 0.8453333377838135, 0.8450000286102295, 0.8489999771118164, 0.847000002861023, 0.8516666889190674, 0.856333315372467, 0.859333336353302, 0.856333315372467, 0.8633333444595337, 0.8640000224113464, 0.8656666874885559, 0.8646666407585144, 0.8679999709129333, 0.8696666955947876, 0.8640000224113464, 0.8686666488647461, 0.8713333606719971, 0.8709999918937683, 0.8703333139419556, 0.8723333477973938, 0.871999979019165, 0.874666690826416, 0.8723333477973938, 0.8759999871253967, 0.8726666569709778, 0.875333309173584, 0.8790000081062317, 0.8756666779518127, 0.8726666569709778, 0.8769999742507935, 0.8796666860580444, 0.8796666860580444, 0.8806666731834412, 0.8793333172798157, 0.8813333511352539, 0.8840000033378601, 0.8840000033378601, 0.8843333125114441, 0.8809999823570251, 0.8856666684150696, 0.8866666555404663, 0.8833333253860474, 0.8866666555404663, 0.8843333125114441, 0.8856666684150696, 0.8880000114440918, 0.887333333492279, 0.8883333206176758, 0.8866666555404663, 0.8896666765213013, 0.8863333463668823, 0.8853333592414856, 0.890999972820282, 0.8870000243186951, 0.8883333206176758, 0.8883333206176758, 0.8916666507720947, 0.8939999938011169, 0.8896666765213013, 0.8916666507720947, 0.890999972820282, 0.8926666378974915, 0.8913333415985107]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8794285655021667, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.22233510017395, 1.8730919361114502, 1.4043059349060059, 1.1034152507781982, 0.9590128660202026, 0.8580186367034912, 0.7917526364326477, 0.7393900156021118, 0.7119037508964539, 0.6681867837905884, 0.654260516166687, 0.626366913318634, 0.6088931560516357, 0.5933977961540222, 0.5751916170120239, 0.5561109185218811, 0.5445863604545593, 0.5331082344055176, 0.5221191644668579, 0.5145342350006104, 0.505846381187439, 0.49889859557151794, 0.48599037528038025, 0.47918251156806946, 0.46499377489089966, 0.4688813388347626, 0.45636677742004395, 0.4487901031970978, 0.4370356500148773, 0.43263188004493713, 0.4311348795890808, 0.42324504256248474, 0.4168384075164795, 0.4092148244380951, 0.40154871344566345, 0.39715099334716797, 0.3926520347595215, 0.3895566761493683, 0.3850351572036743, 0.3762838840484619, 0.37576431035995483, 0.3705906867980957, 0.3691062033176422, 0.3602929711341858, 0.3520040810108185, 0.34948864579200745, 0.3444797098636627, 0.3367767632007599, 0.3271093964576721, 0.3340802788734436, 0.3318614959716797, 0.3231094777584076, 0.31255272030830383], "accuracy": [0.2731475234031677, 0.4823669195175171, 0.5560691952705383, 0.6118082404136658, 0.6534143686294556, 0.6907938122749329, 0.7141724824905396, 0.7343811988830566, 0.7388719916343689, 0.754589855670929, 0.7581561207771301, 0.772288978099823, 0.7775723338127136, 0.7812706232070923, 0.7932901978492737, 0.7981772422790527, 0.8030643463134766, 0.8075551390647888, 0.8140271902084351, 0.8140271902084351, 0.8149517774581909, 0.8222163319587708, 0.8317263126373291, 0.8285563588142395, 0.8321225643157959, 0.8272355198860168, 0.8343679904937744, 0.8404437899589539, 0.8430854678153992, 0.846387505531311, 0.8466516733169556, 0.8499537706375122, 0.8543124794960022, 0.8565579056739807, 0.8525954484939575, 0.857218325138092, 0.8599920868873596, 0.8601241707801819, 0.8585391640663147, 0.8681812286376953, 0.8665962219238281, 0.8640866279602051, 0.8676528930664062, 0.8728041052818298, 0.8772949576377869, 0.8758420348167419, 0.8754457831382751, 0.8757099509239197, 0.883238673210144, 0.8803328275680542, 0.8775591254234314, 0.8821820020675659, 0.8862766027450562], "val_loss": [2.0386526584625244, 1.5114190578460693, 1.0280160903930664, 0.8176845908164978, 0.721250593662262, 0.6716954112052917, 0.628859281539917, 0.5962778925895691, 0.5689937472343445, 0.5489909052848816, 0.5385060906410217, 0.519190788269043, 0.5051367878913879, 0.49543291330337524, 0.4856923520565033, 0.47705337405204773, 0.4695345163345337, 0.4566234052181244, 0.4499637186527252, 0.4430491030216217, 0.4404820501804352, 0.4370780289173126, 0.42539408802986145, 0.4191831052303314, 0.41689130663871765, 0.4110136032104492, 0.4091099798679352, 0.4058820903301239, 0.3975922465324402, 0.39341071248054504, 0.38816893100738525, 0.386303186416626, 0.37913623452186584, 0.37806519865989685, 0.3732445538043976, 0.3728994131088257, 0.3725210428237915, 0.36956554651260376, 0.36494091153144836, 0.3605174422264099, 0.3630498945713043, 0.35315823554992676, 0.3550015985965729, 0.3521689772605896, 0.3489459753036499, 0.34601160883903503, 0.35056477785110474, 0.3449779450893402, 0.3449574410915375, 0.3495716154575348, 0.3371227979660034, 0.3383830785751343, 0.3388245105743408], "val_accuracy": [0.5323333144187927, 0.6756666898727417, 0.6943333148956299, 0.721666693687439, 0.7476666569709778, 0.7603333592414856, 0.7716666460037231, 0.7776666879653931, 0.7876666784286499, 0.7943333387374878, 0.79666668176651, 0.8046666383743286, 0.809333324432373, 0.8130000233650208, 0.8186666369438171, 0.8240000009536743, 0.8286666870117188, 0.8373333215713501, 0.8389999866485596, 0.8456666469573975, 0.8413333296775818, 0.8420000076293945, 0.8493333458900452, 0.8510000109672546, 0.8546666502952576, 0.8536666631698608, 0.8529999852180481, 0.8579999804496765, 0.8579999804496765, 0.8629999756813049, 0.8636666536331177, 0.8646666407585144, 0.8656666874885559, 0.8636666536331177, 0.8673333525657654, 0.8669999837875366, 0.8659999966621399, 0.8690000176429749, 0.871999979019165, 0.8713333606719971, 0.8669999837875366, 0.8736666440963745, 0.871999979019165, 0.8733333349227905, 0.878333330154419, 0.8740000128746033, 0.8713333606719971, 0.8790000081062317, 0.8740000128746033, 0.875, 0.8790000081062317, 0.8773333430290222, 0.878000020980835]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 1, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 5, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 1, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta)), grad), tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.square(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, grad)), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))))", "other_info": {"loss": [2.3036129474639893, 2.302584648132324, 2.302584409713745, 2.302584409713745, 2.302584409713745, 2.302584648132324, 2.302584648132324, 2.302584648132324], "accuracy": [0.10460969805717468, 0.10381719470024109, 0.10553427785634995, 0.10302469879388809, 0.10500594228506088, 0.10606260597705841, 0.10394927859306335, 0.10593052208423615], "val_loss": [2.3025853633880615, 2.3025848865509033, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025851249694824, 2.3025851249694824, 2.3025853633880615], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 0, 9], [0, 3, 0, 3], [16, 16, 46], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 98, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 9, 6, 3, 3, 2, 1, 1, 0, 18, 9, 9, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(sigma, tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)), alpha))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 1, 5], [0, 2, 0, 3], [16, 16], [1, 1], [3], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [6, 3, 3, 6, 2, 1, 4, 1, 4, 2, 2, 4, 2, 0, 1, 4, 1, 7, 2, 4, 4, 8, 6, 6, 4, 7, 2, 8, 0, 4, 7, 6, 3, 7, 3, 8, 0, 8, 6, 7, 7, 7, 2, 4, 2, 5, 2, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 7, 5, 2, 7, 0, 1, 3, 1, 4, 2, 2, 6, 3, 1, 4, 0, 0, 5, 1, 6, 7, 6, 6, 1, 0, 0, 5, 5, 3], [16, 99, 21, 99, 61, 1, 25, 76, 85, 29, 44, 54]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(sigma, alpha), tf.math.negative(tf.math.subtract(tf.math.pow(tf.math.subtract(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(grad, grad)), tf.math.add(tf.math.pow(beta, grad), tf.math.pow(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.math.pow(tf.math.add(sigma, alpha), grad)), beta)))))))), tf.math.add(tf.math.sqrt(tf.math.negative(tf.math.pow(tf.math.add(beta, grad), sigma))), tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.negative(grad)), tf.math.sqrt(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), grad))), alpha))), grad)), tf.math.divide_no_nan(tf.math.add(grad, grad), tf.math.add(tf.math.add(grad, alpha), tf.math.add(tf.math.pow(tf.math.add(tf.math.square(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), grad)), grad), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}, "mapping_values": [1, 2, 1, 1, 1, 10, 6, 4, 2, 1, 0, 1, 1, 87, 48, 39, 12], "tree_depth": 41}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 2, 0, 2], [2, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 8], [0, 2, 0, 0], [16, 16, 70], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1], [6, 2, 3, 6, 8, 1, 4, 1, 6, 2, 8, 2, 3, 7, 9, 6, 9, 9, 4, 7, 2, 3, 7, 4, 3, 2, 9, 4, 6, 9, 6, 7, 2, 3, 4, 6, 2, 1, 5, 5, 9, 4, 8, 0, 4, 6, 8, 1, 2, 6, 2, 1, 0, 1, 3, 2, 0, 1, 5, 7, 1, 7, 4, 5, 6, 6, 1, 9, 1, 7, 5, 3, 5, 2, 6, 8, 8, 5, 8], [0, 0, 0, 3, 4, 0, 4, 1, 2, 3, 4, 2, 4, 0, 4, 1, 7, 7, 3, 6, 5, 3, 1, 3, 1, 1, 1, 7, 5, 6, 0, 2, 7, 4, 4, 1, 4, 5, 3, 4, 2, 6, 7, 1, 1, 4, 7, 0, 1], [16, 99, 96, 99, 61, 1, 31, 72, 95, 8, 74, 28, 48, 16]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 3, 2, 1, 1, 1, 128, 79, 49, 14], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.subtract(tf.math.divide_no_nan(sigma, tf.math.add(grad, tf.constant(1.0, shape=shape, dtype=tf.float32))), grad), tf.math.sqrt(tf.math.add(tf.math.multiply(alpha, beta), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))))), sigma), tf.math.pow(tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(tf.math.pow(grad, beta), tf.math.multiply(grad, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.divide_no_nan(grad, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), alpha))), tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.math.multiply(tf.math.pow(tf.math.divide_no_nan(grad, grad), tf.math.add(tf.math.subtract(tf.math.square(sigma), grad), grad)), sigma), tf.math.square(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.sqrt(tf.math.negative(tf.math.pow(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.subtract(alpha, alpha)), alpha)), grad)), grad), grad))), tf.math.negative(tf.math.subtract(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.subtract(grad, grad))), tf.math.square(tf.math.add(grad, alpha))))))), grad)), tf.math.subtract(tf.math.add(tf.math.pow(tf.math.square(tf.math.divide_no_nan(grad, sigma)), tf.math.divide_no_nan(grad, tf.math.subtract(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.subtract(tf.math.add(grad, tf.math.square(tf.math.multiply(tf.math.square(alpha), tf.math.add(alpha, grad)))), tf.math.divide_no_nan(grad, tf.math.sqrt(tf.math.sqrt(tf.math.square(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))))))), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}]