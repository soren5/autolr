[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8822857141494751, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585750579834, 1.8655762672424316, 1.394430160522461, 1.0773245096206665, 0.9378393888473511, 0.8425824046134949, 0.7776632308959961, 0.736241340637207, 0.6971188187599182, 0.6732122302055359, 0.644855797290802, 0.6276965141296387, 0.6100340485572815, 0.5899673104286194, 0.5746485590934753, 0.5484329462051392, 0.5425268411636353, 0.5357900857925415, 0.5214410424232483, 0.5127171874046326, 0.4895091950893402, 0.4932740032672882, 0.48551443219184875, 0.47113916277885437, 0.46571049094200134, 0.450914591550827, 0.438728004693985, 0.4414178729057312, 0.4245515465736389, 0.4182806611061096, 0.4126766324043274, 0.41352686285972595, 0.4031256139278412, 0.40064555406570435, 0.3982388377189636, 0.38566267490386963, 0.38400527834892273, 0.3741128146648407, 0.36422181129455566, 0.36170411109924316, 0.35991787910461426, 0.35666367411613464, 0.3521813750267029, 0.34583958983421326, 0.34736087918281555, 0.34181836247444153, 0.33650368452072144, 0.33141741156578064, 0.3230496346950531, 0.3225416839122772, 0.315096914768219, 0.3059031665325165, 0.3058394491672516, 0.3017319440841675, 0.29568877816200256, 0.2933836281299591, 0.28774771094322205, 0.2856961190700531, 0.2802303731441498, 0.2779994010925293, 0.274711549282074, 0.2719985842704773, 0.2586328387260437, 0.2598455548286438, 0.2622571289539337, 0.25739434361457825, 0.2502012252807617, 0.2544722855091095, 0.24556587636470795, 0.24580754339694977, 0.23948103189468384, 0.23949603736400604, 0.23484042286872864, 0.22871272265911102, 0.2256491780281067, 0.22479403018951416, 0.21744707226753235, 0.21390178799629211, 0.21272219717502594], "accuracy": [0.2785629332065582, 0.49451854825019836, 0.559899628162384, 0.6215823292732239, 0.6654338836669922, 0.6950204968452454, 0.7181349992752075, 0.7322678565979004, 0.7441553473472595, 0.7483819723129272, 0.7627789974212646, 0.7717606425285339, 0.7728173136711121, 0.78113853931427, 0.7882710099220276, 0.7993659973144531, 0.7976489067077637, 0.8074230551719666, 0.8128384351730347, 0.8198388814926147, 0.8212917447090149, 0.819970965385437, 0.8272355198860168, 0.8350284099578857, 0.8305375576019287, 0.8387266993522644, 0.846387505531311, 0.8433496356010437, 0.8504821062088013, 0.8524633646011353, 0.8535200357437134, 0.854708731174469, 0.856689989566803, 0.8551049828529358, 0.8593316674232483, 0.8615770936012268, 0.8628978729248047, 0.8702945709228516, 0.8691058158874512, 0.871879518032074, 0.8722757697105408, 0.8691058158874512, 0.8733324408531189, 0.8800686597824097, 0.8795403242111206, 0.8755778670310974, 0.8768987059593201, 0.8829745054244995, 0.8824461698532104, 0.8823140859603882, 0.887201189994812, 0.8897107243537903, 0.8889182209968567, 0.8927486538887024, 0.8902390599250793, 0.8953903317451477, 0.8980319499969482, 0.8976356983184814, 0.900409460067749, 0.89552241563797, 0.9025228023529053, 0.8989565372467041, 0.9056927561759949, 0.9085986018180847, 0.9030511379241943, 0.9066173434257507, 0.9101836085319519, 0.9083344340324402, 0.909259021282196, 0.9099194407463074, 0.9126931428909302, 0.9140139818191528, 0.9119006991386414, 0.9171839952468872, 0.9169198274612427, 0.9185048341751099, 0.9218068718910217, 0.9185048341751099, 0.9196935892105103], "val_loss": [2.033445358276367, 1.5042319297790527, 1.0271512269973755, 0.8147247433662415, 0.7278039455413818, 0.68117356300354, 0.6306353211402893, 0.5966841578483582, 0.5751398801803589, 0.5460951328277588, 0.5314993858337402, 0.509799063205719, 0.4957965612411499, 0.4792602062225342, 0.46671679615974426, 0.45267683267593384, 0.4441072940826416, 0.4356139600276947, 0.42943108081817627, 0.4255247414112091, 0.41811680793762207, 0.4163394272327423, 0.39929893612861633, 0.3969916105270386, 0.39089226722717285, 0.387652188539505, 0.3844633102416992, 0.3824205696582794, 0.3749690353870392, 0.3701930642127991, 0.36967378854751587, 0.36689504981040955, 0.3585263788700104, 0.3587398827075958, 0.36267170310020447, 0.3561091423034668, 0.35379692912101746, 0.3499273955821991, 0.34701839089393616, 0.3467637896537781, 0.3424672484397888, 0.33951225876808167, 0.3386255204677582, 0.34044384956359863, 0.33945050835609436, 0.33684298396110535, 0.3322163224220276, 0.33181649446487427, 0.32827115058898926, 0.3312568664550781, 0.3297465741634369, 0.3256674110889435, 0.3234780728816986, 0.32119208574295044, 0.3232716917991638, 0.3209094703197479, 0.31944912672042847, 0.3157532513141632, 0.3144265413284302, 0.31676045060157776, 0.31425556540489197, 0.3131799101829529, 0.3147056996822357, 0.3154993951320648, 0.31771615147590637, 0.31545644998550415, 0.3127000629901886, 0.31382524967193604, 0.31026333570480347, 0.3147730529308319, 0.30829918384552, 0.3107443153858185, 0.31316936016082764, 0.30297672748565674, 0.30325081944465637, 0.30436232686042786, 0.3072424829006195, 0.30681705474853516, 0.3061434030532837], "val_accuracy": [0.5526666641235352, 0.6666666865348816, 0.687333345413208, 0.7083333134651184, 0.731333315372467, 0.7446666955947876, 0.7606666684150696, 0.762666642665863, 0.7873333096504211, 0.7889999747276306, 0.7973333597183228, 0.8056666851043701, 0.8193333148956299, 0.8259999752044678, 0.8289999961853027, 0.8410000205039978, 0.8453333377838135, 0.8450000286102295, 0.8489999771118164, 0.847000002861023, 0.8516666889190674, 0.856333315372467, 0.859333336353302, 0.856333315372467, 0.8633333444595337, 0.8640000224113464, 0.8656666874885559, 0.8646666407585144, 0.8679999709129333, 0.8696666955947876, 0.8640000224113464, 0.8686666488647461, 0.8713333606719971, 0.8709999918937683, 0.8703333139419556, 0.8723333477973938, 0.871999979019165, 0.874666690826416, 0.8723333477973938, 0.8759999871253967, 0.8726666569709778, 0.875333309173584, 0.8790000081062317, 0.8756666779518127, 0.8726666569709778, 0.8769999742507935, 0.8796666860580444, 0.8796666860580444, 0.8806666731834412, 0.8793333172798157, 0.8813333511352539, 0.8840000033378601, 0.8840000033378601, 0.8843333125114441, 0.8809999823570251, 0.8856666684150696, 0.8866666555404663, 0.8833333253860474, 0.8866666555404663, 0.8843333125114441, 0.8856666684150696, 0.8880000114440918, 0.887333333492279, 0.8883333206176758, 0.8866666555404663, 0.8896666765213013, 0.8863333463668823, 0.8853333592414856, 0.890999972820282, 0.8870000243186951, 0.8883333206176758, 0.8883333206176758, 0.8916666507720947, 0.8939999938011169, 0.8896666765213013, 0.8916666507720947, 0.890999972820282, 0.8926666378974915, 0.8913333415985107]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8631428480148315, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2215816974639893, 1.863336443901062, 1.3962550163269043, 1.0911539793014526, 0.9393184185028076, 0.8358971476554871, 0.7734558582305908, 0.7311856746673584, 0.6832141280174255, 0.6570642590522766, 0.6259638071060181, 0.6036714911460876, 0.5914697051048279, 0.5649924874305725, 0.5592458844184875, 0.5448251962661743, 0.5360029339790344, 0.5135883688926697, 0.5142489075660706, 0.497037798166275, 0.48815813660621643, 0.4826658368110657, 0.4712069034576416, 0.4543921649456024, 0.45743700861930847, 0.4445074200630188, 0.43643224239349365, 0.4261879324913025, 0.4274176061153412, 0.4195379316806793, 0.4179556369781494, 0.40274202823638916, 0.3975701332092285, 0.39230188727378845, 0.3921893537044525, 0.38093310594558716, 0.3787704408168793, 0.3771052658557892, 0.3604086935520172, 0.3643341660499573, 0.35879191756248474, 0.3531733751296997, 0.34867918491363525, 0.3478884696960449, 0.34170663356781006, 0.33636659383773804, 0.33235040307044983, 0.32555145025253296, 0.32821762561798096, 0.31614795327186584, 0.30889615416526794, 0.3115302324295044, 0.30293765664100647, 0.3008182644844055, 0.293561190366745, 0.2840013802051544, 0.2908916473388672, 0.2784689962863922, 0.27614322304725647, 0.27796733379364014, 0.2822211682796478, 0.2700158655643463, 0.26300695538520813, 0.2619403302669525, 0.2591652274131775, 0.2540189027786255, 0.24722938239574432, 0.24626709520816803, 0.24099065363407135, 0.2392737865447998, 0.24214787781238556, 0.2337472289800644, 0.2269895076751709, 0.2294735312461853, 0.2210218906402588, 0.22098997235298157, 0.20819585025310516, 0.21126051247119904, 0.2073603868484497, 0.2114257514476776, 0.20439030230045319, 0.19733792543411255, 0.1980368196964264, 0.1924353837966919, 0.19656793773174286, 0.19115132093429565], "accuracy": [0.2635054886341095, 0.4917448163032532, 0.5602958798408508, 0.6151102781295776, 0.6619997620582581, 0.703209638595581, 0.718399167060852, 0.7360982894897461, 0.7500990629196167, 0.7622507214546204, 0.7664773464202881, 0.7823272943496704, 0.7845727205276489, 0.7891955971717834, 0.7872143983840942, 0.7969884872436523, 0.8072909712791443, 0.8115176558494568, 0.8131026029586792, 0.8235371708869934, 0.8212917447090149, 0.8222163319587708, 0.8296129703521729, 0.8362171649932861, 0.8337075710296631, 0.8399154543876648, 0.8400475382804871, 0.8455950617790222, 0.8454629778862, 0.8506141901016235, 0.846387505531311, 0.8595958352088928, 0.8558974862098694, 0.8589354157447815, 0.8590674996376038, 0.8619733452796936, 0.8648791313171387, 0.8628978729248047, 0.8720116019248962, 0.8665962219238281, 0.8709549307823181, 0.8755778670310974, 0.8742570281028748, 0.8710870146751404, 0.8750495314598083, 0.8804649114608765, 0.8815215826034546, 0.8772949576377869, 0.8787478804588318, 0.885219931602478, 0.8870691061019897, 0.8902390599250793, 0.8889182209968567, 0.8887861371040344, 0.8924844861030579, 0.897899866104126, 0.8938053250312805, 0.8993527889251709, 0.8975036144256592, 0.8960506916046143, 0.8988244533538818, 0.9006736278533936, 0.9037115573883057, 0.9066173434257507, 0.9059569239616394, 0.9049002528190613, 0.9075419306755066, 0.9071456789970398, 0.9146744012832642, 0.9129573106765747, 0.91124027967453, 0.9146744012832642, 0.9173160791397095, 0.915070652961731, 0.9190331697463989, 0.9154669046401978, 0.9237881302833557, 0.9222031235694885, 0.9224672913551331, 0.9241843819618225, 0.9262977242469788, 0.9261656403541565, 0.9257693886756897, 0.9313168525695801, 0.926429808139801, 0.9299960136413574], "val_loss": [2.038135051727295, 1.5217986106872559, 1.0501631498336792, 0.8439664840698242, 0.7518262267112732, 0.6910651326179504, 0.6469392776489258, 0.6159974932670593, 0.5848158597946167, 0.5603974461555481, 0.5399659276008606, 0.5247952342033386, 0.5120204091072083, 0.5027909278869629, 0.4882131814956665, 0.4809376299381256, 0.4663764238357544, 0.4630369544029236, 0.45360010862350464, 0.44823405146598816, 0.44617748260498047, 0.4414198100566864, 0.431490033864975, 0.42397770285606384, 0.41896069049835205, 0.4102596044540405, 0.40760087966918945, 0.4102391004562378, 0.4013766944408417, 0.39581868052482605, 0.3934618830680847, 0.3888513147830963, 0.38814598321914673, 0.38542553782463074, 0.3822288513183594, 0.37603533267974854, 0.3777766227722168, 0.3730407655239105, 0.3722843527793884, 0.37217387557029724, 0.36513835191726685, 0.36824503540992737, 0.36671993136405945, 0.35765165090560913, 0.36457693576812744, 0.35763880610466003, 0.3546138405799866, 0.3513588011264801, 0.3557247817516327, 0.35143807530403137, 0.3538816273212433, 0.34299689531326294, 0.3468894064426422, 0.3397277593612671, 0.34246402978897095, 0.3407432734966278, 0.3361067771911621, 0.3368414640426636, 0.3440096378326416, 0.3344297707080841, 0.33523768186569214, 0.3364472985267639, 0.33563050627708435, 0.33086687326431274, 0.32726702094078064, 0.32618799805641174, 0.3282450735569, 0.33025217056274414, 0.3261653184890747, 0.32765987515449524, 0.3295678198337555, 0.32718509435653687, 0.33053478598594666, 0.3248085677623749, 0.3235684931278229, 0.3197421729564667, 0.32579943537712097, 0.32085856795310974, 0.32349467277526855, 0.3282368779182434, 0.3211168646812439, 0.32287275791168213, 0.3188333511352539, 0.3215377628803253, 0.3261309266090393, 0.3220832049846649], "val_accuracy": [0.5543333292007446, 0.6453333497047424, 0.6706666946411133, 0.6986666917800903, 0.7200000286102295, 0.734333336353302, 0.7536666393280029, 0.7683333158493042, 0.7743333578109741, 0.7886666655540466, 0.7950000166893005, 0.8053333163261414, 0.8103333115577698, 0.8103333115577698, 0.8196666836738586, 0.8209999799728394, 0.8293333053588867, 0.8293333053588867, 0.8326666951179504, 0.8366666436195374, 0.8389999866485596, 0.8326666951179504, 0.8426666855812073, 0.8396666646003723, 0.8479999899864197, 0.8500000238418579, 0.8536666631698608, 0.8526666760444641, 0.8553333282470703, 0.8519999980926514, 0.8536666631698608, 0.856333315372467, 0.8633333444595337, 0.8586666584014893, 0.8573333621025085, 0.8566666841506958, 0.8646666407585144, 0.8640000224113464, 0.8600000143051147, 0.8616666793823242, 0.8669999837875366, 0.8659999966621399, 0.8663333058357239, 0.8696666955947876, 0.8636666536331177, 0.871666669845581, 0.871999979019165, 0.8733333349227905, 0.8693333268165588, 0.8706666827201843, 0.8730000257492065, 0.8763333559036255, 0.871999979019165, 0.8756666779518127, 0.8740000128746033, 0.875, 0.8769999742507935, 0.8740000128746033, 0.875, 0.8756666779518127, 0.878000020980835, 0.8769999742507935, 0.8773333430290222, 0.8799999952316284, 0.8799999952316284, 0.8809999823570251, 0.8820000290870667, 0.8806666731834412, 0.8806666731834412, 0.8820000290870667, 0.8763333559036255, 0.8830000162124634, 0.8820000290870667, 0.8823333382606506, 0.8836666941642761, 0.8856666684150696, 0.8853333592414856, 0.8833333253860474, 0.8823333382606506, 0.8826666474342346, 0.8886666893959045, 0.8840000033378601, 0.8866666555404663, 0.8886666893959045, 0.887666642665863, 0.8846666812896729]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 9], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [8, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 2, 5], [2, 0, 0, 3, 0, 0, 3, 1, 2, 0, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 5, 2, 2, 10, 6, 4, 2, 2, 1, 1, 1, 24, 13, 11, 6], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(sigma)), tf.math.add(alpha, beta))))), tf.math.square(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 2, 3, 2, 3, 0], [0, 1, 0, 2, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 3, 3, 3], [16, 45], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 8, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 7]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.negative(alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 4, 6, 0, 3], [0, 1, 0, 2], [39, 75], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 2], [0, 3, 2, 3], [7, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 1, 9, 9, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4], [16, 99, 96, 99, 61, 1, 45, 94]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 2, 1, 1, 1, 2, 1, 1, 1, 23, 15, 8, 8], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), sigma)), alpha))), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [6, 2, 3, 0, 3, 0], [0, 1, 0, 0, 2], [39, 17, 59], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 3, 3, 5], [0, 2, 2, 3], [8, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 2, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 17, 61, 85]], "fitness": -0.09885714203119278, "mapping_values": [1, 11, 6, 5, 3, 2, 1, 1, 1, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.514926770225152e+16, 6.647612941795328e+17, 2.4556646626377073e+19, 9.725271193727453e+21, 3.1941938163256186e+24, 8.969380293443395e+26], "accuracy": [0.10579843819141388, 0.11068551242351532, 0.10434553027153015, 0.10328886657953262, 0.10302469879388809, 0.10236428678035736], "val_loss": [1.1825854865106534e+17, 2.05652613627537e+18, 2.4778731262611082e+20, 8.781100539048484e+22, 2.9666692537853253e+25, 9.911516461330161e+27], "val_accuracy": [0.10133333504199982, 0.09833333641290665, 0.09200000017881393, 0.09200000017881393, 0.09266666322946548, 0.09300000220537186]}}]