[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8811428546905518, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2237746715545654, 1.8723686933517456, 1.3995952606201172, 1.0951578617095947, 0.9308109879493713, 0.8378576636314392, 0.7867980003356934, 0.7403825521469116, 0.7074968218803406, 0.6667766571044922, 0.6467143297195435, 0.6252685785293579, 0.6010545492172241, 0.592832088470459, 0.5694352388381958, 0.5546401739120483, 0.5457968711853027, 0.5263527035713196, 0.5090768933296204, 0.5048046112060547, 0.4915485680103302, 0.4950409531593323, 0.48390650749206543, 0.4653860628604889, 0.45890092849731445, 0.4539474546909332, 0.45054811239242554, 0.4434168338775635, 0.4299618601799011, 0.42732325196266174, 0.42083144187927246, 0.41875892877578735, 0.4139094650745392, 0.40237316489219666, 0.3879244327545166, 0.38828617334365845, 0.3872472941875458, 0.38174712657928467, 0.37753409147262573, 0.37368708848953247, 0.3667537569999695, 0.3609304130077362, 0.3514280617237091, 0.3454590141773224, 0.34209492802619934, 0.3294583857059479, 0.32658490538597107, 0.3237888813018799, 0.32169947028160095, 0.32040613889694214, 0.31856244802474976, 0.3111935555934906, 0.3040423095226288, 0.3039085268974304, 0.29984933137893677, 0.29860955476760864, 0.28763389587402344, 0.28644928336143494, 0.2838956117630005, 0.28346431255340576, 0.28013065457344055, 0.2724190354347229, 0.27310502529144287], "accuracy": [0.27420419454574585, 0.48051777482032776, 0.5654470920562744, 0.6198652982711792, 0.6709813475608826, 0.7000396251678467, 0.7174745798110962, 0.7283053994178772, 0.7400607466697693, 0.7589486241340637, 0.7675340175628662, 0.774798572063446, 0.7807422876358032, 0.7844406366348267, 0.793422281742096, 0.7984414100646973, 0.8030643463134766, 0.8128384351730347, 0.8185180425643921, 0.8169330358505249, 0.8182538747787476, 0.8228767514228821, 0.8251221776008606, 0.8399154543876648, 0.8416325449943542, 0.8403117060661316, 0.837537944316864, 0.8465195894241333, 0.8466516733169556, 0.8490291833877563, 0.8502179384231567, 0.8535200357437134, 0.8474441766738892, 0.858671247959137, 0.8619733452796936, 0.8652753829956055, 0.8643507957458496, 0.8625016212463379, 0.8665962219238281, 0.8665962219238281, 0.8704266548156738, 0.8721436858177185, 0.8747853636741638, 0.8749174475669861, 0.8805969953536987, 0.8824461698532104, 0.8840311765670776, 0.8821820020675659, 0.8858803510665894, 0.8850878477096558, 0.8824461698532104, 0.8881257176399231, 0.8928807377815247, 0.8902390599250793, 0.8939374089241028, 0.89552241563797, 0.8973715305328369, 0.8942015767097473, 0.89988112449646, 0.8997490406036377, 0.8969752788543701, 0.9014661312103271, 0.9029190540313721], "val_loss": [2.037389039993286, 1.511842966079712, 1.0359350442886353, 0.8279245495796204, 0.7450146675109863, 0.6904571652412415, 0.6491749286651611, 0.6089303493499756, 0.584378719329834, 0.558230996131897, 0.5482743382453918, 0.526901125907898, 0.5176275968551636, 0.49789905548095703, 0.48785078525543213, 0.4802698493003845, 0.4741758704185486, 0.4558241367340088, 0.446842759847641, 0.4397415220737457, 0.43689489364624023, 0.43105411529541016, 0.42206501960754395, 0.41691854596138, 0.41364946961402893, 0.4036501348018646, 0.4026815593242645, 0.40334782004356384, 0.3973897397518158, 0.3922448456287384, 0.386177659034729, 0.3828100562095642, 0.3804466128349304, 0.3790411651134491, 0.37225663661956787, 0.3669360876083374, 0.36680835485458374, 0.3673231899738312, 0.3597688376903534, 0.35926786065101624, 0.36098331212997437, 0.35272863507270813, 0.3481261432170868, 0.3572690486907959, 0.34953010082244873, 0.34897640347480774, 0.3506835401058197, 0.34860289096832275, 0.34379568696022034, 0.3427906930446625, 0.34296849370002747, 0.3384943902492523, 0.33897867798805237, 0.33991867303848267, 0.338674932718277, 0.3346634805202484, 0.3385751247406006, 0.33232465386390686, 0.332682728767395, 0.3382399082183838, 0.3326888978481293, 0.3314237594604492, 0.3316805958747864], "val_accuracy": [0.5120000243186951, 0.6606666445732117, 0.6880000233650208, 0.7093333601951599, 0.7293333411216736, 0.7519999742507935, 0.762333333492279, 0.7699999809265137, 0.7879999876022339, 0.7946666479110718, 0.7926666736602783, 0.8096666932106018, 0.8113333582878113, 0.8176666498184204, 0.8233333230018616, 0.8213333487510681, 0.824999988079071, 0.8360000252723694, 0.8379999995231628, 0.8379999995231628, 0.8423333168029785, 0.8443333506584167, 0.8483333587646484, 0.8460000157356262, 0.8496666550636292, 0.8569999933242798, 0.8519999980926514, 0.8516666889190674, 0.8583333492279053, 0.8550000190734863, 0.856333315372467, 0.8610000014305115, 0.859000027179718, 0.8640000224113464, 0.8629999756813049, 0.8646666407585144, 0.8676666617393494, 0.8656666874885559, 0.8673333525657654, 0.8650000095367432, 0.8700000047683716, 0.8713333606719971, 0.8730000257492065, 0.8696666955947876, 0.8726666569709778, 0.8733333349227905, 0.8726666569709778, 0.8736666440963745, 0.8726666569709778, 0.8730000257492065, 0.8740000128746033, 0.8790000081062317, 0.878333330154419, 0.878333330154419, 0.8776666522026062, 0.878000020980835, 0.8793333172798157, 0.8846666812896729, 0.8759999871253967, 0.8769999742507935, 0.8823333382606506, 0.878333330154419, 0.8826666474342346]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8668571710586548, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2233622074127197, 1.8718734979629517, 1.3911370038986206, 1.0917860269546509, 0.9365600943565369, 0.8460038304328918, 0.7720504403114319, 0.7310457229614258, 0.6932499408721924, 0.6522526741027832, 0.6388788819313049, 0.6159142255783081, 0.5997139811515808, 0.5737948417663574, 0.5622641444206238, 0.5456482768058777, 0.5292800068855286, 0.5176324248313904, 0.5118393301963806, 0.49537476897239685, 0.4885101020336151, 0.48488977551460266, 0.46590399742126465, 0.4632169008255005, 0.4596253037452698, 0.45285364985466003, 0.4399159848690033, 0.4330626130104065, 0.4281321167945862, 0.4161171019077301, 0.4134441912174225, 0.4018535912036896, 0.3959256410598755, 0.3863648772239685, 0.3831031918525696, 0.37704581022262573, 0.37612488865852356, 0.36749720573425293, 0.3646541237831116, 0.3651699721813202, 0.35443076491355896, 0.3420921564102173, 0.34706008434295654, 0.34239333868026733, 0.33377310633659363, 0.32842767238616943, 0.3191694915294647, 0.32488465309143066, 0.3135111331939697, 0.3136102557182312, 0.3120889961719513, 0.3045773506164551], "accuracy": [0.27605336904525757, 0.48831066489219666, 0.5620129704475403, 0.6176198720932007, 0.6637167930603027, 0.6968696117401123, 0.7174745798110962, 0.7317395210266113, 0.743891179561615, 0.7588165402412415, 0.7689869403839111, 0.7763835787773132, 0.7778365015983582, 0.7907806038856506, 0.7964601516723633, 0.7981772422790527, 0.8055738806724548, 0.8152159452438354, 0.81548011302948, 0.8193105459213257, 0.8302733898162842, 0.8290846943855286, 0.8301413059234619, 0.8356888294219971, 0.8368775844573975, 0.8426892161369324, 0.8422929644584656, 0.8496896028518677, 0.8492933511734009, 0.8529917001724243, 0.847840428352356, 0.8540483713150024, 0.8573504090309143, 0.8650112152099609, 0.8646149635314941, 0.8647470474243164, 0.8668603897094727, 0.8671245574951172, 0.8722757697105408, 0.8704266548156738, 0.8745211958885193, 0.8757099509239197, 0.876370370388031, 0.8774270415306091, 0.8841632604598999, 0.8854840993881226, 0.8848236799240112, 0.8848236799240112, 0.8874653577804565, 0.8857482671737671, 0.8903711438179016, 0.8897107243537903], "val_loss": [2.037087917327881, 1.5153372287750244, 1.042737364768982, 0.8430269360542297, 0.7496212720870972, 0.6969645023345947, 0.6454806327819824, 0.614739716053009, 0.586786150932312, 0.5641095638275146, 0.5442538857460022, 0.5385273694992065, 0.5165882110595703, 0.503054141998291, 0.4933587908744812, 0.48570162057876587, 0.4716012477874756, 0.4628622233867645, 0.46368539333343506, 0.4514169991016388, 0.4461434781551361, 0.435146689414978, 0.4325518310070038, 0.43059998750686646, 0.4268999397754669, 0.42001888155937195, 0.40811723470687866, 0.40804794430732727, 0.40408673882484436, 0.40509381890296936, 0.3955305218696594, 0.39088162779808044, 0.38478755950927734, 0.38579612970352173, 0.38348323106765747, 0.3815012276172638, 0.3754723370075226, 0.3720851242542267, 0.3728284537792206, 0.37241610884666443, 0.37196028232574463, 0.3729846179485321, 0.37662744522094727, 0.36265459656715393, 0.36182674765586853, 0.3597885072231293, 0.3573321998119354, 0.3583295941352844, 0.3571334779262543, 0.3537081778049469, 0.3555014729499817, 0.35155245661735535], "val_accuracy": [0.5360000133514404, 0.6660000085830688, 0.6859999895095825, 0.7086666822433472, 0.7310000061988831, 0.7490000128746033, 0.7606666684150696, 0.7746666669845581, 0.784333348274231, 0.7876666784286499, 0.8009999990463257, 0.8013333082199097, 0.8173333406448364, 0.8203333616256714, 0.8203333616256714, 0.8233333230018616, 0.8316666483879089, 0.8366666436195374, 0.8389999866485596, 0.8450000286102295, 0.8426666855812073, 0.8503333330154419, 0.8476666808128357, 0.8553333282470703, 0.8536666631698608, 0.8539999723434448, 0.8579999804496765, 0.8573333621025085, 0.8586666584014893, 0.8576666712760925, 0.8613333106040955, 0.862333357334137, 0.8669999837875366, 0.8659999966621399, 0.8663333058357239, 0.8656666874885559, 0.8700000047683716, 0.8700000047683716, 0.8683333396911621, 0.8693333268165588, 0.8703333139419556, 0.8723333477973938, 0.8686666488647461, 0.8763333559036255, 0.875, 0.8756666779518127, 0.8793333172798157, 0.8776666522026062, 0.8769999742507935, 0.8766666650772095, 0.8766666650772095, 0.8786666393280029]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 0, 2], [39, 62], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [1, 2, 3, 3], [16, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [2, 3, 6, 6, 8, 1, 4, 1, 4, 4, 8, 4, 0, 1, 7, 5, 6, 2, 1, 7, 7, 7, 8, 3, 6, 7, 3, 3, 2, 6, 4, 5, 2, 3, 0, 1, 9, 5, 7], [0, 0, 4, 3, 0, 0, 3, 1, 2, 0, 3, 0, 7, 6, 1, 4, 1, 0, 3, 7, 5, 7, 2, 5, 1, 7, 4, 1, 4, 7], [16, 99, 96, 99, 61, 1, 89, 3]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 1, 0, 1, 0, 2, 1, 1, 0, 69, 39, 30, 8], "tree_depth": 30, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(grad, tf.math.pow(sigma, tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), sigma))), tf.math.sqrt(tf.math.pow(alpha, beta)))), tf.math.negative(tf.math.subtract(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.divide_no_nan(tf.math.add(grad, tf.math.subtract(tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.sqrt(grad), tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), sigma), grad))))), grad)), tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.divide_no_nan(grad, tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.subtract(grad, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), alpha))), grad)), grad), tf.math.square(tf.math.add(alpha, grad))), grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [1, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 3, 0], [16, 0, 96, 99, 61, 69]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 6, 3, 3, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(sigma), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 9, 0, 0, 3], [0, 1, 0, 2], [39, 63], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 9, 4, 2, 1], [0, 0, 4, 3, 4, 0, 2, 1, 4, 0], [91, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 0, 1, 10, 6, 4, 2, 2, 1, 1, 1, 14, 8, 6, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), grad)), tf.math.subtract(sigma, grad)), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.289785369821048e+26, 1.4557482359417629e+26, 1.4842971549399987e+26, 1.4590692955110732e+26, 1.4460175784428811e+26, 1.4483340283299372e+26], "accuracy": [0.1010434553027153, 0.10738343745470047, 0.09959053993225098, 0.10500594228506088, 0.10421344637870789, 0.10553427785634995], "val_loss": [1.3212451850341152e+26, 1.3165605421428763e+26, 1.3120892358468498e+26, 1.3078063630415363e+26, 1.3037296326012465e+26, 1.2998717727793913e+26], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 2, 3, 8, 2, 4, 3, 5, 5], [0, 1, 0, 2, 1, 0], [39, 39, 70], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 2, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1], [0, 7, 6, 2, 8, 2, 4, 6, 6, 2, 6, 8, 4, 1, 7, 6, 8, 1, 8, 1], [0, 7, 5, 5, 0, 1, 0, 5, 4, 7, 6, 5, 2, 0, 3, 1], [99, 53, 79, 43], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 3, 0, 6, 8, 6, 4, 1, 4, 2, 8], [0, 0, 3, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 85, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 9, 6, 3, 1, 0, 1, 1, 36, 20, 16, 4, 17, 9, 8, 4], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, alpha)), tf.math.square(tf.math.square(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), tf.math.add(tf.math.sqrt(tf.math.add(tf.math.pow(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(grad, tf.math.divide_no_nan(grad, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.pow(tf.math.subtract(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), grad))), grad), tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.subtract(grad, grad)), tf.math.sqrt(tf.math.subtract(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))))), sigma)), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(sigma, sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0956280529499054, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341]}}]