[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.878000020980835, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223759174346924, 1.8681567907333374, 1.3971633911132812, 1.1021500825881958, 0.9438490867614746, 0.8268281817436218, 0.7700234055519104, 0.7182450890541077, 0.6839274764060974, 0.655160665512085, 0.6316797733306885, 0.6046612858772278, 0.586663544178009, 0.5732303261756897, 0.5552444458007812, 0.5382086634635925, 0.5205084085464478, 0.5141545534133911, 0.49866363406181335, 0.4905571937561035, 0.48713892698287964, 0.4630949795246124, 0.46493759751319885, 0.4510720372200012, 0.4456666111946106, 0.4411585330963135, 0.43109801411628723, 0.4194287657737732, 0.41647717356681824, 0.4177640676498413, 0.39898860454559326, 0.3982110619544983, 0.3941095173358917, 0.3838343918323517, 0.38270825147628784, 0.38132011890411377, 0.3706604242324829, 0.3630581796169281, 0.35970449447631836, 0.3585955500602722, 0.3488880693912506, 0.3406795859336853, 0.3434852361679077, 0.34305644035339355, 0.32770219445228577, 0.3274216949939728, 0.3164256513118744, 0.31487780809402466, 0.31453031301498413, 0.3020377457141876, 0.3013147711753845, 0.29238083958625793, 0.30650538206100464, 0.2886098325252533, 0.28784143924713135, 0.28922179341316223, 0.27991431951522827, 0.27731093764305115, 0.27029022574424744, 0.2677718997001648, 0.2672445476055145], "accuracy": [0.27182671427726746, 0.4913485646247864, 0.5609562993049622, 0.6095628142356873, 0.6618676781654358, 0.6997754573822021, 0.7215691208839417, 0.7407211661338806, 0.7508915662765503, 0.7592127919197083, 0.7656848430633545, 0.7798177003860474, 0.7849689722061157, 0.789459764957428, 0.7991018295288086, 0.806630551815033, 0.81112140417099, 0.8088759779930115, 0.8210275769233704, 0.8181217908859253, 0.826310932636261, 0.8333113193511963, 0.8294808864593506, 0.8401796221733093, 0.8409721255302429, 0.8436138033866882, 0.8459912538528442, 0.8519350290298462, 0.8485008478164673, 0.8490291833877563, 0.856689989566803, 0.8573504090309143, 0.8615770936012268, 0.8644828796386719, 0.8605204224586487, 0.8614450097084045, 0.8671245574951172, 0.8726720213890076, 0.8732003569602966, 0.8689737319946289, 0.8762382864952087, 0.8798044919967651, 0.8717474341392517, 0.8825782537460327, 0.8840311765670776, 0.8845595121383667, 0.8885219693183899, 0.8865407705307007, 0.8887861371040344, 0.894069492816925, 0.8918240666389465, 0.8953903317451477, 0.8860124349594116, 0.8988244533538818, 0.8992207050323486, 0.8956544995307922, 0.9014661312103271, 0.89988112449646, 0.900409460067749, 0.9046360850334167, 0.9033153057098389], "val_loss": [2.0386126041412354, 1.5089809894561768, 1.0396978855133057, 0.8277255296707153, 0.7414798736572266, 0.6867381930351257, 0.6452507376670837, 0.6096968054771423, 0.5920496582984924, 0.5695558786392212, 0.550778865814209, 0.5315823554992676, 0.5166425704956055, 0.5040237307548523, 0.4927339255809784, 0.48035380244255066, 0.4752146899700165, 0.4640548527240753, 0.45926037430763245, 0.4498494863510132, 0.44989997148513794, 0.43486902117729187, 0.4302854835987091, 0.42699891328811646, 0.4222937822341919, 0.4179273545742035, 0.4156407117843628, 0.40615877509117126, 0.40567347407341003, 0.40483561158180237, 0.4008205533027649, 0.3957735300064087, 0.3910598158836365, 0.39842313528060913, 0.38378071784973145, 0.3824272155761719, 0.37983548641204834, 0.3832281529903412, 0.37993335723876953, 0.37290528416633606, 0.37028563022613525, 0.3697679340839386, 0.369826078414917, 0.3630952835083008, 0.3613884747028351, 0.3612003028392792, 0.3630628287792206, 0.35836127400398254, 0.35707563161849976, 0.3544061779975891, 0.35439038276672363, 0.35541149973869324, 0.34793493151664734, 0.355723112821579, 0.3566884696483612, 0.3480426073074341, 0.35176366567611694, 0.34468159079551697, 0.3469727337360382, 0.34757280349731445, 0.34379008412361145], "val_accuracy": [0.546999990940094, 0.6536666750907898, 0.6856666803359985, 0.7066666483879089, 0.7366666793823242, 0.7536666393280029, 0.7599999904632568, 0.7720000147819519, 0.7706666588783264, 0.7926666736602783, 0.7963333129882812, 0.7956666946411133, 0.8103333115577698, 0.809333324432373, 0.8220000267028809, 0.8226666450500488, 0.8243333101272583, 0.8330000042915344, 0.8349999785423279, 0.8370000123977661, 0.8333333134651184, 0.8429999947547913, 0.8463333249092102, 0.8446666598320007, 0.8476666808128357, 0.8479999899864197, 0.8450000286102295, 0.8506666421890259, 0.8496666550636292, 0.8529999852180481, 0.8556666374206543, 0.8556666374206543, 0.8586666584014893, 0.8526666760444641, 0.8576666712760925, 0.8610000014305115, 0.859000027179718, 0.8616666793823242, 0.8653333187103271, 0.8673333525657654, 0.8673333525657654, 0.8659999966621399, 0.8693333268165588, 0.8690000176429749, 0.8726666569709778, 0.8726666569709778, 0.8740000128746033, 0.8730000257492065, 0.871999979019165, 0.8759999871253967, 0.874666690826416, 0.871999979019165, 0.8806666731834412, 0.8776666522026062, 0.8706666827201843, 0.8820000290870667, 0.878333330154419, 0.878000020980835, 0.8806666731834412, 0.8793333172798157, 0.878333330154419]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8548571467399597, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.220919132232666, 1.859580397605896, 1.3807157278060913, 1.0959810018539429, 0.9394927024841309, 0.8475870490074158, 0.7733644247055054, 0.7310086488723755, 0.689822793006897, 0.6684998273849487, 0.6367021799087524, 0.6142027974128723, 0.5939225554466248, 0.5826956033706665, 0.5640352964401245, 0.5503150224685669, 0.531928300857544, 0.5195001363754272, 0.5163775682449341, 0.49307218194007874, 0.4911763668060303, 0.48814520239830017, 0.46646514534950256, 0.4616512656211853, 0.4497489333152771, 0.44999924302101135, 0.44421958923339844, 0.4404189884662628, 0.428242951631546, 0.4188486635684967, 0.41659390926361084, 0.40888500213623047, 0.4023439288139343, 0.40453797578811646, 0.39405548572540283, 0.3920678198337555, 0.3720073103904724, 0.3761289715766907, 0.3739505708217621, 0.36360204219818115, 0.3634502589702606, 0.34869542717933655, 0.3488921821117401, 0.35483235120773315, 0.3389291763305664, 0.33897536993026733, 0.33261969685554504, 0.3289945721626282, 0.31969448924064636, 0.3103400766849518, 0.31051918864250183, 0.31123223900794983, 0.29970940947532654, 0.3007231056690216, 0.2906644940376282, 0.293801873922348, 0.29120421409606934, 0.2840864062309265, 0.28611817955970764, 0.27465829253196716, 0.27368342876434326, 0.2723524868488312, 0.2656649053096771, 0.2652798891067505], "accuracy": [0.27222296595573425, 0.49385812878608704, 0.5769383311271667, 0.6122044920921326, 0.6662263870239258, 0.6979262828826904, 0.7224937081336975, 0.7323999404907227, 0.7500990629196167, 0.7568352818489075, 0.7633073329925537, 0.7761194109916687, 0.785629391670227, 0.7910447716712952, 0.7952714562416077, 0.8021397590637207, 0.8112534880638123, 0.8112534880638123, 0.8140271902084351, 0.8300092220306396, 0.8255184292793274, 0.8265751004219055, 0.8341038227081299, 0.8388587832450867, 0.8421608805656433, 0.8432175517082214, 0.8437458872795105, 0.8449346423149109, 0.8516708612442017, 0.852859616279602, 0.8527275323867798, 0.8589354157447815, 0.8588033318519592, 0.8561616539955139, 0.860652506351471, 0.8656716346740723, 0.8698983192443848, 0.8648791313171387, 0.8684453964233398, 0.8671245574951172, 0.8741249442100525, 0.878351628780365, 0.8766345381736755, 0.8749174475669861, 0.8776912093162537, 0.882710337638855, 0.8831065893173218, 0.8828424215316772, 0.8897107243537903, 0.8882578015327454, 0.8850878477096558, 0.8883898854255676, 0.8914278149604797, 0.8947299122810364, 0.8963148593902588, 0.8926165699958801, 0.8951261639595032, 0.90423983335495, 0.8972394466400146, 0.9022586345672607, 0.9035794734954834, 0.9008057117462158, 0.9038436412811279, 0.9074098467826843], "val_loss": [2.0354509353637695, 1.5099501609802246, 1.0411983728408813, 0.8385170698165894, 0.7498486042022705, 0.6942057013511658, 0.6515868902206421, 0.6148669719696045, 0.5935435891151428, 0.5678318738937378, 0.5466358661651611, 0.5323266983032227, 0.5211341977119446, 0.5036894083023071, 0.4964200556278229, 0.4839390814304352, 0.47314298152923584, 0.46872907876968384, 0.4606594145298004, 0.44967788457870483, 0.4423270523548126, 0.4418962895870209, 0.42955315113067627, 0.4257490634918213, 0.41799667477607727, 0.418374627828598, 0.4151986539363861, 0.4059080481529236, 0.40391114354133606, 0.39827001094818115, 0.40241116285324097, 0.3896908462047577, 0.38702401518821716, 0.3868432343006134, 0.3821044862270355, 0.374939501285553, 0.3784155547618866, 0.370859295129776, 0.3713994026184082, 0.36469995975494385, 0.3636012375354767, 0.3621830940246582, 0.36131277680397034, 0.3554554879665375, 0.35856372117996216, 0.3573501408100128, 0.35449039936065674, 0.347857266664505, 0.34356656670570374, 0.3494798243045807, 0.3413906395435333, 0.34442687034606934, 0.34103742241859436, 0.3351869583129883, 0.33954566717147827, 0.3419855237007141, 0.33579325675964355, 0.3371874690055847, 0.33384180068969727, 0.3358006477355957, 0.33128342032432556, 0.3300541937351227, 0.337991327047348, 0.3262573778629303], "val_accuracy": [0.5366666913032532, 0.6576666831970215, 0.6729999780654907, 0.7086666822433472, 0.7256666421890259, 0.7509999871253967, 0.7606666684150696, 0.7716666460037231, 0.777999997138977, 0.7926666736602783, 0.8033333420753479, 0.8083333373069763, 0.8136666417121887, 0.8276666402816772, 0.8213333487510681, 0.8289999961853027, 0.8349999785423279, 0.8376666903495789, 0.8396666646003723, 0.8446666598320007, 0.8443333506584167, 0.8426666855812073, 0.8486666679382324, 0.856333315372467, 0.8536666631698608, 0.8496666550636292, 0.8586666584014893, 0.8613333106040955, 0.8536666631698608, 0.8610000014305115, 0.8576666712760925, 0.8650000095367432, 0.8659999966621399, 0.8633333444595337, 0.8633333444595337, 0.871666669845581, 0.8656666874885559, 0.8696666955947876, 0.8663333058357239, 0.8703333139419556, 0.871999979019165, 0.871666669845581, 0.8709999918937683, 0.875333309173584, 0.875333309173584, 0.8769999742507935, 0.8759999871253967, 0.8763333559036255, 0.8776666522026062, 0.8730000257492065, 0.8786666393280029, 0.878333330154419, 0.8816666603088379, 0.8830000162124634, 0.8790000081062317, 0.878000020980835, 0.8806666731834412, 0.8793333172798157, 0.8863333463668823, 0.8813333511352539, 0.8816666603088379, 0.8809999823570251, 0.8826666474342346, 0.8826666474342346]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 5], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 6, 3, 0, 3, 5], [0, 1, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 3, 5, 1, 4, 2, 8], [0, 0, 0, 1, 0, 0, 3, 1, 1, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 5, 3, 2, 9, 5, 4, 2, 2, 1, 1, 1, 10, 5, 5, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), alpha), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3089122772216797, 2.303392171859741, 2.30259108543396, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.08691058307886124, 0.09391097724437714, 0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3050262928009033, 2.3025856018066406, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.0676666647195816, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 6, 0, 2, 2, 3, 9, 4, 3, 8, 1], [0, 1, 0, 2, 1, 1, 3, 2], [81, 39, 64], [0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 2, 8, 0, 3, 2], [0, 2, 0, 3], [67, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 6, 4, 3, 5, 9, 3, 7, 6, 3, 2, 6, 6, 0, 8, 4, 6, 1, 0, 7, 5, 2, 3, 1, 0], [0, 0, 0, 3, 4, 0, 3, 1, 2, 1, 4, 0, 7, 6, 5, 0, 1, 0, 0, 0, 2, 0, 2, 5, 3, 4], [16, 99, 96, 99, 61, 1, 18, 49, 74, 74, 48]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 12, 8, 3, 5, 3, 2, 1, 2, 1, 1, 1, 61, 35, 26, 11], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad))), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.multiply(tf.math.sqrt(alpha), tf.math.subtract(alpha, grad)), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(grad, tf.constant(1.0, shape=shape, dtype=tf.float32))))), sigma), tf.math.sqrt(tf.math.divide_no_nan(alpha, beta))), tf.math.pow(tf.math.multiply(tf.math.square(alpha), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(tf.math.divide_no_nan(grad, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad), grad))), tf.math.multiply(tf.math.add(grad, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, tf.math.divide_no_nan(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), beta), grad), sigma)))), tf.math.negative(grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [2, 2, 3, 0, 3, 7], [0, 1, 0, 2, 0, 0], [39, 39, 67, 1], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 2, 5], [0, 3, 0, 3], [16, 16], [0, 0, 1, 1], [0, 4], [0, 5], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [6, 3, 3, 6, 2, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 91, 69]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 6, 6, 4, 1, 0, 1, 1, 4, 2, 2, 1, 17, 8, 9, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha))), beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09377889335155487, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 7, 4], [1, 3, 0, 2, 4, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 0, 1, 4, 1, 2, 0, 9], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.09200000017881393, "mapping_values": [1, 9, 5, 4, 2, 14, 8, 6, 1, 2, 1, 1, 1, 19, 11, 8, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), grad), tf.math.multiply(tf.math.square(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(beta, grad))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.31087589263916, 2.309452772140503, 2.309417247772217, 2.308776617050171, 2.3106377124786377, 2.311184883117676], "accuracy": [0.0936468094587326, 0.09496764093637466, 0.09060890227556229, 0.09589222073554993, 0.08942015469074249, 0.09140139818191528], "val_loss": [2.3088278770446777, 2.3088278770446777, 2.3088278770446777, 2.3088278770446777, 2.3088278770446777, 2.3088278770446777], "val_accuracy": [0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186]}}]