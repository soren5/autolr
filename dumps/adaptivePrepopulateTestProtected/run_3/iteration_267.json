[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8608571290969849, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.22369647026062, 1.8686573505401611, 1.4049915075302124, 1.102941870689392, 0.9452929496765137, 0.8478018641471863, 0.7801637053489685, 0.733376145362854, 0.6960272789001465, 0.6596815586090088, 0.6350091695785522, 0.6019741892814636, 0.5871081352233887, 0.564193844795227, 0.555260419845581, 0.5429131388664246, 0.5303381681442261, 0.5133699774742126, 0.5082626938819885, 0.4823611080646515, 0.48827871680259705, 0.47600317001342773, 0.46100401878356934, 0.4600864350795746, 0.4458688199520111, 0.4450644850730896, 0.4299944341182709, 0.433242529630661, 0.412588506937027, 0.4204009771347046, 0.41316646337509155, 0.3990376889705658, 0.3879549503326416, 0.3791310787200928, 0.381055623292923, 0.37991899251937866, 0.3686172068119049, 0.364290326833725, 0.3575229346752167, 0.3496522903442383, 0.34464409947395325, 0.35198473930358887, 0.3380497694015503, 0.3369550108909607, 0.32975950837135315, 0.3232307732105255, 0.3214014768600464, 0.3160151243209839, 0.3055054843425751, 0.31004688143730164, 0.30260419845581055, 0.30250608921051025, 0.301355242729187, 0.2916894257068634, 0.2909042537212372, 0.2876931130886078], "accuracy": [0.2786950170993805, 0.4892352521419525, 0.5638620853424072, 0.6218464970588684, 0.6643772125244141, 0.7013604640960693, 0.7205125093460083, 0.7403249144554138, 0.7461365461349487, 0.7638356685638428, 0.7696473598480225, 0.7812706232070923, 0.7865539789199829, 0.7975168228149414, 0.7998943328857422, 0.8053097128868103, 0.8058380484580994, 0.8127063512802124, 0.8178576231002808, 0.8315942287445068, 0.8259146809577942, 0.8334434032440186, 0.8367455005645752, 0.8356888294219971, 0.8401796221733093, 0.8411042094230652, 0.8498216867446899, 0.8475762605667114, 0.859199583530426, 0.8521991968154907, 0.8527275323867798, 0.8598600029945374, 0.860652506351471, 0.8671245574951172, 0.8658037185668945, 0.8693699836730957, 0.870030403137207, 0.871879518032074, 0.8735966086387634, 0.8808611631393433, 0.8776912093162537, 0.8729361891746521, 0.8800686597824097, 0.8816536664962769, 0.8804649114608765, 0.8829745054244995, 0.8805969953536987, 0.8862766027450562, 0.8919561505317688, 0.8889182209968567, 0.8918240666389465, 0.8903711438179016, 0.893541157245636, 0.8976356983184814, 0.8930128216743469, 0.8961827754974365], "val_loss": [2.0386910438537598, 1.524356722831726, 1.0573267936706543, 0.8550922274589539, 0.7617447972297668, 0.6988303065299988, 0.6612144112586975, 0.6169590353965759, 0.5940285921096802, 0.5697171688079834, 0.5473585724830627, 0.533951461315155, 0.5180289149284363, 0.5044559836387634, 0.5004395842552185, 0.48468920588493347, 0.4756385087966919, 0.47069546580314636, 0.45912206172943115, 0.45998239517211914, 0.45581185817718506, 0.44435423612594604, 0.4338737428188324, 0.4358159303665161, 0.43077391386032104, 0.42259305715560913, 0.42123323678970337, 0.41875576972961426, 0.4156136214733124, 0.4089460074901581, 0.40822508931159973, 0.4103904664516449, 0.4015565514564514, 0.39705437421798706, 0.3936915695667267, 0.3886461555957794, 0.38592851161956787, 0.387307733297348, 0.38649389147758484, 0.38130199909210205, 0.3869805634021759, 0.37651196122169495, 0.38633936643600464, 0.37268781661987305, 0.3738495707511902, 0.37340670824050903, 0.37683582305908203, 0.36493897438049316, 0.37184056639671326, 0.36605533957481384, 0.36433619260787964, 0.3685345947742462, 0.36987629532814026, 0.3617561161518097, 0.37106791138648987, 0.3731671869754791], "val_accuracy": [0.5376666784286499, 0.6426666378974915, 0.6786666512489319, 0.7036666870117188, 0.7310000061988831, 0.7493333220481873, 0.7609999775886536, 0.7743333578109741, 0.7826666831970215, 0.7886666655540466, 0.8029999732971191, 0.8046666383743286, 0.809333324432373, 0.8169999718666077, 0.812666654586792, 0.8209999799728394, 0.8326666951179504, 0.8330000042915344, 0.8349999785423279, 0.8343333601951599, 0.8339999914169312, 0.8460000157356262, 0.8493333458900452, 0.8453333377838135, 0.8460000157356262, 0.8539999723434448, 0.8539999723434448, 0.8533333539962769, 0.8539999723434448, 0.8566666841506958, 0.8546666502952576, 0.8546666502952576, 0.8566666841506958, 0.8646666407585144, 0.8636666536331177, 0.862666666507721, 0.8666666746139526, 0.8646666407585144, 0.8673333525657654, 0.8673333525657654, 0.8643333315849304, 0.8693333268165588, 0.8666666746139526, 0.8700000047683716, 0.8696666955947876, 0.8696666955947876, 0.8683333396911621, 0.871666669845581, 0.8666666746139526, 0.8693333268165588, 0.8743333220481873, 0.8703333139419556, 0.8686666488647461, 0.8709999918937683, 0.8673333525657654, 0.8686666488647461]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3, 4, 8], [0, 1, 0, 2, 1], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [2, 2, 2, 0, 3, 5, 6, 8], [0, 2, 3, 3, 0, 3], [16, 16], [0, 1, 0, 1], [2, 0], [0, 5], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [6, 1, 3, 6, 8, 1, 4, 1, 4, 2, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 9]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.divide_no_nan(grad, tf.math.sqrt(grad)))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3032357692718506, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}, "mapping_values": [1, 12, 7, 5, 2, 14, 8, 6, 2, 4, 2, 2, 1, 1, 0, 1, 1], "tree_depth": 16}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 6], [0, 1, 0, 2, 3], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5, 4, 7, 0, 6, 1, 5, 3, 7, 6, 7, 5, 8, 5, 8, 2, 0], [3, 2, 0, 3, 4, 0, 1, 1, 5, 3, 3, 5, 5], [16, 16], [0, 1], [0], [0], [99], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 3, 3, 3, 1, 4, 0], [16, 99, 96, 99, 61, 99]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 35, 22, 13, 2, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 33, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.pow(tf.math.add(tf.math.negative(grad), tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.square(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.divide_no_nan(alpha, tf.math.add(tf.math.square(tf.math.sqrt(alpha)), grad)), grad))), grad))), tf.math.square(tf.math.sqrt(tf.math.add(grad, tf.math.negative(grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3034138679504395, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 2, 3, 5, 7], [0, 2, 0, 3, 0, 2], [16, 16, 3], [0, 0, 1, 1], [0, 6], [0, 5], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 3, 2, 8, 7, 4, 8], [0, 0, 0, 3, 0, 2, 3, 1, 2, 0, 6, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 13, 7, 6, 3, 4, 2, 2, 1, 26, 14, 12, 6], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.add(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(beta, sigma), tf.math.sqrt(tf.math.add(alpha, beta)))))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1, 1], [2], [0, 7], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 0, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 1, 0, 2, 1, 3, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 1, 3, 1, 2, 1, 21, 11, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(alpha, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), beta)))), alpha), tf.math.add(tf.math.sqrt(sigma), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}]