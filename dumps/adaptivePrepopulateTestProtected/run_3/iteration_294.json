[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8651428818702698, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223740816116333, 1.8715803623199463, 1.3948476314544678, 1.0873364210128784, 0.9300228953361511, 0.8323686122894287, 0.7707431316375732, 0.7166731953620911, 0.6870731115341187, 0.6608055233955383, 0.6315149068832397, 0.600257158279419, 0.5863680243492126, 0.5801483988761902, 0.5697833299636841, 0.5534172058105469, 0.5397453308105469, 0.5259924530982971, 0.5054666996002197, 0.499088853597641, 0.48675692081451416, 0.4740717113018036, 0.4670681357383728, 0.4593731462955475, 0.4486953318119049, 0.4406782388687134, 0.4509005546569824, 0.4394586384296417, 0.4290754795074463, 0.41708990931510925, 0.40637585520744324, 0.402717262506485, 0.39771994948387146, 0.3958378732204437, 0.3852003514766693, 0.3801155090332031, 0.37800759077072144, 0.36576583981513977, 0.36922478675842285, 0.36310338973999023, 0.35712504386901855, 0.34991905093193054, 0.34183812141418457, 0.3404790163040161, 0.3379528820514679, 0.3328048586845398, 0.3229442834854126, 0.3207831382751465, 0.31931495666503906, 0.3158227503299713, 0.3095320463180542, 0.30767571926116943, 0.2945735454559326, 0.2966323494911194, 0.29837629199028015, 0.29356855154037476, 0.28793302178382874, 0.28004980087280273, 0.27270278334617615, 0.27452659606933594, 0.26531267166137695, 0.26189732551574707, 0.25941675901412964, 0.26719605922698975, 0.25448814034461975, 0.2495509833097458, 0.24556812644004822, 0.2442636787891388, 0.2421325147151947, 0.238653302192688, 0.2353309988975525, 0.2322559952735901, 0.23168791830539703, 0.22330257296562195], "accuracy": [0.2763175368309021, 0.48910316824913025, 0.5658433437347412, 0.6247523427009583, 0.6660943031311035, 0.7008321285247803, 0.7211728692054749, 0.7446836829185486, 0.7528728246688843, 0.7613261342048645, 0.7761194109916687, 0.7783648371696472, 0.789459764957428, 0.7891955971717834, 0.7988376617431641, 0.7985734939575195, 0.8059701323509216, 0.8101968169212341, 0.8193105459213257, 0.8230088353157043, 0.8248580098152161, 0.8267071843147278, 0.8345000743865967, 0.8323867321014404, 0.839519202709198, 0.8387266993522644, 0.8345000743865967, 0.8430854678153992, 0.8425571322441101, 0.8491612672805786, 0.8549728989601135, 0.858671247959137, 0.8568220734596252, 0.8557654023170471, 0.860652506351471, 0.8626337051391602, 0.860652506351471, 0.8732003569602966, 0.8717474341392517, 0.871879518032074, 0.8746532797813416, 0.8753136992454529, 0.8824461698532104, 0.8792761564254761, 0.8792761564254761, 0.8823140859603882, 0.8838990926742554, 0.8860124349594116, 0.8873332738876343, 0.8873332738876343, 0.8928807377815247, 0.8858803510665894, 0.8967111110687256, 0.8942015767097473, 0.891559898853302, 0.8968431949615479, 0.895918607711792, 0.900409460067749, 0.9058248400688171, 0.9019944667816162, 0.9039757251739502, 0.9063531756401062, 0.9055606722831726, 0.9010698795318604, 0.9089948534965515, 0.9104477763175964, 0.9083344340324402, 0.9108440279960632, 0.9116365313529968, 0.91559898853302, 0.9125610589981079, 0.9166556596755981, 0.9198256731033325, 0.9199577569961548], "val_loss": [2.0447027683258057, 1.5216175317764282, 1.0402612686157227, 0.8312863707542419, 0.7293803095817566, 0.6725640296936035, 0.6316526532173157, 0.5958988666534424, 0.5751726031303406, 0.5523409247398376, 0.5326719880104065, 0.5209773778915405, 0.5107612013816833, 0.49790453910827637, 0.4882138669490814, 0.4763715863227844, 0.4687267541885376, 0.46445173025131226, 0.4542059600353241, 0.44455981254577637, 0.4417223334312439, 0.4299088418483734, 0.4270596504211426, 0.4211932420730591, 0.41567495465278625, 0.41113924980163574, 0.4123230278491974, 0.4051356613636017, 0.39692050218582153, 0.39648446440696716, 0.39686572551727295, 0.3889877498149872, 0.3855406939983368, 0.3871511220932007, 0.3835265040397644, 0.38086023926734924, 0.3762522041797638, 0.37495267391204834, 0.37153559923171997, 0.3715054392814636, 0.37339070439338684, 0.36410993337631226, 0.36273640394210815, 0.36791348457336426, 0.36592963337898254, 0.36324837803840637, 0.358969509601593, 0.3594267666339874, 0.3547918200492859, 0.35303646326065063, 0.35280460119247437, 0.3521089553833008, 0.3482425808906555, 0.3475739657878876, 0.34862220287323, 0.35199472308158875, 0.34581872820854187, 0.34343433380126953, 0.3516044020652771, 0.3426119387149811, 0.34613940119743347, 0.3404810428619385, 0.3473789393901825, 0.3397845923900604, 0.3420870900154114, 0.3433436155319214, 0.3438310921192169, 0.34468111395835876, 0.3426662087440491, 0.3446913957595825, 0.34333914518356323, 0.33872339129447937, 0.34547799825668335, 0.3454081118106842], "val_accuracy": [0.5096666812896729, 0.6449999809265137, 0.6783333420753479, 0.7083333134651184, 0.7256666421890259, 0.7416666746139526, 0.7689999938011169, 0.781000018119812, 0.7766666412353516, 0.8023333549499512, 0.8053333163261414, 0.8013333082199097, 0.809333324432373, 0.8190000057220459, 0.8196666836738586, 0.8230000138282776, 0.8256666660308838, 0.8243333101272583, 0.8293333053588867, 0.8346666693687439, 0.8309999704360962, 0.8343333601951599, 0.8386666774749756, 0.8429999947547913, 0.8423333168029785, 0.8456666469573975, 0.8450000286102295, 0.8483333587646484, 0.8523333072662354, 0.8489999771118164, 0.8516666889190674, 0.8486666679382324, 0.856333315372467, 0.859000027179718, 0.8553333282470703, 0.856333315372467, 0.859333336353302, 0.8579999804496765, 0.859000027179718, 0.8603333234786987, 0.8613333106040955, 0.8636666536331177, 0.8656666874885559, 0.859333336353302, 0.8603333234786987, 0.8606666922569275, 0.8650000095367432, 0.8686666488647461, 0.8646666407585144, 0.8666666746139526, 0.8709999918937683, 0.8673333525657654, 0.8693333268165588, 0.871666669845581, 0.8713333606719971, 0.8686666488647461, 0.8726666569709778, 0.8726666569709778, 0.8679999709129333, 0.875333309173584, 0.8730000257492065, 0.871999979019165, 0.8726666569709778, 0.8740000128746033, 0.8759999871253967, 0.8756666779518127, 0.8730000257492065, 0.875333309173584, 0.8786666393280029, 0.8733333349227905, 0.875, 0.8776666522026062, 0.8776666522026062, 0.8740000128746033]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 3, 0, 3, 6, 8, 9, 0], [0, 2, 0, 3], [16, 16, 39], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 6, 4, 1, 5, 2, 8], [0, 0, 4, 3, 0, 0, 3, 4, 2, 2], [16, 99, 1, 86, 61, 66]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 13, 9, 4, 3, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(beta, tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))), sigma), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 2, 4, 3], [1, 1, 0, 2, 3], [39, 65], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5, 9], [0, 2, 0, 3], [16, 66, 33], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 8, 8, 1, 7, 6, 2, 7, 0, 9, 7], [2, 0, 2, 4, 0, 0, 3, 1, 2, 0, 0, 2, 1, 5], [16, 60, 92, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 1, 10, 7, 3, 3, 1, 0, 1, 1, 33, 19, 14, 6], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.pow(alpha, alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(beta, tf.math.subtract(tf.math.pow(grad, tf.math.sqrt(tf.math.sqrt(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.add(tf.math.divide_no_nan(sigma, alpha), tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), beta))), alpha), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 9], [0, 1, 0, 2], [39, 6], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 2, 5], [0, 2, 0, 3], [33, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 6, 1, 0, 2], [0, 0, 0, 3, 4, 0, 3, 1, 2, 1, 3, 4, 5], [72, 99, 96, 99, 61, 88]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 10, 6, 4, 2, 2, 1, 1, 1, 27, 14, 13, 4], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), beta), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, grad)), tf.math.pow(tf.math.subtract(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), alpha), tf.math.add(tf.math.divide_no_nan(beta, alpha), tf.math.subtract(tf.math.negative(sigma), tf.math.add(grad, grad))))))", "other_info": {"loss": [2.3028311729431152, 2.302504539489746, 2.3061304092407227, 2.417828321456909, 3.7879154682159424, 9.153238296508789, 20.54421615600586], "accuracy": [0.10632677376270294, 0.10394927859306335, 0.09853387624025345, 0.09694888442754745, 0.09760929644107819, 0.1002509593963623, 0.0948355570435524], "val_loss": [2.3025782108306885, 2.303300380706787, 2.320200204849243, 2.8456850051879883, 6.114161491394043, 14.982114791870117, 29.696630477905273], "val_accuracy": [0.10066666454076767, 0.10366666316986084, 0.10366666316986084, 0.1003333330154419, 0.09799999743700027, 0.09866666793823242, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1], [0, 2, 6, 0, 3, 5, 0, 0], [0, 0, 0, 2], [39, 39, 6], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [0, 2, 3, 2, 3, 5, 3, 6, 1], [0, 3, 2, 3, 4, 5, 3, 4], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 2, 3, 7, 4, 1, 2, 1, 5, 8, 8, 3, 2, 0], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 3, 0, 3, 3, 3, 6, 4, 7, 0], [31, 99, 96, 99, 61, 1, 81, 96]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 8, 4, 3, 17, 9, 8, 1, 2, 1, 1, 1, 42, 23, 19, 8], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.multiply(beta, tf.math.square(grad))), tf.math.multiply(tf.math.divide_no_nan(tf.math.subtract(grad, grad), grad), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.add(tf.math.multiply(tf.math.add(alpha, beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.subtract(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), sigma)))))))), tf.math.add(tf.math.subtract(sigma, tf.math.square(tf.math.sqrt(sigma))), tf.math.sqrt(grad))), tf.math.multiply(grad, tf.math.add(grad, tf.math.negative(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}]