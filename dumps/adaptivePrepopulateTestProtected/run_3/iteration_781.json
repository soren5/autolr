[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8822857141494751, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221585750579834, 1.8655762672424316, 1.394430160522461, 1.0773245096206665, 0.9378393888473511, 0.8425824046134949, 0.7776632308959961, 0.736241340637207, 0.6971188187599182, 0.6732122302055359, 0.644855797290802, 0.6276965141296387, 0.6100340485572815, 0.5899673104286194, 0.5746485590934753, 0.5484329462051392, 0.5425268411636353, 0.5357900857925415, 0.5214410424232483, 0.5127171874046326, 0.4895091950893402, 0.4932740032672882, 0.48551443219184875, 0.47113916277885437, 0.46571049094200134, 0.450914591550827, 0.438728004693985, 0.4414178729057312, 0.4245515465736389, 0.4182806611061096, 0.4126766324043274, 0.41352686285972595, 0.4031256139278412, 0.40064555406570435, 0.3982388377189636, 0.38566267490386963, 0.38400527834892273, 0.3741128146648407, 0.36422181129455566, 0.36170411109924316, 0.35991787910461426, 0.35666367411613464, 0.3521813750267029, 0.34583958983421326, 0.34736087918281555, 0.34181836247444153, 0.33650368452072144, 0.33141741156578064, 0.3230496346950531, 0.3225416839122772, 0.315096914768219, 0.3059031665325165, 0.3058394491672516, 0.3017319440841675, 0.29568877816200256, 0.2933836281299591, 0.28774771094322205, 0.2856961190700531, 0.2802303731441498, 0.2779994010925293, 0.274711549282074, 0.2719985842704773, 0.2586328387260437, 0.2598455548286438, 0.2622571289539337, 0.25739434361457825, 0.2502012252807617, 0.2544722855091095, 0.24556587636470795, 0.24580754339694977, 0.23948103189468384, 0.23949603736400604, 0.23484042286872864, 0.22871272265911102, 0.2256491780281067, 0.22479403018951416, 0.21744707226753235, 0.21390178799629211, 0.21272219717502594], "accuracy": [0.2785629332065582, 0.49451854825019836, 0.559899628162384, 0.6215823292732239, 0.6654338836669922, 0.6950204968452454, 0.7181349992752075, 0.7322678565979004, 0.7441553473472595, 0.7483819723129272, 0.7627789974212646, 0.7717606425285339, 0.7728173136711121, 0.78113853931427, 0.7882710099220276, 0.7993659973144531, 0.7976489067077637, 0.8074230551719666, 0.8128384351730347, 0.8198388814926147, 0.8212917447090149, 0.819970965385437, 0.8272355198860168, 0.8350284099578857, 0.8305375576019287, 0.8387266993522644, 0.846387505531311, 0.8433496356010437, 0.8504821062088013, 0.8524633646011353, 0.8535200357437134, 0.854708731174469, 0.856689989566803, 0.8551049828529358, 0.8593316674232483, 0.8615770936012268, 0.8628978729248047, 0.8702945709228516, 0.8691058158874512, 0.871879518032074, 0.8722757697105408, 0.8691058158874512, 0.8733324408531189, 0.8800686597824097, 0.8795403242111206, 0.8755778670310974, 0.8768987059593201, 0.8829745054244995, 0.8824461698532104, 0.8823140859603882, 0.887201189994812, 0.8897107243537903, 0.8889182209968567, 0.8927486538887024, 0.8902390599250793, 0.8953903317451477, 0.8980319499969482, 0.8976356983184814, 0.900409460067749, 0.89552241563797, 0.9025228023529053, 0.8989565372467041, 0.9056927561759949, 0.9085986018180847, 0.9030511379241943, 0.9066173434257507, 0.9101836085319519, 0.9083344340324402, 0.909259021282196, 0.9099194407463074, 0.9126931428909302, 0.9140139818191528, 0.9119006991386414, 0.9171839952468872, 0.9169198274612427, 0.9185048341751099, 0.9218068718910217, 0.9185048341751099, 0.9196935892105103], "val_loss": [2.033445358276367, 1.5042319297790527, 1.0271512269973755, 0.8147247433662415, 0.7278039455413818, 0.68117356300354, 0.6306353211402893, 0.5966841578483582, 0.5751398801803589, 0.5460951328277588, 0.5314993858337402, 0.509799063205719, 0.4957965612411499, 0.4792602062225342, 0.46671679615974426, 0.45267683267593384, 0.4441072940826416, 0.4356139600276947, 0.42943108081817627, 0.4255247414112091, 0.41811680793762207, 0.4163394272327423, 0.39929893612861633, 0.3969916105270386, 0.39089226722717285, 0.387652188539505, 0.3844633102416992, 0.3824205696582794, 0.3749690353870392, 0.3701930642127991, 0.36967378854751587, 0.36689504981040955, 0.3585263788700104, 0.3587398827075958, 0.36267170310020447, 0.3561091423034668, 0.35379692912101746, 0.3499273955821991, 0.34701839089393616, 0.3467637896537781, 0.3424672484397888, 0.33951225876808167, 0.3386255204677582, 0.34044384956359863, 0.33945050835609436, 0.33684298396110535, 0.3322163224220276, 0.33181649446487427, 0.32827115058898926, 0.3312568664550781, 0.3297465741634369, 0.3256674110889435, 0.3234780728816986, 0.32119208574295044, 0.3232716917991638, 0.3209094703197479, 0.31944912672042847, 0.3157532513141632, 0.3144265413284302, 0.31676045060157776, 0.31425556540489197, 0.3131799101829529, 0.3147056996822357, 0.3154993951320648, 0.31771615147590637, 0.31545644998550415, 0.3127000629901886, 0.31382524967193604, 0.31026333570480347, 0.3147730529308319, 0.30829918384552, 0.3107443153858185, 0.31316936016082764, 0.30297672748565674, 0.30325081944465637, 0.30436232686042786, 0.3072424829006195, 0.30681705474853516, 0.3061434030532837], "val_accuracy": [0.5526666641235352, 0.6666666865348816, 0.687333345413208, 0.7083333134651184, 0.731333315372467, 0.7446666955947876, 0.7606666684150696, 0.762666642665863, 0.7873333096504211, 0.7889999747276306, 0.7973333597183228, 0.8056666851043701, 0.8193333148956299, 0.8259999752044678, 0.8289999961853027, 0.8410000205039978, 0.8453333377838135, 0.8450000286102295, 0.8489999771118164, 0.847000002861023, 0.8516666889190674, 0.856333315372467, 0.859333336353302, 0.856333315372467, 0.8633333444595337, 0.8640000224113464, 0.8656666874885559, 0.8646666407585144, 0.8679999709129333, 0.8696666955947876, 0.8640000224113464, 0.8686666488647461, 0.8713333606719971, 0.8709999918937683, 0.8703333139419556, 0.8723333477973938, 0.871999979019165, 0.874666690826416, 0.8723333477973938, 0.8759999871253967, 0.8726666569709778, 0.875333309173584, 0.8790000081062317, 0.8756666779518127, 0.8726666569709778, 0.8769999742507935, 0.8796666860580444, 0.8796666860580444, 0.8806666731834412, 0.8793333172798157, 0.8813333511352539, 0.8840000033378601, 0.8840000033378601, 0.8843333125114441, 0.8809999823570251, 0.8856666684150696, 0.8866666555404663, 0.8833333253860474, 0.8866666555404663, 0.8843333125114441, 0.8856666684150696, 0.8880000114440918, 0.887333333492279, 0.8883333206176758, 0.8866666555404663, 0.8896666765213013, 0.8863333463668823, 0.8853333592414856, 0.890999972820282, 0.8870000243186951, 0.8883333206176758, 0.8883333206176758, 0.8916666507720947, 0.8939999938011169, 0.8896666765213013, 0.8916666507720947, 0.890999972820282, 0.8926666378974915, 0.8913333415985107]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8714285492897034, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.219789743423462, 1.8651167154312134, 1.3954893350601196, 1.0979995727539062, 0.9345799088478088, 0.8469213843345642, 0.7865421175956726, 0.7395768761634827, 0.6995630860328674, 0.6598846912384033, 0.6366992592811584, 0.6081569194793701, 0.5974937677383423, 0.5799425840377808, 0.5663889646530151, 0.5514901280403137, 0.5349607467651367, 0.5219402313232422, 0.5130165815353394, 0.5025175213813782, 0.49177584052085876, 0.4772081971168518, 0.4677961468696594, 0.4608287513256073, 0.4552743136882782, 0.4465634822845459, 0.4373684525489807, 0.4296260178089142, 0.4227844178676605, 0.4150867462158203, 0.410822331905365, 0.4056965112686157, 0.39428403973579407, 0.38359954953193665, 0.3742007613182068, 0.37700507044792175, 0.3713212013244629, 0.36953088641166687, 0.3568129539489746, 0.3532831072807312, 0.35196956992149353, 0.34436148405075073, 0.34378358721733093, 0.33280354738235474, 0.3350619971752167, 0.3241827189922333, 0.32561707496643066, 0.3214312493801117, 0.31241080164909363, 0.3056011199951172, 0.30660632252693176, 0.2956753969192505, 0.2911270260810852, 0.28946471214294434, 0.2824268341064453, 0.28710711002349854, 0.28113365173339844, 0.28041234612464905, 0.2741272449493408, 0.2671636939048767, 0.2643686830997467, 0.26114118099212646, 0.25766298174858093, 0.25546619296073914, 0.2470768392086029, 0.24614866077899933, 0.24610403180122375, 0.23818066716194153, 0.23660653829574585, 0.23435872793197632, 0.2301062047481537, 0.2243782877922058, 0.22389374673366547, 0.21866454184055328, 0.214174285531044, 0.21396295726299286, 0.20413967967033386, 0.2035388946533203, 0.2050493359565735, 0.19407644867897034, 0.20064760744571686], "accuracy": [0.28305375576019287, 0.4760269522666931, 0.5641262531280518, 0.6174877882003784, 0.6692643165588379, 0.6976621150970459, 0.7214370369911194, 0.7313432693481445, 0.7388719916343689, 0.7578919529914856, 0.7672698497772217, 0.7783648371696472, 0.7792893648147583, 0.7895918488502502, 0.7915731072425842, 0.8013472557067871, 0.8035926818847656, 0.8120459914207458, 0.8107251524925232, 0.8175934553146362, 0.822348415851593, 0.8296129703521729, 0.8273676037788391, 0.8317263126373291, 0.8308017253875732, 0.839519202709198, 0.8425571322441101, 0.8465195894241333, 0.8482366800308228, 0.8487650156021118, 0.8510104417800903, 0.8496896028518677, 0.8558974862098694, 0.8623695969581604, 0.8647470474243164, 0.8628978729248047, 0.8651432991027832, 0.868049144744873, 0.8691058158874512, 0.8706908226013184, 0.8729361891746521, 0.8772949576377869, 0.8754457831382751, 0.8792761564254761, 0.8802007436752319, 0.880729079246521, 0.8753136992454529, 0.8838990926742554, 0.8844274282455444, 0.8931449055671692, 0.8883898854255676, 0.8901069760322571, 0.8942015767097473, 0.8920882344245911, 0.8963148593902588, 0.893541157245636, 0.89552241563797, 0.8968431949615479, 0.89988112449646, 0.9009377956390381, 0.9009377956390381, 0.9043719172477722, 0.9054285883903503, 0.9096552729606628, 0.9095231890678406, 0.9108440279960632, 0.9100515246391296, 0.910711944103241, 0.913089394569397, 0.9152027368545532, 0.9146744012832642, 0.9185048341751099, 0.9182406663894653, 0.9185048341751099, 0.9183727502822876, 0.921938955783844, 0.9282789826393127, 0.9257693886756897, 0.9257693886756897, 0.9322414398193359, 0.9235239624977112], "val_loss": [2.0374417304992676, 1.5137360095977783, 1.050778865814209, 0.8437058925628662, 0.7550305724143982, 0.6984026432037354, 0.657577395439148, 0.6293312907218933, 0.5996614694595337, 0.5767315030097961, 0.5600144863128662, 0.5420778393745422, 0.5285728573799133, 0.5186980962753296, 0.5100630521774292, 0.49643468856811523, 0.48446622490882874, 0.47563686966896057, 0.46661320328712463, 0.4663403332233429, 0.4518597424030304, 0.45484602451324463, 0.44032788276672363, 0.44178640842437744, 0.4325704872608185, 0.42923349142074585, 0.42391812801361084, 0.4161325991153717, 0.4115842580795288, 0.41323453187942505, 0.40490055084228516, 0.4049243927001953, 0.3967556953430176, 0.39213821291923523, 0.3891829550266266, 0.3909892439842224, 0.3865673840045929, 0.38411447405815125, 0.38841667771339417, 0.37978580594062805, 0.37961524724960327, 0.3761930465698242, 0.37297317385673523, 0.37133756279945374, 0.36653491854667664, 0.37199079990386963, 0.368069589138031, 0.36293527483940125, 0.36415430903434753, 0.3589554727077484, 0.36133015155792236, 0.3607574999332428, 0.3563527762889862, 0.3549291491508484, 0.3541131913661957, 0.3507158160209656, 0.36483025550842285, 0.3560391962528229, 0.34962645173072815, 0.3512710630893707, 0.3505990505218506, 0.3465886116027832, 0.3446756899356842, 0.34653449058532715, 0.3453288674354553, 0.34456387162208557, 0.3443830609321594, 0.35010164976119995, 0.3415816128253937, 0.34143880009651184, 0.34621483087539673, 0.3446197509765625, 0.3452536165714264, 0.3406701982021332, 0.3441791534423828, 0.3408910036087036, 0.340153306722641, 0.34471026062965393, 0.34033718705177307, 0.3468455374240875, 0.34686654806137085], "val_accuracy": [0.515999972820282, 0.6489999890327454, 0.6660000085830688, 0.6980000138282776, 0.7250000238418579, 0.7426666617393494, 0.7519999742507935, 0.7546666860580444, 0.765999972820282, 0.777999997138977, 0.7866666913032532, 0.8006666898727417, 0.8073333501815796, 0.8133333325386047, 0.8063333630561829, 0.8220000267028809, 0.8246666789054871, 0.8253333568572998, 0.8373333215713501, 0.8303333520889282, 0.8423333168029785, 0.8399999737739563, 0.8453333377838135, 0.847000002861023, 0.8460000157356262, 0.8510000109672546, 0.8503333330154419, 0.8516666889190674, 0.8543333411216736, 0.8523333072662354, 0.8556666374206543, 0.8586666584014893, 0.8586666584014893, 0.859333336353302, 0.8619999885559082, 0.8629999756813049, 0.8643333315849304, 0.8633333444595337, 0.8613333106040955, 0.8650000095367432, 0.8663333058357239, 0.8659999966621399, 0.8669999837875366, 0.8679999709129333, 0.8690000176429749, 0.8673333525657654, 0.8709999918937683, 0.8673333525657654, 0.8666666746139526, 0.8733333349227905, 0.8703333139419556, 0.8686666488647461, 0.8740000128746033, 0.8730000257492065, 0.874666690826416, 0.8756666779518127, 0.8726666569709778, 0.8743333220481873, 0.8740000128746033, 0.8769999742507935, 0.878000020980835, 0.878333330154419, 0.8799999952316284, 0.8803333044052124, 0.8803333044052124, 0.8826666474342346, 0.8806666731834412, 0.875, 0.8830000162124634, 0.8823333382606506, 0.8806666731834412, 0.8833333253860474, 0.8816666603088379, 0.8823333382606506, 0.8840000033378601, 0.8889999985694885, 0.8856666684150696, 0.8856666684150696, 0.8836666941642761, 0.8816666603088379, 0.8849999904632568]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 63], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [9, 2, 3, 0, 3, 5], [0, 2, 0, 3], [58, 63], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 0, 1, 2, 0], [16, 5, 96, 39, 61, 16]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 1, 1, 0, 1, 2, 1, 1, 1, 16, 8, 8, 6], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha)), tf.math.multiply(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [2.3078224658966064, 2.3030660152435303, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.08691058307886124, 0.10328886657953262, 0.09998679161071777, 0.09998679161071777, 0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.10553427785634995, 0.09932637959718704], "val_loss": [2.304111957550049, 2.3025848865509033, 2.3025853633880615, 2.3025848865509033, 2.3025848865509033, 2.3025848865509033, 2.3025853633880615, 2.3025848865509033, 2.3025848865509033, 2.3025848865509033], "val_accuracy": [0.07133333384990692, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.09799999743700027, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 6, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 0], [16, 16, 44], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 4], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 1], [16, 66, 96, 84, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 3, 2, 1, 1, 1, 23, 12, 11, 6], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.math.pow(tf.math.add(tf.math.sqrt(tf.math.pow(alpha, beta)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10328886657953262, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 4, 0, 3], [1, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1], [0, 2, 3, 8, 3, 5, 0, 6, 2, 1, 6, 4, 2, 5, 0], [0, 2, 0, 3, 3, 5, 5, 4, 5, 0], [16, 16, 15], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 2, 1, 4, 1, 0, 2, 8], [4, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 99, 96, 38, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 0, 25, 15, 10, 3, 2, 1, 1, 1, 17, 8, 9, 3], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.negative(alpha), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(grad, tf.math.subtract(grad, grad)), tf.math.divide_no_nan(grad, tf.math.pow(grad, tf.math.add(tf.math.square(grad), tf.math.negative(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, grad)))), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [2, 2, 3, 0, 3], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [6, 2, 3, 0, 3, 5], [0, 2, 0, 3, 3], [16, 27], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 0], [0, 0, 0, 2, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 91, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 2, 11, 6, 5, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.square(grad))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), beta))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.negative(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}]