[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8811428546905518, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2237746715545654, 1.8723686933517456, 1.3995952606201172, 1.0951578617095947, 0.9308109879493713, 0.8378576636314392, 0.7867980003356934, 0.7403825521469116, 0.7074968218803406, 0.6667766571044922, 0.6467143297195435, 0.6252685785293579, 0.6010545492172241, 0.592832088470459, 0.5694352388381958, 0.5546401739120483, 0.5457968711853027, 0.5263527035713196, 0.5090768933296204, 0.5048046112060547, 0.4915485680103302, 0.4950409531593323, 0.48390650749206543, 0.4653860628604889, 0.45890092849731445, 0.4539474546909332, 0.45054811239242554, 0.4434168338775635, 0.4299618601799011, 0.42732325196266174, 0.42083144187927246, 0.41875892877578735, 0.4139094650745392, 0.40237316489219666, 0.3879244327545166, 0.38828617334365845, 0.3872472941875458, 0.38174712657928467, 0.37753409147262573, 0.37368708848953247, 0.3667537569999695, 0.3609304130077362, 0.3514280617237091, 0.3454590141773224, 0.34209492802619934, 0.3294583857059479, 0.32658490538597107, 0.3237888813018799, 0.32169947028160095, 0.32040613889694214, 0.31856244802474976, 0.3111935555934906, 0.3040423095226288, 0.3039085268974304, 0.29984933137893677, 0.29860955476760864, 0.28763389587402344, 0.28644928336143494, 0.2838956117630005, 0.28346431255340576, 0.28013065457344055, 0.2724190354347229, 0.27310502529144287], "accuracy": [0.27420419454574585, 0.48051777482032776, 0.5654470920562744, 0.6198652982711792, 0.6709813475608826, 0.7000396251678467, 0.7174745798110962, 0.7283053994178772, 0.7400607466697693, 0.7589486241340637, 0.7675340175628662, 0.774798572063446, 0.7807422876358032, 0.7844406366348267, 0.793422281742096, 0.7984414100646973, 0.8030643463134766, 0.8128384351730347, 0.8185180425643921, 0.8169330358505249, 0.8182538747787476, 0.8228767514228821, 0.8251221776008606, 0.8399154543876648, 0.8416325449943542, 0.8403117060661316, 0.837537944316864, 0.8465195894241333, 0.8466516733169556, 0.8490291833877563, 0.8502179384231567, 0.8535200357437134, 0.8474441766738892, 0.858671247959137, 0.8619733452796936, 0.8652753829956055, 0.8643507957458496, 0.8625016212463379, 0.8665962219238281, 0.8665962219238281, 0.8704266548156738, 0.8721436858177185, 0.8747853636741638, 0.8749174475669861, 0.8805969953536987, 0.8824461698532104, 0.8840311765670776, 0.8821820020675659, 0.8858803510665894, 0.8850878477096558, 0.8824461698532104, 0.8881257176399231, 0.8928807377815247, 0.8902390599250793, 0.8939374089241028, 0.89552241563797, 0.8973715305328369, 0.8942015767097473, 0.89988112449646, 0.8997490406036377, 0.8969752788543701, 0.9014661312103271, 0.9029190540313721], "val_loss": [2.037389039993286, 1.511842966079712, 1.0359350442886353, 0.8279245495796204, 0.7450146675109863, 0.6904571652412415, 0.6491749286651611, 0.6089303493499756, 0.584378719329834, 0.558230996131897, 0.5482743382453918, 0.526901125907898, 0.5176275968551636, 0.49789905548095703, 0.48785078525543213, 0.4802698493003845, 0.4741758704185486, 0.4558241367340088, 0.446842759847641, 0.4397415220737457, 0.43689489364624023, 0.43105411529541016, 0.42206501960754395, 0.41691854596138, 0.41364946961402893, 0.4036501348018646, 0.4026815593242645, 0.40334782004356384, 0.3973897397518158, 0.3922448456287384, 0.386177659034729, 0.3828100562095642, 0.3804466128349304, 0.3790411651134491, 0.37225663661956787, 0.3669360876083374, 0.36680835485458374, 0.3673231899738312, 0.3597688376903534, 0.35926786065101624, 0.36098331212997437, 0.35272863507270813, 0.3481261432170868, 0.3572690486907959, 0.34953010082244873, 0.34897640347480774, 0.3506835401058197, 0.34860289096832275, 0.34379568696022034, 0.3427906930446625, 0.34296849370002747, 0.3384943902492523, 0.33897867798805237, 0.33991867303848267, 0.338674932718277, 0.3346634805202484, 0.3385751247406006, 0.33232465386390686, 0.332682728767395, 0.3382399082183838, 0.3326888978481293, 0.3314237594604492, 0.3316805958747864], "val_accuracy": [0.5120000243186951, 0.6606666445732117, 0.6880000233650208, 0.7093333601951599, 0.7293333411216736, 0.7519999742507935, 0.762333333492279, 0.7699999809265137, 0.7879999876022339, 0.7946666479110718, 0.7926666736602783, 0.8096666932106018, 0.8113333582878113, 0.8176666498184204, 0.8233333230018616, 0.8213333487510681, 0.824999988079071, 0.8360000252723694, 0.8379999995231628, 0.8379999995231628, 0.8423333168029785, 0.8443333506584167, 0.8483333587646484, 0.8460000157356262, 0.8496666550636292, 0.8569999933242798, 0.8519999980926514, 0.8516666889190674, 0.8583333492279053, 0.8550000190734863, 0.856333315372467, 0.8610000014305115, 0.859000027179718, 0.8640000224113464, 0.8629999756813049, 0.8646666407585144, 0.8676666617393494, 0.8656666874885559, 0.8673333525657654, 0.8650000095367432, 0.8700000047683716, 0.8713333606719971, 0.8730000257492065, 0.8696666955947876, 0.8726666569709778, 0.8733333349227905, 0.8726666569709778, 0.8736666440963745, 0.8726666569709778, 0.8730000257492065, 0.8740000128746033, 0.8790000081062317, 0.878333330154419, 0.878333330154419, 0.8776666522026062, 0.878000020980835, 0.8793333172798157, 0.8846666812896729, 0.8759999871253967, 0.8769999742507935, 0.8823333382606506, 0.878333330154419, 0.8826666474342346]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8622857332229614, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2203757762908936, 1.8600647449493408, 1.3834692239761353, 1.0758929252624512, 0.9236725568771362, 0.8319177627563477, 0.7641680240631104, 0.71132892370224, 0.6683098077774048, 0.6407960653305054, 0.6091492176055908, 0.5954411625862122, 0.5865376591682434, 0.5584770441055298, 0.5486022233963013, 0.5394773483276367, 0.5203808546066284, 0.5032522082328796, 0.49093097448349, 0.48304858803749084, 0.4819035530090332, 0.46289220452308655, 0.4561910331249237, 0.4496549069881439, 0.43648889660835266, 0.4274848997592926, 0.4305237829685211, 0.4213387370109558, 0.40746957063674927, 0.39801275730133057, 0.40048515796661377, 0.3914210796356201, 0.38653451204299927, 0.37757033109664917, 0.37292176485061646, 0.37113097310066223, 0.36903220415115356, 0.3581075072288513, 0.34877824783325195, 0.3443708121776581, 0.3390469253063202, 0.3337429165840149, 0.3299804925918579, 0.3319408893585205, 0.3219025433063507, 0.3152148127555847, 0.3201334476470947, 0.31000038981437683, 0.3035772740840912, 0.3059529960155487, 0.29539117217063904, 0.28562989830970764, 0.2895103096961975, 0.2766704559326172, 0.28091830015182495, 0.2724377512931824, 0.27763667702674866, 0.2683291435241699, 0.2598336338996887, 0.2681540250778198, 0.26027911901474, 0.2584361732006073, 0.256967693567276, 0.25440722703933716, 0.24497090280056], "accuracy": [0.275260865688324, 0.49332982301712036, 0.5703341960906982, 0.6273940205574036, 0.6734909415245056, 0.7030775547027588, 0.7314753532409668, 0.7415136694908142, 0.7547219395637512, 0.7655527591705322, 0.7755910754203796, 0.7788931727409363, 0.7845727205276489, 0.8010830879211426, 0.8014793395996094, 0.8072909712791443, 0.809140145778656, 0.8146876096725464, 0.8267071843147278, 0.8264430165290833, 0.8231409192085266, 0.8305375576019287, 0.832650899887085, 0.8380662798881531, 0.8486329317092896, 0.8488970994949341, 0.842028796672821, 0.8481045961380005, 0.8518029451370239, 0.8558974862098694, 0.8557654023170471, 0.8585391640663147, 0.863558292388916, 0.8597279191017151, 0.8646149635314941, 0.8660678863525391, 0.8698983192443848, 0.8651432991027832, 0.8742570281028748, 0.8746532797813416, 0.8762382864952087, 0.876370370388031, 0.880729079246521, 0.8800686597824097, 0.8844274282455444, 0.8856161832809448, 0.8820499181747437, 0.8873332738876343, 0.8881257176399231, 0.8882578015327454, 0.891559898853302, 0.8953903317451477, 0.8949940800666809, 0.9027869701385498, 0.89552241563797, 0.9017302989959717, 0.8989565372467041, 0.9013340473175049, 0.9038436412811279, 0.9019944667816162, 0.9050323367118835, 0.904768168926239, 0.9046360850334167, 0.9062210917472839, 0.9126931428909302], "val_loss": [2.033906936645508, 1.5077180862426758, 1.042824387550354, 0.8400278091430664, 0.7501401901245117, 0.6974717378616333, 0.6523486971855164, 0.6176866888999939, 0.5887088775634766, 0.5601080060005188, 0.54446941614151, 0.5380798578262329, 0.5209171175956726, 0.5092394948005676, 0.485699862241745, 0.48615312576293945, 0.47109776735305786, 0.4638552665710449, 0.4510076642036438, 0.44697093963623047, 0.4386635422706604, 0.4306536316871643, 0.4294244050979614, 0.4221212863922119, 0.416819304227829, 0.41515299677848816, 0.41133272647857666, 0.4027984142303467, 0.394019216299057, 0.39255592226982117, 0.39000293612480164, 0.3936099112033844, 0.38532644510269165, 0.38417601585388184, 0.3761042058467865, 0.3792150020599365, 0.3724445104598999, 0.36808353662490845, 0.3629370927810669, 0.3626686930656433, 0.35938647389411926, 0.3614538908004761, 0.357574462890625, 0.35863804817199707, 0.3561628460884094, 0.35410258173942566, 0.35117024183273315, 0.3480624854564667, 0.3470248878002167, 0.34302350878715515, 0.34280842542648315, 0.3426586985588074, 0.33753955364227295, 0.33498790860176086, 0.33976608514785767, 0.337941974401474, 0.33455169200897217, 0.33568286895751953, 0.3401351869106293, 0.3278029263019562, 0.33272093534469604, 0.33537864685058594, 0.33027562499046326, 0.32672518491744995, 0.32639163732528687], "val_accuracy": [0.5556666851043701, 0.6596666574478149, 0.6796666383743286, 0.7073333263397217, 0.7243333458900452, 0.7353333234786987, 0.753000020980835, 0.7696666717529297, 0.7749999761581421, 0.7919999957084656, 0.7956666946411133, 0.8056666851043701, 0.8009999990463257, 0.8103333115577698, 0.824999988079071, 0.8193333148956299, 0.8306666612625122, 0.8326666951179504, 0.8360000252723694, 0.8339999914169312, 0.843666672706604, 0.8420000076293945, 0.8429999947547913, 0.843999981880188, 0.846666693687439, 0.8496666550636292, 0.8483333587646484, 0.8610000014305115, 0.8619999885559082, 0.8579999804496765, 0.8600000143051147, 0.8536666631698608, 0.862333357334137, 0.8556666374206543, 0.8640000224113464, 0.859000027179718, 0.8629999756813049, 0.8619999885559082, 0.8686666488647461, 0.8696666955947876, 0.8703333139419556, 0.8709999918937683, 0.8696666955947876, 0.871666669845581, 0.8766666650772095, 0.875, 0.8723333477973938, 0.8686666488647461, 0.874666690826416, 0.8790000081062317, 0.8806666731834412, 0.878000020980835, 0.8803333044052124, 0.8809999823570251, 0.8766666650772095, 0.8793333172798157, 0.8843333125114441, 0.8816666603088379, 0.8806666731834412, 0.8886666893959045, 0.8809999823570251, 0.8809999823570251, 0.8816666603088379, 0.8830000162124634, 0.8853333592414856]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 4], [2, 1, 0, 2], [39, 39], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [4], [75], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 5, 5, 6, 8, 1, 4, 1, 4, 2, 1], [4, 0, 0, 3, 0, 0, 1, 1, 2, 0], [16, 99, 96, 99, 61, 16]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 1, 9, 5, 4, 2, 2, 1, 1, 0, 16, 9, 7, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(beta)), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.math.square(grad)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 83], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 5, 3, 5], [0, 2, 1, 3], [92, 16], [0, 1], [0], [0], [52], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 6, 1, 4, 1, 4, 2, 8], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 3, 3, 1, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.multiply(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3037939071655273, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09747721254825592, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 5, 3, 5, 7], [0, 2, 0, 3, 5], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [6, 3, 6, 6, 8, 1, 4, 1, 4, 2, 8, 3, 2, 7, 8, 4, 4, 0, 5, 1, 0, 7], [0, 0, 0, 1, 0, 0, 0, 1, 2, 0, 2, 6, 6, 4, 4, 5, 3], [76, 99, 21, 99, 61, 57, 46]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 12, 7, 5, 2, 2, 1, 1, 1, 39, 22, 17, 7], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.square(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), alpha))), tf.math.subtract(tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.multiply(alpha, beta))))), tf.math.add(tf.math.add(tf.math.sqrt(tf.math.pow(tf.math.pow(tf.math.negative(tf.math.square(tf.math.subtract(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), beta))), grad), tf.math.negative(tf.math.add(grad, grad)))), grad), grad)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 0], [0, 1, 0, 2], [39, 10], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 58], [1, 1], [9], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1], [6, 3, 3, 6, 2, 1, 4, 1, 4, 8, 6, 9, 7, 5], [0, 0, 4, 3, 0, 0, 3, 1, 2, 0, 1], [16, 99, 86, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 5, 3, 2, 10, 6, 4, 2, 1, 0, 1, 1, 25, 14, 11, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.negative(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(grad, tf.math.pow(sigma, tf.math.sqrt(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma), tf.math.divide_no_nan(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), alpha))), beta), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.square(alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}]