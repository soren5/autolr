[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.878000020980835, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223759174346924, 1.8681567907333374, 1.3971633911132812, 1.1021500825881958, 0.9438490867614746, 0.8268281817436218, 0.7700234055519104, 0.7182450890541077, 0.6839274764060974, 0.655160665512085, 0.6316797733306885, 0.6046612858772278, 0.586663544178009, 0.5732303261756897, 0.5552444458007812, 0.5382086634635925, 0.5205084085464478, 0.5141545534133911, 0.49866363406181335, 0.4905571937561035, 0.48713892698287964, 0.4630949795246124, 0.46493759751319885, 0.4510720372200012, 0.4456666111946106, 0.4411585330963135, 0.43109801411628723, 0.4194287657737732, 0.41647717356681824, 0.4177640676498413, 0.39898860454559326, 0.3982110619544983, 0.3941095173358917, 0.3838343918323517, 0.38270825147628784, 0.38132011890411377, 0.3706604242324829, 0.3630581796169281, 0.35970449447631836, 0.3585955500602722, 0.3488880693912506, 0.3406795859336853, 0.3434852361679077, 0.34305644035339355, 0.32770219445228577, 0.3274216949939728, 0.3164256513118744, 0.31487780809402466, 0.31453031301498413, 0.3020377457141876, 0.3013147711753845, 0.29238083958625793, 0.30650538206100464, 0.2886098325252533, 0.28784143924713135, 0.28922179341316223, 0.27991431951522827, 0.27731093764305115, 0.27029022574424744, 0.2677718997001648, 0.2672445476055145], "accuracy": [0.27182671427726746, 0.4913485646247864, 0.5609562993049622, 0.6095628142356873, 0.6618676781654358, 0.6997754573822021, 0.7215691208839417, 0.7407211661338806, 0.7508915662765503, 0.7592127919197083, 0.7656848430633545, 0.7798177003860474, 0.7849689722061157, 0.789459764957428, 0.7991018295288086, 0.806630551815033, 0.81112140417099, 0.8088759779930115, 0.8210275769233704, 0.8181217908859253, 0.826310932636261, 0.8333113193511963, 0.8294808864593506, 0.8401796221733093, 0.8409721255302429, 0.8436138033866882, 0.8459912538528442, 0.8519350290298462, 0.8485008478164673, 0.8490291833877563, 0.856689989566803, 0.8573504090309143, 0.8615770936012268, 0.8644828796386719, 0.8605204224586487, 0.8614450097084045, 0.8671245574951172, 0.8726720213890076, 0.8732003569602966, 0.8689737319946289, 0.8762382864952087, 0.8798044919967651, 0.8717474341392517, 0.8825782537460327, 0.8840311765670776, 0.8845595121383667, 0.8885219693183899, 0.8865407705307007, 0.8887861371040344, 0.894069492816925, 0.8918240666389465, 0.8953903317451477, 0.8860124349594116, 0.8988244533538818, 0.8992207050323486, 0.8956544995307922, 0.9014661312103271, 0.89988112449646, 0.900409460067749, 0.9046360850334167, 0.9033153057098389], "val_loss": [2.0386126041412354, 1.5089809894561768, 1.0396978855133057, 0.8277255296707153, 0.7414798736572266, 0.6867381930351257, 0.6452507376670837, 0.6096968054771423, 0.5920496582984924, 0.5695558786392212, 0.550778865814209, 0.5315823554992676, 0.5166425704956055, 0.5040237307548523, 0.4927339255809784, 0.48035380244255066, 0.4752146899700165, 0.4640548527240753, 0.45926037430763245, 0.4498494863510132, 0.44989997148513794, 0.43486902117729187, 0.4302854835987091, 0.42699891328811646, 0.4222937822341919, 0.4179273545742035, 0.4156407117843628, 0.40615877509117126, 0.40567347407341003, 0.40483561158180237, 0.4008205533027649, 0.3957735300064087, 0.3910598158836365, 0.39842313528060913, 0.38378071784973145, 0.3824272155761719, 0.37983548641204834, 0.3832281529903412, 0.37993335723876953, 0.37290528416633606, 0.37028563022613525, 0.3697679340839386, 0.369826078414917, 0.3630952835083008, 0.3613884747028351, 0.3612003028392792, 0.3630628287792206, 0.35836127400398254, 0.35707563161849976, 0.3544061779975891, 0.35439038276672363, 0.35541149973869324, 0.34793493151664734, 0.355723112821579, 0.3566884696483612, 0.3480426073074341, 0.35176366567611694, 0.34468159079551697, 0.3469727337360382, 0.34757280349731445, 0.34379008412361145], "val_accuracy": [0.546999990940094, 0.6536666750907898, 0.6856666803359985, 0.7066666483879089, 0.7366666793823242, 0.7536666393280029, 0.7599999904632568, 0.7720000147819519, 0.7706666588783264, 0.7926666736602783, 0.7963333129882812, 0.7956666946411133, 0.8103333115577698, 0.809333324432373, 0.8220000267028809, 0.8226666450500488, 0.8243333101272583, 0.8330000042915344, 0.8349999785423279, 0.8370000123977661, 0.8333333134651184, 0.8429999947547913, 0.8463333249092102, 0.8446666598320007, 0.8476666808128357, 0.8479999899864197, 0.8450000286102295, 0.8506666421890259, 0.8496666550636292, 0.8529999852180481, 0.8556666374206543, 0.8556666374206543, 0.8586666584014893, 0.8526666760444641, 0.8576666712760925, 0.8610000014305115, 0.859000027179718, 0.8616666793823242, 0.8653333187103271, 0.8673333525657654, 0.8673333525657654, 0.8659999966621399, 0.8693333268165588, 0.8690000176429749, 0.8726666569709778, 0.8726666569709778, 0.8740000128746033, 0.8730000257492065, 0.871999979019165, 0.8759999871253967, 0.874666690826416, 0.871999979019165, 0.8806666731834412, 0.8776666522026062, 0.8706666827201843, 0.8820000290870667, 0.878333330154419, 0.878000020980835, 0.8806666731834412, 0.8793333172798157, 0.878333330154419]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8708571195602417, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2229254245758057, 1.87469482421875, 1.392987847328186, 1.101073980331421, 0.9429643154144287, 0.8465495109558105, 0.7777575850486755, 0.7277870178222656, 0.6979804039001465, 0.6659051179885864, 0.6368249654769897, 0.613236665725708, 0.5904012322425842, 0.5828145742416382, 0.5594121217727661, 0.5510122776031494, 0.5387210249900818, 0.5190309286117554, 0.5115770697593689, 0.4957564175128937, 0.4951331317424774, 0.48154711723327637, 0.4732593297958374, 0.4700033366680145, 0.4538722634315491, 0.44424617290496826, 0.43322357535362244, 0.4409277141094208, 0.4274265170097351, 0.42059165239334106, 0.4121165871620178, 0.4069676399230957, 0.4068904519081116, 0.40030667185783386, 0.3916958272457123, 0.38202303647994995, 0.377590149641037, 0.37881144881248474, 0.37013885378837585, 0.3653976321220398, 0.36154595017433167, 0.34745609760284424, 0.3521404564380646, 0.3435722589492798, 0.33679378032684326, 0.3360728919506073, 0.3280438780784607, 0.3272005617618561, 0.325928658246994, 0.32102158665657043, 0.31470030546188354], "accuracy": [0.2719587981700897, 0.47589486837387085, 0.5589750409126282, 0.6127327680587769, 0.6646413803100586, 0.6973979473114014, 0.7190595865249634, 0.7333245277404785, 0.7448157668113708, 0.7642319202423096, 0.767930269241333, 0.7790252566337585, 0.7878747582435608, 0.7886672616004944, 0.7969884872436523, 0.8033285140991211, 0.8087438941001892, 0.8076872229576111, 0.8197067975997925, 0.8222163319587708, 0.8201030492782593, 0.8261788487434387, 0.8305375576019287, 0.8347642421722412, 0.8391229510307312, 0.842028796672821, 0.8433496356010437, 0.844010055065155, 0.8451988101005554, 0.8495575189590454, 0.8558974862098694, 0.8543124794960022, 0.8562937378883362, 0.8544445633888245, 0.8610487580299377, 0.8676528930664062, 0.8651432991027832, 0.8681812286376953, 0.8704266548156738, 0.8668603897094727, 0.8749174475669861, 0.8795403242111206, 0.8784837126731873, 0.8800686597824097, 0.880729079246521, 0.8821820020675659, 0.8838990926742554, 0.8862766027450562, 0.8836349248886108, 0.8857482671737671, 0.8868049383163452], "val_loss": [2.03849196434021, 1.5183719396591187, 1.044155240058899, 0.8303204774856567, 0.7371830940246582, 0.6814848184585571, 0.6321138739585876, 0.5995448231697083, 0.5765746831893921, 0.5504043698310852, 0.5318601727485657, 0.5167809128761292, 0.49848881363868713, 0.4866856336593628, 0.4765899181365967, 0.46880948543548584, 0.4576009511947632, 0.45746999979019165, 0.44080525636672974, 0.4328044056892395, 0.4315224587917328, 0.42805805802345276, 0.42184680700302124, 0.41089382767677307, 0.4065912961959839, 0.4023264944553375, 0.3999088406562805, 0.3967796564102173, 0.3887416124343872, 0.3865343928337097, 0.385115385055542, 0.38342365622520447, 0.3850318491458893, 0.37584906816482544, 0.37094101309776306, 0.37323710322380066, 0.3640023469924927, 0.36706340312957764, 0.36107686161994934, 0.35818541049957275, 0.3555096983909607, 0.3595741391181946, 0.35801249742507935, 0.3535439372062683, 0.34690767526626587, 0.34846922755241394, 0.34974583983421326, 0.34662601351737976, 0.3393470048904419, 0.34032970666885376, 0.3402596712112427], "val_accuracy": [0.5386666655540466, 0.6549999713897705, 0.6819999814033508, 0.7076666951179504, 0.7256666421890259, 0.7483333349227905, 0.7609999775886536, 0.7696666717529297, 0.7786666750907898, 0.7950000166893005, 0.7929999828338623, 0.8063333630561829, 0.8136666417121887, 0.8240000009536743, 0.8226666450500488, 0.8199999928474426, 0.828000009059906, 0.8299999833106995, 0.8373333215713501, 0.843999981880188, 0.8493333458900452, 0.8486666679382324, 0.8503333330154419, 0.8579999804496765, 0.8566666841506958, 0.856333315372467, 0.8553333282470703, 0.8600000143051147, 0.8666666746139526, 0.8636666536331177, 0.8656666874885559, 0.8616666793823242, 0.8640000224113464, 0.8700000047683716, 0.8706666827201843, 0.8690000176429749, 0.8740000128746033, 0.8643333315849304, 0.874666690826416, 0.8736666440963745, 0.8756666779518127, 0.871666669845581, 0.875, 0.8733333349227905, 0.875, 0.8790000081062317, 0.8743333220481873, 0.8786666393280029, 0.8776666522026062, 0.8763333559036255, 0.8766666650772095]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0], [8, 2, 3, 0, 3, 9], [0, 1, 0, 2], [39, 39, 37], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 0, 7], [0, 2, 0, 3, 0], [16, 35, 39], [0, 1], [0], [0], [11], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 4, 2, 0], [16, 99, 54, 99, 61, 1]], "fitness": -0.7594285607337952, "mapping_values": [1, 9, 6, 3, 3, 13, 8, 5, 3, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.negative(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), grad), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9224649667739868, 1.197094440460205, 1.0132043361663818, 0.9133821725845337, 0.8814061284065247, 0.8507463932037354, 0.8464886546134949, 0.8256819248199463, 0.8276905417442322, 0.8090416193008423, 0.8111872673034668, 0.8004154562950134, 0.7900028228759766, 0.7908421754837036, 0.7888209819793701, 0.7772071957588196, 0.778278112411499, 0.7822807431221008, 0.7707567811012268, 0.7713650465011597, 0.7711292505264282, 0.7754807472229004, 0.7670109868049622, 0.7539342641830444, 0.7590251564979553, 0.760948896408081, 0.7559241652488708, 0.7555575966835022, 0.754819929599762, 0.7524116039276123, 0.7448099851608276, 0.7472917437553406, 0.7426859736442566, 0.7439839839935303, 0.7488934993743896, 0.7461937069892883, 0.7473735809326172, 0.743048906326294, 0.7438706755638123, 0.7348949313163757, 0.7284865379333496, 0.7439835667610168, 0.7384629249572754, 0.7379312515258789, 0.728584885597229, 0.7394338846206665], "accuracy": [0.36388853192329407, 0.5925241112709045, 0.6379606127738953, 0.6736230254173279, 0.6804913282394409, 0.6922467350959778, 0.6950204968452454, 0.7030775547027588, 0.702681303024292, 0.7071720957756042, 0.7107383608818054, 0.7084929347038269, 0.7108704447746277, 0.7136441469192505, 0.7107383608818054, 0.7210407853126526, 0.7153612375259399, 0.7153612375259399, 0.7220974564552307, 0.7194558382034302, 0.7197200059890747, 0.7148329019546509, 0.7256637215614319, 0.72672039270401, 0.7259278893470764, 0.7250033020973206, 0.7257958054542542, 0.7228899598121643, 0.7206445932388306, 0.72672039270401, 0.7326641082763672, 0.7239466309547424, 0.7298903465270996, 0.7318716049194336, 0.7298903465270996, 0.7306828498840332, 0.7246070504188538, 0.7259278893470764, 0.7292299270629883, 0.7301545143127441, 0.7359662055969238, 0.7310791015625, 0.7316074371337891, 0.7297582626342773, 0.7298903465270996, 0.7312111854553223], "val_loss": [1.2932136058807373, 0.911364734172821, 0.8134968876838684, 0.776479959487915, 0.7525968551635742, 0.7390794157981873, 0.7260339260101318, 0.7188404202461243, 0.7104997634887695, 0.7060433626174927, 0.6998163461685181, 0.6959270238876343, 0.690931499004364, 0.6893829703330994, 0.6851028800010681, 0.6825352311134338, 0.6802251935005188, 0.6786426901817322, 0.6765561699867249, 0.6741712093353271, 0.6717410683631897, 0.6704164743423462, 0.6688663959503174, 0.6672874093055725, 0.6657835245132446, 0.6647573113441467, 0.6635403037071228, 0.6619971990585327, 0.6611049175262451, 0.6602484583854675, 0.6589879393577576, 0.657945454120636, 0.6569696664810181, 0.6561897993087769, 0.65462726354599, 0.6540032029151917, 0.6535615921020508, 0.6526105999946594, 0.6521335244178772, 0.6515842080116272, 0.6505483984947205, 0.649762749671936, 0.6491879224777222, 0.6488171219825745, 0.648070752620697, 0.6475529670715332], "val_accuracy": [0.640999972820282, 0.6733333468437195, 0.7059999704360962, 0.7149999737739563, 0.7266666889190674, 0.7266666889190674, 0.7353333234786987, 0.7289999723434448, 0.7350000143051147, 0.7326666712760925, 0.7366666793823242, 0.7360000014305115, 0.7383333444595337, 0.734666645526886, 0.7390000224113464, 0.7423333525657654, 0.7423333525657654, 0.7429999709129333, 0.7450000047683716, 0.7440000176429749, 0.7450000047683716, 0.7453333139419556, 0.7443333268165588, 0.7443333268165588, 0.7456666827201843, 0.7453333139419556, 0.7463333606719971, 0.7483333349227905, 0.7446666955947876, 0.7459999918937683, 0.746999979019165, 0.7486666440963745, 0.7490000128746033, 0.7476666569709778, 0.7490000128746033, 0.7509999871253967, 0.75, 0.7506666779518127, 0.7516666650772095, 0.7506666779518127, 0.7526666522026062, 0.7509999871253967, 0.7513333559036255, 0.7513333559036255, 0.7513333559036255, 0.7519999742507935]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 2, 0, 9], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [4, 2, 3, 0, 3, 1, 3, 4, 2, 5, 7, 6, 3, 9, 4, 6, 5, 4, 3, 9], [3, 3, 0, 3, 2, 5, 5, 5, 3, 3, 1, 0, 3, 3], [16, 16, 63, 71], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 3, 4, 1, 4, 2, 8], [0, 0, 4, 3, 4, 0, 3, 4, 4, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 34, 20, 14, 4, 2, 1, 1, 1, 16, 8, 8, 3], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.negative(grad), tf.math.multiply(tf.math.subtract(grad, tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), tf.math.pow(tf.math.add(tf.math.square(beta), tf.math.add(grad, grad)), grad))), tf.math.divide_no_nan(grad, tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), tf.math.pow(tf.math.divide_no_nan(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.pow(tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), grad), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), tf.math.subtract(grad, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), sigma), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [8, 2, 3, 8, 6, 6], [0, 1, 0, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 0, 0, 0, 3, 1, 4, 0], [16, 99, 65, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 2, 2, 1, 1, 1, 10, 5, 5, 5], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3036022186279297, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 0], [0, 2, 3, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 4, 5], [0, 2, 0, 3], [16, 16], [1, 0], [0], [0], [90], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 7, 1, 8, 3, 7, 2, 9, 5, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 7, 0, 4, 6], [16, 99, 96, 99, 93, 1, 18, 27]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 10, 6, 4, 2, 1, 0, 1, 1, 34, 20, 14, 8], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), sigma))), tf.math.sqrt(tf.math.add(alpha, beta)))), tf.math.subtract(tf.math.sqrt(tf.math.multiply(tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad), tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), tf.math.square(grad))), tf.math.sqrt(grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}]