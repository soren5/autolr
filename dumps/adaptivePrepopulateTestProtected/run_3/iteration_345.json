[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8808571696281433, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223215103149414, 1.8640538454055786, 1.390925645828247, 1.0857504606246948, 0.9175904989242554, 0.8278062343597412, 0.75929194688797, 0.7150763869285583, 0.6742342710494995, 0.6527069211006165, 0.6226239800453186, 0.6030511260032654, 0.5812473893165588, 0.5698184370994568, 0.5517233610153198, 0.5318202376365662, 0.5262278914451599, 0.5063096284866333, 0.4941454231739044, 0.4912639260292053, 0.47673994302749634, 0.46776485443115234, 0.45580968260765076, 0.45419755578041077, 0.4471202790737152, 0.4368197023868561, 0.4238806366920471, 0.41453513503074646, 0.41017231345176697, 0.4062040150165558, 0.40386685729026794, 0.3953916132450104, 0.39355871081352234, 0.3836102783679962, 0.37635838985443115, 0.3735085725784302, 0.363672137260437, 0.35395750403404236, 0.35972025990486145, 0.34721699357032776, 0.3442964553833008, 0.335767537355423, 0.3300938904285431, 0.32407090067863464, 0.32112976908683777, 0.3181473910808563, 0.31370431184768677, 0.3087446987628937, 0.3084625005722046, 0.30203962326049805, 0.293395072221756, 0.2889169156551361, 0.2914500832557678, 0.28307828307151794, 0.28207361698150635, 0.2786792516708374, 0.27818819880485535, 0.26387521624565125], "accuracy": [0.27222296595573425, 0.5027077198028564, 0.5674283504486084, 0.6277902722358704, 0.6709813475608826, 0.7058512568473816, 0.7269845604896545, 0.7415136694908142, 0.7586844563484192, 0.7617223858833313, 0.783119797706604, 0.7832518815994263, 0.7926297783851624, 0.8001585006713867, 0.807158887386322, 0.8103289008140564, 0.8133667707443237, 0.8190463781356812, 0.8247259259223938, 0.8271034359931946, 0.8298771381378174, 0.8341038227081299, 0.8366134166717529, 0.839519202709198, 0.8404437899589539, 0.848368763923645, 0.8515387773513794, 0.8564258217811584, 0.8529917001724243, 0.8585391640663147, 0.8515387773513794, 0.863558292388916, 0.8615770936012268, 0.8640866279602051, 0.8652753829956055, 0.8671245574951172, 0.8720116019248962, 0.8771628737449646, 0.8705587387084961, 0.876370370388031, 0.8787478804588318, 0.8784837126731873, 0.8828424215316772, 0.8842953443527222, 0.884691596031189, 0.8840311765670776, 0.8891823887825012, 0.8894465565681458, 0.8899748921394348, 0.8932769894599915, 0.8945978283882141, 0.8980319499969482, 0.896446943283081, 0.8988244533538818, 0.9019944667816162, 0.901862382888794, 0.8985602855682373, 0.904768168926239], "val_loss": [2.039530038833618, 1.5154659748077393, 1.039007544517517, 0.8366694450378418, 0.7400773167610168, 0.6859951019287109, 0.6454513669013977, 0.6114123463630676, 0.5899704694747925, 0.5724708437919617, 0.5533395409584045, 0.5345184803009033, 0.5225448608398438, 0.5092709064483643, 0.500229001045227, 0.49316829442977905, 0.480929970741272, 0.4729439616203308, 0.4688349962234497, 0.4563703238964081, 0.45455607771873474, 0.44636544585227966, 0.44144734740257263, 0.4332112669944763, 0.42851945757865906, 0.4277913272380829, 0.4196922183036804, 0.41600528359413147, 0.4114539325237274, 0.4113328456878662, 0.4059373438358307, 0.4033544063568115, 0.40210506319999695, 0.3963744640350342, 0.39264819025993347, 0.39112263917922974, 0.384288489818573, 0.383841872215271, 0.3804401755332947, 0.3786342442035675, 0.3777892291545868, 0.37486007809638977, 0.37355443835258484, 0.37450093030929565, 0.36811116337776184, 0.3697490096092224, 0.3684578537940979, 0.370509535074234, 0.36476588249206543, 0.36312252283096313, 0.361527681350708, 0.36036449670791626, 0.3581533133983612, 0.3633516728878021, 0.35499346256256104, 0.3547135293483734, 0.35882508754730225, 0.35363712906837463], "val_accuracy": [0.5473333597183228, 0.6496666669845581, 0.6846666932106018, 0.6959999799728394, 0.7279999852180481, 0.7450000047683716, 0.7580000162124634, 0.7713333368301392, 0.7763333320617676, 0.7816666960716248, 0.7963333129882812, 0.8109999895095825, 0.8116666674613953, 0.8113333582878113, 0.8116666674613953, 0.8186666369438171, 0.8259999752044678, 0.8236666917800903, 0.828000009059906, 0.8360000252723694, 0.8323333263397217, 0.8373333215713501, 0.8373333215713501, 0.8366666436195374, 0.843666672706604, 0.843999981880188, 0.846666693687439, 0.8483333587646484, 0.8493333458900452, 0.847000002861023, 0.8476666808128357, 0.8496666550636292, 0.8510000109672546, 0.8519999980926514, 0.8553333282470703, 0.8556666374206543, 0.8583333492279053, 0.859333336353302, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8653333187103271, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.8709999918937683, 0.8690000176429749, 0.8686666488647461, 0.8653333187103271, 0.8733333349227905, 0.8679999709129333, 0.8709999918937683, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8659999966621399, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2220282554626465, 1.863250494003296, 1.389644980430603, 1.0856050252914429, 0.9320530891418457, 0.8303659558296204, 0.7594990730285645, 0.7213963866233826, 0.6815160512924194, 0.6446542143821716, 0.6209296584129333, 0.5987040996551514, 0.5787540078163147, 0.5687577724456787, 0.5460181832313538, 0.5310308933258057, 0.522448718547821, 0.5054287314414978, 0.495159387588501, 0.4833999574184418, 0.47422245144844055, 0.46603891253471375, 0.45423275232315063, 0.45386406779289246, 0.4436003565788269, 0.44260138273239136, 0.4241829812526703, 0.4145895838737488, 0.411347359418869, 0.40959295630455017, 0.3988301455974579, 0.3986227214336395, 0.3913470506668091, 0.38410425186157227, 0.3748416304588318, 0.3704014718532562, 0.3683755695819855, 0.36046987771987915, 0.35765668749809265, 0.3473373353481293, 0.33979707956314087, 0.33605822920799255, 0.3329138159751892, 0.3360661268234253, 0.3277049958705902, 0.3241400718688965, 0.3209773600101471, 0.3102101981639862, 0.30495238304138184, 0.30068686604499817, 0.2992347776889801, 0.29323694109916687, 0.2902423143386841, 0.2883259654045105, 0.2795974016189575, 0.27871644496917725, 0.2706981599330902, 0.26965808868408203, 0.2621229290962219, 0.2654251158237457], "accuracy": [0.27143046259880066, 0.48606523871421814, 0.5671641826629639, 0.6192048788070679, 0.6625280380249023, 0.7004358768463135, 0.7271166443824768, 0.737022876739502, 0.7500990629196167, 0.7607977986335754, 0.7707040309906006, 0.7841764688491821, 0.7902522683143616, 0.7926297783851624, 0.8030643463134766, 0.8063663840293884, 0.8123101592063904, 0.8166688680648804, 0.8197067975997925, 0.82683926820755, 0.8329150676727295, 0.8345000743865967, 0.8408400416374207, 0.8380662798881531, 0.8449346423149109, 0.8409721255302429, 0.8498216867446899, 0.850350022315979, 0.8529917001724243, 0.8506141901016235, 0.8594637513160706, 0.8577466607093811, 0.8618412613868713, 0.8626337051391602, 0.8640866279602051, 0.8660678863525391, 0.8713511824607849, 0.8706908226013184, 0.8710870146751404, 0.8735966086387634, 0.8798044919967651, 0.8782195448875427, 0.8836349248886108, 0.8776912093162537, 0.8836349248886108, 0.8837670087814331, 0.8870691061019897, 0.8901069760322571, 0.8938053250312805, 0.8920882344245911, 0.8927486538887024, 0.8956544995307922, 0.8956544995307922, 0.8975036144256592, 0.8976356983184814, 0.8982961177825928, 0.9043719172477722, 0.9031832218170166, 0.9052965044975281, 0.901862382888794], "val_loss": [2.039684534072876, 1.5195659399032593, 1.0504083633422852, 0.8471417427062988, 0.7594096660614014, 0.6991066336631775, 0.6596866250038147, 0.6231381893157959, 0.6047794222831726, 0.5781047940254211, 0.5597020387649536, 0.5411559343338013, 0.5276631712913513, 0.5144439935684204, 0.5091758370399475, 0.4870663285255432, 0.4868675172328949, 0.4779799282550812, 0.4654075801372528, 0.4581451416015625, 0.4470130205154419, 0.444732666015625, 0.440253347158432, 0.4346458613872528, 0.4274660646915436, 0.4268067181110382, 0.41942521929740906, 0.4142974317073822, 0.4156835675239563, 0.4132423400878906, 0.4044296145439148, 0.39972901344299316, 0.40856948494911194, 0.39264509081840515, 0.3949810266494751, 0.39146947860717773, 0.3842373490333557, 0.3881996273994446, 0.38407018780708313, 0.381361722946167, 0.37698784470558167, 0.37470003962516785, 0.38444754481315613, 0.370491087436676, 0.37231001257896423, 0.37198522686958313, 0.3672601282596588, 0.36399054527282715, 0.368040531873703, 0.36139264702796936, 0.3660864233970642, 0.3591386377811432, 0.359406441450119, 0.3542446196079254, 0.3585255444049835, 0.3545841574668884, 0.35553571581840515, 0.35690832138061523, 0.35445040464401245, 0.3570133447647095], "val_accuracy": [0.5396666526794434, 0.6543333530426025, 0.6696666479110718, 0.6959999799728394, 0.7213333249092102, 0.7419999837875366, 0.7473333477973938, 0.7649999856948853, 0.7736666798591614, 0.7799999713897705, 0.7913333177566528, 0.8003333210945129, 0.7986666560173035, 0.8113333582878113, 0.8103333115577698, 0.8199999928474426, 0.8206666707992554, 0.8203333616256714, 0.8316666483879089, 0.8370000123977661, 0.8366666436195374, 0.8386666774749756, 0.8450000286102295, 0.846666693687439, 0.8483333587646484, 0.8446666598320007, 0.8479999899864197, 0.8510000109672546, 0.8493333458900452, 0.8526666760444641, 0.8566666841506958, 0.859333336353302, 0.8510000109672546, 0.8633333444595337, 0.859000027179718, 0.859666645526886, 0.862666666507721, 0.8650000095367432, 0.8696666955947876, 0.8669999837875366, 0.8686666488647461, 0.8653333187103271, 0.8690000176429749, 0.871999979019165, 0.8703333139419556, 0.8650000095367432, 0.8730000257492065, 0.8706666827201843, 0.8713333606719971, 0.8769999742507935, 0.8743333220481873, 0.8786666393280029, 0.8740000128746033, 0.8786666393280029, 0.8796666860580444, 0.8759999871253967, 0.874666690826416, 0.8776666522026062, 0.878000020980835, 0.878000020980835]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 6, 3, 3], [0, 1, 0, 1, 0, 0], [39, 39, 26, 72], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 9, 3, 0, 6, 5], [0, 2, 0, 3], [76, 16], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [1, 5, 4, 1, 4, 8, 0], [0, 6, 1, 0, 7], [99, 46], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 1, 1, 3, 0, 4, 3, 4, 3, 7, 1, 7, 6, 0, 9, 4, 0, 3, 3, 3, 4, 3, 1, 4, 8, 9, 6, 7, 8, 7, 5, 8, 3, 6, 3, 0, 7, 6, 6, 2, 6, 2, 1, 5, 7, 3], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0, 5, 5, 2, 6, 3, 1, 0, 2, 0, 5, 4, 0, 1, 5, 3, 2, 7, 3, 1, 5, 2, 3, 2, 2, 1, 6, 7, 7, 5, 5, 3, 0], [82, 99, 96, 99, 61, 1, 85, 0, 16, 5, 75]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 6, 6, 4, 2, 2, 0, 1, 12, 7, 5, 2, 97, 55, 42, 11], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(tf.math.pow(grad, tf.math.subtract(tf.math.pow(tf.math.sqrt(alpha), tf.math.negative(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.subtract(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.multiply(grad, tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.pow(tf.math.multiply(tf.math.add(tf.math.subtract(grad, tf.math.add(beta, grad)), tf.math.divide_no_nan(sigma, tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), alpha), tf.math.pow(tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), beta)), tf.constant(0.0, shape=shape, dtype=tf.float32)), grad))), tf.math.multiply(tf.math.multiply(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.pow(alpha, tf.math.multiply(tf.math.subtract(tf.math.pow(tf.math.sqrt(grad), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), sigma), tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(beta), grad), tf.math.add(sigma, tf.math.square(tf.math.sqrt(tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.math.add(tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(sigma, beta)), beta)), tf.math.add(tf.math.subtract(alpha, tf.math.square(grad)), grad))), grad), grad)))))))), tf.math.add(tf.math.multiply(grad, sigma), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [5, 2, 8, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [25, 88], [0, 1, 1], [2], [0, 3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 2, 1, 0, 1, 4, 2, 8, 5], [0, 0, 0, 3, 0, 3, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 9, 5, 4, 2, 3, 1, 2, 1, 22, 12, 10, 5], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.math.sqrt(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)), sigma)))), sigma), tf.math.sqrt(tf.math.square(alpha)))), beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [2, 2, 3, 0, 3, 6, 4, 4], [0, 2, 0, 2, 1, 2, 2, 3], [39, 39], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [9], [0], [16], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 1, 3, 6, 8, 1, 4, 1, 2, 4, 8], [0, 0, 2, 3, 0, 0, 3, 4, 2, 0], [40, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 8, 8, 2, 1, 0, 1, 1, 1, 1, 0, 1, 21, 11, 10, 5], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.pow(alpha, grad)), tf.math.pow(grad, grad)), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(beta, sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), grad), tf.math.pow(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 2, 0, 2], [37, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 6, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 4, 3, 0, 0, 3, 1, 4, 0], [16, 99, 77, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 3, 3, 2, 2, 1, 1, 1, 14, 7, 7, 4], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(grad))), tf.math.subtract(sigma, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}]